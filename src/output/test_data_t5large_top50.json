[
  {
    "source_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_line": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `constrained` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 3041,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/format/afp.py",
    "target_filename": "bemani/format/afp.py",
    "source_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da^",
    "target_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "predictions": [
      "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: true"
    ],
    "correct": false,
    "top_five": {
      "0": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: true",
      "1": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:true,",
      "2": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: false } )",
      "3": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: true,",
      "4": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, but only for api purposes;",
      "5": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: no,",
      "6": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: 'yes'",
      "7": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constraint == 0 else 'check stack') } )",
      "8": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: true,",
      "9": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, opcode == AP2Action.ADD_NUM_REGISTER,",
      "10": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, yes, no",
      "11": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: yes,",
      "12": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constraint == 0 else'register')",
      "13": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: yes, opcode == AP2Action.ADD_NUM_REGISTER: true } : true",
      "14": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } )",
      "15": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: yes, opcode == 'yes'",
      "16": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constraint == 0 else 'check stack') } \")",
      "17": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER_NO,",
      "18": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif ('yes')",
      "19": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: true } )",
      "20": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: \"yes\" }",
      "21": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: true",
      "22": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: function (registry, user) {",
      "23": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: false } ;",
      "24": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif (op",
      "25": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained === 0 else : 'yes'",
      "26": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:true",
      "27": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: false }",
      "28": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: vprint(f\" { prefix } { lineno } : { action_name } Constraint == 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } )",
      "29": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained === 0 else 'check stack') } )",
      "30": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, but it's not an action so it can only be registered once. (elif opcode == AP2Action.ADD_NUM_REGISTER)",
      "31": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Me: { 'yes' if constraint > 0 else ('no' if constrained === 0 else 'check stack') } )",
      "32": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Error: 'Error' } )",
      "33": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained === 0 else ) } )",
      "34": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained === 0 else if constrained == 'yes'",
      "35": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Me: { 'yes' if constraint > 0 else ('no' if constrained === 'check stack') } )",
      "36": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") )",
      "37": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: yes, opcode =='register'",
      "38": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: vprint(f\" { prefix } { lineno } : { action_name } Constraint == 0 else 'check stack') } )",
      "39": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constraint == 'yes' if constraint > 0 else ('no' if constrained === 'yes')",
      "40": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Me: { 'yes' if constraint > 0 else ('no' if constrained === 0 else if constrained == 'yes'",
      "41": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: \"register_user\"",
      "42": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER,",
      "43": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: function (res, cb) {",
      "44": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Me: { 'yes' if constraint > 0 else ('no' if constrained === 0 else ) } )",
      "45": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, elif opcode == AP2Action.ADD_NUM_REGISTER: yes, opcode == AP2Action.ADD_NUM_REGISTER: true } : elif constraint",
      "46": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: function (req, res, options) {",
      "47": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Me: { 'yes' if constraint > 0 else ('no' if constrained === 0 else : 'yes'",
      "48": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, no, registered = true;",
      "49": "{ action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER: yes, vprint(f\" { prefix } { lineno } : { action_name } Constrain Error: 'err' } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_line": "    results = mean_squared_error(y_test, model.predict(X_test))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `y_test` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 42,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "target_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2^",
    "target_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "predictions": [
      "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test))"
    ],
    "correct": false,
    "top_five": {
      "0": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test))",
      "1": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(y_test, model.predict(Y_test))",
      "2": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(y_test, model.predict(X_test))",
      "3": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue Results = mean_squared_error(y_test, model.predict(X_test))",
      "4": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (y_test, model.predict(Y_test))",
      "5": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results + mean_squared_error(y_test, model.predict(Y_test))",
      "6": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results + mean_squared_error(y_test, model.predict(X_test))",
      "7": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error(y_test, model.predict(Y_test))",
      "8": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue Results = mean_squared_error(y_test, model.predict(Y_test))",
      "9": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.resolution * mean_squared_error (y_test, model.predict(Y_test))",
      "10": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (y_test, model.predict(X_test)).replace(/ \\ s*$/, '')",
      "11": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error (y_test, model.predict(X_test))",
      "12": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (model.predict(Y_test))",
      "13": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ \\ s*$/, ''))",
      "14": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test results.subtract(y_test, model.predict(Y_test))",
      "15": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (y_test, model.predict(X_test)).replace(/ ^ s*$/, '')",
      "16": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (y_test, model.predict(Y_test)).replace(/ \\ s*$/, '')",
      "17": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.resolution * mean_squared_error(y_test, model.predict(Y_test))",
      "18": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).reduce((y_test))",
      "19": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (y_test, model.predict(X_test))",
      "20": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error (y_test, model.predict(Y_test))",
      "21": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error (y_test, model.predict(Y_test)).replace(/ ^ s*$/, '')",
      "22": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test))",
      "23": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ \\ s*$/)/g, '')",
      "24": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ ^ s*$/, ''))",
      "25": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results += model.predict(y_test)",
      "26": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(X_test).replace(/ \\ s*$/, ''))",
      "27": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ \\ s*$/)/gm, '')",
      "28": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error(y_test, model.predict(Y_test)).replace(/ \\ s*$/, '')",
      "29": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).reduce(y_test))",
      "30": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue result.slice(0, model.predict(Y_test)).replace(/ \\ s+/g, '')",
      "31": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(model.predict(Y_test))",
      "32": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(y_test, model.predict(Z_test))",
      "33": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue Results = mean_squared_error(y_test, model.predict(X_test)) if (!results.exec(results))",
      "34": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(y_test, model.predict(PHQ, x_test))",
      "35": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(X_test).reduce(y_test))",
      "36": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.results",
      "37": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue result.slice(0, model.predict(Y_test)).replace(/ ^ s+/g, '')",
      "38": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(y_test, model.predict(X_test)) if (!results.exec(results))",
      "39": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)).toFixed(2) results = mean_squared_error(y_test, model.predict(X_test))",
      "40": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error(y_test, model.predict(Y_test)).replace(/ ^ s*$/, '')",
      "41": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = mean_squared_error(y_test, model.predict(X_test)).replace(/ \\ s*$/, '')",
      "42": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ \\ s*$/, '$1')",
      "43": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test)).reduce((y_test) => results.shift())",
      "44": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) continue results = y_test.resolution * mean_squared_error(y_test, model.predict(X_test)).replace(/ \\ s*$/, '')",
      "45": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(X_test).replace(/ ^ s*$/, ''))",
      "46": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ ^ s*$/)/g, '')",
      "47": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ \\ s*$/, '$1'))",
      "48": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(Y_test).replace(/ ^ s*$/)/gm, '')",
      "49": "# Run some test predictions results = mean_squared_error(y_test, model.predict(X_test)) if (!model.predict(y_test)) results = y_test.reduce((model.predict(Y_test, 0) => model.predict(X_test).replace(/ \\ s*$/, '$1')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')\n\n",
    "target_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_line": "    server_type = _('Object')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `_` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/swift",
    "source_filename": "swift/proxy/controllers/obj.py",
    "target_filename": "swift/proxy/controllers/obj.py",
    "source_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21^",
    "target_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "predictions": [
      "\"\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "1": "\"\"\"WSGI controller for object requests.\"\"\" server_type = _('object')",
      "2": "\"\"\"WSGI controller for object requests.\"\"\" server_type = default_type",
      "3": "var _type = \"\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "4": "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'object'",
      "5": "if (_.isObject(server)) { server_type = _('Object')",
      "6": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller._('Object')",
      "7": "\"\"\"WSGI controller for object requests.\"\"\" server_type = env._('Object')",
      "8": "var _ = require('lodash');",
      "9": "\"\"\"WSGI controller for object requests.\"\"\" server_type = normalized_object",
      "10": "WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "11": "var _request_type = \"\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "12": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.admin_type",
      "13": "if (_.isObject(window)) { server_type = _('Object')",
      "14": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller_('Object')",
      "15": "var __type = \"\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "16": "\"\"\"WSGI controller for object requests.\"\"\" server_type = normalized_object (_('Object'))",
      "17": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.controller()",
      "18": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.interface._('Object')",
      "19": "if (typeof server_type === 'object') { server_type = _('Object')",
      "20": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.service",
      "21": "\"\"\"WSGI controller for object requests.\"\"\" server_type = default._('Object')",
      "22": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller for object requests.\"\"",
      "23": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI controller for object requests.\"\"",
      "24": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI controller for object requests.\"\"",
      "25": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.observer_type",
      "26": "\"\"\"WSGI controller for object requests.\"\"\" server_type = default (_('Object'))",
      "27": "\"\"\"WSGI controller for object requests.\"\"\" server_type = default setting._('Object')",
      "28": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller_1.WSGI_controller.Object\"",
      "29": "\"\"\"WSGI controller for object requests.\"\"\" server_type = NS('Object')",
      "30": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller.forObject('object')",
      "31": "\u201c\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "32": "if (typeof server_type == 'object') { server_type = _('Object')",
      "33": "\"\"\"WSGI controller for object requests.\"\"\" server_type = normalized('Object')",
      "34": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.controller;",
      "35": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.controller.forObjectRequests.\"",
      "36": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.request_type",
      "37": "if (_.isObject(window.session)) { server_type = _('Object')",
      "38": "\"\"\"WSGI controller for object requests.\"\"\" server_type = normalized('object')",
      "39": "\"\"\"WSGI controller for object requests.\"\"\" server_type = otherSchema._('Object')",
      "40": "\"\"\"WSGI controller for object requests.\"\"\" server_type = env._('object')",
      "41": "\"\"\"WSGI controller for object requests.\"\"\"",
      "42": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller.forObject('Object')",
      "43": "if (window.SyntaxHighlighter) { server_type = _('Object')",
      "44": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI.controller.forObject(requests[0])",
      "45": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI_controller for object requests.\"\"",
      "46": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Default('Object')",
      "47": "\"\"\"WSGI controller for object requests.\"\"\" server_type = WSGI controller for object requests.\"\"\"",
      "48": "\"\"\"WSGI controller for object requests.\"\"\" server_type = default class=\"object\"",
      "49": "if (_.isObject(protocol)) { server_type = _('Object')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "target_code": "\n    @pyqtSlot(bool)  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "warning_line": "    @pyqtSignature('bool')  # prevents actions being handled twice",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "target_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "@pyqtSlot() @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):"
    ],
    "correct": false,
    "top_five": {
      "0": "@pyqtSlot() @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "1": "@pyqtSlot() # prevents actions being handled twice def help_toggled(self, flag):",
      "2": "@pyqtSlot() # pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "3": "@pyqtSlot() def help_toggled(self, flag):",
      "4": "@pyqtSlot() # @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "5": "@pyqtSlot() # this.pyqtSignature = 'bool' # prevents actions being handled twice def help_toggled(self, flag):",
      "6": "@pyqtSlot() #prevents actions being handled twice def help_toggled(self, flag):",
      "7": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; i++) { @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "8": "@pyqtSlot() # if (!self.validator.get('bool')) { @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "9": "@pyqtSlot() # for (var i = 0; i  sigSignature.length; i++) { @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "10": "@pyqtSlot() # pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "11": "@pyqtSlot() # identifier = 'bool' def help_toggled(self, flag):",
      "12": "@pyqtSlot() # usesEncryptedSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "13": "@pyqtSlot() # helps prevent actions being handled twice def help_toggled(self, flag):",
      "14": "@pyqtSlot() # avoids actions being handled twice def help_toggled(self, flag):",
      "15": "@pyqtSlot() # pyqtSignature = 'bool' # prevents actions being handled twice def help_toggled(self, flag):",
      "16": "@pyqtSlot() # identifier = 'boolean' def help_toggled(self, flag):",
      "17": "@pyqtSlot() # solvers.problems.pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "18": "@pyqtSlot() # philipPyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "19": "@pyqtSlot() # this.pyqtSignature = 'bool' def help_toggled(self, flag):",
      "20": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; i++) @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "21": "@pyqtSlot() #usePyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "22": "@pyqtSlot() # savePyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "23": "@pyqtSlot() #useBoolean(self, @pyqtSignature) # prevents actions being handled twice def help_toggled(self, flag):",
      "24": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; i++) } @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "25": "@pyqtSlot() # encryptedSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "26": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; i++) # prevents actions being handled twice def help_toggled(self, flag):",
      "27": "@pyqtSlot() # ensure_typeof_pyqtSignature === 'boolean' def help_toggled(self, flag):",
      "28": "@pyqtSlot() @pyqtSignature('bool') # prevents actions from being handled twice def help_toggled(self, flag):",
      "29": "@pyqtSlot() # usesEncryptedSignature # prevents actions being handled twice def help_toggled(self, flag):",
      "30": "@pyqtSlot() # ensure_typeof_signature === 'boolean' def help_toggled(self, flag):",
      "31": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; i++) { def help_toggled(self, flag):",
      "32": "@pyqtSlot() # removesSignature # prevents actions being handled twice def help_toggled(self, flag):",
      "33": "@pyqtSlot() # for (var i = 0; i  sigSignature.length; i++) } @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "34": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; i++) \\ @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "35": "@pyqtSlot() # for (var i = 0; i  sigSignature.length; i++) @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "36": "@pyqtSlot() # solver_problem('bool', 'pyqtSignature') def help_toggled(self, flag):",
      "37": "@pyqtSlot() # for (var i = 0; i  pyqtSignature.length; ++i) { @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "38": "@pyqtSlot() # prevents actions being handled twice def help_toggled(self, flag):",
      "39": "@pyqtSlot() # def help_toggled(self, flag):",
      "40": "@pyqtSlot() #nature = 'bool' # prevents actions being handled twice def help_toggled(self, flag):",
      "41": "@pyqtSlot() # for (var i = 0; i  sigSignature.length; i++) \\ @pyqtSignature('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "42": "@pyqtSlot() # solver_problem('bool', 'pyqtSignature') # prevents actions being handled twice def help_toggled(self, flag):",
      "43": "@pyqtSlot() # ensure_typeof@pyqtSignature # prevents actions being handled twice def help_toggled(self, flag):",
      "44": "@pyqtSlot() # ensure_typeof_signature === 'bool' def help_toggled(self, flag):",
      "45": "@pyqtSlot() # solver_problem('bool','relinc') def help_toggled(self, flag):",
      "46": "@pyqtSlot() # for (var i = 0; i  sigSignature.length; i++) # prevents actions being handled twice def help_toggled(self, flag):",
      "47": "@pyqtSlot() # prevLocation = '/' def help_toggled(self, flag):",
      "48": "@pyqtSlot() # #prevents actions being handled twice def help_toggled(self, flag):",
      "49": "@pyqtSlot() # solvers.problems.pyqtSignature('bool') def help_toggled(self, flag):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": admin, \"thread_fbid\": self.id}\n\n",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_line": "        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `admin` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fbchat-dev/fbchat",
    "source_filename": "fbchat/_group.py",
    "target_filename": "fbchat/_group.py",
    "source_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372^",
    "target_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "predictions": [
      "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) }"
    ],
    "correct": false,
    "top_five": {
      "0": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) }",
      "1": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) {",
      "2": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool) }",
      "3": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool) }",
      "4": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } ;",
      "5": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) return { \"add\": admin, \"thread_fbid\": self.id }",
      "6": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) },",
      "7": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def._admin_status(self, user_ids: Iterable[str], status: bool) }",
      "8": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } var cb = { \"add\": admin, \"thread_fbid\": self.id }",
      "9": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) \\",
      "10": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _enable_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "11": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool) return { \"add\": admin, \"thread_fbid\": self.id }",
      "12": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } data = { \"add\": admin, \"thread_fbid\": self.id }",
      "13": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } if (typeof data === \"object\") {",
      "14": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) ^",
      "15": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def_admin_status(self, user_ids: Iterable[str], status: bool) }",
      "16": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _enable_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id } j = self._id.id)",
      "17": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool) } ;",
      "18": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool) return { \"add\": admin, \"thread_fbid\": self.id },",
      "19": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) { var cb = { \"add\": admin, \"thread_fbid\": self.id }",
      "20": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _enable_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id },",
      "21": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id },",
      "22": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "23": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } var _admin_ = self._admin;",
      "24": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id },",
      "25": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) Def._admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "26": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool) },",
      "27": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } var admin = self._id.admin;",
      "28": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) { data = { \"add\": admin, \"thread_fbid\": self.id }",
      "29": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool) {",
      "30": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool) return { \"add\": admin, \"thread_fbid\": self.id },",
      "31": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool) return { \"add\": admin, \"thread_fbid\": self.id }",
      "32": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } data = { \"add\": admin, \"thread_fbid\": self.id },",
      "33": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id } j = self._id.id)",
      "34": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) set_admin_status(self, user_ids: Iterable[str], status: bool) }",
      "35": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool)",
      "36": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) var def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id },",
      "37": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _def_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "38": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) { if (typeof data === \"object\") {",
      "39": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool) {",
      "40": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } var _admin_ = self._admin_status || { } ;",
      "41": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) const _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id },",
      "42": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _enable_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id } j = self._id.id);",
      "43": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) } var r = { \"add\": admin, \"thread_fbid\": self.id }",
      "44": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _instance.def_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "45": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) { data = { \"add\": admin, \"thread_fbid\": self.id },",
      "46": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) return { \"add\": admin, \"thread_fbid\": self.id },",
      "47": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) const _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "48": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id } j = self._payload_id.id)",
      "49": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) _instance.def_admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id } j = bool)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nkey1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)\n\n",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_line": "key1 = [rands(10) for _ in xrange(N)]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 10,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pandas-dev/pandas",
    "source_filename": "scripts/bench_join_multi.py",
    "target_filename": "scripts/bench_join_multi.py",
    "source_changeid": "6c304c78d6a0559525abe16f03465d275c516455^",
    "target_changeid": "6c304c78d6a0559525abe16f03465d275c516455",
    "predictions": [
      "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)"
    ],
    "correct": false,
    "top_five": {
      "0": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "1": "keys = [rands(10) for _ in xrange(N)] key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "2": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] key1 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "3": "key1 = [rands(10) for _ in xrange(N)] keys1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "4": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in yrange(N)] zipped = izip(key1, key2)",
      "5": "key1 = [rands(10) for _ in xrose(N)] key2 = [rands(10) for _ in xrose(N)] zipped = izip(key1, key2)",
      "6": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xroute(N)] zipped = izip(key1, key2)",
      "7": "key1 = [rands(10) for _ in xroute(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "8": "key1 = [rands(10) for _ in xrange(N)] key2 = [rnds(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "9": "key1 = [rands(10) _ in xrange(N)] key2 = [rands(10) _ in xrange(N)] zipped = izip(key1, key2)",
      "10": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zzipped = izip(key1, key2)",
      "11": "key1 = [rands(10) for _ in xrange(N)] var key2 = [rands(10) for _ in xrange(N)] var zipped = izip(key1, key2)",
      "12": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _______ in xrange(N)] zipped = izip(key1, key2)",
      "13": "key1 = [rands(10) for _ in Xrange(N)] key2 = [rands(10) for _ in Xrange(N)] zipped = izip(key1, key2)",
      "14": "key1 = [rands(10) for _ in xrange(N)] key2 = rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "15": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrose(N)] zipped = izip(key1, key2)",
      "16": "key1 = [rands(10) for _ in xrange(N)] key2) = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "17": "key1 = [rands(10) for _ in xrange(n)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "18": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)].__next(xrange(N)) zipped = izip(key1, key2)",
      "19": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] key1 = [rands(10) for _ in yrange(N)] zipped = izip(key1, key2)",
      "20": "key1 = [rands(10) for _ in xrang(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "21": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)].zip() zipped = izip(key1, key2)",
      "22": "keys = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "23": "key1 = [rands(10) for _ in xrange(N)]key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "24": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)].__next()] zipped = izip(key1, key2)",
      "25": "key1 = [rands(10) for _ in xrose(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "26": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)]._zipped = izip(key1, key2)",
      "27": "key1 = [rands(10) for _ in xrange(N)], key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "28": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in zrange(N)] zipped = izip(key1, key2)",
      "29": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _in xrange(N)] zipped = izip(key1, key2)",
      "30": "keys1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "31": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)]._zip() zipped = izip(key1, key2)",
      "32": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1)",
      "33": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ inside xrange(N)] zipped = izip(key1, key2)",
      "34": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)].__zipped = izip(key1, key2)",
      "35": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in ns(xrange(N)) zipped = izip(key1, key2)",
      "36": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ at xrange(N)] zipped = izip(key1, key2)",
      "37": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2) n1 = [rands(10) for _ in xrange(N)]",
      "38": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for_ in xrange(N)] zipped = izip(key1, key2)",
      "39": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] key1 = [rands(10) for _ in zrange(N)] zipped = izip(key1, key2)",
      "40": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)].__next(xrange(N)); zipped = izip(key1, key2)",
      "41": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in Xrange(N)] zipped = izip(key1, key2)",
      "42": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2) if (key1 === 'xrange') {",
      "43": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in oxrange(N)] zipped = izip(key1, key2)",
      "44": "key1 = [rands(10) for _in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "45": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2) if (key1 === '_') {",
      "46": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ outside xrange(N)] zipped = izip(key1, key2)",
      "47": "key1 = [rands(10) for _ in xchange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "48": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) _ in xrange(N)] zipped = izip(key1, key2)",
      "49": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2) if (xrange.hasOwnProperty(key1)) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):\n",
    "target_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_line": "    @wsme_pecan.wsexpose(NodePowerState, unicode)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/ironic",
    "source_filename": "ironic/api/controllers/v1/node.py",
    "target_filename": "ironic/api/controllers/v1/node.py",
    "source_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18^",
    "target_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "predictions": [
      "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):"
    ],
    "correct": false,
    "top_five": {
      "0": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "1": "# GET nodes/uuid>/state/power def get(self, node_id):",
      "2": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState) def get(self, node_id):",
      "3": "# GET nodes/uuid>/state/power atwsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "4": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _.keys(node_id) @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "5": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "6": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode)",
      "7": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!NodePowerState.hasOwnProperty(unicode)) def get(self, node_id):",
      "8": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def get(self, node_id):",
      "9": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!NodePowerState.hasOwnProperty(unicode)) continue def get(self, node_id):",
      "10": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = 10 def get(self, node_id):",
      "11": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) in def get(self, node_id):",
      "12": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def_get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "13": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!node_id) def get(self, node_id):",
      "14": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(node_id)",
      "15": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!NodePowerState.hasOwnProperty(uuid>)) continue def get(self, node_id):",
      "16": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!NodePowerState.hasOwnProperty(uuid>)) { def get(self, node_id):",
      "17": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (typeof node_id ==='string') def get(self, node_id):",
      "18": "# GET nodes/uuid>/state/power at wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "19": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) init(node_id) def get(self, node_id):",
      "20": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!node_id) return def get(self, node_id):",
      "21": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _.keys([NodePowerState, unicode], 10) def get(self, node_id):",
      "22": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def_get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(node_id)",
      "23": "# GET nodes/uuid>/state/power in scope @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "24": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _.keys([node_id], 10) def get(self, node_id):",
      "25": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _.keys(node_id) def get(self, node_id):",
      "26": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @node_id def get(self, node_id):",
      "27": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/node_id/defs/get_node_id/defs def get(self, node_id):",
      "28": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!NodePowerState.hasOwnProperty(uuid>)) def get(self, node_id):",
      "29": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(Node_id)",
      "30": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (typeof node_id ==='string') { def get(self, node_id):",
      "31": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _(get nodes/uuid>/state/power) def get(self, node_id):",
      "32": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(does/nodes/uuid/>/state/power def get(self, node_id):",
      "33": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/util/defs/uuid/defs/uuid def get(self, node_id):",
      "34": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/defs/uuid/defs/get_node_id/defs def get(self, node_id):",
      "35": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode>)",
      "36": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/util/defs/uuid/defs def get(self, node_id):",
      "37": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _-> def get(self, node_id):",
      "38": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(does/nodes/uuid>/state/power def get(self, node_id):",
      "39": "# GET nodes/uuid>/state/power@wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id):",
      "40": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/util/defs/uuid/defs/get_node_id/defs def get(self, node_id):",
      "41": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) __node_id = def_get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(Node_id)",
      "42": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) in scope def get(self, node_id):",
      "43": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/defs/uuid/defs/uuid def get(self, node_id):",
      "44": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): @wsme_pecan.wsexpose(NodePowerState, unicode)",
      "45": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) if (!NodePowerState.hasOwnProperty(unicode)) { def get(self, node_id):",
      "46": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.com/env/node_id/defs/get_node_id/defs def get(self, node_id):",
      "47": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) def get(self, node_id): http://www.wsme_pecan.org/env/node_id/defs/defs/uuid/defs def get(self, node_id):",
      "48": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _.keys(NodePowerState, unicode) def get(self, node_id):",
      "49": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, unicode) _(get nodes/uuid>/state/power>) def get(self, node_id):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
    "target_code": "\n    @pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_line": "    @pyqtSignature('')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 570,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/batch/batch_dialog.py",
    "target_filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "def run_selected_clicked(self):"
    ],
    "correct": false,
    "top_five": {
      "0": "def run_selected_clicked(self):",
      "1": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "2": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "3": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "4": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "5": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "6": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "7": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "8": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "9": "define(['pyqtSignature', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "10": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "11": "define(['pyqtSignature', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "12": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "13": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "14": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "15": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "16": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self):",
      "17": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function (require, reject) { run_selected_clicked(self):",
      "18": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self):",
      "19": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "20": "define(['pyqtSignature', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self):",
      "21": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "22": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "23": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "24": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "25": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "26": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "27": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function (require, reject) { run_selected_clicked(self):",
      "28": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self):",
      "29": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "30": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self)",
      "31": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self):",
      "32": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "33": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function (require, reject) { run_selected_clicked(self):",
      "34": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "35": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self)",
      "36": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function (require, reject) { run_selected_clicked(self):",
      "37": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, Signature) { run_selected_clicked(self):",
      "38": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { def run_selected_clicked(self):",
      "39": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "40": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "41": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i, n, pyqtSignature) { def run_selected_clicked(self): self.clicked, ed)",
      "42": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self):",
      "43": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] run_selected_clicked(self)",
      "44": "define(['pyqtSignature', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self)",
      "45": "define(['pyqtSignature', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(d, e, f, g, h, i) { run_selected_clicked(self):",
      "46": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function (require, reject) { run_selected_clicked(self)",
      "47": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, ) { run_selected_clicked(self)",
      "48": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function (require, reject) { run_selected_clicked(self):",
      "49": "define(['pyqtSignature', '', '', '','require', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], function(require, reject) { run_selected_clicked(self):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input('finished')\n",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/convection/exponential2D/mesh2D.py",
    "target_filename": "examples/convection/exponential2D/mesh2D.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "var raw_input = (function () {"
    ],
    "correct": false,
    "top_five": {
      "0": "var raw_input = (function () {",
      "1": "var raw_input = used but not defined in the current scope. raw_input('finished')",
      "2": "(function () {",
      "3": "var raw_input = (function () { this.raw_input('finished')",
      "4": "scope.raw_input = function () { } ;",
      "5": "var raw_input = (function () { this._raw_input = function () { } ;",
      "6": "raw_input('finished')",
      "7": "var raw_input = function () { } ;",
      "8": "import $ from '../../core/$.js' import _ from '../../core/$.js'",
      "9": "var mdeps = require('mdeps'); module.exports = function (deps, mdeps) {",
      "10": "var mdeps = require('./deps'); var raw_input = function (mdeps, cb) { } ;",
      "11": "input = require('./input'); module.exports = function (idProperty, getPropertyFromIndex, getPropertyFromIndex) {",
      "12": "var mdeps = require('./deps'); var mdeps = require('./deps');",
      "13": "input = require('./input'); module.exports = function (idProperty, getProperty, beforeCallback, afterCallback) {",
      "14": "describe('RawInput('finished')', ['RawInput', 'finished'], function (RawInput, Object) {",
      "15": "input = require('./input'); module.exports = function (idProperty, getPropertyFrom, isProperty) {",
      "16": "input = require('./input'); module.exports = function (idProperty, getPropertyFromDir) {",
      "17": "input = require('./input'); module.exports = function (idProperty, getProperty, attrs) {",
      "18": "var mdeps = require('./deps'); var pc = require('./pc');",
      "19": "var mdeps = require('./deps'); var ps = require('./ps');",
      "20": "var mdeps = require('./deps'); var raw_input = function (mdeps, cb) { }.process(mdeps, cb) }",
      "21": "input = require('./input'); module.exports = function (idProperty, getPropertyFromIndex, isProperty) {",
      "22": "var mdeps = require('deps'); module.exports = function (deps, mdeps) {",
      "23": "import $ from '../../core/$.js' import _ from '../core/$.js'",
      "24": "var mdeps = require('mdeps'); module.exports = function (deps, cb) {",
      "25": "var mdeps = require('deps'); module.exports = function (deps, cb) {",
      "26": "var mdeps = require('mdeps');",
      "27": "var mdeps = require('deps').deps;",
      "28": "var mdeps = require('deps'); var pdps = require('../../models/deps');",
      "29": "input = require('./input'); module.exports = function (idProperty, getPropertyFromIndex, beforeCallback, afterCallback) {",
      "30": "var raw_input = (function () { this.$emit('resource', './r/g', './g') } ;",
      "31": "var raw_input = inputFactory('finished')",
      "32": "var raw_input = (function () { this.raw_input = function () { } ;",
      "33": "input = require('./input'); module.exports = function (idProperty, getProperty, getState) {",
      "34": "$scope.raw_input = inputFactory( { name: 'finished', value: function () {",
      "35": "input = require('./input'); module.exports = function (output, source) {",
      "36": "describe('RawInput('finished')', ['RawInput', 'finished'], function (RawInput) {",
      "37": "var mdeps = require('./deps'); var raw_input = function (mdeps, cb) { }",
      "38": "var raw_input = ['finished'];",
      "39": "input = require('./input'); module.exports = function (idProperty, getPropertyName, getPropertyName) {",
      "40": "input = require('./input'); module.exports = function (idProperty, getProperty, assign) {",
      "41": "import $ from '../../core/$.js' import $ from '../../core/$.js'",
      "42": "var mdeps = require('deps'); var pdps = require('./docs');",
      "43": "input = require('./input'); module.exports = function (output, raw_input) {",
      "44": "var mdeps = require('mdeps'); module.exports = function (mdeps, cb) {",
      "45": "var raw_input = (function () { this.$emit('resource', 'finished'); } ;",
      "46": "var mdeps = require('./deps'); var raw_input = require('./raw_input');",
      "47": "input = require('./input'); module.exports = function (idProperty, getPropertyFromHex, raw_input) {",
      "48": "input = require('./input'); module.exports = function (idProperty, getPropertyFromIndex, attrs) {",
      "49": "var raw_input = (function () { this.$emit('resource', './r/g', './src')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    viewer.plot()\n    raw_input('finished')\n",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/distanceFunction/square.py",
    "target_filename": "examples/levelSet/distanceFunction/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "viewer.plot()"
    ],
    "correct": false,
    "top_five": {
      "0": "viewer.plot()",
      "1": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?_input(')",
      "2": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input(')",
      "3": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input(']",
      "4": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?_input(')",
      "5": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { )?_input(']",
      "6": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )",
      "7": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?_input(')",
      "8": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?_input(')",
      "9": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input(')",
      "10": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input(']",
      "11": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input('finished)",
      "12": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input('])",
      "13": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?_input(')",
      "14": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )",
      "15": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )",
      "16": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?_input(')",
      "17": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?_input(']",
      "18": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { )?_input(')",
      "19": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.files)?_input(')",
      "20": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )",
      "21": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9])?_input(')",
      "22": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?_input(')",
      "23": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9])?_input('",
      "24": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?_input(')",
      "25": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input('finished)",
      "26": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdffile(?:[0-9] { )?$/uploads.file(?_input(?",
      "27": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input('](?_input('",
      "28": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input('])",
      "29": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?_input(?_input('",
      "30": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?_input(')",
      "31": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { )?_input('])",
      "32": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/gir.plot(?",
      "33": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?_input(']",
      "34": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:$/uploads)?_input(')",
      "35": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { 0,1 } )?_input(')",
      "36": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { )?_input(']",
      "37": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )",
      "38": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9])?_input('",
      "39": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdffile(?:[0-9] { 0,1 } )?_input(')",
      "40": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.cache.plot(?_input(')",
      "41": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?$/.pdf.file(?:[0-9] { )?_input(']",
      "42": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?_input(?_input('",
      "43": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { )?_input('finished]",
      "44": "viewer.plot() document.getElementById('raw_input').replace(/ ^ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 0,4 } )?_input(')",
      "45": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 0,1 } )?$/.pdffile(?:[0-9] { 0,1 } )?_input('finished",
      "46": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9] { )?$/.pdf.file(?:[0-9])?_input(')",
      "47": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { )?_input(')",
      "48": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,9 } )(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdf.file(?:[0-9] { 0,9 } )?$/.pdffile(?:[0-9] { 0,9 } )?_input(')",
      "49": "viewer.plot() document.getElementById('raw_input').replace(/ \\ %(?:[0-9] { 0,1 } )(?:[0-9] { 0,1 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdf.file(?:[0-9] { 1,4 } )?$/.pdffile(?:[0-9] { 1,4 } )?_input(')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
    "target_code": "        if not r.ok:\n            return PaymentStatus(None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_line": "        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `payment_hash` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/wallets/clightning.py",
    "target_filename": "lnbits/wallets/clightning.py",
    "source_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484^",
    "target_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "predictions": [
      "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None"
    ],
    "correct": false,
    "top_five": {
      "0": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "1": "if not r.ok: return PaymentStatus(r, None) var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "2": "if not r.ok: return PaymentStatus(r, None) current_payouts = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "3": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = r.pay() if payments else None",
      "4": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if (p[\"payment_hash\"] == payment_hash]) payment = payments[0] if payments else None",
      "5": "if not r.ok: return PaymentStatus(r, None) current_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "6": "if not r.ok: return PaymentStatus(r, None) currentPage.payouts = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "7": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] If p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "8": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = 0 if payments else None",
      "9": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = r.payouts[0] if payments else None",
      "10": "if not r.ok: return PaymentStatus(r, None) currentPayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "11": "if not r.ok: return PaymentStatus(r, None) currently payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "12": "if not r.ok: return PaymentStatus(r, None) current_payers = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "13": "if not r.ok: return PaymentStatus(r, None) currentScope.payouts = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "14": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"]] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "15": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"]if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "16": "if not r.ok: return PaymentStatus(r, None) current_pays = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "17": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if r[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "18": "if not r.ok: return PaymentStatus(r, None) currentScope.Payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "19": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"]; if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "20": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if (payment_hash == payment_hash) payment = payments[0] if payments else None",
      "21": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = r.pays[0] if payments else None",
      "22": "if not r.ok: return PaymentStatus(r, None) payments = [] if r.json()[\"payments\"]!== undefined if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "23": "if not r.ok: return PaymentStatus(r, None) currentBlock = r.block() payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "24": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\") if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "25": "if not r.ok: return PaymentStatus(r, None) payments = [] if r.json()[\"payments\"]!== undefined if r[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "26": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if (payer.hash == payment_hash) payment = payments[0] if payments else None",
      "27": "if not r.ok: return PaymentStatus(r, None) currentScope.payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "28": "if not r.ok: return PaymentStatus(r, None) currentString.payouts = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "29": "if not r.ok: return PaymentStatus(r, None) currentPayment = r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash payment = payments[0] if payments else None",
      "30": "if not r.ok: return PaymentStatus(r, None) currentPayment = r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "31": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if [payer_id] == payment_hash] payment = payments[0] if payments else None",
      "32": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash payment = payments[0] if payments else None",
      "33": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if (p[\"payment_hash\"] == payment_hash) payment = payments[0] if payments else None",
      "34": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "35": "if not r.ok: return PaymentStatus(r, None) currentString = r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "36": "if not r.ok: return PaymentStatus(r, None) currentPayment = r.pay_hash if payments else None",
      "37": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if [payer_id] == payment_id] payment = payments[0] if payments else None",
      "38": "if not r.ok: return PaymentStatus(r, None) payments = [] if p.json()[\"payments\"]!== undefined if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "39": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if [payment_hash] == payment_hash] payment = payments[0] if payments else None",
      "40": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = zero if payments else None",
      "41": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = r[0] if payments else None",
      "42": "if not r.ok: return PaymentStatus(r, None) currentMonth payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "43": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payment[0] if payments else None",
      "44": "if not r.ok: return PaymentStatus(r, None) let payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "45": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if (payer_id === payment_hash) payment = payments[0] if payments else None",
      "46": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] If p[\"payment_hash\"] == payment_hash] Payment = payments[0] if payments else None",
      "47": "if not r.ok: return PaymentStatus(r, None) payments = [] for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "48": "if not r.ok: return PaymentStatus(r, None) payments = [] if r.json()[\"payments\"] && p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "49": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = undefined if payments else None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \"\"\"\n",
    "warning_line": "class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `viewsets` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 7,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cyverse/atmosphere",
    "source_filename": "api/v2/views/platform_type.py",
    "target_filename": "api/v2/views/platform_type.py",
    "source_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470^",
    "target_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "predictions": [
      "import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "1": "import from api.v2.serializers.details import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "2": "import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "3": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { readOnlyModelViewSet } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "4": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { hasOwnProperty } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "5": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { state } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "6": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { credentialingViewSet } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "7": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "8": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { credentialholder } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "9": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { viewsets } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "10": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorViewSet } class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "11": "import attrs from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "12": "import Dataset from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "13": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "14": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { readOnlyModelViewSet } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "15": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorisationClass } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "16": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.readOnlyModelViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "17": "import data from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "18": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { isReadOnlyModel } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "19": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "20": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { namespace } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "21": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorId } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "22": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "23": "import Database from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "24": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { hasOwnProperty } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "25": "import TerminalService from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "26": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorViewSet } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "27": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { readOnlyModel, reject } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "28": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorViewSet } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "29": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { readOnlyModelViewSet } from api.v2.readOnlyModelViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "30": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { isReadOnlyModel } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "31": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.generateAuthViewSet } class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "32": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.utils.readOnlyModelViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "33": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { readOnlyModelViewSet } from api.v2.base export { class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "34": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { credentialholder } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "35": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorId } from api.v2.base import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "36": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "37": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { namespace } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "38": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import } class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "39": "import AuthViewSet class PlatformTypeViewSet (viewsets.ReadOnlyModelViewSet): \"\"\"",
      "40": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { viewsets } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "41": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet { from api.v2.readOnlyModelViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "42": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.classes.ReadOnlyModelViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "43": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.readOnlyModelViewSet) class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "44": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { readOnlyModel, reject } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "45": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { fingerprint class PlatformTypeViewSet } from api.v2.default class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "46": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { state } from api.v2.root import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "47": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { credentialingViewSet } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "48": "import from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import { authorisationClass } from api.v2.base class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\"",
      "49": "import Assembly from api.v2.assemblers.components.Assembly import AuthViewSet class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return self is other or (\n            isintance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "target_code": "        return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "warning_line": "            isintance(other, GraphQLScalarTypeExtension)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `isintance` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 166,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tartiflette/tartiflette",
    "source_filename": "tartiflette/types/scalar.py",
    "target_filename": "tartiflette/types/scalar.py",
    "source_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc^",
    "target_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc",
    "predictions": [
      "return self is other or ( isintance(other, GraphQLScalarTypeExtension) and other.directives == self.directives"
    ],
    "correct": false,
    "top_five": {
      "0": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "1": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self.data",
      "2": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension.data",
      "3": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data )",
      "4": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension(data)",
      "5": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension(other)",
      "6": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) )",
      "7": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data )",
      "8": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self.data GraphQLScalarTypeExtension",
      "9": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : isintance(other.directives == self.directives",
      "10": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) : self.data",
      "11": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self",
      "12": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension.data)",
      "13": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension(data)",
      "14": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension.data",
      "15": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data",
      "16": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) : self.data",
      "17": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self.data",
      "18": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension(other)",
      "19": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) ) : self.data",
      "20": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : isintance(other) and other.directives == self.directives",
      "21": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension, isintance(other.directives == self.",
      "22": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data )",
      "23": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) ) : self.data",
      "24": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) )",
      "25": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension(data)",
      "26": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension.data :",
      "27": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension, isintance(other)",
      "28": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data =>",
      "29": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension(Data)",
      "30": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : self.data )",
      "31": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) :",
      "32": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self.data GraphQLScalarTypeExtension,",
      "33": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension)",
      "34": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self.data",
      "35": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension)",
      "36": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data : self.data",
      "37": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data)) : isintance(other.directives == self.directives",
      "38": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension,",
      "39": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.graphQLScalarTypeExtension).defaults? self.graphQLScalarTypeExtension : GraphQLScalarTypeExtension.isIntance(other) : isintance(other) and other.directives == self.directives",
      "40": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) :",
      "41": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : self.data )",
      "42": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : isintance(other.directives == self.directives",
      "43": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension.data :",
      "44": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension.data )",
      "45": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) : (",
      "46": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data GraphQLScalarTypeExtension(Data",
      "47": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalar(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.isGraphQLScalarType(data) : GraphQLScalarTypeExtension.data",
      "48": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) : self.data",
      "49": "return self is other or ( isintance(other, GraphQLScalarTypeExtension) && isintance(other.data)? other.data : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : GraphQLScalarTypeExtension.isGraphQLScalarType(other.data) : ( GraphQLScalarTypeExtension.isGraphQLScalarType(other.data ) ) : self.data )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_line": "    _valid_ingestibles = set(xrange(10, 14))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 384,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "target_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14))"
    ],
    "correct": false,
    "top_five": {
      "0": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14))",
      "1": "_example_code = u'F' _valid_ingestibles = set(xrange(11, 14))",
      "2": "_example_code = u'F'",
      "3": "_example_code = u'F' var xrange = xrange(10, 14) _valid_ingestibles = set(xrange(10, 14))",
      "4": "_example_code = u'F' _valid_ingestibles = set(u.s.xrange(10, 14))",
      "5": "_example_code = u'F' _valid_ingestibles = set(xsource(10, 14))",
      "6": "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14))",
      "7": "_example_code = u'F' _valid_ingestibles = set(xfg(10, 14))",
      "8": "_example_code = u'F' _valid_ingestibles = set(s.xrange(10, 14))",
      "9": "_example_code = u'F' _valid_ingestibles = set(new xrange(xrange(10, 14))",
      "10": "_example_code = u'F' _valid_ingestibles = set(xrange(12, 14))",
      "11": "_example_code = u'F' _valid_ingestibles = set(xenon.xrange(10, 14))",
      "12": "_example_code = u'F' _valid_ingestibles = set(xhr(10, 14))",
      "13": "_example_code = u'F' _valid_ingestibles = set(xerox(10, 14))",
      "14": "_example_code = u'F' _valid_ingestibles = set(xend.xrange(10, 14))",
      "15": "_example_code = u'F' _valid_ingestibles = set(xrg(10, 14))",
      "16": "_example_code = u'F' _valid_ingestibles = set(null, xrange(10, 14))",
      "17": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)).toLowerCase()",
      "18": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)).toUpperCase()",
      "19": "_example_code = u'F' _valid_ingestibles = set(new xrange(10, 14))",
      "20": "_example_code = u'F' _valid_ingestibles = set(x.range(10, 14))",
      "21": "_example_code = u'F' _valid_ingestibles = set(x--xrange(10, 14))",
      "22": "_example_code = u'F' _valid_ingestibles = set(_xrange(10, 14))",
      "23": "_example_code = u'F' _valid_ingestibles = set(xchange(10, 14))",
      "24": "_example_code = u'F' _valid_ingestibles = set(x-axis(10, 14))",
      "25": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)).toString()",
      "26": "_example_code = u'F' var xvalid_ingestibles = set(xrange(10, 14))",
      "27": "_example_code = u'F' _valid_ingestibles = set(xrange(10))",
      "28": "_example_code = u'F' _valid_ingestibles = set(xwindow.xrange(10, 14))",
      "29": "_example_code = u'F' _valid_ingestibles = set(orange(10, 14))",
      "30": "_example_code = u'F' _valid_ingestibles = set(str, xrange(10, 14))",
      "31": "_example_code = u'F' _valid_ingestibles = set(xrem(10, 14))",
      "32": "_example_code = u'F' _valid_ingestibles = set(xroute(10, 14))",
      "33": "_example_code = u'F' _valid_ingestibles = set(x--)",
      "34": "_example_code = u'F' _valid_ingestibles = set(xrange(13, 14))",
      "35": "_example_code = u'F' _valid_ingestibles = set(_example_code, 10)",
      "36": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)).toFixed(2)",
      "37": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)||$ { _example_code } )",
      "38": "_example_code = u'F' _valid_ingestibles = set(xref(10, 14))",
      "39": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 13))",
      "40": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)).toUuid()",
      "41": "_example_code = u'F' _valid_ingestibles = set(xsrc(10, 14))",
      "42": "_example_code = u'F' _valid_ingestibles = set(x_range(10, 14))",
      "43": "_example_code = u'F' _valid_ingestibles = set(xls(10, 14))",
      "44": "_example_code = u'F' _valid_ingestibles = set(xyron(10, 14))",
      "45": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)>$ { u'F",
      "46": "_example_code = u'F' _valid_ingestibles = set(yrange(10, 14))",
      "47": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)) _example_data = u'F'",
      "48": "_example_code = u'F' _valid_ingestibles = set(xrange(10, 14)) _example_code = 'A'",
      "49": "_example_code = u'F' _valid_ingestibles = set(xrange(12, 13))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "target_code": "                else:\n                    def joiner(left: MatrixTable):\n                        return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_line": "                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1637,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "hail/python/hail/table.py",
    "target_filename": "hail/python/hail/table.py",
    "source_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629^",
    "target_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "predictions": [
      "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),"
    ],
    "correct": false,
    "top_five": {
      "0": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "1": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "2": "else: joiner = lambda = MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "3": "else: joiner = lambda (left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "4": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), ast = Join(GetField(TopLevelReference('va'), uid),",
      "5": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "6": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "7": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida",
      "8": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "9": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable( right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "10": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid),",
      "11": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), right: MatrixTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "12": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "13": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "14": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uida",
      "15": "else: joiner = lambda = (left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)), ast = Join(GetField(TopLevelReference('va'), uid),",
      "16": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(right._mir, right._tir, uid))",
      "17": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida",
      "18": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(right._mir, right._tir, uida",
      "19": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable( right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida",
      "20": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable(right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "21": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), joiner)",
      "22": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left = MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "23": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(RowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "24": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), ast = Join(GetField(TopLevelReference('va'), uid),",
      "25": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid))",
      "26": "else: joiner = lambda.table = MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "27": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid))",
      "28": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(RowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(RowsTable(left._mir, right._tir, uida",
      "29": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida)",
      "30": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable())",
      "31": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable(right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida",
      "32": "else: joiner = lambda = (left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "33": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uida",
      "34": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left = MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida",
      "35": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( right._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "36": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uida",
      "37": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), joiner);",
      "38": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(",
      "39": "else: joiner = lambda.__join(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "40": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), right: MatrixTable(left._mir, right._tir, uid), ast = Join(GetField(TopLevelReference('va'), uid),",
      "41": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid), ast = Join(GetField(TopLevelReference('va'), uid),",
      "42": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(",
      "43": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), right: MatrixTable(left._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(right._mir, right._tir, uida",
      "44": "else: joiner = lambda.__joiner = MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "45": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(._mir, uid))",
      "46": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(right._mir, right._tir, uid) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(uida))",
      "47": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), right: MatrixTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid), left: MatrixTable(MatrixAnnotateRowsTable(right._tir, uida)",
      "48": "else: joiner = lambda right: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid), left: MatrixTable(MatrixAnnotateRowsTable(uid), left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "49": "else: joiner = lambda, left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n\nelse:\n    raise Error(\"Unknown platform\")\n\n",
    "target_code": "elif platform_system == \"Windows\":\n    raise NotImplementedError(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")\n\n",
    "warning_line": "    raise Error(\"Windows not supported\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Error` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 68,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "streamlit/streamlit",
    "source_filename": "examples/run_on_save.py",
    "target_filename": "examples/run_on_save.py",
    "source_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15^",
    "target_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "predictions": [
      "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")"
    ],
    "correct": false,
    "top_five": {
      "0": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "1": "el if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "2": "elIf platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "3": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\"); else: raise Error(\"Unknown platform\")",
      "4": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported by provider '\"); else: raise Error(\"Unknown platform\")",
      "5": "elif platform_system == \"Windows\"): raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "6": "lift_wheels = new Error(port) elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "7": "raise Error(\"Not supported\") elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "8": "elevateError(elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "9": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported\") else: raise Error(\"Unknown platform\")",
      "10": "elevator.elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "11": "elevate_system(el) if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "12": "el If platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "13": "elevate_plugin(el) elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "14": "lift_path(el) elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "15": "elif platform_system == \"WINDOWS\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "16": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "17": "lift_boot(el) elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "18": "elevator.call(el) elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "19": "elevating_target_system(el) { if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "20": "elif platform_system == \"Windows\": throw Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "21": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported by provider \" + this.platform_system); else: raise Error(\"Unknown platform\")",
      "22": "elif platform_system == \"Windows\":raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "23": "if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "24": "elevif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "25": "elif platform_system == \"Windows\": return new Error(\"Windows not supported\") else: return new Error(\"Unknown platform\")",
      "26": "elif platform_system == \"Windows\": raise Error(\"Windows is not supported\") else: raise Error(\"Unknown platform\")",
      "27": "elif platform_system == \"Windows\": raising Error(\"Windows not supported\") else: raising Error(\"Unknown platform\")",
      "28": "elevator.target = elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "29": "elevatif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "30": "lift_path(el) if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "31": "elevate(el) if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "32": "elevate_level(el) if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "33": "elif platform_system == \"Windows\": raise Error(\"Not supported\") else: raise Error(\"Unknown platform\")",
      "34": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported by provider '\" else: raise Error(\"Unknown platform\")",
      "35": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\"); else raise Error(\"Unknown platform\")",
      "36": "elif platform_system == \"Windows\": elevate Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "37": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported\"); else: raise Error(\"Unknown platform\")",
      "38": "elif platform_system == \"Windows\": raisedError(\"Windows not supported\") else: raisedError(\"Unknown platform\")",
      "39": "raise Error(\"Windows not supported\") elif platform_system == \"Windows\": raise Error(\"Unknown platform\")",
      "40": "elif platform_system == \"Windows\": throw new Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "41": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") or else: raise Error(\"Unknown platform\")",
      "42": "elevator.if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "43": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported by provider \" + this.platform_system]); else: raise Error(\"Unknown platform\")",
      "44": "self.elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "45": "el if platform_system == \"Windows\"): raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "46": "elevator_system.if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "47": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") otherwise: raise Error(\"Unknown platform\")",
      "48": "Elem.if platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "49": "elif platform_system == \"Windows\": raising Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)\n",
    "target_code": "\n@typecheck(structs=oneof(expr_array),\n           identifier=str)\n",
    "warning_line": "@typecheck(structs=oneof(expr_array, listof(Struct)),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `listof` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 649,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "python/hail/expr/functions.py",
    "target_filename": "python/hail/expr/functions.py",
    "source_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5^",
    "target_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5",
    "predictions": [
      "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)"
    ],
    "correct": false,
    "top_five": {
      "0": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)",
      "1": "@typecheck(structs = oneof(expr_array, listof(Struct)), identifier=str)",
      "2": "@typecheck(structs=oneof(expr_array, namespace.listof(Struct)), identifier=str)",
      "3": "@typecheck(structs=oneof(expr_array, (Struct) => listof(Struct)), identifier=str)",
      "4": "@typecheck(structs=oneof(expr_array, \"Listof(Struct)\")), identifier=str)",
      "5": "@typecheck(structs=oneof(expr_array, list(Struct)), identifier=str)",
      "6": "@typecheck(structs=oneOf(expr_array, listof(Struct)), identifier=str)",
      "7": "@typecheck(structs=anotherof(expr_array, listof(Struct)), identifier=str)",
      "8": "@typecheck(structs=oneof(expr_array, listOf(Struct)), identifier=str)",
      "9": "@typecheck(structs ==oneof(expr_array, listof(Struct)), identifier=str)",
      "10": "@typecheck(structs=one(expr_array, listof(Struct)), identifier=str)",
      "11": "@typecheck(structs=async(expr_array, listof(Struct)), identifier=str)",
      "12": "@typecheck(constructors=oneof(expr_array, listof(Struct)), identifier=str)",
      "13": "@typecheck(structs=oneof(expr_array, listof(Struct)) identifier=str)",
      "14": "@typecheck(structs == oneof(expr_array, listof(Struct)), identifier=str)",
      "15": "@typecheck(structs=oneof(expr_array, listo(Struct)), identifier=str)",
      "16": "@typecheck(structs=oneof(expr_array, listof(Struct))), identifier=str)",
      "17": "@typecheck(structs=oneof(expr_array, (listof(Struct))), identifier=str)",
      "18": "@typecheck(structs=oneof(expr_array, (Listof(Struct))), identifier=str)",
      "19": "@typecheck(structs=oneof(expr_array, listof(Struct), identifier=str)",
      "20": "@typecheck(structs=oneof(expr_array, schema, listof(Struct)), identifier=str)",
      "21": "@typecheck(structs.match(oneof(expr_array, listof(Struct)), identifier=str)",
      "22": "@typecheck(structs=oneof(expr_array, schema_require(Struct)), identifier=str)",
      "23": "@typecheck(structs=oneof(expr_array, tableof(Struct)), identifier=str)",
      "24": "@typecheck(structs=el(expr_array, listof(Struct)), identifier=str)",
      "25": "@typecheck(structs=equal(expr_array, listof(Struct)), identifier=str)",
      "26": "@typecheck(structs=oneof(expr_array, (Struct) => identifier=str)",
      "27": "@typecheck(tructions=oneof(expr_array, listof(Struct)), identifier=str)",
      "28": "@typecheck(structs=oneof(expr_array, element_listof(Struct)), identifier=str)",
      "29": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifyr=str)",
      "30": "@typecheck(structs=async(expr_array, listof(Struct))), identifier=str)",
      "31": "@typecheck(structs=oneof(expr_array, \"List of (Struct)\")\", identifier=str)",
      "32": "@typecheck(structs=oneof(expr_array, listof (Struct)), identifier=str)",
      "33": "@typecheck(structs=fromList(expr_array, listof(Struct)), identifier=str)",
      "34": "@typecheck(structs=oneof(expr_array, 'listof'), identifier=str)",
      "35": "@typecheck(structs=oneof(expr_array, master_of(Struct)), identifier=str)",
      "36": "@typecheck(structs=oneof(expr_array, listing(Struct)), identifier=str)",
      "37": "@typecheck(structs_=oneof(expr_array, listof(Struct)), identifier=str)",
      "38": "@typecheck(structures=oneof(expr_array, listof(Struct)), identifier=str)",
      "39": "@typecheck(structs=oneof(expr_array, master_of_struct), identifier=str)",
      "40": "@typecheck(structs=of(expr_array, listof(Struct)), identifier=str)",
      "41": "@typecheck(structs=oneof(expr_array, decode(Struct)), identifier=str)",
      "42": "@typecheck(structs=oneof(expr_array, \"Listof(Struct)\")\", identifier=str)",
      "43": "@typecheck(structs=oneof(expr_array, \"Listof(Struct)\"), identifier=str)",
      "44": "@typecheck(structs=(expr_array, listof(Struct)), identifier=str)",
      "45": "@typecheck(structs=oneof(expr_array, \"List of (Struct)\")), identifier=str)",
      "46": "@typecheck(structs=oneof(expr_array, \"List\")), identifier=str)",
      "47": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=from(str)",
      "48": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=Str)",
      "49": "@typecheck(structs=oneof(expr_array, table), identifier=str)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')\n",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 88,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/surfactant/square.py",
    "target_filename": "examples/levelSet/surfactant/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "surfactantViewer.plot() surfactantVariable = raw_input('finished')"
    ],
    "correct": false,
    "top_five": {
      "0": "surfactantViewer.plot() surfactantVariable = raw_input('finished')",
      "1": "surfactantViewer.plot() surfactantVariable",
      "2": "surfactantViewer.plot() print surfactantVariable raw_input('finished')",
      "3": "surfactantViewer.plot() surfactantVariable raw_input('finished')",
      "4": "surfactantViewer.plot() surfactantVariable = surfactantVariable raw_input('finished')",
      "5": "surfactantViewer.plot()",
      "6": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'undefined'",
      "7": "surfactantViewer.plot() print surfactantVariable",
      "8": "surfactantViewer.plot() surfactantVariable = surfactantVariable",
      "9": "surfactantViewer.plot() surfactantVariable = let raw_input('finished')",
      "10": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.isRaw) surfactantVariable = raw_input('finished')",
      "11": "surfactantViewer.plot() surfactantVariable if (surfactantViewer.hasProperty('finished')) { raw_input('finished')",
      "12": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'function'",
      "13": "surfactantViewer.plot() surfactantVariable if (surfactantViewer.isRaw) surfactantVariable = raw_input('finished')",
      "14": "surfactantViewer.plot() surfactantVariable = inputTypes.forEach(function () { raw_input('finished') } )",
      "15": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'undefined'? surfactantViewer.plot()",
      "16": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'undefined'? surfactantViewer.global.raw_input('finished') : surfactantViewer.global.raw_input('finished')",
      "17": "surfactantViewer.plot() surfactantVariable fully qualified raw_input('finished')",
      "18": "surfactantViewer.plot() surfactantVariable = require('./surfactant/variable') surfactantViewer.setState( { raw_input('finished') } )",
      "19": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'number'? surfactantViewer.global.raw_input('finished') : surfactantViewer.global.raw_input('finished')",
      "20": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished')) SurfactantViewer.setState( { raw_input('finished') } )",
      "21": "surfactantViewer.plot() surfactantVariable = require('./sugar-candidates') surfactantVariable = require('./sugar-candidates')",
      "22": "surfactantViewer.plot() surfactantVariable = require('./sugar-candidate') surfactantVariable = require('./sugar-candidate')",
      "23": "surfactantViewer.plot() surfactantVariable = require('./r/gs/surfactantVariable') surfactantViewer.setState( { raw_input('finished') } )",
      "24": "surfactantViewer.plot() surfactantVariable ()",
      "25": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.isRaw) SurfactantVariable = raw_input('finished')",
      "26": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'function'? surfactantViewer.process(['raw']) : surfactantViewer.process(['raw'])",
      "27": "surfactantViewer.plot() surfactantVariable = require('./r/gs/surfactantVariable')",
      "28": "surfactantViewer.plot() surfactantVariable = util.input('finished')",
      "29": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished')) SurfactantViewer.setState( { raw_input: surfactantVariable, finished: false } )",
      "30": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.isRaw) SurfactantViewer.setState( { raw_input('finished') } )",
      "31": "surfactantViewer.plot() surfactantVariable = this surfactantVariable raw_input('finished')",
      "32": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'number'? surfactantViewer.plot()",
      "33": "surfactantViewer.plot() surfactantVariable if (surfactantViewer.hasProperty('finished')) surfactantVariable = raw_input('finished')",
      "34": "surfactantViewer.plot() surfactantVariable if (surfactantViewer.hasProp('finished')) surfactantVariable = raw_input('finished')",
      "35": "surfactantViewer.plot() surfactantVariable = surfactantVariable Raw_input('finished')",
      "36": "surfactantViewer.plot() surfactantVariable = require('./src/v1/raw-input') surfactantViewer.setState( { raw_input('finished') } )",
      "37": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished')) continue surfactantVariable raw_input('finished')",
      "38": "surfactantViewer.plot() surfactantVariable = require('./surfactant/variable')",
      "39": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.isRaw) SurfactantViewer.setState( { raw_input: surfactantVariable, 'finished')",
      "40": "surfactantViewer.plot() surfactantVariable = require('./r/gp/surfactantVariable') surfactantViewer.setState( { raw_input('finished') } )",
      "41": "surfactantViewer.plot() surfactantVariable if (surfactantViewer.isRaw('finished')) { raw_input('finished')",
      "42": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished')) surfactantVariable = raw_input('finished')",
      "43": "surfactantViewer.plot() surfactantVariable = typeof surfactantVariable === 'function'? surfactantViewer.process(['raw']) : surfactantVariable",
      "44": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished')) SurfactantViewer.setState( { raw_input('finished') }",
      "45": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished'))",
      "46": "surfactantViewer.plot() surfactantVariable = mongoose.model.substr(20).toString() surfactantVariable = raw_input('finished')",
      "47": "surfactantViewer.plot() surfactantVariable = surfactantViewer.create()",
      "48": "surfactantViewer.plot() surfactantVariable if (!surfactantViewer.hasProperty('finished')) SurfactantViewer.setState( { raw_input('finished')",
      "49": "surfactantViewer.plot() surfactantVariable if (surfactantViewer.hasProperty('finished')) SurfactantViewer.setState( { raw_input('finished') }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = xrange(8)\n\n",
    "target_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = range(8)\n\n",
    "warning_line": "_UPDATE = xrange(8)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 296,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/basher/frames.py",
    "target_filename": "Mopy/bash/basher/frames.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8)"
    ],
    "correct": false,
    "top_five": {
      "0": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8)",
      "1": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "2": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "3": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(10): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "4": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, }",
      "5": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8);",
      "6": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { scope._UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "7": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = XRANGE(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "8": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\ _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "9": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\ _UPDATE = xrange(8)",
      "10": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\",
      "11": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = XRange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "12": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = _xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "13": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = EXTENSION(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "14": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_SEARCH, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "15": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "16": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LEIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "17": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LOIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "18": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = (xrange8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "19": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = X.require(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "20": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "21": "_LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "22": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, ^",
      "23": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = xrange(8)",
      "24": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(10): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, }",
      "25": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,",
      "26": "_SEARCH, _LOAD_PLUGINS, _COPY_TEXT, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "27": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "28": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, ^ _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "29": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BLACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "30": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xchange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "31": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FULL_SCREEN, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "32": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "33": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "34": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _ FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "35": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(10): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\",
      "36": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FULL, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "37": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATED = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "38": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "39": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _CANVAS, _LOAD_PLUGINSTANGER,",
      "40": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _CANVAS, _LOAD_PLUGINSTANGE,",
      "41": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FOUND, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "42": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _CURRENT, _LOAD_PLUGINSTANGER,",
      "43": "_SEARCH, _LOAD_PLUGINS, _COPY_TEXT, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE, _SEARCH, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEX_MOD_LE",
      "44": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _CODE_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, {",
      "45": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _CANVAS, _CANVAT,",
      "46": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE, _PLUGINSTANK,",
      "47": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = xrange(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _CANVAS, _LOAD_PLUGINSTANK,",
      "48": "_SEARCH, _LOAD_PLUGINS, _COPY_TEXT, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE, _REQUEST, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEX_MOD_LE",
      "49": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, { _UPDATE = XRANGE(8): _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def get_label(cls) -> str:\n        return self.__name__  #\u00a0default label is the class name\n\n",
    "target_code": "    def get_label(cls) -> str:\n        return cls.__name__  # default label is the class name\n\n",
    "warning_line": "        return self.__name__  #\u00a0default label is the class name",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algoo/preview-generator",
    "source_filename": "preview_generator/preview/generic_preview.py",
    "target_filename": "preview_generator/preview/generic_preview.py",
    "source_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2^",
    "target_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "predictions": [
      "def get_label(cls) -> str: return self.__name__ # default label is the class name: def get_label(cls) -> str"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_label(cls) -> str: return self.__name__ # default label is the class name: def get_label(cls) -> str",
      "1": "def get_label(cls) -> str: return self.__name__ # default class name: def get_label(cls) -> str",
      "2": "def get_label(cls) -> str: return self.__name__ # default class name: def get_label(cls)",
      "3": "def get_label(cls) -> str: return self.__name__ # default label is the class name:",
      "4": "def get_label(cls) -> str: return self.__label__ # default label is the class name: def get_label(cls) -> str",
      "5": "def get_label(cls) -> str: return self.__name__ default label is the class name: def get_label(cls) -> str",
      "6": "def get_label(cls) -> str: return self.__name__ # default class name: def Get_label(cls)",
      "7": "def get_label(cls) -> str: return self.__name__ # default label is the class name: ref get_label(cls) -> str",
      "8": "def get_label(cls) -> str: return self.label || $ { class name } ; default label is the class name: def get_label(cls) -> str",
      "9": "def get_label(cls) -> str: return self.__name__ # default label is the class name: if (!cls.hasOwnProperty(label)) {",
      "10": "def get_label(cls) -> str: return self.label? default label is the class name: def get_label(cls) -> str",
      "11": "def get_label(cls) -> str: return self.__name__ # default label is the class name: def Get_label(cls) -> str",
      "12": "def get_label(cls) -> str: return self.label || class name; default label is the class name: def get_label(cls) -> str",
      "13": "def get_label(cls) -> str: return self.__name__ # default class name: class name",
      "14": "def get_label(cls) -> str; return self.__name__ # default label is the class name: def get_label(cls) -> str;",
      "15": "def get_label(cls) -> str: return self.__node_id # default label is the class name: def get_label(cls) -> str",
      "16": "def get_label(cls) -> str: return self.label && label.toLowerCase().toLowerCase(); default label is the class name: def get_label(cls) -> str",
      "17": "def get_label(cls) -> str: return self.label || ''; default label is the class name: def get_label(cls) -> str",
      "18": "def get_label(cls) -> str: return self.__name__ # default label is the class name: def get_label(cls)",
      "19": "def get_label(cls) -> str: return self.label || a href=\"http: default label is the class name: def get_label(cls) -> str",
      "20": "def get_label(cls) -> str: return self.label # default label is the class name: def get_label(cls) -> str",
      "21": "def get_label(cls) -> str: return self.__name__ # default class name: __get_label(cls)",
      "22": "def get_label(cls) -> str: return self.label || 10 default label is the class name: def get_label(cls) -> str",
      "23": "def get_label(cls) -> str: return self.label || class name; default is the class name: def get_label(cls) -> str",
      "24": "def get_label(cls) -> str: return self.label && label.toLowerCase().toLowerCase(); default label is the class name: def get_label(cls) -> str;",
      "25": "def get_label(cls) -> str: return self.__name__ # default label is the class name: ref.get_label(cls) -> str",
      "26": "def get_label(cls) -> str: return self.label && label.toLowerCase().toString(); default label is the class name: def get_label(cls) -> str",
      "27": "def get_label(cls) -> str: return self.__name__ # default label is the class name: def get_label(false) -> str",
      "28": "def get_label(cls) -> str: return self.label? default label is the class name: def get_label(cls) : null",
      "29": "def get_label(cls) -> str: return self.__label__ # default class name: def get_label(cls) -> str",
      "30": "def get_label(cls) -> str: return self.__name__ # default label is the class name: def.get_label(cls) -> str",
      "31": "def get_label(cls) -> str: return self.__name__ ; default label is the class name: def get_label(cls) -> str",
      "32": "def get_label(cls) -> str: return self.__name__ # default class name: def Get_label(cls) -> str",
      "33": "def get_label(cls) -> str: return self.__label__ default label is the class name: def get_label(cls) -> str",
      "34": "def get_label(cls) -> str: return self.label if (!cls.hasOwnProperty(label)) {",
      "35": "def get_label(cls) -> str: return self.__label__ # default class name: def get_label(cls)",
      "36": "def get_label(cls) -> str: return self.__name__ # default class name: def.get_label(cls)",
      "37": "def get_label(cls) -> str: return self.__name__ # default label is the class name: def get_label(cls) -> str.toLowerCase()",
      "38": "def get_label(cls) -> str: return self.label && label.toLowerCase().toString(); default label is the class name: def get_label(cls) -> str;",
      "39": "def get_label(cls) -> str: return self.__name__ # default class name: def get_label(cls) return self.__name__",
      "40": "def get_label(cls) -> str: return self.__name__ # default label is the class name: ref.get_label(cls)",
      "41": "def get_label(cls) -> str: return self.label ; default label is the class name: def get_label(cls) -> str",
      "42": "def get_label(cls) -> str: return self.label!= null? default label is the class name: def get_label(cls) -> str",
      "43": "def get_label(cls) -> str: return self.label || ''; default label is the class name: def get_label(cls) -> str;",
      "44": "def get_label(cls) -> str: return self.__name__ # default class name: ref.get_label(cls)",
      "45": "def get_label(cls) -> str: return self.label || class name",
      "46": "def get_label(cls) -> str: return self.__name__ # default label is the class name: if (!def.get_label(cls)) {",
      "47": "def get_label(cls) -> str: return self.label!= null default label is the class name: def get_label(cls) -> str",
      "48": "def get_label(cls) -> str: return self.__name__# default label is the class name: def get_label(cls) -> str",
      "49": "def get_label(cls) -> str; return self.__name__ # default label is the class name: def get_label(cls) -> str"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input(\"finished\")\n",
    "target_code": "\n    input(\"finished\")\n",
    "warning_line": "    raw_input(\"finished\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 136,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "target_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------------"
    ],
    "correct": false,
    "top_five": {
      "0": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------------",
      "1": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------------",
      "2": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------------------",
      "3": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------------",
      "4": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------",
      "5": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------------------------------",
      "6": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------",
      "7": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------------------e-",
      "8": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------",
      "9": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------------e",
      "10": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------------e--",
      "11": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------------",
      "12": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------",
      "13": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------",
      "14": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------e---",
      "15": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------------------------",
      "16": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------e--e",
      "17": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------------------------------e--e-",
      "18": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------",
      "19": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------------- than-",
      "20": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------- than-",
      "21": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------ than-",
      "22": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------- than-",
      "23": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------- than-",
      "24": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------------------- than",
      "25": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------e---e-",
      "26": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------",
      "27": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------------------------------e---e",
      "28": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------------- than-",
      "29": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------------------------------e----",
      "30": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------- than-",
      "31": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------e--e--",
      "32": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------- than-",
      "33": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------",
      "34": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"--------------------------------------------------------------------------------------------------------------------------------------man-",
      "35": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------ than-",
      "36": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------------man",
      "37": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------------man--",
      "38": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------------------e-e",
      "39": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------- than-",
      "40": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------e-e-",
      "41": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"------------------------------------------------------------------------------------------------------------------------------------------",
      "42": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------",
      "43": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-------------------------------------------------------------------------------------------------------------------------",
      "44": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------e---e--",
      "45": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------------e----e-",
      "46": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------e-----",
      "47": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"----------------------------------------------------------------------------------------------------------------------------------e----e",
      "48": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"---------------------------------------------------------------------------------------------------------------------------- than-",
      "49": "var scope = [\"require\", \"exports\", \"module\", \"./core/js/css/blob\", \"./core/js/data/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/ui/\",\"height\", \"-----------------------------------------------------------------------------------------------------------------------------------e-- than-"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \n\tself.conf = Config()\n\n",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_line": "\tself.conf = Config()",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "naparuba/shinken",
    "source_filename": "shinken/scheduler.py",
    "target_filename": "shinken/scheduler.py",
    "source_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54^",
    "target_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "predictions": [
      "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,"
    ],
    "correct": false,
    "top_five": {
      "0": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "1": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,d\u00e9s,\"s\":true,\"aphicket,\"blander,\",\"hereinf\u00fch",
      "2": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "3": "conf.conf = Config()",
      "4": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,display:false,\"wrap-lines\":true } ",
      "5": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,Config:false,\"wrap-lines\":true } ",
      "6": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,display:false,\"s,\"wrap-lines\":true } ",
      "7": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "8": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "9": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "10": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "11": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,config:false,\"wrap-lines\":true } ",
      "12": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "13": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatid: true } ",
      "14": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "15": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatitemplates\": true,",
      "16": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "17": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "18": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, lightning:false,\"s\":true } ",
      "19": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,d\u00e9s\":false,\"wrap-lines\":true } ",
      "20": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "21": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,Display:false,\"s,\"wrap-lines\":true } ",
      "22": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatigender:false,\"wrap-lines\":true } ",
      "23": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "24": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function () { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"wrap-lines\":true } ",
      "25": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "26": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,Display:false,\"wrap-lines\":true } ",
      "27": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,tek:false,\"wrap-lines\":true } ",
      "28": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function () { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"s\":true } ",
      "29": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "30": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "31": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatitemplates\":true } ",
      "32": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "33": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatitemplate: true } ",
      "34": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "35": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "36": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatitemplate: true,",
      "37": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "38": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function () { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"smart\": true,",
      "39": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "40": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,meanwhile,\"s\":false,\"wrap-lines\":true } ",
      "41": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,current:false,\"s\":true } ",
      "42": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "43": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, iluminatid:false,\"wrap-lines\":true } ",
      "44": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, Con",
      "45": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "46": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, let",
      "47": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,",
      "48": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,d\u00e9s,\"s\":true } ",
      "49": "module.exports = (SyntaxHighlighter) => { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true, but not-lines\": true,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,\n",
    "target_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_line": "                                  obs: Union[Tensor, Cens],",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Cens` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 172,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "strongio/torch-kalman",
    "source_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "target_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca^",
    "target_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "predictions": [
      "def _log_prob_with_subsetting(self, obs: Union[Tensor, Cens], group_idx: Selector,"
    ],
    "correct": false,
    "top_five": {
      "0": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Cens], group_idx: Selector,",
      "1": "def _log_prob_with_subsetting(self, obs: Union[Tensor, _Cens], group_idx: Selector,",
      "2": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Snippet], group_idx: Selector,",
      "3": "def _log_prob_with_subsetting(self, obs: Union[Tensor, NS], group_idx: Selector,",
      "4": "def _log_prob_with_subsetting(self, obs: Union[Tensor, cens], group_idx: Selector,",
      "5": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Tensor], group_idx: Selector,",
      "6": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Cens], group_idx: Selector,",
      "7": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Cap], group_idx: Selector,",
      "8": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Mn_Cens], group_idx: Selector,",
      "9": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Cens], group_idx: Selector,",
      "10": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Enum], group_idx: Selector,",
      "11": "def _log_prob_with_subsetting(self, obs: Union[Tensor], group_idx: Selector,",
      "12": "def _log_prob_with_subsetting(self, obs: Union[Tensor, TENSOR_CODE], group_idx: Selector,",
      "13": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Define], group_idx: Selector,",
      "14": "def _log_prob_with_subsetting(self, obs: Union[Tensor, BINARY], group_idx: Selector,",
      "15": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Tensor.Cens], group_idx: Selector,",
      "16": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Tensor.__proto__], group_idx: Selector,",
      "17": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Tensor.__proto__, Cens], group_idx: Selector,",
      "18": "def _log_prob_with_subsetting(self, obs: Union[Tensor, DEFAULT_CENSOR], group_idx: Selector,",
      "19": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Clarity], group_idx: Selector,",
      "20": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Object], group_idx: Selector,",
      "21": "def _log_prob_with_subsetting(self, obs: Union[Tensor, D], group_idx: Selector,",
      "22": "def _log_prob_with_subsetting(self, obs: Union[Tensor, DefineTensor], group_idx: Selector,",
      "23": "def _log_prob_with_subsetting(self, obs: Union[Tensor, 'Cens'], group_idx: Selector,",
      "24": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Fens], group_idx: Selector,",
      "25": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Descriptor], group_idx: Selector,",
      "26": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Clens], group_idx: Selector,",
      "27": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Core], group_idx: Selector,",
      "28": "def _log_prob_with_subsetting(self, obs: Union[Tensor, cns], group_idx: Selector,",
      "29": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Lex], group_idx: Selector,",
      "30": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Code], group_idx: Selector,",
      "31": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Slack], group_idx: Selector,",
      "32": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Tensor.Syntax], group_idx: Selector,",
      "33": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Tensor.__define], group_idx: Selector,",
      "34": "def _log_prob_with_subsetting(self, obs: Union[Tensor, cEns], group_idx: Selector,",
      "35": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Fn], group_idx: Selector,",
      "36": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Scope], group_idx: Selector,",
      "37": "def _log_prob_with_subsetting(self, obs: TENSOR.COLLECTOR, group_idx: Selector,",
      "38": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Def], group_idx: Selector,",
      "39": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Env], group_idx: Selector,",
      "40": "def _log_prob_with_subsetting(self, obs: Union[Tensor, TENSOR], group_idx: Selector,",
      "41": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Html], group_idx: Selector,",
      "42": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Common], group_idx: Selector,",
      "43": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Control], group_idx: Selector,",
      "44": "def _log_prob_with_subsetting(self, obs: union[Tensor, cens], group_idx: Selector,",
      "45": "def _log_prob_with_subsetting(self, obs: Union[Tensor, SNS], group_idx: Selector,",
      "46": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Context], group_idx: Selector,",
      "47": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Lens], group_idx: Selector,",
      "48": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Constants], group_idx: Selector,",
      "49": "def _log_prob_with_subsetting(self, obs: Union[Tensor, Unicode], group_idx: Selector,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )\n",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_line": "        ('product', unicode),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mozilla-services/socorro",
    "source_filename": "webapp-django/crashstats/crashstats/models.py",
    "target_filename": "webapp-django/crashstats/crashstats/models.py",
    "source_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084^",
    "target_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "predictions": [
      "required_params = ( ('product', unicode), ('version', unicode), )"
    ],
    "correct": false,
    "top_five": {
      "0": "required_params = ( ('product', unicode), ('version', unicode), )",
      "1": "required_params = ( 'product', unicode), ('version', unicode), )",
      "2": "required_params = ( 'product', unicode),'version', unicode, )",
      "3": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode)",
      "4": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode)",
      "5": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode)",
      "6": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode)",
      "7": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode)",
      "8": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode)",
      "9": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product/unicode)",
      "10": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product/unicode),",
      "11": "require_params = ( ('product', unicode), ('version', unicode), )",
      "12": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "13": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product/unicode)",
      "14": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product/unicode),",
      "15": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode),",
      "16": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'products','version', unicode)",
      "17": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'unicode)",
      "18": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "19": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode),",
      "20": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'imports/g, ')",
      "21": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'products','version', unicode)",
      "22": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 10),",
      "23": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product)",
      "24": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode),",
      "25": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'unicode)",
      "26": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'imports)",
      "27": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode),",
      "28": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', ')",
      "29": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode)",
      "30": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode)",
      "31": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'imports/g, ')",
      "32": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode)",
      "33": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 10),",
      "34": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product)",
      "35": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode),",
      "36": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode)",
      "37": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'imports)",
      "38": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode)",
      "39": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode)",
      "40": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, 'product','version', unicode)",
      "41": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version')",
      "42": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product','version', unicode),",
      "43": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode)",
      "44": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, 'product,'version', unicode)",
      "45": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product,'version', ')",
      "46": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, 'product,'version', unicode)",
      "47": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode)",
      "48": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, 'product, 'unicode)",
      "49": "required_params = ( ('product', unicode), ('version', unicode), ).replace(/ ^ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, 'product, 'unicode)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)\n\n",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_line": "        return StarType(type, line)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `line` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/parsetype.py",
    "target_filename": "mypy/parsetype.py",
    "source_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7^",
    "target_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "predictions": [
      "type = self.parse_type() return StarType(type, line)"
    ],
    "correct": false,
    "top_five": {
      "0": "type = self.parse_type() return StarType(type, line)",
      "1": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "2": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.parse_type)",
      "3": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.tr)",
      "4": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s*)/g, type.parse_type)",
      "5": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse-line)",
      "6": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.de, type.ite, line",
      "7": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "8": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_type)",
      "9": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "10": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "11": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.parse_type)",
      "12": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.n)",
      "13": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "14": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.de, type.",
      "15": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_type.t(type)",
      "16": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse(type)",
      "17": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.",
      "18": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.c)",
      "19": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.tr/g, type.",
      "20": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.de, type.')",
      "21": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.ite(type)",
      "22": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.compile/g, type.",
      "23": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.de)",
      "24": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.)",
      "25": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.tr/g, type.defining",
      "26": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, line)",
      "27": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.includes)",
      "28": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.parse_type.de, type.",
      "29": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_replace(/ \\ s+/g, type.smart_tab_type.trim-line)",
      "30": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.')",
      "31": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.tr/g, type.pr\u0103",
      "32": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.parse_type.n)",
      "33": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s*)/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "34": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.seLeng, type.",
      "35": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "36": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s*)/g, type.smart_replace(/ \\ s*)/g, type.parse_type)",
      "37": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type/g, line",
      "38": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.de, type.');",
      "39": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type))",
      "40": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.g, line",
      "41": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.parse_type)",
      "42": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.tr)",
      "43": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+)/g, type.parse_type)",
      "44": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type)",
      "45": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.tr)",
      "46": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+)/g, type.parse_type)",
      "47": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.parse_type.tr)",
      "48": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ ^ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+)/g, type.parse_type)",
      "49": "type = self.parse_type() return StarType(type).and.replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.smart_replace(/ \\ s+/g, type.parse_type.b)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_line": "    F5_DEVICE_TYPE: {",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "networktocode/pyntc",
    "source_filename": "pyntc/devices/__init__.py",
    "target_filename": "pyntc/devices/__init__.py",
    "source_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9^",
    "target_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "predictions": [
      "}, F5_DEVICE_TYPE_REQUEST: { DEVICE_CLASS_KEY: F5Device,"
    ],
    "correct": false,
    "top_five": {
      "0": "}, F5_DEVICE_TYPE_REQUEST: { DEVICE_CLASS_KEY: F5Device,",
      "1": "}, F5_DEVICE_TYPE_NAME: { DEVICE_CLASS_KEY: F5Device,",
      "2": "}, F5_DEVICE_TYPE_: { DEVICE_CLASS_KEY: F5Device,",
      "3": "}, F5_DEVICE_TYPE: [ { DEVICE_CLASS_KEY: F5Device,",
      "4": "}, F5_DEVICE_TYPE_USER_DETAIL: { DEVICE_CLASS_KEY: F5Device,",
      "5": "}, F5_DEVICE_TYPE_USER_DEFAULT: { DEVICE_CLASS_KEY: F5Device,",
      "6": "}, F5_DEVICE_TYPE_NEW: { DEVICE_CLASS_KEY: F5Device,",
      "7": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ], DEVICE_CLASS_KEY: F5Device,",
      "8": "}, F5_DEVICE_TYPE_UNIFORM: { DEVICE_CLASS_KEY: F5Device,",
      "9": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "10": "}, F5_DEVICE_TYPE_KEY: [ { DEVICE_CLASS_KEY: F5Device,",
      "11": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_SUBJECT, { F5_DEVICE_CLASS_KEY: F5Device,",
      "12": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "13": "}, F5_DEVICE_TYPE_NAV: { DEVICE_CLASS_KEY: F5Device,",
      "14": "}, F5_DEVICE_TYPE_NANO: { DEVICE_CLASS_KEY: F5Device,",
      "15": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ], DEVICE_CLASS_KEY: F5Device,",
      "16": "}, F5_DEVICE_TYPE_KEY: { DEVICE_CLASS_KEY: F5Device,",
      "17": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_ASSETS: [ { F5_DEVICE_TYPE_ASSETS] } ], DEVICE_CLASS_KEY: F5Device,",
      "18": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "19": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ], DEVICE_CLASS_KEY: F5Device,",
      "20": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_SUBJECT], DEVICE_CLASS_KEY: F5Device,",
      "21": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_CLASS_KEY: F5Device,",
      "22": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ] }, F5_DEVICE_CLASS_KEY: F5Device,",
      "23": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_SUBJECT, { F5_DEVICE_CLASS: F5Device,",
      "24": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_CLASS_KEY: F5Device,",
      "25": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_UNIFORM: [ { F5_DEVICE_TYPE_UNIFORM], DEVICE_CLASS_KEY: F5Device,",
      "26": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "27": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { DEVICE_CLASS_KEY: F5Device,",
      "28": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE] } ], DEVICE_CLASS_KEY: F5Device,",
      "29": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ], DEVICE_CLASS_KEY: F5Device,",
      "30": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_NUMBER] } ]; DEVICE_CLASS_KEY: F5Device,",
      "31": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ] }, F5_DEVICE_CLASS_KEY: F5Device,",
      "32": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_SUBJECT] } ], DEVICE_CLASS_KEY: F5Device,",
      "33": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE_NAME: [ { F5_DEVICE_TYPE_NAME] } ]; DEVICE_CLASS_KEY: F5Device,",
      "34": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; F5_DEVICE_CLASS_KEY: F5Device,",
      "35": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_CLASS_KEY: F5Device,",
      "36": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet } ] }, F5_DEVICE_CLASS_KEY: F5Device,",
      "37": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; F5_DEVICE_CLASS_KEY: F5Device,",
      "38": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "39": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "40": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_SUBJECT], DEVICE_CLASS_KEY: F5Device,",
      "41": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_CLASS_KEY: F5Device,",
      "42": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ], DEVICE_CLASS_KEY: F5Device,",
      "43": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "44": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_CLASS] } ], DEVICE_CLASS_KEY: F5Device,",
      "45": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_ASSOCIATION: [ { F5_DEVICE_TYPE] } ]; F5_DEVICE_CLASS_KEY: F5Device,",
      "46": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_SUBMITTED_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "47": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_HDTV, F5_PHONES: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; DEVICE_CLASS_KEY: F5Device,",
      "48": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_Mobile, F5_Tablet, F5_FEVICE_TYPE_SUBJECT: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE_SUBJECT, { F5_DEVICE_CLASS_KEY: F5Device,",
      "49": "}, F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE: [ { F5_DEVICE_TYPE] } ]; F5_DEVICE_CLASS_KEY: F5Device,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DisnakeDev/disnake",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "__slots__ = ('__weakref__',)"
    ],
    "correct": false,
    "top_five": {
      "0": "__slots__ = ('__weakref__',)",
      "1": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "2": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:true,\"wrap-lines\":true } ",
      "3": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:false,\"wrap-lines\":true } ",
      "4": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-line\":true } ",
      "5": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:fa,\"wrap-lines\":true } ",
      "6": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false\",wrap-lines\":true } ",
      "7": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,light:false,\"wrap-lines\":true } ",
      "8": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":6,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "9": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":8,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "10": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"wrap-lines\":true } ",
      "11": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true ^ ",
      "12": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true \\ ",
      "13": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"stri-lines\":true } ",
      "14": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,auto:true,light:false,\"wrap-lines\":true } ",
      "15": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"soft-lines\":true } ",
      "16": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:true,light:true,\"wrap-lines\":true } ",
      "17": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,highlight:false,\"wrap-lines\":true } ",
      "18": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,collapse:false,\"wrap-lines\":true } ",
      "19": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"done } ",
      "20": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"robo-lines\":true } ",
      "21": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"light:false,\"wrap-lines\":true } ",
      "22": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-sizes\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "23": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":3,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "24": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"s\":true } ",
      "25": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\" } } ;",
      "26": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,\"collapse\":false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "27": "if (typeof __slots__ == 'undefined') { type typing.Tuple[str] overrides attribute typing.Tuple[str, str, str, str, str] } __slots__ = ('__weakref__',)",
      "28": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\",\"wrap-lines\":true } ",
      "29": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"strilicate\":true } ",
      "30": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true { ",
      "31": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"str\":true } ",
      "32": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"lighten\":false,\"wrap-lines\":true } ",
      "33": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,auto-links\":true,light:false,\"wrap-lines\":true } ",
      "34": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"d,\"s\":true } ",
      "35": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,collapse:false,\"auto-links\":true,light:true,light:true,\"wrap-lines\":true } ",
      "36": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links\":true,light:false,\"wrap-lines\":true } ",
      "37": "if (typeof __slots__ == 'undefined') { type typing.Tuple[str] extends Object.values(str, str, str, str, str]); __slots__ = ('__weakref__',)",
      "38": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,auto:false,\"wrap-lines\":true } ",
      "39": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"stricle\":true } ",
      "40": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"boole\":true } ",
      "41": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\" } ; }",
      "42": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } \"s\":true } ",
      "43": "if (typeof __slots__ == 'undefined') { type typing.Tuple[str] includes: function(str, str, str, str, str] { __slots__ = ('__weakref__',)",
      "44": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-linking\":true,light:false,\"wrap-lines\":true } ",
      "45": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"wrap-lines\":true } ",
      "46": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\",\"s\":true } ",
      "47": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\":true,light:true,light:false,\"wrap-lines\":true } ",
      "48": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"w-lines\":true } ",
      "49": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,light:true,light:true,light:false,\"wrap-lines\":true } "
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def get_node_type(self) -> Optional[str]:\n        return 'IpAddress'\n",
    "target_code": "\n    def get_node_type(self) -> str:\n        return 'IpAddress'\n",
    "warning_line": "    def get_node_type(self) -> Optional[str]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `grapl_analyzerlib.nodes.ip_address_node.IpAddressView.get_node_type` overrides method defined in `DynamicNodeView` inconsistently. Returned type `typing.Optional[str]` is not a subtype of the overridden return `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 125,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "grapl-security/grapl",
    "source_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "target_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "source_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551^",
    "target_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551",
    "predictions": [
      "def get_node_type(self) -> Optional[str]: return 'IpAddress'"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_node_type(self) -> Optional[str]: return 'IpAddress'",
      "1": "def get_node_type(self) -> IpAddressView.get_node_type return 'IpAddress'",
      "2": "def get_node_type(self) -> DynamicNodeView.get_node_type return 'IpAddress'",
      "3": "def get_node_type(self) -> BasicNodeView.get_node_type return 'IpAddress'",
      "4": "def get_node_type(self) -> Basic[str]: return 'IpAddress'",
      "5": "def get_node_type(self) -> Normal[str]: return 'IpAddress'",
      "6": "def get_node_type(self) -> Standard[str]: return 'IpAddress'",
      "7": "def get_node_type(self) -> Immutable(self.ip_address_node.IpAddressView): return 'IpAddress'",
      "8": "def get_node_type(self) -> BasicNodeView[str]: return 'IpAddress'",
      "9": "def get_node_type(self) -> IpAddressView.get_node_type: return 'IpAddress'",
      "10": "def get_node_type(self) -> Intermediate[str]: return 'IpAddress'",
      "11": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "12": "def get_node_type(self) -> DynamicNodeView.get_node_type: return 'IpAddress'",
      "13": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "14": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "15": "def get_node_type(self) -> Automatic[str]: return 'IpAddress'",
      "16": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "17": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "18": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "19": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "20": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "21": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "22": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "23": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "24": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "25": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "26": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "27": "def get_node_type(self) -> BasicNodeView.get_node_type: return 'IpAddress'",
      "28": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "29": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "30": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "31": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "32": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "33": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '');",
      "34": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "35": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "36": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "37": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "38": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "39": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "40": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '');",
      "41": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "42": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "43": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '');",
      "44": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "45": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '').replace(/ ^ n/g, '');",
      "46": "def get_node_type(self) -> Immutable(self.ip_address_node.IpAddressView).type = \"functional\" overrides method defined in DynamicNodeView inconsistently. Return str + self.ip_address_node_type; }",
      "47": "def get_node_type(self) -> Optional.node_type: return 'IpAddress'",
      "48": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, ''); return 'IpAddress';",
      "49": "def get_node_type(self) -> LegitimateNodeView(self).get_node_type().replace(/ ^ n/g, '').replace(/ \\ n/g, '').replace(/ ^ n/g, '').replace(/ \\ n/g, ''); return 'IpAddress';"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n\n",
    "target_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        return None\n\n",
    "warning_line": "    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 105,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ciphey/Ciphey",
    "source_filename": "ciphey/basemods/Crackers/hash.py",
    "target_filename": "ciphey/basemods/Crackers/hash.py",
    "source_changeid": "5544e945c591d063a2541fd40991c1f81b729575^",
    "target_changeid": "5544e945c591d063a2541fd40991c1f81b729575",
    "predictions": [
      "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass"
    ],
    "correct": false,
    "top_five": {
      "0": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass",
      "1": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]]",
      "2": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "3": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "4": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) } return Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "5": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "6": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "7": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]]",
      "8": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "9": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]",
      "10": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "11": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) } return Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "12": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]]",
      "13": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ConfigurableModule, Optional[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "14": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) } return Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "15": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "16": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) }",
      "17": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "18": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "19": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "20": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.iface._modules.ConfigurableModule, ciphey.basemods.Crackers.hash.HashBuster.getParams)",
      "21": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ConfigurableModule, Optional[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]",
      "22": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) } return Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "23": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]]",
      "24": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]",
      "25": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]",
      "26": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passInModule(ciphey.iface._modules.ConfigurableModule, ciphey.basemods.Crackers.hash.HashBuster.getParams)",
      "27": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "28": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[str, Any]",
      "29": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) } return Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "30": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "31": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[str, Any]]",
      "32": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "33": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]] pass in [ciphey.iface._modules.ConfigurableModule, ciphey.basemods.Crackers.hash.HashBuster.getParams]]",
      "34": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]",
      "35": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ConfigurableModule, Optional[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "36": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]",
      "37": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ParamSpec]) } return Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "38": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.ConfigurableModule, Optional[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]",
      "39": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "40": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "41": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "42": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "43": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[s, Any]]",
      "44": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "45": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]",
      "46": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "47": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Optional[Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st[st, Any]]",
      "48": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: passIn(ciphey.basemods.Crackers.hash.HashBuster.getParams(), ciphey.iface._modules.ConfigurableModule, ciphey.iface._modules.BaseModule, Dict[str, Dict[st[st[st[st[st[st[st[st[st[st[st[st[st[st",
      "49": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass in[ciphey.iface._modules.ConfigurableModule, ciphey.basemods.Crackers.hash.HashBuster.getParams]]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nextcord/nextcord",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "__slots__ = ('__weakref__',)"
    ],
    "correct": false,
    "top_five": {
      "0": "__slots__ = ('__weakref__',)",
      "1": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "2": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:true,\"wrap-lines\":true } ",
      "3": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:false,\"wrap-lines\":true } ",
      "4": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-line\":true } ",
      "5": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:fa,\"wrap-lines\":true } ",
      "6": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false\",wrap-lines\":true } ",
      "7": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,light:false,\"wrap-lines\":true } ",
      "8": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":6,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "9": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":8,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "10": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"wrap-lines\":true } ",
      "11": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true ^ ",
      "12": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true \\ ",
      "13": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"stri-lines\":true } ",
      "14": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,auto:true,light:false,\"wrap-lines\":true } ",
      "15": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"soft-lines\":true } ",
      "16": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:true,light:true,\"wrap-lines\":true } ",
      "17": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,highlight:false,\"wrap-lines\":true } ",
      "18": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,collapse:false,\"wrap-lines\":true } ",
      "19": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"done } ",
      "20": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"robo-lines\":true } ",
      "21": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"light:false,\"wrap-lines\":true } ",
      "22": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-sizes\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "23": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":3,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "24": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"s\":true } ",
      "25": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\" } } ;",
      "26": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,\"collapse\":false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "27": "if (typeof __slots__ == 'undefined') { type typing.Tuple[str] overrides attribute typing.Tuple[str, str, str, str, str] } __slots__ = ('__weakref__',)",
      "28": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\",\"wrap-lines\":true } ",
      "29": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"strilicate\":true } ",
      "30": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true { ",
      "31": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"str\":true } ",
      "32": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"lighten\":false,\"wrap-lines\":true } ",
      "33": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,auto-links\":true,light:false,\"wrap-lines\":true } ",
      "34": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"d,\"s\":true } ",
      "35": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,collapse:false,\"auto-links\":true,light:true,light:true,\"wrap-lines\":true } ",
      "36": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links\":true,light:false,\"wrap-lines\":true } ",
      "37": "if (typeof __slots__ == 'undefined') { type typing.Tuple[str] extends Object.values(str, str, str, str, str]); __slots__ = ('__weakref__',)",
      "38": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,auto:false,\"wrap-lines\":true } ",
      "39": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"stricle\":true } ",
      "40": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"boole\":true } ",
      "41": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\" } ; }",
      "42": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } \"s\":true } ",
      "43": "if (typeof __slots__ == 'undefined') { type typing.Tuple[str] includes: function(str, str, str, str, str] { __slots__ = ('__weakref__',)",
      "44": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-linking\":true,light:false,\"wrap-lines\":true } ",
      "45": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"wrap-lines\":true } ",
      "46": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\",\"s\":true } ",
      "47": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\":true,light:true,light:false,\"wrap-lines\":true } ",
      "48": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"w-lines\":true } ",
      "49": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,light:true,light:true,light:false,\"wrap-lines\":true } "
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock}\n",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_line": "    subscription_msg_types = {commands.NewBlock}",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 6,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/trinity",
    "source_filename": "trinity/protocol/eth/monitors.py",
    "target_filename": "trinity/protocol/eth/monitors.py",
    "source_changeid": "ad61361109f7df88eb807a543191d491e76eed0c^",
    "target_changeid": "ad61361109f7df88eb807a543191d491e76eed0c",
    "predictions": [
      "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock }"
    ],
    "correct": false,
    "top_five": {
      "0": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock }",
      "1": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock }",
      "2": "class ETHChainTipMonitor(BaseChainTipMonitor): override attribute p2p.peer.PeerSubscriber = { subscription_msg_types = { commands.NewBlock }",
      "3": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subscription_msg_types = { commands.NewBlock }",
      "4": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; subtype p2p.peer.PeerSubscriber = type === typing.Set[typing.Type[commands.NewBlock]] }",
      "5": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } class ETHChainTipMonitor (BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock }",
      "6": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } class ETHChainTipMonitor = BaseChainTipMonitor;",
      "7": "class ETHChainTipMonitor(BaseChainTipMonitor): overrides attribute p2p.peer.PeerSubscriber = { subscription_msg_types = { commands.NewBlock }",
      "8": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types }",
      "9": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subtypes: subscription_msg_types } ;",
      "10": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.type === 'type' : override(type, p2p.peer.PeerSubscriber));",
      "11": "class ETHChainTipMonitor(BaseChainTipMonitor): override attribute p2p.peer.PeerSubscriber defined in p2p.peer.UserSubscriber } subscription_msg_types = { commands.NewBlock }",
      "12": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { type: typing.Set[typing.Type[commands.NewBlock]] }",
      "13": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subtypes: subscription_msg_types }",
      "14": "class ETHChainTipMonitor(BaseChainTipMonitor): overrides attribute p2p.peer.PeerSubscriber defined in p2p.peer.UserSubscriber } subscription_msg_types = { commands.NewBlock }",
      "15": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type === p2p.peer.PeerSubscriber)",
      "16": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.Type === 'type' : override(type, p2p.peer.PeerSubscriber));",
      "17": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types = p2p.peer.PeerSubscriber)",
      "18": "class ETHChainTipMonitor(BaseChainTipMonitor): overrides attribute p2p.peer.PeerSubscriber defined in p2p.peer.SelectCommand } subscription_msg_types = { commands.NewBlock }",
      "19": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type, p2p.peer.PeerSubscriber)",
      "20": "class ETHChainTipMonitor(BaseChainTipMonitor): SOFTWAIT_TYPE_MONITOR = p2p.peer.PeerSubscriber; subscription_msg_types = { commands.NewBlock }",
      "21": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(typeof subscription_msg_types ==='string')",
      "22": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.type === 'type' : override(type, p2p.peer.PeerSubscriber).default();",
      "23": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types = p2p.peer.PeerSubscriber);",
      "24": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.Name === 'name' : subscription_msg_types.Name);",
      "25": "class ETHChainTipMonitor(BaseChainTipMonitor): overrides attribute p2p.peer.PeerSubscriber defined in p2p.peer.SelectCommand { subscription_msg_types = { commands.NewBlock }",
      "26": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } class ETHChainTipMonitor = BaseChainTipMonitor()",
      "27": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; return class ETHChainTipMonitor(BaseChainTipMonitor)",
      "28": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type === 'p2p.peer.PeerSubscriber')",
      "29": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.type === 'type' : override(type, p2p.peer.PeerSubscriber).default : {",
      "30": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.Type === 'type' : override(type, p2p.peer.PeerSubscriber).default();",
      "31": "class ETHChainTipMonitor(BaseChainTipMonitor): subscriber.subscriber = typeof subscription_msg_type === 'type' && subscription_msg_types.length === 0; }",
      "32": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subscription_msg_types: subscription_msg_types }",
      "33": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; subtype p2p.peer.PeerSubscriber = ETHChainTipMonitor.SerializeSubscriptionBlock(subscription_msg_types)",
      "34": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { types.NewBlock }",
      "35": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.Type === 'type' : override(type, p2p.peer.PeerSubscriber).default : {",
      "36": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subscription_msg_types: subscription_msg_types } ;",
      "37": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.Type === 'type' : override(type, p2p.peer.PeerSubscriber)",
      "38": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type' && p2p.peer.PeerSubscriber);",
      "39": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.type === 'type' : override(type, p2p.peer.PeerSubscriber)",
      "40": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subscription_msg_types: subscription, type: typing.Set[typing.Type[commands.NewBlock]] }",
      "41": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ;",
      "42": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types ==='string')",
      "43": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.type === 'type' : override(type, p2p.peer.PeerSubscriber);",
      "44": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber = { subscription_msg_types: subscription, type: typing.Set[typing.Type[commands.NewBlock]] }",
      "45": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; this._subscription_msg_types = p2p.peer.PeerSubscriber;",
      "46": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; subtype p2p.peer.PeerSubscriber = type === typing.Set[typing.Type[commands.NewBlock]];",
      "47": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } class ETHChainTipMonitor = BaseChainTipMonitor(subscription_msg_types)",
      "48": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override(type of subscription_msg_types === 'type'? subscription_msg_types.type ==='string')",
      "49": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock } ; override attribute p2p.peer.PeerSubscriber defined in p2p.peer.UserSubscriber }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
    "target_code": "\n    def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        if not self.parallel:\n",
    "warning_line": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allenact",
    "source_filename": "rl_habitat/habitat_preprocessors.py",
    "target_filename": "rl_habitat/habitat_preprocessors.py",
    "source_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c^",
    "target_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "predictions": [
      "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:"
    ],
    "correct": false,
    "top_five": {
      "0": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "1": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device",
      "2": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device: torch.device",
      "3": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device: torch.device",
      "4": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device: torch.device",
      "5": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device",
      "6": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device)",
      "7": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device",
      "8": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device)",
      "9": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":devicesnetPreProcessor: torch.device.device.device\": torch.device",
      "10": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device)",
      "11": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device\": torch.device",
      "12": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device.synchronousDispatchPreprocessor\":device.synchronousDispatchPreprocessor\": torch.device.device.device.device.device.device.device.device.device.device: torch.device",
      "13": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.",
      "14": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device.device: torch.device",
      "15": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device.device",
      "16": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device.device: torch.device",
      "17": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device.device",
      "18": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device",
      "19": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device: torch.device",
      "20": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device.device) {",
      "21": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device.device.device: torch.device",
      "22": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device.device:",
      "23": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device.device: torch.device",
      "24": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"synchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device",
      "25": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: torch.device.device.device.device",
      "26": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel: torch.device.device.device.device",
      "27": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device: torch.device",
      "28": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: device: torch.device.device.device",
      "29": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.",
      "30": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device.device.device\": torch.device",
      "31": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device.device: device: torch.device",
      "32": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device.device.device\":",
      "33": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: torch.device.device.device.device.device",
      "34": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: torch.device.device.device.device.device: torch.device",
      "35": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device\":device",
      "36": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: torch.device.device.device.device: torch.device",
      "37": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: device: torch.device.device.device.device",
      "38": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device.",
      "39": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device.device.device: torch.device",
      "40": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device\":",
      "41": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device.device:",
      "42": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel: torch.device.device.device.",
      "43": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device.synchronousDispatchPreprocessor\":device.synchronousDispatchPreprocessor\": torch.device.device.device.device.device.device.device\": torch.device.device: torch.device",
      "44": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device\": torch.device",
      "45": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel: device: torch.device.device",
      "46": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device\": torch.device",
      "47": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":device: torch.device.device.device.device.device\": torch.device:device",
      "48": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:device.device.device.device.device.device: torch.device",
      "49": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"SynchronousDispatchPreProcessor\":def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":if not self.parallel:device.device.device.device.device.device.device"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: str = None,\n    ):\n",
    "target_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):\n",
    "warning_line": "        method_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " method_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 605,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, ):"
    ],
    "correct": false,
    "top_five": {
      "0": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, ):",
      "1": "capture_error: Optional[Union[bool, str]] = None, method_name: str, ):",
      "2": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||)",
      "3": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||')",
      "4": "capture_error: Optional[Union[bool, str]] = None, method_name: str = null, ):",
      "5": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||||)",
      "6": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||||')",
      "7": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)?|isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?: null)",
      "8": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||)",
      "9": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||$)",
      "10": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||)",
      "11": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||')",
      "12": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||)",
      "13": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)?|isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?: null))",
      "14": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||$))",
      "15": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)?|isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?: null)) { )",
      "16": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||$))",
      "17": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|$))",
      "18": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||'))",
      "19": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||$))",
      "20": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||))",
      "21": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isStr(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||')",
      "22": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||')",
      "23": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||$)",
      "24": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||))",
      "25": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)?|isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?: null)) { ;",
      "26": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||))",
      "27": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||')",
      "28": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isStr(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||||')",
      "29": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isStr(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||)",
      "30": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||||)",
      "31": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||$)",
      "32": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||))",
      "33": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||||')",
      "34": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? || isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||||')",
      "35": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||$)",
      "36": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||))",
      "37": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||'))",
      "38": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? || isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||||)",
      "39": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||||$)",
      "40": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? || isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||')",
      "41": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isStr(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||||)",
      "42": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(!======')",
      "43": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isStr(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||||')",
      "44": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||$))",
      "45": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)?|isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?: null) { )",
      "46": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||||||'))",
      "47": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?$))",
      "48": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?|||||||'))",
      "49": "capture_error: Optional[Union[bool, str]] = None, method_name: str = None, _(?:isNone(str)? ||!isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?:isNone(?||$)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        usertags: list = [],\n        configure_timeout: str = 10,\n    ) -> dict:\n",
    "target_code": "        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:\n",
    "warning_line": "        configure_timeout: str = 10,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " configure_timeout is declared to have type `str` but is used as type `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "adw0rd/instagrapi",
    "source_filename": "instagrapi/igtv.py",
    "target_filename": "instagrapi/igtv.py",
    "source_changeid": "0344324a593097604ea701186dc17afb977245f0^",
    "target_changeid": "0344324a593097604ea701186dc17afb977245f0",
    "predictions": [
      "usertags: list = [], configure_timeout: str = 10, usertags: list = [] ) -> dict:"
    ],
    "correct": false,
    "top_five": {
      "0": "usertags: list = [], configure_timeout: str = 10, usertags: list = [] ) -> dict:",
      "1": "usertags: list = [], configure_timeout: str = 10, usertags: list, config_timeout: str, ) -> dict:",
      "2": "usertags: list = [], configure_timeout: str, _current_timeout: null, ) -> dict:",
      "3": "usertags: list = [], configure_timeout: str, _current_timeout: _current_timeout } ) -> dict:",
      "4": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: config.timeout, ) -> dict:",
      "5": "usertags: list = [], configure_timeout: str = 10, usertags: [] ) -> dict:",
      "6": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _current_timeout: config.current_timeout, ) -> dict:",
      "7": "usertags: list = [], configure_timeout: str = 10, usertags: list, config_timeout: config.timeout, ) -> dict:",
      "8": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str = 10, usertags: list = [] ) -> dict:",
      "9": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _current_timeout: config.timeout, ) -> dict:",
      "10": "usertags: list = [], configure_timeout: str, _current_timeout: str, _filtered_timeout: null, ) -> dict:",
      "11": "usertags: list = [], configure_timeout: str = 10, usertags: list, config_timeout: str, _current_timeout: config.timeout, ) -> dict:",
      "12": "usertags: list = [], configure_timeout: str = 10, usertags: list, _self = null; ) -> dict:",
      "13": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _current_timeout: _current_timeout } ) -> dict:",
      "14": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: _.defaults.usertags, configure_timeout: str = 10, config: { usertags: _.defaults.usertags } ) -> dict:",
      "15": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: [] }, configure_timeout: str = 10, usertags: [] } ) -> dict:",
      "16": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: _.defaults.usertags, configure_timeout: str = 10, config: { usertags: _.defaults.usertags }, ) -> dict:",
      "17": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, ) -> dict:",
      "18": "usertags: list = [], configure_timeout: str = 10, usertags: list,...requests: [] } ) -> dict:",
      "19": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: [] }, } ) -> dict:",
      "20": "usertags: list = [], configure_timeout: str, _currentTarget: null,",
      "21": "usertags: list = [], configure_timeout: str, __dirname: __dirname } ) -> dict:",
      "22": "usertags: list = [], configure_timeout: str = 10, usertags: list, _console_reset: function () { return _.defaults( { usertags: [], configure_timeout: str = 10, _console_reset: true } ) -> dict:",
      "23": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: _.defaults.usertags }, configure_timeout: str = 10, usertags: _.defaults.usertags } ) -> dict:",
      "24": "usertags: list = [], configure_timeout: str, __timeout_: null } ) -> dict:",
      "25": "usertags: list = [], configure_timeout: str = 10, usertags: list, _self = null, configure_timeout: str = 10, ) -> dict:",
      "26": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _current_timeout: new Timeout() } ) -> dict:",
      "27": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], disable_timeout: disable_timeout, ) -> dict:",
      "28": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: config_timeout, ) -> dict:",
      "29": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { timeout: str, auto_refresh: false } ) -> dict:",
      "30": "usertags: list = [], configure_timeout: str = 10, usertags: list, _console_log: [] ) -> dict:",
      "31": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _current_timeout: null, ) -> dict:",
      "32": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: [] }, configure_timeout: str = 10, usertags: [] ) -> dict:",
      "33": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _current_timeout: _current_timeout, ) -> dict:",
      "34": "usertags: list = [], configure_timeout: str = 10, usertags: list = [] ) -> dict:",
      "35": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _console_reset: function () { return config.timeouts.str,",
      "36": "usertags: list = [], configure_timeout: str = 10, usertags: () => { } ) -> dict:",
      "37": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: enforce_timeout } ) -> dict:",
      "38": "usertags: list = [], configure_timeout: str = 10, usertags: list, config_timeout: config_timeout, ) -> dict:",
      "39": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], auto_refresh: false } ) -> dict:",
      "40": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { timeout: str, auto_refresh: false }, } ) -> dict:",
      "41": "usertags: list = [], configure_timeout: str = 10, usertags: list, auto_refresh: false } ) -> dict:",
      "42": "usertags: list = [], configure_timeout: str = 10, usertags: list = [] } ) -> dict:",
      "43": "usertags: list = [], configure_timeout: str = 10, users: list = [] ) -> dict:",
      "44": "usertags: list = [], configure_timeout: str = 10, usertags: list,...usertags ) -> dict:",
      "45": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: [], configure_timeout: str = 10, __dirname: '/../../../../src' } ) -> dict:",
      "46": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { usertags: [], configure_timeout: str = 10, __dirname: '/../../../src' } ) -> dict:",
      "47": "usertags: list = [], configure_timeout: str = 10, usertags: list, config_timeout: str, } ) -> dict:",
      "48": "usertags: list = [], configure_timeout: str = 10, usertags: list, config: { timeout: str, auto_refresh: false }, ) -> dict:",
      "49": "usertags: list = [], configure_timeout: str = 10, usertags: list = [], config_timeout: str, _remove_timeout: str, } ) -> dict:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = None,\n    ) -> None:\n",
    "target_code": "        should_archive: bool = True,\n        extra_data: Optional[Dict] = None,\n        dispatch_to: Optional[List[str]] = None,\n    ) -> None:\n",
    "warning_line": "        dispatch_to: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dispatch_to is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 30,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PUNCH-Cyber/stoq",
    "source_filename": "stoq/data_classes.py",
    "target_filename": "stoq/data_classes.py",
    "source_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c^",
    "target_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c",
    "predictions": [
      "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, ) -> None:",
      "1": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if (!List[str].hasOwnProperty('archive')) {",
      "2": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __truthy_to: List[str] = None, ) -> None:",
      "3": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, ) => None:",
      "4": "should_archive: bool = True, extra_data: None, dispatch_to: List[str] = None, ) -> None:",
      "5": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, evt_token: evt_token, ) -> None:",
      "6": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, default_to: List[str] = None, ) -> None:",
      "7": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, vood_to: List[str] = None, ) -> None:",
      "8": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if(!List[str].hasOwnProperty('archive')) {",
      "9": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if (!List[str].is_undefined && typeof List[str] === 'undefined') {",
      "10": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../index.js',",
      "11": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if (!List[str].hasOwnProperty('index')) {",
      "12": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../index.js',",
      "13": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, _cursor_to: List[str] = None, ) -> None:",
      "14": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../../index.js',",
      "15": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __true__: true,",
      "16": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../../index.js',",
      "17": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../index.js',",
      "18": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../../../index.js',",
      "19": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../index.html',",
      "20": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, vood_to: None, ) -> None:",
      "21": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../../index.html',",
      "22": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../index.html',",
      "23": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, ), ) -> None:",
      "24": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, err_to_query: err_to_query, ) -> None:",
      "25": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../index.js',",
      "26": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __true__: dispatch_to, ) -> None:",
      "27": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, err_to_call: err_to_call, ) -> None:",
      "28": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../lib/dict_dir',",
      "29": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if (!List[str].is_undefined && typeof list[str] === 'undefined') {",
      "30": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../../../index.js',",
      "31": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../../index.html',",
      "32": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../lib/dict_dir',",
      "33": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = List[str];",
      "34": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../lib/dict_dir',",
      "35": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if (!List[str].is_undefined()) return true,",
      "36": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, env: List[str], ctx: None,",
      "37": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, uuid: uuid, ) -> None:",
      "38": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../../../index.html',",
      "39": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, default_archive_to: List[str] = None, ) -> None:",
      "40": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../data/dict',",
      "41": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../../../index.html',",
      "42": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, default_to: None, ) -> None:",
      "43": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, if (!List[str].hasOwnProperty('archive')) return true,",
      "44": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../lib/dist/index.html',",
      "45": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../index.html',",
      "46": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../lib/dist/index.html',",
      "47": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../../../../index.js',",
      "48": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname_: '/../../../../lib/dict_dir',",
      "49": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: List[str] = None, __dirname = '/../../../../../data/dict',"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n    \"\"\"Initiates Flask web service with Alexa skill.\n\n",
    "target_code": "                     https: bool = False,\n                     ssl_key: Optional[str] = None,\n                     ssl_cert: Optional[str] = None) -> None:\n    \"\"\"Initiates FastAPI web service with Alexa skill.\n\n",
    "warning_line": "                     ssl_cert: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " ssl_cert is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 89,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/utils/alexa/server.py",
    "target_filename": "deeppavlov/utils/alexa/server.py",
    "source_changeid": "0f32759c67ea961737a6538fd37426f564bae925^",
    "target_changeid": "0f32759c67ea961737a6538fd37426f564bae925",
    "predictions": [
      "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key();"
    ],
    "correct": false,
    "top_five": {
      "0": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key();",
      "1": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus(false) } ;",
      "2": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSLKey();",
      "3": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key(str)",
      "4": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilent('ssl')",
      "5": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key(str) } ;",
      "6": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSslCert(str)",
      "7": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSslKey();",
      "8": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilent('ssl key') } ;",
      "9": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSessionKey();",
      "10": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Certificate();",
      "11": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilent('ssl key')\"",
      "12": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Certificate(str)",
      "13": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key(str) } )",
      "14": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkill('ssl key') } ;",
      "15": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfElement();",
      "16": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilent('ssl key') } )",
      "17": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilent('ssl key')",
      "18": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus(false) }.bind(this))",
      "19": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSslKey(str)",
      "20": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key(str) }.bind(this))",
      "21": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus(false) { ;",
      "22": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus(false) } )",
      "23": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfTest();",
      "24": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfServerCertification();",
      "25": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkill('amazon_url')",
      "26": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilent();",
      "27": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfId();",
      "28": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key() }.bind(this))",
      "29": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL key(str) } ;",
      "30": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkill('ssl')",
      "31": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSession();",
      "32": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfLocalCert(str)",
      "33": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL key() }.bind(this))",
      "34": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSLKey() }.bind(this))",
      "35": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfServiceURL();",
      "36": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSilentClient();",
      "37": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkypeCert(str)",
      "38": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkill('ssl key') } )",
      "39": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Key()",
      "40": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL Certificate(str) } ;",
      "41": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfServerCert(str)",
      "42": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSelfPath();",
      "43": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus(false) } \"\"",
      "44": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL key(str) } )",
      "45": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSSL key(str) }.bind(this))",
      "46": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus('SSL')",
      "47": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getStatus(false) { )",
      "48": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkill('Alexa')",
      "49": "https: bool = False, ssl_key: str = None, ssl_cert: str = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.getSkill('ssl key') }.bind(this))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def message(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 332,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "1": "self.lines.append(line) def note(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "2": "self.lines.append(line) def message(self, target: str, message: str, tags dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "3": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "4": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "5": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)); def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "6": "self.lines.append(line) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "7": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "8": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "9": "self.lines.append(line) def message(self, target: str, message: str, tags: dict = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "10": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "11": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "12": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=NONE): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "13": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=NONE): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "14": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "15": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)); def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags));",
      "16": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags));",
      "17": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "18": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "19": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None):self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "20": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "21": "self.lines.append(line) def message(self, target: str, message: str, tags: dict = 'Any'): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "22": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None ) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "23": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "24": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tag)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "25": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=none): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "26": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict==None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "27": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict==None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "28": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=none): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "29": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))",
      "30": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(util.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "31": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)));",
      "32": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None):self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "33": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def note(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "34": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)).def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "35": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))))",
      "36": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tag))",
      "37": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags)))",
      "38": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "39": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "40": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "41": "self.lines.append(line) def Message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "42": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "43": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None, source: ''): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "44": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))));",
      "45": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "46": "self.liners.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "47": "self.lines.append(line) def message(self, target: str, message: str and tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "48": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: diction=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "49": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)));"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
    "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
    "warning_line": "        labels: typing.Iterable[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 476,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, options: [] } ):"
    ],
    "correct": false,
    "top_five": {
      "0": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, options: [] } ):",
      "1": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, options: []",
      "2": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None ):",
      "3": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, options: [",
      "4": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicators: [*, multiplicators] } ):",
      "5": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = Null ):",
      "6": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, return $ { str } ",
      "7": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, res: res, labels: typing.Iterable[str] = None, error: str = None } ):",
      "8": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicative: false } ):",
      "9": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicateurs: [*, multiplicateurs] ):",
      "10": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = ret || null",
      "11": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "12": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = errors.length - 1",
      "13": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicateurs: [*, multiplicateurs] } ):",
      "14": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, return!!isIterable(str)",
      "15": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicative: True,",
      "16": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = Null, defaultValue: ''",
      "17": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "18": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "19": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, return!isIterable(str)",
      "20": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = 0 } ):",
      "21": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicateurs: [*, multiplicators] } ):",
      "22": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, successes: [] } ):",
      "23": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '');",
      "24": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = void 0",
      "25": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = Null, correct: str = Null } ):",
      "26": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, res: res, labels: typing.Iterable[str] = None,",
      "27": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = void 0",
      "28": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, type: 'String' } ):",
      "29": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, correct: str ):",
      "30": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, return ret? (ret[1] : ret[2]) : ret[1]",
      "31": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "32": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '');",
      "33": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "34": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, ''),",
      "35": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = Nothing } ):",
      "36": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = null ):",
      "37": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, return: true",
      "38": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicateurs: [*, multiplicateurs] { ):",
      "39": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "40": "choices: typing.Iterable, labels: typing.Iterable[str] = None, *, error: str = None, res: res, labels: typing.Iterable[str] = None, error: str = None } ):",
      "41": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = ret || ( ret[0]? ret[1] : ret[2] ):",
      "42": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '');",
      "43": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, multiplicateurs: [*, ++] } ):",
      "44": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, return ret? (ret[0] : ret[1]) : ret[1]",
      "45": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, ''),",
      "46": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "47": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace('Iterable, ''')",
      "48": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, ret = mistakes.replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "49": "choices: typing.Iterable, labels: typing.Iterable[str] = None, error: str = None, res: res, labels: typing.Iterable[str] = false, error: str = None } ):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "target_code": "\ndef message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_line": "def notice(target: str, message: str, tags: dict=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)"
    ],
    "correct": false,
    "top_five": {
      "0": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "1": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine':",
      "2": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "3": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "4": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine':",
      "5": "def notice(target: str, message: str, tags: dict=None: return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine':",
      "6": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags);",
      "7": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags)",
      "8": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.DBarsedLine':",
      "9": "def notice(target: str, message: str, tags: dict=None: def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "10": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags)",
      "11": "def notice(target: str, message: str, tags: dict=None: return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags)",
      "12": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags);",
      "13": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message])",
      "14": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "15": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': def notice(target: str, message: str, tags: dict=None ) def notice(target: str, message: str, tags: dict=None )",
      "16": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.parsedLine(utils.irc.PRIVMSG, [target, message], tags=tags)",
      "17": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags);",
      "18": "def notice(target: str, message: str, tags: dict=None: return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=None)",
      "19": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags);",
      "20": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "21": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'irc.utils.irc.IRCParsedLine':",
      "22": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.parsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "23": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': def notice(target: str, message: str, tags: dict=None ) def notice(target: str, message: str, tags : dict=None)",
      "24": "def notice(target: str, message: str, tags: dict=None: return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=None])",
      "25": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.utils.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "26": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': def notice(target: str, message: str, tags: dict=None ) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.irc.IRCParsedLine':",
      "27": "def notice(target: str, message: str, tags: dict=None: return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.parsedLine(utils.irc.PRIVMSG, [target, message])",
      "28": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': def notice(target: str, message: str, tags: dict=None ) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.irc.irc.IRCParsedLine':",
      "29": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': def notice(target: str, message: str, tags: dict=None ) def notice(target: str, message: str, tags : dict=None )",
      "30": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': def notice(target: str, message: str, tags: dict=None ) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.irc.irc.IRCParsedLine')",
      "31": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine.splice(target, message, tags)",
      "32": "def notice(target: str, message: str, tags: dict=None: return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags)",
      "33": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.ARCReader':",
      "34": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.parsedLine(utils.irc.PRIVMSG, [target, message], tags)",
      "35": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message, tags])",
      "36": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"primSG\", [target, message], tags=tags)",
      "37": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.DBarsedLine': return irc.DBarsedLine(target, message)",
      "38": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.DBarsedLine': return irc.DBarsedLine(\"PRIVMSG\", [target, message])",
      "39": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "40": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags dict=None)",
      "41": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags, dict=None)",
      "42": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PrimSG\", [target, message], tags=tags)",
      "43": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PrimSG\", [target, message], tags=tags)",
      "44": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(utils.irc.PRIVMSG, [target, message], tags=tags)",
      "45": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)",
      "46": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return irc.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags, dict=None)",
      "47": "return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags]=None)",
      "48": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.DBarsedLine': return irc.DBarsedLine(\"PRIVMSG\", [target, message], tags)",
      "49": "def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: dict=None ) -> 'utils.irc.DBARsedLine':"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_line": "                                       immutable_features: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 677,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SeldonIO/alibi",
    "source_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "target_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60^",
    "target_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "predictions": [
      "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False) -> List[np.ndarray]:"
    ],
    "correct": false,
    "top_five": {
      "0": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False) -> List[np.ndarray]:",
      "1": "category_map: Dict[int, List[str]], diverse=False) -> List[np.ndarray]:",
      "2": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str] -> List[np.ndarray]:",
      "3": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[np.ndarray] -> List[np.ndarray]:",
      "4": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: null, -> List[np.ndarray]:",
      "5": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features =!dim_features, mutable_features: List[str] = None, diverse=False) -> List[np.ndarray]:",
      "6": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[np.ndarray] -> List[np.ndarray]: null,",
      "7": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_feature_map: Dict[int, List[str]], -> List[np.ndarray]: true,",
      "8": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, enforce_nonmutable_features: null, -> List[np.ndarray]:",
      "9": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true) -> List[np.ndarray]:",
      "10": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true_color: Dict.blackmagic() } ) -> List[np.ndarray]:",
      "11": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features =!dim_features",
      "12": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, audit_features: Dict[str] = None, -> List[np.ndarray]:",
      "13": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true_color: Dict.blackmagic() -> List[np.ndarray]:",
      "14": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features =!!dim_features, mutable_features: List[str] = None, diverse=False) -> List[np.ndarray]:",
      "15": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true_color: Dict.blackmagenta, -> List[np.ndarray]:",
      "16": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, enforce_restrictions: Dict[str], -> List[np.ndarray]:",
      "17": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, enforce_restrictions: null, -> List[np.ndarray]:",
      "18": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, open_source_map: Dict[np.ndarray] -> List[np.ndarray]:",
      "19": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str], on_remove_features: Dict[str] } ) -> List[np.ndarray]:",
      "20": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true_color: Dict[int].black, true_color: Dict[int].black, diverse=False) -> List[np.ndarray]:",
      "21": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, open_source_map: Dict[str], -> List[np.ndarray]:",
      "22": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, open_source_map: Dict[int, List[str]], -> List[np.ndarray]:",
      "23": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true_color: Dict.blackmagic(), -> List[np.ndarray]:",
      "24": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, typeof List[str] === 'undefined', } ) -> List[np.ndarray]:",
      "25": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, will_mutate_features() } ) -> List[np.ndarray]:",
      "26": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, checked_features: Dict[str] -> List[np.ndarray]:",
      "27": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true, diverse=Math.random() -> List[np.ndarray]:",
      "28": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str] = None, on_remove_features: Dict[str] = None, diverse=False) -> List[np.ndarray]:",
      "29": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, true_color: Dict[int, str] } ) -> List[np.ndarray]:",
      "30": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[np.ndarray] = null,",
      "31": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features = List[str], true_features = False, true_features = False,",
      "32": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, open_source_map: Dict[np.ndarray] -> List[np.ndarray]: null,",
      "33": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features =!!List[str]",
      "34": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, open_source_map: Dict[np.ndarray] -> List[np.ndarray]: null",
      "35": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=false) -> List[np.ndarray]:",
      "36": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[np.ndarray] -> List[np.ndarray]: [np.ndarray] } ;",
      "37": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, audit_feature_sets: Dict[np.ndarray] } ) -> List[np.ndarray]:",
      "38": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, unmutable_features: List[str] = None, true_features = [], true_features =!dim_features, mutable_features: List[str] = None, diverse=False) -> List[np.ndarray]:",
      "39": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, typeof List[np.ndarray] === 'undefined', } ) -> List[np.ndarray]:",
      "40": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str] = null,",
      "41": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, assert_resolution: Dict[np.ndarray] } ) -> List[np.ndarray]:",
      "42": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features = List[str], true_features = None, diverse=False) -> List[np.ndarray]:",
      "43": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, enforce_compatibility: false, -> List[np.ndarray]:",
      "44": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str] = null, -> List[np.ndarray]:",
      "45": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str], on_remove_features: Dict[str], diverse=False) -> List[np.ndarray]:",
      "46": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, inmutable_features: List[str] = None, true_features = [], true_features =...inmutable_features, diverse=False) -> List[np.ndarray]:",
      "47": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, enforce_restrictions: None, -> List[np.ndarray]:",
      "48": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[np.ndarray] -> List[np.ndarray]: null",
      "49": "category_map: Dict[int, List[str]], immutable_features: List[str] = None, diverse=False, on_remove_features: Dict[str] = None, on_remove_features: Dict[str], diverse=False) -> List[np.ndarray]:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value\n\n",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_line": "            value = str(value)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 211,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/job/query.py",
    "target_filename": "google/cloud/bigquery/job/query.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "if value is not None: value = str(value) self._properties[\"statementByteBudget\"] = value"
    ],
    "correct": false,
    "top_five": {
      "0": "if value is not None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "1": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "2": "def statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "3": "if value is not None: value = str(value) def statement_byte_budget(self, value: Union[int, None]): self._properties[\"statementByteBudget\"] = value",
      "4": "def statement_byte_budget(self, value: Union[int, None]): if value!== None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "5": "def statement_byte_budget(self, value: Union[int, None]): if value == None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "6": "def statement_byte_budget(self, value: Union[int, None]): if value is Not None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "7": "if value is not None: self._statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "8": "if value is not None: value = str(value) def statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "9": "if value is not None: return str(value) self._properties[\"statementByteBudget\"] = value",
      "10": "def statement_byte_budget(self, value: Union[int, None]): def statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "11": "def statement_byte_budget(self, value: Union[int, None]): if value!= null: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "12": "if value is not None: self._properties[\"statementByteBudget\"] = value",
      "13": "def statement_byte_budget(self, value: Union[int, None]): if value IS NOT None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "14": "var value = str(value) def statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "15": "if value is not None: value = str(value) statement_byte_budget(self, value: Union[int, None]): self._properties[\"statementByteBudget\"] = value",
      "16": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) own._properties[\"statementByteBudget\"] = value",
      "17": "def statement_byte_budget(self, value: Union[int, None]): var value = str(value) self._properties[\"statementByteBudget\"] = value",
      "18": "def statement_byte_budget(self, value: Union[int, None]): def statement_byte_budget(self, value) self._properties[\"statementByteBudget\"] = value",
      "19": "if value is not None: value = str(value) def statement_byte_budget(self, value: Union[int, None]) self._properties[\"statementByteBudget\"] = value",
      "20": "def statement_byte_budget(self, value: Union[int, None]): return str(value) self._properties[\"statementByteBudget\"] = value",
      "21": "def statement_byte_budget(self, value: Union[int, None]): values[0] = str(value) self._properties[\"statementByteBudget\"] = value",
      "22": "if value is not None: value = string(value) self._properties[\"statementByteBudget\"] = value",
      "23": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) internal._properties[\"statementByteBudget\"] = value",
      "24": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) selbst._properties[\"statementByteBudget\"] = value",
      "25": "def statement_byte_budget(self, value: Union[int, None]): valeur = str(value) self._properties[\"statementByteBudget\"] = value",
      "26": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value)self._properties[\"statementByteBudget\"] = value",
      "27": "if value is not None: value = str(value) statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "28": "def statement_byte_budget(self, value: Union[int, None]): def statement_byte_budget(self, value = str(value) self._properties[\"statementByteBudget\"] = value",
      "29": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = string(value) self._properties[\"statementByteBudget\"] = value",
      "30": "def statement_byte_budget(self, value: Union[int, None]): def statement_byte_budget(self, value: Union[int]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "31": "def statement_byte_budget(self, value: Union[int, None]): if value!== undefined: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "32": "def statement_byte_budget(self, value: Union[int, None]): const value = str(value) self._properties[\"statementByteBudget\"] = value",
      "33": "def statement_byte_budget(self, value: Union[int, None]): values.push(value) self._properties[\"statementByteBudget\"] = value",
      "34": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) return self._properties[\"statementByteBudget\"] = value",
      "35": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value); self._properties[\"statementByteBudget\"] = value;",
      "36": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) this._properties[\"statementByteBudget\"] = value",
      "37": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) home._properties[\"statementByteBudget\"] = value",
      "38": "def statement_byte_budget(self, value: Union[int, None]): self._properties[\"statementByteBudget\"] = value",
      "39": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value): self._properties[\"statementByteBudget\"] = value",
      "40": "if value is not None: value = str(value) own._properties[\"statementByteBudget\"] = value",
      "41": "def statement_byte_budget(self, value: Union[int, None]): def statement_byte_budget(self, value: Union[int]): self._properties[\"statementByteBudget\"] = value",
      "42": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) auto._properties[\"statementByteBudget\"] = value",
      "43": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value); self._properties[\"statementByteBudget\"] = value",
      "44": "if value is not None: value = str(value) union[int, None] = value self._properties[\"statementByteBudget\"] = value",
      "45": "if value is not None: value = str(value) internal._properties[\"statementByteBudget\"] = value",
      "46": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) self.properties[\"statementByteBudget\"] = value",
      "47": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) yourself._properties[\"statementByteBudget\"] = value",
      "48": "if value is not None: value = str(value) return self._properties[\"statementByteBudget\"] = value",
      "49": "def statement_byte_budget(self, value: Union[int, None]): def statement_byte_budget(self, value: Union[int, None]): self._properties[\"statementByteBudget\"] = value"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def filter(self, predicate: Predicate = None) -> t.List[T]:\n        \"\"\"\n",
    "target_code": "\n    def filter(self, predicate: Predicate) -> t.List[T]:\n        \"\"\"\n",
    "warning_line": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pcah/python-clean-architecture",
    "source_filename": "dharma/domain/repos/in_memory.py",
    "target_filename": "dharma/domain/repos/in_memory.py",
    "source_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e^",
    "target_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "predictions": [
      "def filter(self, predicate: Predicate = None) -> t.List[T]: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def filter(self, predicate: Predicate = None) -> t.List[T]: \"\"\"",
      "1": "def filter(self, predicate: None) -> t.List[T]: \"\"\"",
      "2": "def filter(self) -> t.List[T]: \"\"\"",
      "3": "def filter(self, predicate) -> t.List[T]: \"\"\"",
      "4": "def filter(self, \"\"+predicate) -> t.List[T]: \"\"\"",
      "5": "def filter(self, \"\"\" init) -> t.List[T]: \"\"\"",
      "6": "def filter(self, \"\" + predicate) -> t.List[T]: \"\"\"",
      "7": "def filter(self, \"\"\"!== undefined) -> t.List[T]: \"\"\"",
      "8": "def filter(self, \"\" + predicate = None) -> t.List[T]: \"\"\"",
      "9": "def filter(self, \"\"\" ) -> t.List[T]: \"\"\"",
      "10": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.None) -> t.List[T]: \"\"\"",
      "11": "def filter(self, \"\" + predicate + \"\") -> t.List[T]: \"\"\"",
      "12": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Predicate : None) -> t.List[T]: \"\"\"",
      "13": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.None : None) -> t.List[T]: \"\"\"",
      "14": "def filter(self, \"\" + predicate + \"\" = None) -> t.List[T]: \"\"\"",
      "15": "def filter(self, \"\"\" + predicate = None) -> t.List[T]: \"\"\"",
      "16": "def filter(self, Predicate) -> t.List[T]: \"\"\"",
      "17": "def filter(self, \"\"\"!== predicate? def.predicate(self, \"\"\"!== predicate) -> t.List[T]: \"\"\"",
      "18": "def filter(self, \"\"\" = Predicate) -> t.List[T]: \"\"\"",
      "19": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Filter = None) -> t.List[T]: \"\"\"",
      "20": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.FilterType : None) -> t.List[T]: \"\"\"",
      "21": "def filter(self, \"\"\" inflector) -> t.List[T]: \"\"\"",
      "22": "def filter(self, \"\"\" in predicate) -> t.List[T]: \"\"\"",
      "23": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Function() : None) -> t.List[T]: \"\"\"",
      "24": "def filter(self, \"\" in predicate) -> t.List[T]: \"\"\"",
      "25": "def filter(self, \"\"\"!== predicate? def.predicate : None) -> t.List[T]: \"\"\"",
      "26": "def filter(self, \"\"\"!== predicate) -> t.List[T]: \"\"\"",
      "27": "def filter(self, \"\" + predicate -> t.List[T]): \"\"\"",
      "28": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.NONE) -> t.List[T]: \"\"\"",
      "29": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Predicate = None) -> t.List[T]: \"\"\"",
      "30": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.NodeType : None) -> t.List[T]: \"\"\"",
      "31": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.FullName) -> t.List[T]: \"\"\"",
      "32": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Filter = false) -> t.List[T]: \"\"\"",
      "33": "def filter(self, \"\"+predicate: Predicate = None) -> t.List[T]: \"\"\"",
      "34": "def filter(self, (predicate: Predicate = None) -> t.List[T]): \"\"\"",
      "35": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Predicate : null) -> t.List[T]: \"\"\"",
      "36": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.FilterType.None) -> t.List[T]: \"\"\"",
      "37": "def filter(self, \"\"\" inflect: false, predicate: None) -> t.List[T]: \"\"\"",
      "38": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Filter : None) -> t.List[T]: \"\"\"",
      "39": "def filter(self, () -> t.List[T]: \"\"\"",
      "40": "def filter(self, \"\"!== undefined) -> t.List[T]: \"\"\"",
      "41": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Filter() : None) -> t.List[T]: \"\"\"",
      "42": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Prototype.None) -> t.List[T]: \"\"\"",
      "43": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.FilterType = None) -> t.List[T]: \"\"\"",
      "44": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.FilterType) -> t.List[T]: \"\"\"",
      "45": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Name : None) -> t.List[T]: \"\"\"",
      "46": "def filter(self, \"\"\"!== predicate? def.predicate : null) -> t.List[T]: \"\"\"",
      "47": "def filter(self, \"\"\"!== predicate? def.formulae.predicate.Filter : None) -> t.List[T]: \"\"\"",
      "48": "def filter(self, \"\"\" indicate) -> t.List[T]: \"\"\"",
      "49": "def filter(self, \"\"\" in predicate ) -> t.List[T]: \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2315,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\","
    ],
    "correct": false,
    "top_five": {
      "0": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "1": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "2": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "3": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_id: str = \"google_cloud_default\",",
      "4": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[float], gcp_conn_id: str = \"google_cloud_default\",",
      "5": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"0.0.0.0\", gcp_conn_id: str = \"google_cloud_default\",",
      "6": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "7": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[Sequence[Tuple[str, str]]], gcp_conn_id: str = \"google_cloud_default\",",
      "8": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: None, gcp_conn_id: str = \"google_cloud_default\",",
      "9": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\"login\", gcp_conn_id: str = \"google_cloud_default\",",
      "10": "timeout: Optional[float] = None, metadata: Optional[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "11": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_id: str = \"google_cloud_default\",",
      "12": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"google_cloud_default\", gcp_conn_id: str = \"google_cloud_default\",",
      "13": "timeout: Optional[float] = None, metadata: Optional[Sequence[Structure[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "14": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "15": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultPrefix: str = \"google_cloud_default\", gcp_conn_id: str = \"google_cloud_default\",",
      "16": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"boolean\", gcp_conn_id: str = \"google_cloud_default\",",
      "17": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = None,",
      "18": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = 0,",
      "19": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultMethods: Optional[Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "20": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: false, gcp_conn_id: str = \"google_cloud_default\",",
      "21": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "22": "timeout: Optional[float] = None, metadata: Optional[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "23": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_logout: Optional[float] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "24": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultMethods: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "25": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"100%\", gcp_conn_id: str = \"google_cloud_default\",",
      "26": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_users\"], gcp_conn_id: str = \"google_cloud_default\",",
      "27": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = 1], gcp_conn_id: str = \"google_cloud_default\",",
      "28": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", auto_refresh: false, gcp_conn_id: str = \"google_cloud_default\",",
      "29": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: None, gcp_conn_id: str = \"google_cloud_default\",",
      "30": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "31": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: null, gcp_conn_id: str = \"google_cloud_default\",",
      "32": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_username: Optional[float], gcp_conn_id: str = \"google_cloud_default\",",
      "33": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"google_cloud_default\",",
      "34": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"12345678989\", gcp_conn_id: str = \"google_cloud_default\",",
      "35": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "36": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", auto_setup_id: Optional[float], gcp_conn_id: str = \"google_cloud_default\",",
      "37": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\", password: \"secret\", gcp_conn_id: str = \"google_cloud_default\",",
      "38": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", cache: false, gcp_conn_id: str = \"google_cloud_default\",",
      "39": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, auto_bootloader: false, gcp_conn_id: str = \"google_cloud_default\",",
      "40": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "41": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\"], gcp_conn_id: str = \"google_cloud_default\",",
      "42": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = Null, gcp_conn_id: str = \"google_cloud_default\",",
      "43": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticator\"], gcp_conn_id: str = \"google_cloud_default\",",
      "44": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, auto_refresh: false, gcp_conn_id: str = \"google_cloud_default\",",
      "45": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_id: str = \"google_cloud_default\", gcp_conn_id: str = \"google_cloud_default\",",
      "46": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: null, gcp_conn_id: str = \"google_cloud_default\",",
      "47": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\", password: \"\" } ], gcp_conn_id: str = \"google_cloud_default\",",
      "48": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout = None, gcp_conn_id: str = \"google_cloud_default\",",
      "49": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\", password: Optional[\"authenticate_username\", gcp_conn_id: str = \"google_cloud_default\","
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
    "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
    "warning_line": "                tmpdir_lock=None  # type: threading.Lock",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/command_line_tool.py",
    "target_filename": "cwltool/command_line_tool.py",
    "source_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c^",
    "target_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "predictions": [
      "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None"
    ],
    "correct": false,
    "top_five": {
      "0": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "1": "# type: Threading.Lock, # type: RuntimeContext ): # type: (...) -> None",
      "2": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.bind(null, runtimeContext) # type: (...) -> None",
      "3": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.() ): # type: (...) -> None",
      "4": "# type: threading.Lock: runtimeContext # type: RuntimeContext # tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "5": "# type: threading.Lock: runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "6": "# type: Threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "7": "# type: Threading.Lock, # type: RuntimeContext tmpdir_lock=None # type: Threading.Lock ): # type: (...) -> None",
      "8": "# type: Threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: Threading.Lock ): # type: (...) -> None",
      "9": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock() ): # type: (...) -> None",
      "10": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: Threading.Lock ): # type: (...) -> None",
      "11": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=none # type: threading.Lock ): # type: (...) -> None",
      "12": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.Block ): # type: (...) -> None",
      "13": "# type: (Threading.Lock: runtimeContext) # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "14": "# type: 'threading.Lock', # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "15": "# type: threading.Lock: runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.bind(null, runtimeContext) # type: (...) -> None",
      "16": "# type: 'threading.Lock', # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "17": "# type: threading.Lock: runtimeContext # type: RuntimeContext # type: tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "18": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=null # type: threading.Lock ): # type: (...) -> None",
      "19": "# type: Threading.Lock, # type: RuntimeContext # type: tmpdir_lock=None # type: Threading.Lock ): # type: (...) -> None",
      "20": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock, # type: (...) -> None",
      "21": "# type: threading.Lock: runtimeContext, # type: RuntimeContext } ): # type: (...) -> None",
      "22": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock, # type: RuntimeContext ): # type: (...) -> None",
      "23": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock, # type: RuntimeContext # type: (...) -> None",
      "24": "# type: (Threading.Lock: runtimeContext) # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "25": "# type: 'threading.Lock', # type: RuntimeContext # type: tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "26": "# type: 'threading.Lock', # type: RuntimeContext # type: tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "27": "# type: (Threading.Lock: runtimeContext) # type: RuntimeContext # type: tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "28": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.bind(null, 1) # type: (...) -> None",
      "29": "# type: threading.Lock: runtimeContext # type: runtimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "30": "# type: Threading.Lock, # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "31": "# type: (Threading.Lock: runtimeContext) # type: RuntimeContext # type: tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "32": "# type: Threading.Lock, # type: RuntimeContext # type: tmpdir_lock # type: RuntimeContext # type: tmpdir_lock # type: (...) -> None",
      "33": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock, # type: # type: (...) -> None",
      "34": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.Serialize(runtimeContext) # type: (...) -> None",
      "35": "# type: threading.Lock: runtimeContext, # type: RuntimeContext } tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "36": "# type: threading.Lock: runtimeContext, # type: RuntimeContext ): # type: (...) -> None",
      "37": "# type: threading.Lock: runtimeContext # type: # type: RuntimeContext # type: tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "38": "# type: Threading.Lock, # type: RuntimeContext # type: tmpdir_lock # type: RuntimeContext ): # type: (...) -> None",
      "39": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.bind(null, true) # type: (...) -> None",
      "40": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock, # type: * () ): # type: (...) -> None",
      "41": "# type: threading.Lock: runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: threading.Lock, # type: RuntimeContext ): # type: (...) -> None",
      "42": "# type: threading.Lock: runtimeContext # type: RuntimeContext } tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "43": "# type: (Threading.Lock: runtimeContext) # type: RuntimeContext tmpdir_lock=None # type: Threading.Lock ): # type: (...) -> None",
      "44": "# type: Threading.Lock, # type: RuntimeContext # type: tmpdir_lock # type: Threading.Lock ): # type: (...) -> None",
      "45": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.bind(this) # type: (...) -> None",
      "46": "# type: 'threading.Lock', # type: RuntimeContext ): # type: (...) -> None",
      "47": "# type: threading.Lock: RuntimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock ): # type: (...) -> None",
      "48": "# type: (Threading.Lock: runtimeContext) # type: RuntimeContext tmpdir_lock=None # type: Threading.Lock ): # type: (...) -> None",
      "49": "# type: threading.Lock: runtimeContext # type: RuntimeContext tmpdir_lock=None # type: threading.Lock.System ): # type: (...) -> None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )\n",
    "target_code": "        \"\"\"\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_line": "        string = _fmt(string)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " string is declared to have type `str` but is used as type `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 312,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libtcod/python-tcod",
    "source_filename": "tcod/console.py",
    "target_filename": "tcod/console.py",
    "source_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9^",
    "target_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "predictions": [
      "\"\"\" string = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" string = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "1": "\"\"\" string = _fmt(string) return lib.TCOD_console_get_height_rect_fmt(self.console_c, x, y, width, height, string )",
      "2": "\"\"\" string = _fmt( string ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "3": "\"\"\" string = utils._fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "4": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "5": "\"\"\" string = fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "6": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "7": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "8": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "9": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "10": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "11": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\"); return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "12": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "13": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"\");",
      "14": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "15": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "16": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "17": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, w, )",
      "18": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "19": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "20": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "21": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, )",
      "22": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\"); return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "23": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "24": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\"); return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "25": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, s, )",
      "26": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, )",
      "27": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\"); return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "28": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\"); return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "29": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"\");",
      "30": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "31": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"\");",
      "32": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "33": "\"\"\" string = \"\" + _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "34": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"\");",
      "35": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, w, )",
      "36": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "37": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\"); return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"/\");",
      "38": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, w, )",
      "39": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"justify)",
      "40": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, s, u",
      "41": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "42": "\"\"\" string = _fmt(string) return Lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "43": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, w, )",
      "44": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, )",
      "45": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "46": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, )",
      "47": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, u",
      "48": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, \"boots\");",
      "49": "\"\"\".replace(/ ^ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s+/g, \"\") return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, s, )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
    "target_code": "    if type_type == SCALAR:\n        result_type = sub_type\n    elif type_type == ARRAY:\n        result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
    "warning_line": "        type_ = query.ArrayQueryParameterType(sub_type, name=name)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "target_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:"
    ],
    "correct": false,
    "top_five": {
      "0": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "1": "if type_type == SCALAR: type_ = sub_type elif type_type == ARAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "2": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "3": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIQUE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "4": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "5": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == SUCCESS: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "6": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == BLUE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "7": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == CHARACTER: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "8": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == SNAP: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "9": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROBIN: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "10": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROBIN_QUERY: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "11": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "12": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROBIN_QUERY: type_ = sub_type",
      "13": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == IDENTIFIER: type_ = Object.assign(query.ArrayQueryParameterType, sub_type, name=name)",
      "14": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == BRICK: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "15": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == CHARATER: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "16": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_type_, name=name)",
      "17": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == STRUT: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "18": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == BLUE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "19": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_type_, name=name=name)",
      "20": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == INT: type_ = ArrayQueryParameterType(sub_type, name=name)",
      "21": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == SUCCESS: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "22": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == OPTIONS: type_ = OPTIONS.query.ArrayQueryParameterType(sub_type, name=name)",
      "23": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == VALUE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "24": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_ == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "25": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNDERSTAND: type_ = sub_type",
      "26": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == RAY: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "27": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROSIE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "28": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == CHARACTER: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "29": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == OPTIONS: type_ = OPTIONS.QUERY.ArrayQueryParameterType(sub_type, name=name)",
      "30": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == PASSWORD: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "31": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == CHARATER: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "32": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_ == BLUE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "33": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == ROBIN_QUERY: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "34": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif_type_type == UNIQUE: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "35": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_type_, name= name=name)",
      "36": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_type_, name=name= name=name)",
      "37": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == MODERN: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "38": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_, name=name=name)",
      "39": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROBIN_QUERY: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_, name=name=name)",
      "40": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == STR: type_ = query.ArrayQueryParameterType(sub_type, name=name)",
      "41": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == IDENTIFIER: type_ = ArrayQueryParameterType.distinction(sub_type, name=name)",
      "42": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROBIN_QUERY: type_ = sub_type elif type_type == BINARY: type_ = sub_type",
      "43": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == QUnit.ArrayQueryParameterType(sub_type, name=name)",
      "44": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIQUE: type_ = sub_type elif type_type == UNIQUE: type_ = query.ArrayQueryParameterType(sub_type_type_, name=name)",
      "45": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ANSI_TYPE: type_ = sub_type elif type_type == UNIQUE: type_ = query.ArrayQueryParameterType(sub_type_, name=name=name)",
      "46": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == ROBIN_QUERY: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_, name=name)",
      "47": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIQUE: type_ = sub_type elif type_type == UNIQUE:",
      "48": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == UNIFORM: type_ = sub_type elif type_type == UNIFORM: type_ = query.ArrayQueryParameterType(sub_type_, name=name)",
      "49": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT: type_ = sub_type elif type_type == IDENTIFIER: type_ = ArrayQueryParameterType(sub_type, name=name)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_line": "            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 342,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "gitpython-developers/GitPython",
    "source_filename": "git/objects/submodule/base.py",
    "target_filename": "git/objects/submodule/base.py",
    "source_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f^",
    "target_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "predictions": [
      "env: None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':"
    ],
    "correct": false,
    "top_five": {
      "0": "env: None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "1": "env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None",
      "2": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "3": "env: None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None",
      "4": "env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "5": "env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None,",
      "6": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': env => {",
      "7": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "8": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "9": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "10": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': None",
      "11": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None]",
      "12": "env: mapping.env = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "13": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, none]",
      "14": "union_map_type ='map', branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "15": "union_tree_map: None, branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "16": "env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None],",
      "17": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': None,",
      "18": "union_tree_tree = tree, branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "19": "union_tree_type ='map', branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "20": "env: mapping.env = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None",
      "21": "union_env : None, branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "22": "env: Node.Mapping, branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "23": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None]",
      "24": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str] = None",
      "25": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None",
      "26": "union_map_type: None, branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "27": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[int, None]",
      "28": "tree: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "29": "union_map_type ='map', branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': env => {",
      "30": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union['Mapping']",
      "31": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "32": "env: Union[str, str] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "33": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None",
      "34": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str],",
      "35": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] env: Mapping[str, str] = None, depth: None, env: None,",
      "36": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': union => {",
      "37": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, null]",
      "38": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Mapping[str, str]",
      "39": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str]",
      "40": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None]",
      "41": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, str] = None,",
      "42": "union_tree_type ='map', branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': env => {",
      "43": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': 'Mapping'",
      "44": "env: Node.Mapping, branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[str, None] = None",
      "45": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': null",
      "46": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union.module.create(str, str)",
      "47": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': env => {",
      "48": "env: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': None,",
      "49": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule': Union[int, None] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        key: str = \"\",\n        algorithms: List[str] = None,\n        options: Dict = None,\n        **kwargs,\n",
    "target_code": "        key: str = \"\",\n        algorithms: Optional[List[str]] = None,\n        options: Optional[Dict] = None,\n        **kwargs,\n",
    "warning_line": "        algorithms: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " algorithms is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 135,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jpadilla/pyjwt",
    "source_filename": "jwt/api_jws.py",
    "target_filename": "jwt/api_jws.py",
    "source_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235^",
    "target_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235",
    "predictions": [
      "key: str = \"\", algorithms: List[str] = None, options: Dict = None, **kwargs,"
    ],
    "correct": false,
    "top_five": {
      "0": "key: str = \"\", algorithms: List[str] = None, options: Dict = None, **kwargs,",
      "1": "key: str = \"\", algorithms: List[str] = None, options: Dict, **kwargs,",
      "2": "key: str = \"\", algorithms: Alloy.List[str] = None, options: Dict = None, **kwargs,",
      "3": "key: str = \"\", algorithms: List[str] = None, opts: Dict = None, **kwargs,",
      "4": "key: str = \"\", algorithms: List[str] = None, optional: Dict = None, **kwargs,",
      "5": "key: str = \"\", algorithms: _List[str] = None, options: _Dict = None, **kwargs,",
      "6": "key: str = \"\", algorithms: _List[str] = None, options: Dict = None, **kwargs,",
      "7": "key: str = \"\", algorithms: List[str] = None, option: Dict = None, **kwargs,",
      "8": "key: str = \"\", algorithms: Allocator[str] = None, options: Dict = None, **kwargs,",
      "9": "key: str = \"\", algorithms: list[str] = None, options: Dict = None, **kwargs,",
      "10": "key: str = \"\", algorithms: None, options: Dict = None, **kwargs,",
      "11": "key: str = \"\", algorithms: AllocList[str] = None, options: Dict = None, **kwargs,",
      "12": "key: str = \"\", algorithms: List[str] = None, options: Dict = (null, null)? null : None, **kwargs,",
      "13": "key: str = \"\", algorithms: List[str] = None, options: Dict = (null, null)? null : null, **kwargs,",
      "14": "key: str = \"\", algorithms: List[str] = None, options: Dict = Notification.Prototype.getOwnPropertyNames(), **kwargs,",
      "15": "key: str = \"\", algorithms: List[str] = None, options: Dict = None, *kwargs,",
      "16": "key: str = \"\", algorithms: Node.algorithms[str] = None, options: Dict = None, **kwargs,",
      "17": "key: str = \"\", algorithms: List[str] = None, options: Dict = Nothing, **kwargs,",
      "18": "key: str = \"\", algorithms: List[str] = None, _options: Dict = None, **kwargs,",
      "19": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict = None, **kwargs,",
      "20": "key: str = \"\", algorithms: List[str] = None, options: None, **kwargs,",
      "21": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.op = None, **kwargs,",
      "22": "key: str = \"\", algorithms: SimpleStatus[str] = None, options: Dict = None, **kwargs,",
      "23": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.opt = None, **kwargs,",
      "24": "key: str = \"\", algorithms: Alloy[str] = None, options: Dict = None, **kwargs,",
      "25": "key: str = \"\", algorithms: SimpleStructure[str] = None, options: Dict = None, **kwargs,",
      "26": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.obj = None, **kwargs,",
      "27": "key: str = \"\", algorithms: These[str] = None, options: Dict = None, **kwargs,",
      "28": "keys: str = \"\", algorithms: List[str] = None, options: Dict = None, **kwargs,",
      "29": "key: str = \"\", algorithms: List[str] = None, options: Dict = No, **kwargs,",
      "30": "key: str = \"\", algorithms: SimpleSchema[str] = None, options: Dict = None, **kwargs,",
      "31": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.opts = None, **kwargs,",
      "32": "key: str = \"\", algorithms: List[str] = None, **options: Dict = None, **kwargs,",
      "33": "key: str = \"\", algorithms: List[str] = None, options: Dict = All, **kwargs,",
      "34": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.Opts, **kwargs,",
      "35": "key: str = \"\", algorithms: List[str] = None, *options: Dict = None, **kwargs,",
      "36": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.options = None, **kwargs,",
      "37": "key: str = \"\", algorithms: List[str] = None, opts: Dict, **kwargs,",
      "38": "key: str = \"\", algorithms: List[str] = None, options: Dict = Null, **kwargs,",
      "39": "key: str = \"\", algorithms: lists[str] = None, options: Dict = None, **kwargs,",
      "40": "key: str = \"\", algorithms: List[str] = None, options: Dict = [], **kwargs,",
      "41": "key: str = \"\", algorithms: List[str] = None, options: Dict = Notification.Prototype.getOptions(), **kwargs,",
      "42": "key: str = \"\", algorithms: List[str] = None, defaults: None, **kwargs,",
      "43": "key: str = \"\", algorithms: List.algorithms[str] = None, options: Dict.Opts = None, **kwargs,",
      "44": "key: str = \"\", algorithms: Mixed[str] = None, options: Dict = None, **kwargs,",
      "45": "key: str = \"\", algorithms: Strict.prototype = None, options: Dict = None, **kwargs,",
      "46": "key: str = \"\", algorithms: List[str] = None, options: Dict = Notification.Prototype.getOwnPropertyNames, **kwargs,",
      "47": "key: str = \"\", algorithms: List[str] = None, features: Dict, **kwargs,",
      "48": "key: str = \"\", algorithms: List[str] = None, options: Dict = Non, **kwargs,",
      "49": "key: str = \"\", algorithms: List[str] = None, options: Dict = (null, null)? null : Null, **kwargs,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, comparable, *, error: str = None):\n        self.comparable = comparable\n",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        self.comparable = comparable\n",
    "warning_line": "    def __init__(self, comparable, *, error: str = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 339,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "def __init__(self, comparable, *, error: str = None): self.comparable = comparable"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, comparable, *, error: str = None): self.comparable = comparable",
      "1": "def __init__(self, comparable, *, error: str = 0, error: false } ): self.comparable = comparable",
      "2": "def __init__(self, comparable, *, error: str = 0, none: true } ): self.comparable = comparable",
      "3": "def __init__(self, comparable, *, error: str = 0, true): self.comparable = comparable",
      "4": "def __init__(self, comparable, *, error: str = 0, err = None): self.comparable = comparable",
      "5": "def __init__(self, comparable, *, error: str = 0, None): self.comparable = comparable",
      "6": "def __init__(self, comparable, *, error: str = 0, null: false } ): self.comparable = comparable",
      "7": "def __init__(self, comparable, *, error: str = 0, null: true } ): self.comparable = comparable",
      "8": "def __init__(self, comparable, *, error: str == None): self.comparable = comparable",
      "9": "def __init__(self, comparable, *, error: str = 0, none: def __init__(self, comparable, *): self.comparable = comparable",
      "10": "def __init__(self, comparable, *, error: str = 0, null, false): self.comparable = comparable",
      "11": "def __init__(self, comparable, *, error: str = 0, none: def __init__(self, comparable): self.comparable = comparable",
      "12": "def __init__(self, comparable, *, error: str = 0, normal: false } ): self.comparable = comparable",
      "13": "def __init__(self, comparable, *, error: str = 0, err: None } ): self.comparable = comparable",
      "14": "def __init__(self, comparable, *, error: str = 0, vraixed: false, value: comparable } ): self.comparable = comparable",
      "15": "def __init__(self, comparable, *, error: str = 0, errorHandler = false): self.comparable = comparable",
      "16": "def __init__(self, comparable, *, error: str = 0, vraixes: false } ): self.comparable = comparable",
      "17": "def __init__(self, comparable, *, error: str = 0, len = None): self.comparable = comparable",
      "18": "def __init__(self, comparable, *, error: str = 0, errorMsg: '' } ): self.comparable = comparable",
      "19": "def __init__(self, comparable, *, error: str = 0, error: str = None): self.comparable = comparable",
      "20": "def __init__(self, comparable, *, error: str = 0, valid: false } ): self.comparable = comparable",
      "21": "def __init__(self, comparable, *, error: str = 0, none: def __init__(self, comparable, *, error: str = None): self.comparable = comparable",
      "22": "def __init__(self, comparable, *, error: str = 0, none: def && __init__(self, comparable): self.comparable = comparable",
      "23": "def __init__(self, comparable, *, error: str = 0, true, false): self.comparable = comparable",
      "24": "def __init__(self, comparable, *, error: str = 0, vraixed: false, value: true } ): self.comparable = comparable",
      "25": "def __init__(self, comparable, *, error: str = 0, error: notNull()): self.comparable = comparable",
      "26": "def __init__(self, comparable, *, error: str = 0, null = false): self.comparable = comparable",
      "27": "def __init__(self, comparable, *, error: str = 0, error: notNull } ): self.comparable = comparable",
      "28": "def __init__(self, comparable, *, error: str = 0, options: 'free' } ): self.comparable = comparable",
      "29": "def __init__(self, comparable, *, error: str = 0, similar: true, error: false } ): self.comparable = comparable",
      "30": "def __init__(self, comparable, *, error: str = 0, err: null, value: []): self.comparable = comparable",
      "31": "def __init__(self, comparable, *, error: str = 0, value: error.value } ): self.comparable = comparable",
      "32": "def __init__(self, comparable, *, error: str = 0, 1 : None): self.comparable = comparable",
      "33": "def __init__(self, comparable, *, error: str = 0, similar: false } ): self.comparable = comparable",
      "34": "def __init__(self, comparable, *, error: str = 0, value: comparable, errors: [9, 10] } ): self.comparable = comparable",
      "35": "def __init__(self, comparable, *, error: str = 0, options: false } ): self.comparable = comparable",
      "36": "def __init__(self, comparable, *, error: str = 0, similar: true } ): self.comparable = comparable",
      "37": "def __init__(self, comparable, *, error: str = 0, null): self.comparable = comparable",
      "38": "def __init__(self, comparable, *, error: str = ''): self.comparable = comparable",
      "39": "def __init__(self, comparable, *, error: str = 0, options: options } ): self.comparable = comparable",
      "40": "def __init__(self, comparable, *, error: str = 0, value: null } ): self.comparable = comparable",
      "41": "def __init__(self, comparable, *, error: str = 0, none: def && def.isNone(str)): self.comparable = comparable",
      "42": "def __init__(self, comparable, *, error: str = 0, none: def && def.prototype.toString()): self.comparable = comparable",
      "43": "def __init__(self, comparable, *, error: str = 0, vraixes: false, errors: true } ): self.comparable = comparable",
      "44": "def __init__(self, comparable, *, error: str = 0, similar: comparable } ): self.comparable = comparable",
      "45": "def __init__(self, comparable, *, error: str = 0, err: none } ): self.comparable = comparable",
      "46": "def __init__(self, comparable, *, error: str = 0, none: def __init__(self, comparable, *, error: str = null): self.comparable = comparable",
      "47": "def __init__(self, comparable, *, error: str = 0, done: false } ): self.comparable = comparable",
      "48": "def __init__(self, comparable, *, error: str = 0, none): self.comparable = comparable",
      "49": "def __init__(self, comparable, *, error: str = 0, while_1 = false): self.comparable = comparable"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        self.db_user = db_user\n",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        self.db_user = db_user\n",
    "warning_line": "    def __init__(self, db_user, instance=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tribe29/checkmk",
    "source_filename": "agents/plugins/mk_postgres.py",
    "target_filename": "agents/plugins/mk_postgres.py",
    "source_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1^",
    "target_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "predictions": [
      "def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "1": "def __init__(self, db_user, instance=None): # type: (str, Dict) -> None self.db_user = db_user",
      "2": "def __init__(self, db_user): # instance = Dict[typing.Any, typing.Any] self.db_user = db_user",
      "3": "def __init__(self, db_user): # instance = None self.db_user = db_user",
      "4": "def __init__(self, db_user): # instance: Dict[typing.Any, typing.Any] self.db_user = db_user",
      "5": "def __init__(self, db_user): # instance = 'Dict[typing.Any, typing.Any] self.db_user = db_user",
      "6": "def __init__(self, db_user, instance=None): # instance = Dict[typing.Any, typing.Any] self.db_user = db_user",
      "7": "def __init__(self, db_user): # instance = def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "8": "def __init__(self, db_user): # instance: None self.db_user = db_user",
      "9": "def __init__(self, db_user): # instance=None self.db_user = db_user",
      "10": "def __init__(self, db_user): # instance = def __init__(self, db_user): # instance = Dict[typing.Any, typing.Any] self.db_user = db_user",
      "11": "def __init__(self, db_user): # instance: instance def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "12": "def __init__(self, db_user): # type: (str, Dict) => None self.db_user = db_user",
      "13": "def __init__(self, db_user): # instance = Def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "14": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=None): # type: (str, Dict) -> None self.db_user = db_user",
      "15": "def __init__(self, db_user): # instance = def __init__(self, db_user): # instance = 'Dict[typing.Any, typing.Any] self.db_user = db_user",
      "16": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, instance=None): self.db_user = db_user",
      "17": "def __init__(self, db_user): # instance = _.eval(Dict[typing.Any, typing.Any]) self.db_user = db_user",
      "18": "def __init__(self, db_user): # instance: instance.None self.db_user = db_user",
      "19": "def __init__(self, db_user): # instanceType: Dict[typing.Any, typing.Any] self.db_user = db_user",
      "20": "def __init__(self, db_user): # instance = 'None' self.db_user = db_user",
      "21": "def __init__(self, db_user): # instance = Def __init__(self, db_user): # instance = 'Dict[typing.Any, typing.Any] self.db_user = db_user",
      "22": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, instance=None): # type: (str, Dict) -> None self.db_user = db_user",
      "23": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "24": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=None): def __init__(self, db_user): self.db_user = db_user",
      "25": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=null): def __init__(self, db_user): self.db_user = db_user",
      "26": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=None): self.db_user = db_user",
      "27": "def __init__(self, db_user): # instance: instance.isNone self.db_user = db_user",
      "28": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance): def __init__(self, db_user): self.db_user = db_user",
      "29": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=null): self.db_user = db_user",
      "30": "def __init__(self, db_user): # instance = def __init__(self, db_user): # instance = 'None' self.db_user = db_user",
      "31": "def __init__(self, db_user): # instance = Def __init__(self, db_user): # instance = Dict[typing.Any, typing.Any] self.db_user = db_user",
      "32": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance): # type: (str, Dict) -> None self.db_user = db_user",
      "33": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, db_user): self.db_user = db_user",
      "34": "def __init__(self, db_user): # instance : Dict[typing.Any, typing.Any] self.db_user = db_user",
      "35": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): def __init__(self, db_user): self.db_user = db_user",
      "36": "def __init__(self, db_user): # instance = def __init__(self, db_user): # instance = None self.db_user = db_user",
      "37": "def __init__(self, db_user, instance=None): # instance = 'Dict[typing.Any, typing.Any] self.db_user = db_user",
      "38": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=None): def __init__(self, instance=None): self.db_user = db_user",
      "39": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=null): # type: (str, Dict) -> None self.db_user = db_user",
      "40": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=none): # type: (str, Dict) -> None self.db_user = db_user",
      "41": "def __init__(self, db_user): # instance = def __init__(self, db_user): self.db_user = db_user",
      "42": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, db_user): def __init__(self, db_user): self.db_user = db_user",
      "43": "def __init__(self, db_user): # instance: instance def __init__(self, db_user): # instance = 'Dict[typing.Any, typing.Any] self.db_user = db_user",
      "44": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "45": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance): self.db_user = db_user",
      "46": "def __init__(self, db_user, instance=None): # instance = None self.db_user = db_user",
      "47": "def __init__(self, db_user): # instance = def __init__(self, db_user): __init__(self, db_user): __init__(self, instance=null): def __init__(self, instance=null): self.db_user = db_user",
      "48": "def __init__(self, db_user): # instance = def __init__(self, db_user): # instance.isNone",
      "49": "def __init__(self, db_user): # instance = _.escape(str, Dict) self.db_user = db_user"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        loop = loop or asyncio.get_event_loop()\n",
    "target_code": "\n    def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
    "warning_line": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 137,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fscdev/vkwave",
    "source_filename": "vkwave/bots/easy/easy_bot.py",
    "target_filename": "vkwave/bots/easy/easy_bot.py",
    "source_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc^",
    "target_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "predictions": [
      "def run_forever(self, loop): loop = loop or asyncio.get_event_loop()"
    ],
    "correct": false,
    "top_five": {
      "0": "def run_forever(self, loop): loop = loop or asyncio.get_event_loop()",
      "1": "def run_forever(self, loop: asyncio.events.AbstractEventLoop = None): loop = loop or asyncio.get_event_loop()",
      "2": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Loop = None : loop = loop or asyncio.get_event_loop()",
      "3": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.events.AbstractEventLoop.defaultValue : None): loop = loop or asyncio.get_event_loop()",
      "4": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.hasOwnProperty(loop) : None; loop = loop or asyncio.get_event_loop();",
      "5": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.get_event_loop() : loop = loop or asyncio.get_event_loop()",
      "6": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Location() : loop = loop or asyncio.get_event_loop()",
      "7": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Loop() : loop = loop or asyncio.get_event_loop()",
      "8": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.default() : loop = loop or asyncio.get_event_loop()",
      "9": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Type = 'AbstractEventLoop' : None; loop = loop or asyncio.get_event_loop();",
      "10": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Location('loop') : loop = loop or asyncio.get_event_loop()",
      "11": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.defaultValue : None; loop = loop or asyncio.get_event_loop()",
      "12": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop = None : loop = loop or asyncio.get_event_loop()",
      "13": "def run_forever(self, loop), asyncio.events.AbstractEventLoop = None): loop = loop or asyncio.get_event_loop()",
      "14": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.defaultValue : None; loop = loop or asyncio.get_event_loop();",
      "15": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.events.AbstractEventLoop.defaultValue() : None; loop = loop or asyncio.get_event_loop()",
      "16": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.hasOwnProperty(loop) : None; loop = loop or asyncio.get_event_loop()",
      "17": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.get_event_loop() : None; loop = loop or asyncio.get_event_loop()",
      "18": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Number() : loop = loop or asyncio.get_event_loop()",
      "19": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.None : loop = loop or asyncio.get_event_loop()",
      "20": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.events.AbstractEventLoop.defaultValue() : None; loop = loop or asyncio.get_event_loop();",
      "21": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Type = 'AbstractEventLoop' : 'AbstractEventLoop'; loop = loop or asyncio.get_event_loop();",
      "22": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Loop() : null; loop = loop or asyncio.get_event_loop();",
      "23": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.hasOwnProperty(loop) : none; loop = loop or asyncio.get_event_loop()",
      "24": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.events.AbstractEventLoop.length : None): loop = loop or asyncio.get_event_loop()",
      "25": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Location.get() : loop = loop or asyncio.get_event_loop()",
      "26": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.type : None; loop = loop or asyncio.get_event_loop();",
      "27": "def run_forever(self, loop), evt: asyncio.events.AbstractEventLoop = None, id: asyncio.events.AbstractEventLoop.id } ): loop = loop or asyncio.get_event_loop()",
      "28": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Loop() : None; loop = loop or asyncio.get_event_loop();",
      "29": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.get_event_loop() : asyncio.get_event_loop()",
      "30": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.hasOwnProperty(loop) : loop = loop or asyncio.get_event_loop()",
      "31": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Loop() : None; loop = loop or asyncio.get_event_loop()",
      "32": "def run_forever(self, loop = asyncio.events.AbstractEventLoop = None): loop = loop or asyncio.get_event_loop()",
      "33": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.events.AbstractEventLoop.defaultValue : None; loop = loop or asyncio.get_event_loop()",
      "34": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Type = 'AbstractEventLoop' : None; loop = loop or asyncio.get_event_loop()",
      "35": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Type = 'AbstractEventLoop' : 'AbstractEventLoop'; loop = loop or asyncio.get_event_loop()",
      "36": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Type = 'Loop' : loop = loop or asyncio.get_event_loop()",
      "37": "def run_forever(self, loop), evt: asyncio.events.AbstractEventLoop = None, id: asyncio.events.AbstractEventLoop = '', loop = loop or asyncio.get_event_loop()",
      "38": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.get_event_loop() : None; loop = loop or asyncio.get_event_loop();",
      "39": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.events.AbstractEventLoop.Enable() : None): loop = loop or asyncio.get_event_loop()",
      "40": "def run_forever(self, loop), evt: asyncio.events.AbstractEventLoop = None, event_type: asyncio.get_event_type() } ): loop = loop or asyncio.get_event_loop()",
      "41": "def run_forever(self, loop : asyncio.events.AbstractEventLoop = None): loop = loop or asyncio.get_event_loop()",
      "42": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.isAbstract() : loop = loop or asyncio.get_event_loop()",
      "43": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop = None, eventEnd: asyncio.events.AbstractEventEnd, loop = loop or asyncio.get_event_loop()",
      "44": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.Loop() : none; loop = loop or asyncio.get_event_loop()",
      "45": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.prototype.get_event_loop() : asyncio.get_event_loop()",
      "46": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None; loop = loop or asyncio.get_event_loop()",
      "47": "def run_forever(self, loop), loop = asyncio.events.AbstractEventLoop = None? asyncio.events.AbstractEventLoop.default() : None; loop = loop or asyncio.get_event_loop();",
      "48": "def run_forever(self, loop), evt: asyncio.events.AbstractEventLoop = None, id: asyncio.get_event_id() } ): loop = loop or asyncio.get_event_loop()",
      "49": "def run_forever(self, loop), untill: asyncio.events.AbstractEventLoop.length? asyncio.get_event_loop() : None): loop = loop or asyncio.get_event_loop()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:\n",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_line": "        timestamp: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 207,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "open-telemetry/opentelemetry-python",
    "source_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "target_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226^",
    "target_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "predictions": [
      "attributes: types.Attributes = None, ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "attributes: types.Attributes = None, ) -> None:",
      "1": "attributes: types.Attributes = None, timestamp: type === 'number'? null : None, ) -> None:",
      "2": "attributes: types.Attributes = None, timestamp: type === 'number'? 'None' : 'number', ) -> None:",
      "3": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])",
      "4": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : None,",
      "5": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i]) : (ret * time stamps[i])",
      "6": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : (ret * time stamps[number])",
      "7": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i]) : (ret * time stamps[i]) : (ret * time stamps[i])",
      "8": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : [];",
      "9": "attributes: types.Attributes = None, timestamp: type === 'number'? 'None' : null, ) -> None:",
      "10": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps.length) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i]) : (ret * time stamps[i])",
      "11": "attributes: types.Attributes = None, tstamp: int = None, ) -> None:",
      "12": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) - (ret * time stamps[number] : None,",
      "13": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] = None,",
      "14": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : [nulttributes",
      "15": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps.length - 1) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i]) : (ret * time stamps[i])",
      "16": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) ) -> None:",
      "17": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : (rettributes",
      "18": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : [",
      "19": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : none,",
      "20": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? timestamps[number] : None,",
      "21": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? timestamps[number] : (ret * time stamps[number])",
      "22": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : [] : None,",
      "23": "attributes: types.Attributes = None, ret = None, timestamp: int = None, ) -> None:",
      "24": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? timestamps[number] : retampsttributes = None,",
      "25": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])) -> None:",
      "26": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : rettributes = None,",
      "27": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : []",
      "28": "attributes: types.Attributes = None, timestamp: int = None, vood: null, ) -> None:",
      "29": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : (typesttributes",
      "30": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : None,",
      "31": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : [nulttributes = None,",
      "32": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? timestamps[number] : (ret * time stamps[number]) : (retrim()",
      "33": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : (rettributes)",
      "34": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : [ret [nulttributes]",
      "35": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number] : (Rettributes",
      "36": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? timestamps[number] : (ret * time stamps[number]) : None,",
      "37": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps.length - 1]) : (ret * time stamps[time]) : None,",
      "38": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps.length - 1) : (ret * time stamps.length) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i])",
      "39": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps.length - 1]) : (ret * time stamps[time]) : (ret * time stamps[time]) : (ret * time stamps[time])",
      "40": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps.length) : (ret * time stamps.length) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i])",
      "41": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret + 1)? (ret * time stamps[number]) : (ret + 1)",
      "42": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : [],",
      "43": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : ret",
      "44": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i]) : (ret + 1)? (ret * time stamps[i]) : (ret + 1)",
      "45": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret + 1)? time stamps[number] : (ret * time stamps[number] : None,",
      "46": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps.length) : (ret * time stamps.length - 1) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i])",
      "47": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : [] : [nulttributes",
      "48": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number]) : (ret * time stamps[number])? time stamps[number] : [],",
      "49": "attributes: types.Attributes = None, timestamp: int = None, ret = 0? (ret * time stamps.length - 1) : (ret * time stamps[time stamps[i]]) : (ret * time stamps[i]) : None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]\n\n",
    "target_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_line": "  supported_featurizers = ['ElementPropertyFingerprint'",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 161,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepchem/deepchem",
    "source_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "target_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b^",
    "target_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "predictions": [
      "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer]"
    ],
    "correct": false,
    "top_five": {
      "0": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer]",
      "1": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer] # type: List[str]",
      "2": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str]",
      "3": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer]",
      "4": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer] # type: List[Str]",
      "5": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[destructor]",
      "6": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer] # type: List[Str]",
      "7": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = List[deepchem.feat.base_classes.Featurizer] # type: List[Featurizer]",
      "8": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "9": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] # type: List[Featurizer]",
      "10": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[chem.feat.base_classes.Featurizer]",
      "11": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[tr]",
      "12": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # type: List[Featurizer]# type: List[str]",
      "13": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[deps.feat.base_classes.Featurizer]",
      "14": "supported_featurizers = ['ElementPropertyFingerprint': # First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint']",
      "15": "supported_featurizers = ['ElementPropertyFingerprint': # First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str]",
      "16": "supported_featurizers = ['ElementPropertyFingerprint': # First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['Featurizer'] # type: List[Featurizer]",
      "17": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[deepchem.feat.base_classes.Featurizer]",
      "18": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is defined as type List[str]",
      "19": "supported_featurizers = ['ElementPropertyFingerprint': # First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['Featurizer']",
      "20": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but only type: List[featurizer]",
      "21": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is defined as type List[destructor]",
      "22": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[def]",
      "23": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['elementPropertyFingerprint'] # type: List[Featurizer]",
      "24": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[t]",
      "25": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['Featurizer'] # type: List[Featurizer]",
      "26": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "27": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[definePropertyList[featurizer]",
      "28": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[str]",
      "29": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers } ]",
      "30": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "31": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is defined as type List[str] but is defined as type List[destructor]",
      "32": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[definePropertyList[Featurizer]",
      "33": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[detached_featurizer]",
      "34": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['List[base_classes.Featurizer] but is declared as type List[str]",
      "35": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "36": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but only type: List[featurizer]",
      "37": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but only type: List[Featurizer]",
      "38": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] while ((type ==='string')!== null) {",
      "39": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[featurizer] but is declared as type List[str] but is declared as type List[defeat.base_classes.Featurizer]",
      "40": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = List[deepchem.feat.base_classes.Featurizer] # type: List[str]",
      "41": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[featurizer] but is declared as type List[str]",
      "42": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but not implemented =!= null",
      "43": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "44": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['Featurizer'] # type: List[Featurizer]",
      "45": "supported_featurizers = ['ElementPropertyFingerprint': # First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers supported_featurizers = ['Featurizer'] # type: List[Featurizer]# type: List[str]",
      "46": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['List[deepchem.feat.base_classes.Featurizer] but is declared as type List[str] but is declared as type List[featurizer]",
      "47": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers list_featurizers = ['ElementPropertyFingerprint': # second type of supported featurizers list_featurizers = ['List[base_classes.Featurizer] but is declared as type List[str]",
      "48": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "49": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint': # first type of supported featurizers supported_featurizers = ['Featurizer'] # type: List[Featurizer]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            if self is Bot:\n                Bot = new\n",
    "target_code": "            if self is Bot:\n                assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_line": "                Bot = new",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " Bot is declared to have type `BotUser` but is used as type `User`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "if self is Bot: Bot = new Type('User')"
    ],
    "correct": false,
    "top_five": {
      "0": "if self is Bot: Bot = new Type('User')",
      "1": "if self is Bot: Bot = new Type()",
      "2": "if self is Bot: Bot = new Type('User');",
      "3": "if self is Bot: Bot = new Error('Error getting context from'+ context + '.')",
      "4": "if self is Bot: Bot = new function () {",
      "5": "if self is Bot: Bot = new Error('Error getting email address from'+ self + '.')",
      "6": "if self is Bot: Bot = new Error('Error while creating avatar')",
      "7": "if self is Bot: Bot = new Error('Error in getAutocomplete()')",
      "8": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin_credentials + ')",
      "9": "if self is Bot: Bot = new Error('Error getting data from server')",
      "10": "if self is Bot: Bot = new Error('Error getting information from'+ self + '.')",
      "11": "if self is Bot: Bot = new Error('Error in getAutocomplete()');",
      "12": "if self is Bot: Bot = new Error('Error getting browsers list from BrowserStack')",
      "13": "if self is Bot: Bot = new Error('Error while ulimit setting')",
      "14": "if self is Bot: Bot = new Error('Error getting permissions from'+ self.credentials + ')",
      "15": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../../api/resources')",
      "16": "if self is Bot: Bot = new Error('Error getting permissions from'+ self + '../../api/resources')",
      "17": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin_credentials + '.')",
      "18": "if self is Bot: Bot = new Error('Error getting data from'+ self + '.')",
      "19": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../../api/auth')",
      "20": "if self is Bot: Bot = new Error('Error while ulimit setting');",
      "21": "if self is Bot: Bot = new Error('Error getting permissions from'+ self + '.')",
      "22": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../../api/recognition_error')",
      "23": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin_credentials + '!')",
      "24": "if self is Bot: Bot = new Error('Error in create wrapper class \"' + constructor + '\" is required.')",
      "25": "if self is Bot: Bot = new Error('Error getting permissions from'+ self + '../../api/credentials')",
      "26": "if self is Bot: Bot = new Error('Error getting permissions from'+ self.api.credentials.user')",
      "27": "if self is Bot: Bot = new Error('Error getting webhook from'+ JSON.stringify(window.widget.id))",
      "28": "if self is Bot: Bot = new Error('Error getting webhook from'+ event.id +'' + event.id + ')",
      "29": "if self is Bot: Bot = new Error('Error getting tokens from'+ tokenLocation.getOwnPropertyName + '')",
      "30": "if self is Bot: Bot = new Error('Error getting internet connection')",
      "31": "if self is Bot: Bot = new Error('Error getting permissions from'+ permissions.user)",
      "32": "if self is Bot: Bot = new Error('Error getting permissions from'+ self + '../../api/auth')",
      "33": "if self is Bot: Bot = new Error('Error getting permissions from'+ permissions.username + '')",
      "34": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../../api/credentials')",
      "35": "if self is Bot: Bot = new Error('Error in getAutocomplete')",
      "36": "if self is Bot: Bot = new Error('Error while creating avatar');",
      "37": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../../api/auth/data.json')",
      "38": "if self is Bot: Bot = new Error('Error getting webhook from'+ JSON.stringify(self));",
      "39": "if self is Bot: Bot = new Error('Error getting permissions from'+ self + '../../api/auth/description')",
      "40": "if self is Bot: Bot = new Error('Error getting mail from'+ self + '.')",
      "41": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../../api/requests')",
      "42": "if self is Bot: Bot = new Error('Error getting webhook from'+ event.id +'doesn \\ 't exist')",
      "43": "if self is Bot: Bot = new Error('Error getting permissions from'+ self + '../../api/auth/credentials')",
      "44": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin_credentials + '')",
      "45": "if self is Bot: Bot = new Error('Error in create wrapper class \"' + constructor + '\" is required.');",
      "46": "if self is Bot: Bot = new Error('Error getting permissions from'+ params.credentials.user)",
      "47": "if self is Bot: Bot = new Error('error message')",
      "48": "if self is Bot: Bot = new Error('Error getting tokens from'+ token.to_brain())",
      "49": "if self is Bot: Bot = new Error('Error getting permissions from'+ admin + '../api/resources')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_line": "        error: Exception = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `Exception` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 658,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86^",
    "target_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "predictions": [
      "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "1": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "2": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = None, cap_error: Optional[bool] = None,",
      "3": "self, method_name: str = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "4": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = None, captured_error: Optional[bool] = None,",
      "5": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = '', capture_error: Optional[bool] = None,",
      "6": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.defaults.BaseSegment, capture_error: Optional[bool] = None,",
      "7": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.nodeType || None, capture_error: Optional[bool] = None,",
      "8": "self, method_name: str = None, error: method_name +'||'+ Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "9": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = Non, capture_error: Optional[bool] = None,",
      "10": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = null, capture_error: Optional[bool] = None,",
      "11": "self, method_name: str = None, error: Optional.Events.Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "12": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = All, capture_error: Optional[bool] = None,",
      "13": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.null || None, capture_error: Optional[bool] = None,",
      "14": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = Null, capture_error: Optional[bool] = None,",
      "15": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = No, capture_error: Optional[bool] = None,",
      "16": "self, method_name: str = None, error: Optional.Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "17": "self, method_name: str = None, error: Exception = Nothing, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "18": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = none, capture_error: Optional[bool] = None,",
      "19": "self, method_name: str = None, error: method_name +'= Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "20": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = None,",
      "21": "self, method_name: str = None, error: MethodError = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "22": "self, method_name: str = None, error: System.error = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "23": "self, method_name: str = None, error: None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "24": "self, method_name: str = None, error: Optional[bool] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "25": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.nodeType === 'Exception', capture_error: Optional[bool] = None,",
      "26": "self, method_name: str = None, error: Exception = None, subsegment:BaseSegment = None, capture_error: Optional[bool] = None,",
      "27": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = [], capture_error: Optional[bool] = None,",
      "28": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = Nothing, capture_error: Optional[bool] = None,",
      "29": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = NotFound, capture_error: Optional[bool] = None,",
      "30": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.nodeType = '0', capture_error: Optional[bool] = None,",
      "31": "self, method_name: str = None, error: Optional.EXCEPTION, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "32": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment || None, capture_error: Optional[bool] = None,",
      "33": "self, method_name: str = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "34": "self, method_name: str = None, error: OptionalBlob || None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "35": "self, method_name: str = None, error: Default = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "36": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment =, capture_error: Optional[bool] = None,",
      "37": "self, method_name: str = None, error: AllErrors, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "38": "self, method_name: str = None, error: Exception = All, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "39": "self, method_name: str = None, error_type: Exception = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "40": "self, method_name: str = None, error: Exception = None, subsegment: BasisSegment = None, capture_error: Optional[bool] = None,",
      "41": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.nodeType = 0, capture_error: Optional[bool] = None,",
      "42": "self, method_name: str = None, error: Optional || None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "43": "self, method_name: str = None, error: null || None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "44": "self, method_name: str = None, error: option_error = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "45": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment, captured_error: Optional[bool] = None,",
      "46": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = _.nodeType = 'Exception', capture_error: Optional[bool] = None,",
      "47": "self, method_name: str = None, error: Exception = None, subsegment: BaseSegment = Not, capture_error: Optional[bool] = None,",
      "48": "self, method_name: str = None, error: Exception = none, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "49": "self, method_name: str = None, error: Optional = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        details = details.split(\", \")\n\n",
    "target_code": "\n        split_details = details.split(\", \")\n\n",
    "warning_line": "        details = details.split(\", \")",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " details is declared to have type `str` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 229,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hsahovic/poke-env",
    "source_filename": "src/poke_env/environment/pokemon.py",
    "target_filename": "src/poke_env/environment/pokemon.py",
    "source_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7^",
    "target_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "predictions": [
      "details = details.split(\", \")"
    ],
    "correct": false,
    "top_five": {
      "0": "details = details.split(\", \")",
      "1": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "2": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "3": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "4": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"];",
      "5": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"];",
      "6": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "7": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "8": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "9": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"];",
      "10": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "11": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "12": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "13": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "14": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "15": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "16": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \"): details = details.split(\", \")",
      "17": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_entries\"].details[i]",
      "18": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"];",
      "19": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"];",
      "20": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "21": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "22": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "23": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "24": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"];",
      "25": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_entries\"].details[']",
      "26": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"details\"].encoding, chars, \"gl\"",
      "27": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "28": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "29": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"details\"].encoding, \"gr\"",
      "30": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "31": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \")",
      "32": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details = details.split(\", \")",
      "33": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", 'includes\",",
      "34": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"details\"].encoding, \"gr",
      "35": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "36": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\",",
      "37": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", 'details', 'details'",
      "38": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"details\"].encoding, \"includes\"].",
      "39": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"font-size\"], details = details.split(\", \")",
      "40": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \"):",
      "41": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"]; details = details.split(\", \"): details = details.split(\", '",
      "42": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", g, \"details\"].encoding, \"gr\"",
      "43": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\",",
      "44": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_entries\");",
      "45": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", details = details.split(\", \")",
      "46": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\"] details = details.split(\", \")",
      "47": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"details\"].encoding, \"includes\",",
      "48": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", 'details', 'details'",
      "49": "particulars = [\"special_charts\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"gl_chart_encoding\", \"details\"].encoding, \"gr\");"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,  # type: int\n    max_size=None,  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,  # type: None\n    max_size=None,  # type: int\n",
    "warning_line": "    average_size=None,  # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 705,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int"
    ],
    "correct": false,
    "top_five": {
      "0": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "1": "int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "2": "int: min_size=0, # type: int average_size=None, # type: int max_size=None,",
      "3": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None,",
      "4": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_count=0",
      "5": "min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "6": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_length=0",
      "7": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_weight=None,",
      "8": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int message_size=None,",
      "9": "mini_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "10": "int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_count=0",
      "11": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unique_size=None",
      "12": "var average_size=None, # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "13": "mini_size = 0; average_size = NONE; # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "14": "int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_length=0",
      "15": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int message_size=None",
      "16": "var average_size = int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "17": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_size=None,",
      "18": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_size=None",
      "19": "minimum_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "20": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int_reduce_size=None,",
      "21": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_length=None,",
      "22": "var min_size=0, # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "23": "mini_size = 0; # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "24": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_max_size=None,",
      "25": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_store_items=None",
      "26": "int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_weight=None,",
      "27": "var average_size = NONE, # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "28": "mini_size = 0, average_size=None, # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "29": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int units_max_size=None,",
      "30": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int_reduction_size=None,",
      "31": "mini_size = 0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "32": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int bin_size=None,",
      "33": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_store_item_type=None",
      "34": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int page_size=None,",
      "35": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int units_max_size=None",
      "36": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_max_size=None",
      "37": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int largest_size=None,",
      "38": "mini_size = 0; average_size = # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "39": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unique_type=None",
      "40": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int message_size=None;",
      "41": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_large=None,",
      "42": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_store_number=None,",
      "43": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int default_size=None,",
      "44": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int_reduction_size=None",
      "45": "min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_length=0",
      "46": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_store_item_type=None,",
      "47": "int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int message_size=None,",
      "48": "min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_count=0",
      "49": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unique_size=None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: str = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
    "target_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
    "warning_line": "        datefmt: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " datefmt is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 63,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/logging/formatter.py",
    "target_filename": "aws_lambda_powertools/logging/formatter.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[str] = None, utc: bool = False,"
    ],
    "correct": false,
    "top_five": {
      "0": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[str] = None, utc: bool = False,",
      "1": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[str], utc: bool = False,",
      "2": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[string] = None, utc: bool = False,",
      "3": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.toString()] = None, utc: bool = False,",
      "4": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Str], utc: bool = False,",
      "5": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Status], utc: bool = False,",
      "6": "json_default: Optional[Callable[[Any], Any]] = None, str_record_order: List[str] = None, utc: bool = False,",
      "7": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Strom] = None, utc: bool = False,",
      "8": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[_str] = None, utc: bool = False,",
      "9": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[String] = None, utc: bool = False,",
      "10": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[json_record_order] = None, utc: bool = False,",
      "11": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Status] = None, utc: bool = False,",
      "12": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[str] = None, _utc: bool = False,",
      "13": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[JSON.stringify(str)] = None, utc: bool = False,",
      "14": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[$obj] = None, utc: bool = False,",
      "15": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[, str] = None, utc: bool = False,",
      "16": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.toLowerCase()] = None, utc: bool = False,",
      "17": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ \\ s+/]) = None, utc: bool = False,",
      "18": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[datefmt] = None, utc: bool = False,",
      "19": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.getStructure()] = None, utc: bool = False,",
      "20": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ +/]?[0-9] { 0,1 } ] = None, utc: bool = False,",
      "21": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ u/s/g, ''] = None, utc: bool = False,",
      "22": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ # \\ s*$/] = None, utc: bool = False,",
      "23": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ +/] || []) = None, utc: bool = False,",
      "24": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.json] = None, utc: bool = False,",
      "25": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[$log.record_order] = None, utc: bool = False,",
      "26": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ # \\ s*$/]) = None, utc: bool = False,",
      "27": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ \\ s+/] = None, utc: bool = False,",
      "28": "json_default: Optional[Callable[[Any], Any]] = None, str = None, log_record_order: List[str] = None, utc: bool = False,",
      "29": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ \\ s+/]) || None, utc: bool = False,",
      "30": "json_default: Optional[Callable[[Any], Any]] = None, utc: bool = False,",
      "31": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ u/s/g, '')] = None, utc: bool = False,",
      "32": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ \\ s+/] = None), utc: bool = False,",
      "33": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ # \\ s*$/)] = None, utc: bool = False,",
      "34": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ || { } ]/g, utc: bool = False,",
      "35": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ } s+/]) = None, utc: bool = False,",
      "36": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[$_record_order] = None, utc: bool = False,",
      "37": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ u/s/g, '']) = None, utc: bool = False,",
      "38": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List['order'] = None, utc: bool = False,",
      "39": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[[str]] = None, utc: bool = False,",
      "40": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[,_str], utc: bool = False,",
      "41": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[$ref.str] = None, utc: bool = False,",
      "42": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ \\ s+/])], utc: bool = False,",
      "43": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[,_str] = None, utc: bool = False,",
      "44": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ # \\ s*$/]) || None, utc: bool = False,",
      "45": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[$log.str] = None, utc: bool = False,",
      "46": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[Structure.replace(/ \\ u/s/g, '') || None, utc: bool = False,",
      "47": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[JSON.stringify(str)], utc: bool = False,",
      "48": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: List[getStr()] = None, utc: bool = False,",
      "49": "json_default: Optional[Callable[[Any], Any]] = None, const log_record_order: List[str] = None, utc: bool = False,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
    "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
    "warning_line": "        channel_index: int = Deprecated,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 72,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/estimators/classification/keras.py",
    "target_filename": "art/estimators/classification/keras.py",
    "source_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c^",
    "target_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "predictions": [
      "use_logits: bool = False, channel_index: undefined, channels_first: bool = False,"
    ],
    "correct": false,
    "top_five": {
      "0": "use_logits: bool = False, channel_index: undefined, channels_first: bool = False,",
      "1": "use_logits: bool = False, channel_index: bool = False, channels_first: bool = False,",
      "2": "use_logits: bool = False, channel_index: utils._Deprecated, channels_first: bool = False,",
      "3": "use_logits: bool = False, channel_index: utils._int_deprecated, channels_first: bool = False,",
      "4": "use_logits: bool = False, channel_index: utils.int = Deprecated, channels_first: bool = False,",
      "5": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated :, channels_first: bool = False,",
      "6": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : False, channels_first: bool = False,",
      "7": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated :, channels_first: bool = False,",
      "8": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Deprecated, channels_first: bool = False,",
      "9": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : true, channels_first: bool = False,",
      "10": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : True, channels_first: bool = False,",
      "11": "use_logits: bool = False, channel_index: utils._intDeprecated, channels_first: bool = False,",
      "12": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : true, channels_first: bool = False,",
      "13": "use_logits: bool = False, channel_index, channels_first: bool = False,",
      "14": "use_logits: bool = False, channel_index: isStandardBoolean(int), channels_first: bool = False,",
      "15": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : false, channels_first: bool = False,",
      "16": "use_logits: bool = False, channel_index: utils._deprecated, channels_first: bool = False,",
      "17": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Boolean, channels_first: bool = False,",
      "18": "use_logits: bool = False, channel_index: isNaN(int)? [deprecated] : art.utils._Deprecated, channels_first: bool = False,",
      "19": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Localization, channels_first: bool = False,",
      "20": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : int, channels_first: bool = False,",
      "21": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : deprecated, channels_first: bool = False,",
      "22": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Disabled, channels_first: bool = False,",
      "23": "use_logits: bool = False, channel_index: Uint8Array = Deprecated, channels_first: bool = False,",
      "24": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : Deprecated, channels_first: bool = False,",
      "25": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : False, channels_first: bool = False,",
      "26": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Trunc, channels_first: bool = False,",
      "27": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : LowestBound, channels_first: bool = False,",
      "28": "use_logits: bool = False, channel_index: isNaN(int)? [deprecated] : bool, channels_first: bool = False,",
      "29": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : True, channels_first: bool = False,",
      "30": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Null, channels_first: bool = False,",
      "31": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : True, channels_first: bool = False,",
      "32": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : Trunc, channels_first: bool = False,",
      "33": "use_logits: bool = False, channel_index: isFirst, channels_first: bool = False,",
      "34": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Lowest, channels_first: bool = False,",
      "35": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Low-level, channels_first: bool = False,",
      "36": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : Boolean, channels_first: bool = False,",
      "37": "use_logits: bool = False, channel_index: utils._Int32, channels_first: bool = False,",
      "38": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : bool, channels_first: bool = False,",
      "39": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : NaN, channels_first: bool = False,",
      "40": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Visible, channels_first: bool = False,",
      "41": "use_logits: bool = False, channel_index: utils._int_0, channels_first: bool = False,",
      "42": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Int, channels_first: bool = False,",
      "43": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : 1, 2, channels_first: bool = False,",
      "44": "use_logits: bool = False, channel_index: utils._intValueDisabled, channels_first: bool = False,",
      "45": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : False, channels_first: bool = False,",
      "46": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : Truthy, channels_first: bool = False,",
      "47": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : int, channels_first: bool = False,",
      "48": "use_logits: bool = False, channel_index: isNode(int)? art.utils._Deprecated : Visible, channels_first: bool = False,",
      "49": "use_logits: bool = False, channel_index: isNaN(int)? art.utils._Deprecated : 0, channels_first: bool = False,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def rjust(self, width, fillchar=None):\n        # type: (int, Text) -> FmtStr\n        \"\"\"S.rjust(width[, fillchar]) -> string\n",
    "target_code": "\n    def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr:\n        \"\"\"S.rjust(width[, fillchar]) -> string\n",
    "warning_line": "    def rjust(self, width, fillchar=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fillchar is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 513,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bpython/curtsies",
    "source_filename": "curtsies/formatstring.py",
    "target_filename": "curtsies/formatstring.py",
    "source_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413^",
    "target_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413",
    "predictions": [
      "def rjust(self, width, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string"
    ],
    "correct": false,
    "top_five": {
      "0": "def rjust(self, width, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "1": "def rjust(self, width): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "2": "def rjust(self, width, fillchar=null): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "3": "def rjust(self, width, fillchar==None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "4": "def rjust(self, width, fillchar=0): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "5": "# type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "6": "def rjust(self, width, fillchar=0, null): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "7": "def rjust(self, width, fillchar=0, width=0): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "8": "def rjust(self, width, fillchar=0, defRight): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "9": "def rjust(self, width, fillchar=empty): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "10": "def rjust(self, width, fillchar=0, width=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "11": "def rjust(self, width, fillchar=0,0,0): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "12": "def rjust(self, width, fillchar=notNull): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "13": "def rjust(self, width, fillchar=0, defRaw): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "14": "def rjust(self, width, fillchar=0, defaultWidth): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "15": "def rjust(width, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "16": "def rjust(self, width, fillchar=0, int, Text): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "17": "def rjust(self, width, fillchar=0, defRadius=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "18": "def rjust(self, width, fillchar==null): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "19": "def rjust(self, width, fillchar=0, type === None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "20": "def rjust(self, width, fillchar=ignore): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "21": "def rjust(self, width, fillchar=undefined): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "22": "def rjust(self, width, fillchar=0, type:'string'): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "23": "def rjust(self, width, fillchar=0, defaultValue): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "24": "def rjust(self, width, fillchar=''): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "25": "def rjust(self, width, fillchar=0, value): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "26": "def rjust(self, width, fillchar=none): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "27": "def rjust(self, width, (fillchar=None)): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "28": "def rjust(self, width, fillchar=NONE): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "29": "def rjust(self, width, fillchar=None): # type: \"string\" -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "30": "def rjust(self, width, fillchar=0, offsetFrom, offsetTo): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "31": "def rjust(self, width, fillchar=0, defRadius=0): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "32": "def rjust(self, width, fillchar=0, undefined): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "33": "def rjust(self, width, fillchar=0, offset: # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "34": "def rjust(self, width, fillchar=0, defString=int): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "35": "def rjust(this, width, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "36": "def rjust(self, width, fillchar=Width): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "37": "def rjust(self, width, fillchar=None): # type: string (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "38": "def rjust(self, width, fillchar=__None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "39": "def rjust(self, width, fillchar=Target): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "40": "def rjust(self, width, fillchar=all): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "41": "def rjust(self, width, fillchar = null): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "42": "def rjust(self, width, fillchar=transparent): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "43": "def rjust(self, width, fillchar=void 0,0): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "44": "def rjust(self, width, fillchar==none): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "45": "def rjust(self, width, fillchar=0, true): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "46": "def rjust(self, width, fillchar==NONE): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "47": "def rjust(self, width, fillchar=None): # type: text -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "48": "def rjust(self, width, fillchar=None): # type: (\"string\") -> \"\"\"S.rjust(width[, fillchar]) -> string",
      "49": "def rjust(self, width, fillchar=None): # type: \"\"\"S.rjust(width[, fillchar]) -> string"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None\n) -> str:\n",
    "target_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
    "warning_line": "    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exclude is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 108,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/cli/info.py",
    "target_filename": "spacy/cli/info.py",
    "source_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979^",
    "target_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979",
    "predictions": [
      "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any],"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any],",
      "1": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any]",
      "2": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str =>",
      "3": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str].length;",
      "4": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : Dict[str];",
      "5": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : Dict[str, Any]",
      "6": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : 0;",
      "7": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : 0",
      "8": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], exclude: List[str] = None ) =>",
      "9": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str];",
      "10": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length;",
      "11": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str[0] : '';",
      "12": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str:",
      "13": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str[1] : '';",
      "14": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : 10",
      "15": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : Dict[str],",
      "16": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : '';",
      "17": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : 1;",
      "18": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str!== undefined? str : '';",
      "19": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], exclude: List[str] = None ;",
      "20": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1],",
      "21": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : 0",
      "22": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], exclude: List[str] = None )",
      "23": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str!== undefined? str : ''",
      "24": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.optional[str] = Optional[str] = None, exclude: List[str] = None",
      "25": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : None ;",
      "26": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.optional[str] = Optional[str] = None, exclude: List[str] = None",
      "27": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parst[str] = Optional[str] = None, exclude: List[str] = None",
      "28": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parst[st[st[str] = None, exclude: List[str] = None",
      "29": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parst[str]",
      "30": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.float(optional[str] = Optional[str] = None, exclude: List[str] = None )",
      "31": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length, optional: Optional[str] = None : def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None )",
      "32": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str[2] : '';",
      "33": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : None, exclude: Dict[st[str]",
      "34": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parst[st[st[st[str] = None, exclude: List[str] = None",
      "35": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Optional[str];",
      "36": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], exclude: List[str] = None ) />",
      "37": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : Dict[str], exclude: List[str] = None : def get_markdown( data && data!== null )",
      "38": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : None;",
      "39": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], include: Dict[str]",
      "40": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parseList[str] = Optional[str] = None, exclude: List[str] = None",
      "41": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : None, exclude: Dict[st[str] = Optional[str] = None, exclude: List[str] = None",
      "42": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Optional[str] = None;",
      "43": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str : Dict[str], exclude: List[str] = None : def get_markdown( data, title, Optional[str] = None, include: List[str] = None )",
      "44": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parseList[st[st[str] = None, exclude: List[str] = None",
      "45": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], accept: Dict[str]",
      "46": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: Dict[str, Any], exclude: List[str] = None );",
      "47": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : 0;",
      "48": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parseList[str]",
      "49": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str: str? str.length : Dict[str.length - 1] : def get_markdown( data : Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) : Dict[str.parst[st[st[st[str] = None, exclude: List[str] = None )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "target_code": "\ndef batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_line": "def batch_start(identifier: str, batch_type: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 84,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],"
    ],
    "correct": false,
    "top_five": {
      "0": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "1": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags);",
      "2": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict);",
      "3": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: dict=None);",
      "4": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict); } ;",
      "5": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict);",
      "6": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\");",
      "7": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict); } ;",
      "8": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"IRCParsed\");",
      "9": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], str);",
      "10": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags); } ;",
      "11": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict=None);",
      "12": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags );",
      "13": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict=None);",
      "14": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type],",
      "15": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"BATCH\");",
      "16": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict: None } );",
      "17": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], str, tags);",
      "18": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags),",
      "19": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\"],",
      "20": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], 10);",
      "21": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], %s],",
      "22": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict=BATCH_NONE);",
      "23": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict); },",
      "24": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags, dict=None);",
      "25": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH \" + dict);",
      "26": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"R\" + batch_name);",
      "27": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"IRCParsedLine\");",
      "28": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict); },",
      "29": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], %s], { );",
      "30": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], %s], } );",
      "31": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH 1\", [\"+%s\" % identifier, batch_type], dict=None);",
      "32": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"NONE\");",
      "33": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH \" + identifier);",
      "34": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: [\"+%s\" % identifier, batch_type]);",
      "35": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", null, tags);",
      "36": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict=None); } ;",
      "37": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], str, dict);",
      "38": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"Any\");",
      "39": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", dict);",
      "40": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict); }",
      "41": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH 1\", [\"+%s\" % identifier, batch_type],",
      "42": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\"); } ;",
      "43": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH 1\", [\"+%s\" % identifier, batch_type], dict);",
      "44": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\");",
      "45": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict: none } );",
      "46": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type], dict=BatchStatus);",
      "47": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \"BATCH\", [\"+%s\" % identifier, batch_type]);",
      "48": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict=None);",
      "49": "def batch_start(identifier: str, batch_type: str, tags: dict=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict: \"BATCH\" } );"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)\n",
    "target_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
    "warning_line": "    def add(self, verb: str, func: Callable, privilege: str=None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " privilege is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "1": "self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "2": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> none: self.validatefunc(func)",
      "3": "self.init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "4": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=none) -> None: self.validatefunc(func)",
      "5": "self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> none: self.validatefunc(func)",
      "6": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "7": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str==None) -> None: self.validatefunc(func)",
      "8": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "9": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str ==None) -> None: self.validatefunc(func)",
      "10": "def __init__(self) -> None: self.commands_per_priv = { None: { } ^ # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "11": "self.init_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "12": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] by adding(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "13": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc)",
      "14": "self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=none) -> None: self.validatefunc(func)",
      "15": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) }",
      "16": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # add: self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "17": "def __init__(self) -> None: self.commands_to_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "18": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "19": "def __init__(self) -> None: self.commands_per_priv = { None: { ^ } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "20": "def __init__(self) -> none: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "21": "self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "22": "def __init__(self) -> none: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> none: self.validatefunc(func)",
      "23": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, privilege: str=None) -> None: self.validatefunc(func)",
      "24": "def __init__(self) -> None: self.commands_per_priv = { none: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "25": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "26": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) } : self.validatefunc)",
      "27": "def __init__(self) -> None: self.commands_pers_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "28": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str]; def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "29": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) : self.validatefunc(func)",
      "30": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set()# type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "31": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) addOn: self.validatefunc(func)",
      "32": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # add: def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "33": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc",
      "34": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str]: def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "35": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # kind: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "36": "def.__init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "37": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "38": "def __init__(self) -> None: self.commands_per_priv = { None: { } \\ # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "39": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) } ;",
      "40": "self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "41": "def_init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "42": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) func: Callable;",
      "43": "self.enum_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "44": "self.def_init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "45": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc()",
      "46": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Set[str], Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "47": "self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) addOn: def __init__(self) -> None: self.validatefunc(func)",
      "48": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) return true",
      "49": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=None) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef unpack_model(model_file: Text, working_directory: Text = None,\n                 subdirectories: bool = False\n",
    "target_code": "\ndef unpack_model(model_file: Text, working_directory: Optional[Text] = None,\n                 subdirectories: bool = False\n",
    "warning_line": "def unpack_model(model_file: Text, working_directory: Text = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " working_directory is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/model.py",
    "target_filename": "rasa/model.py",
    "source_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7^",
    "target_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7",
    "predictions": [
      "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False"
    ],
    "correct": false,
    "top_five": {
      "0": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False",
      "1": "def unpack_model(model_file: Text, working_directory: None, subdirectories: bool = False",
      "2": "def unpack_model(text, working_directory: Text, subdirectories: bool = False",
      "3": "def unpack_model(model_file: Text, working_directory: Text, subdirectories: bool = False",
      "4": "def unpack_model(text, working_directory: Text = None, subdirectories: bool = False",
      "5": "def unpack_model(text, working_directory: None, subdirectories: bool = False",
      "6": "def unpack_model(model_file: Text, working_directory: Text + '/', subdirectories: bool = False",
      "7": "def unpack_model(model_file: Text, working_directory: Text + '/' + working_directory, subdirectories: bool = False",
      "8": "def unpack_model(model_file: Text, working_directory: Text = None, subdiries: bool = False",
      "9": "def unpack_model(model_file: Text, working_directory: Text + '/' + work_dir, subdirectories: bool = False",
      "10": "def unpack_model(model_file: Text, working_directory: Text = none, subdirectories: bool = False",
      "11": "def unpack_model(model_file: Text, working_diry: Text = None, subdirectories: bool = False",
      "12": "def unpack_model(model_file: Text, working_directory: none, subdirectories: bool = False",
      "13": "def unpack_model(model_file: Text, working_directory: Text + '/' + subdirectories: bool = False",
      "14": "def unpack_model(model_file: Text, working_directory: Text = All, subdirectories: bool = False",
      "15": "def unpack_model(model_file: Text, working_directory: Text + '//str/', subdirectories: bool = False",
      "16": "def unpack_model(null, model_file: Text, working_directory: Text = None, subdirectories: bool = False",
      "17": "def unpack_model(model_file: Text, working_directory: Text = '', subdirectories: bool = False",
      "18": "def unpack_model(model_file: Text, working_directory: Text = Null, subdirectories: bool = False",
      "19": "def unpack_model(model_file: Text, working_directory: Text + '/' + model_file, subdirectories: bool = False",
      "20": "def unpack_model(model_file: Text, working_directory: Text = Nothing, subdirectories: bool = False",
      "21": "def unpack_model(text, working_directory: none, subdirectories: bool = False",
      "22": "def unpack_model(model_file: Text, main_working_directory: Text, subdirectories: bool = False",
      "23": "def unpack_model(model_file: Text, working_directory: Text + '//str', subdirectories: bool = False",
      "24": "def unpack_model(model_file: Text, working_directory: Text = Non, subdirectories: bool = False",
      "25": "def unpack_model(model_file: Text, working_directory: Text.is_static, subdirectories: bool = False",
      "26": "def unpack_model(model_file: Text, working_directory: Text + '//str, subdirectories: bool = False",
      "27": "def unpack_model(text, working_directory: Text + '/' + model_file, subdirectories: bool = False",
      "28": "def unpack_model(model_file: Text, working_directory: Text + '/' + work_dirs + '/', subdirectories: bool = False",
      "29": "def unpack_model(model_file: Text, working_directory: Text + '/' + working_dir, subdirectories: bool = False",
      "30": "def unpack_model( model_file: Text, working_directory: Text = None, subdirectories: bool = False",
      "31": "def unpack_model(model_file: Text, working_directory: Default, subdirectories: bool = False",
      "32": "def unpack_model(model_file: Text, main_working_directory: Text = None, subdirectories: bool = False",
      "33": "def unpack_model(Text, working_directory: Text = None, subdirectories: bool = False",
      "34": "def unpack_model(model_file: Text, working_directory: All, subdirectories: bool = False",
      "35": "def unpack_model(model_file: Text, working_directory: Text + '//str/tr, subdirectories: bool = False",
      "36": "def unpack_model(model_file: Text, working_directory: Text + '/' + working_directory; subdirectories: bool = False",
      "37": "def unpack_model(model_file: Text, working_directory: Text + '//str', subdirectories: bool = False",
      "38": "def unpack_model(text, working_directory: Text + '/', subdirectories: bool = False",
      "39": "def unpack_model(modell_file: Text, working_directory: Text = None, subdirectories: bool = False",
      "40": "def unpack_model(model_file: Text, working_directory: Text = No, subdirectories: bool = False",
      "41": "def unpack_model(model_file: Text, working_directory: Text + '/' + work_dirname, subdirectories: bool = False",
      "42": "def unpack_model(model_file: Text, working_directory: Text = 0, subdirectories: bool = False",
      "43": "def unpack_model(text_model, working_directory: Text = None, subdirectories: bool = False",
      "44": "def unpack_model(model_file: Text, work_directory: Text = None, subdirectories: bool = False",
      "45": "def unpack_model(model_file: Text, working_directory: Plain Text, subdirectories: bool = False",
      "46": "def unpack_model((model_file: Text, working_directory: Text = None, subdirectories: bool = False",
      "47": "def unpack_model(model_file: Text, current_directory: Text = None, subdirectories: bool = False",
      "48": "def unpack_model(model_file: Text, working_directory: Text + '/' + model_dir, subdirectories: bool = False",
      "49": "def unpack_model((text) => { working_directory: Text = None, subdirectories: bool = False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef translateAlgebra(query_algebra: Query = None):\n    \"\"\"\n",
    "target_code": "\ndef translateAlgebra(query_algebra: Query):\n    \"\"\"\n",
    "warning_line": "def translateAlgebra(query_algebra: Query = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " query_algebra is declared to have type `Query` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 804,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RDFLib/rdflib",
    "source_filename": "rdflib/plugins/sparql/algebra.py",
    "target_filename": "rdflib/plugins/sparql/algebra.py",
    "source_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c^",
    "target_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "predictions": [
      "def translateAlgebra(query_algebra: Query = None): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def translateAlgebra(query_algebra: Query = None): \"\"\"",
      "1": "def translateAlgebra(query_algebra: None): \"\"\"",
      "2": "def translateAlgebra(query_algebra: Lie = None): \"\"\"",
      "3": "def translateAlgebra(query_algebra: Query$ { query_algebra } ): \"\"\"",
      "4": "def translateAlgebra(query_algebra: QUERY = None): \"\"\"",
      "5": "def translateAlgebra(query_algebra): \"\"\"",
      "6": "def translateAlgebra(query_algebra: Query = None, QueryString): \"\"\"",
      "7": "def translateAlgebra(query_algebra: Result = None): \"\"\"",
      "8": "def translateAlgebra(query_algebra: Query$ { query_algebra } = None): \"\"\"",
      "9": "def translateAlgebra(query_algebra: 'query' = None): \"\"\"",
      "10": "def translateAlgebra(query_algebra: Y = None): \"\"\"",
      "11": "def translateAlgebra(query_algebra: Query = None, Query = None): \"\"\"",
      "12": "def translateAlgebra(query_algebra: Query = None, QueryValue): \"\"\"",
      "13": "def translateAlgebra(query_algebra: Span = None): \"\"\"",
      "14": "def translateAlgebra(query_algebra: Query = None, Query = Math.floor(query_algebra)): \"\"\"",
      "15": "def translateAlgebra(query_algebra: all_query_algebra): \"\"\"",
      "16": "def translateAlgebra(query_algebra, Query = None): \"\"\"",
      "17": "def translateAlgebra(query_algebra: SUCCESS = None): \"\"\"",
      "18": "def translateAlgebra(query_algebra:!query_algebra = None): \"\"\"",
      "19": "def translateAlgebra(query_algebra: ''): \"\"\"",
      "20": "def translateAlgebra(query_algebra: _Query = None): \"\"\"",
      "21": "def translateAlgebra(query_algebra: Query = None, Query = Math.max(query_algebra)): \"\"\"",
      "22": "def translateAlgebra(query_algebra:!Query = None): \"\"\"",
      "23": "def translateAlgebra(query_algebra : Query = None): \"\"\"",
      "24": "def translateAlgebra(query_algebra: 'Query' = None): \"\"\"",
      "25": "def translateAlgebra(query_algebra: Query = Null): \"\"\"",
      "26": "def translateAlgebra(query_algebra : None): \"\"\"",
      "27": "def translateAlgebra(query_algebra: Y.S.Query = None): \"\"\"",
      "28": "def translateAlgebra(query_algebra: Query$ { query_algebra } ): \"\"\"",
      "29": "def translateAlgebra(query_algebra: Y.Sequence = None): \"\"\"",
      "30": "def translateAlgebra(query_algebra: Query = None,'string'): \"\"\"",
      "31": "def translateAlgebra(query_algebra: Query = None): \"\"\"",
      "32": "def translateAlgebra(query_algebra: 'Query'): \"\"\"",
      "33": "def translateAlgebra(query_algebra: Query = No): \"\"\"",
      "34": "def translateAlgebra(query_algebra: Alp = None): \"\"\"",
      "35": "def translateAlgebra(query_algebra: Object = None): \"\"\"",
      "36": "def translateAlgebra(query_algebra: SUCCESS, None): \"\"\"",
      "37": "def translateAlgebra(query_algebra: 'Any'): \"\"\"",
      "38": "def translateAlgebra(query_algebra($, Query = None)): \"\"\"",
      "39": "def translateAlgebra(query_algebra: SUCCESS): \"\"\"",
      "40": "def translateAlgebra(query_algebra: none): \"\"\"",
      "41": "def translateAlgebra(query_algebra: Query$ { query_algebra \\ ): \"\"\"",
      "42": "def translateAlgebra(query_algebra: Y.Sequery = None): \"\"\"",
      "43": "def translateAlgebra(query_algebra: PLDTrace = None): \"\"\"",
      "44": "def translateAlgebra(query_algebra: Lie(None)): \"\"\"",
      "45": "def translateAlgebra(query_algebra: Query = None) : \"\"\"",
      "46": "def translateAlgebra(query_algebra: 'query'): \"\"\"",
      "47": "def translateAlgebra(query_algebra:...Query = None): \"\"\"",
      "48": "def translateAlgebra(query_algebra || Query = None): \"\"\"",
      "49": "def translateAlgebra(query_algebra: Query$ { query_algebra \\ = None): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_line": "        checkpointer: Lazy[Checkpointer] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/training/trainer.py",
    "target_filename": "allennlp/training/trainer.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "1": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "2": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "3": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "4": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "5": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "6": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "7": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "8": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, batch_callbacks: List[BatchCallback] = None,",
      "9": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: None, batch_callbacks: List[BatchCallback] = None,",
      "10": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "11": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback",
      "12": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, batch_callbacks: List[BatchCallback] = None,",
      "13": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, batch_callbacks: List[BatchCallback] = None,",
      "14": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "15": "none_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCall] = None,",
      "16": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: None, batch_callbacks: List[Checkpointer] = None,",
      "17": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, batch_callbacks: List[BatchCallback] = None,",
      "18": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, moving_average: List[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "19": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "20": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, moving_average: List[TensorboardWriter] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "21": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "22": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, moving_average: List[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "23": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: None, batch_callbacks: List[BatchCallback]",
      "24": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "25": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallBack",
      "26": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer_callbacks: None, batch_callbacks: List[Checkpointer] = None,",
      "27": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "28": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallbacks,",
      "29": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: None, batch_callbacks: List[Checkpointer] = None,",
      "30": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: None, batch_callbacks: List[BatchCallback] = None,",
      "31": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "32": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "33": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer_callbacks: List[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "34": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCall",
      "35": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, moving_average: Lazy[MovingAverage] = None, batch_callbacks: List[BatchCallback] = None,",
      "36": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "37": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "38": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_speed_scheduler: Lazy[LearningRateScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "39": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, movement_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "40": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "41": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "42": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "43": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, batch_callbacks: List[BatchCallback] = None,",
      "44": "none_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: None, batch_callbacks: List[BatchCallback] = None,",
      "45": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, moving_average: Lazy[TensorboardWriter] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "46": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, motion_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "47": "none_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "48": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer_callbacks: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "49": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, moving_average: Lazy[TensorboardWriter] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCall] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,\n",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_line": "        extras: bool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " extras is declared to have type `bool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 46,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trailofbits/pip-audit",
    "source_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "target_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c^",
    "target_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "predictions": [
      "version: Version, url: Optional[str] = None, extras: bool = None, is_wheel: bool = True,"
    ],
    "correct": false,
    "top_five": {
      "0": "version: Version, url: Optional[str] = None, extras: bool = None, is_wheel: bool = True,",
      "1": "version: Version, url: Optional[str] = None, extras: bool = none, is_wheel: bool = True,",
      "2": "version: Version, url: Optional[str] = None, extras: bool = Nothing, is_wheel: bool = True,",
      "3": "version: Version, url: Optional[str] = None, extras: bool = All, is_wheel: bool = True,",
      "4": "version: Version, url: Optional[str] = None, extras: bool = NotFound, is_wheel: bool = True,",
      "5": "version: Version, url: Optional[str] = None, extras: bool = No, is_wheel: bool = True,",
      "6": "version: Version, url: Optional[str] = None, extras: bool = '', is_wheel: bool = True,",
      "7": "version: Version, url: Optional.parse(str) = None, extras: bool = None, is_wheel: bool = True,",
      "8": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? true : false, is_wheel: bool = True,",
      "9": "version: Version, url: Optional[str] = None, extras: bool = Non, is_wheel: bool = True,",
      "10": "version: Version, url: Optional[str] = None, extras: bool = Undefined, is_wheel: bool = True,",
      "11": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? true : False, is_wheel: bool = True,",
      "12": "version: Version, url: Optional[str] = None, extras: bool = Null, is_wheel: bool = True,",
      "13": "version: Version, url: Optional[str] = None, extras: is_wheel: bool = True,",
      "14": "version: Version, url: Optional[str] = None, extras: url, is_wheel: bool = True,",
      "15": "version: Version, url: Optional[str] = None, extras: bool = null, is_wheel: bool = True,",
      "16": "version: Version, url: Optional[str] = None, extras: are_wheel = bool = True, is_wheel: bool = True,",
      "17": "version: Version, url: Optional.params[str] = None, extras: bool = None, is_wheel: bool = True,",
      "18": "version: Version, url: Optional[str] = None, extras: bool = undefined, is_wheel: bool = True,",
      "19": "version: Version, url: Optional[str] = None, extras: bool = Version, is_wheel: bool = True,",
      "20": "version: Version, url: Optional.str = None, extras: bool = None, is_wheel: bool = True,",
      "21": "version: Version, url: Optional[str] = None, extras: bool = True, is_wheel: bool = True,",
      "22": "version: Version, url: Optional.$parse(str) = None, extras: bool = None, is_wheel: bool = True,",
      "23": "version: Version, url: Optional[str] = None, extras: bool = WithoutAttribute('wheel'), is_wheel: bool = True,",
      "24": "version: Version, url: Optional[str] = None, extras: bool = () => None, is_wheel: bool = True,",
      "25": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? true : None, is_wheel: bool = True,",
      "26": "version: Version, url: Optional.parse() = None, extras: bool = None, is_wheel: bool = True,",
      "27": "version: Version, url: Optional[str] = None, extras: bool = _.defaults.bool, is_wheel: bool = True,",
      "28": "version: Version, url: Optional[str] = None, extras: bool = NONE, is_wheel: bool = True,",
      "29": "version: Version, url: Optional[str] = None, extras: bool = None, is_wheel: bool = True,",
      "30": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? false : true, is_wheel: bool = True,",
      "31": "version: Version, url: Optional[str] = None, extras: bool = ParseInt(None), is_wheel: bool = True,",
      "32": "version: Version, url: Optional[str] = None, extras: bool = _.defaults(None), is_wheel: bool = True,",
      "33": "version: Version, url: Optional[str] = None, extras: bool = Without, is_wheel: bool = True,",
      "34": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? is_wheel : False,",
      "35": "version: Version, url: Optional.prototype = None, extras: bool = None, is_wheel: bool = True,",
      "36": "version: Version, url: Optional[str] = None, extras: bool = Never, is_wheel: bool = True,",
      "37": "version: Version, url: Optional[str] = None, extras: bool =, is_wheel: bool = True,",
      "38": "version: Version, url: Optional[str] = None, extras: bool = Zero, is_wheel: bool = True,",
      "39": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? false : is_wheel || True, is_wheel: bool = True,",
      "40": "version: Version, url: Optional[str] = None, extras: bool = NotNull, is_wheel: bool = True,",
      "41": "version: Version, url: Optional[str] = None, extras: are_wheel || null, is_wheel: bool = True,",
      "42": "version: Version, url: Optional[str] = None, extras: bool = is_wheel? false : is_wheel; is_wheel: bool = True,",
      "43": "version: Version, url: Optional[str] = None, extras: 'bool', is_wheel: bool = True,",
      "44": "version: Version, url: Optional[str] = None, extras: bool = NaN, is_wheel: bool = True,",
      "45": "version: Version, url: Optional[str] = None, extras: is_wheel bool = True,",
      "46": "version: Version, url: Optional[str] = None, extras: bool = all, is_wheel: bool = True,",
      "47": "version: Version, url: Optional[str] = None, extras: bool = Any, is_wheel: bool = True,",
      "48": "version: Version, url: Optional[str] = None, extras: bool = Nicht, is_wheel: bool = True,",
      "49": "version: Version, url: Optional[str] = Non, extras: bool = None, is_wheel: bool = True,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
    "target_code": "    count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_line": "    seconds %= amount",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " seconds is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 416,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count"
    ],
    "correct": false,
    "top_five": {
      "0": "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "1": "count = int(seconds / amount) var seconds %= amount time_comp[label.strip()] = count",
      "2": "count = int(seconds / amount) var seconds = int(seconds / amount) var seconds %= amount time_comp[label.strip()] = count",
      "3": "count = int(seconds / amount) %= amount seconds %= amount time_comp[label.strip()] = count",
      "4": "count = int(seconds / amount) var seconds = float(seconds) %= amount time_comp[label.strip()] = count",
      "5": "count = int(seconds / amount) second %= amount time_comp[label.strip()] = count",
      "6": "count = int(seconds / amount) if (float) seconds %= amount time_comp[label.strip()] = count",
      "7": "count = convertor(int(seconds / amount)) seconds %= amount time_comp[label.strip()] = count",
      "8": "count = int(seconds / amount) var seconds = float(int) seconds %= amount time_comp[label.strip()] = count",
      "9": "count = int(seconds / amount) var seconds = seconds %= amount time_comp[label.strip()] = count",
      "10": "count = convert_float(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "11": "count = convert_to_float(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "12": "count = int(seconds / amount) var seconds = float(int) %= amount time_comp[label.strip()] = count",
      "13": "count = int(seconds / amount) secs %= amount time_comp[label.strip()] = count",
      "14": "count = int(seconds / amount) Float(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "15": "count = int(seconds / amount) Float(seconds %= amount) time_comp[label.strip()] = count",
      "16": "count = integer(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "17": "count = int(seconds / amount) Float(seconds) %= amount time_comp[label.strip()] = count",
      "18": "count = parseFloat(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "19": "count = decimal(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "20": "count = fraction(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "21": "count = int(seconds / amount) Float(seconds) seconds %= amount time_comp[label.strip()] = count",
      "22": "count = int(seconds / amount) decimals %= amount seconds %= amount time_comp[label.strip()] = count",
      "23": "count = int(seconds / amount)? seconds : float time_comp[label.strip()] = count",
      "24": "count = float(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "25": "count = int(seconds / amount) float(seconds) seconds %= amount time_comp[label.strip()] = count",
      "26": "counts = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "27": "count = int(seconds / amount) Sekunden %= amount time_comp[label.strip()] = count",
      "28": "count = floating_seconds(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "29": "count = int(sec / amount) seconds %= amount time_comp[label.strip()] = count",
      "30": "count = int(seconds / amount) var seconds = int(seconds / amount) var minutes %= amount time_comp[label.strip()] = count",
      "31": "counter = measure(int(seconds / amount)) seconds %= amount time_comp[label.strip()] = count",
      "32": "count = int(seconds / amount) ; seconds %= amount ; time_comp[label.strip()] = count",
      "33": "count = int(seconds / amount) let seconds %= amount time_comp[label.strip()] = count",
      "34": "count = int(seconds / amount) Float seconds %= amount time_comp[label.strip()] = count",
      "35": "count = integer (seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "36": "count = int(seconds / amount) const seconds %= amount time_comp[label.strip()] = count",
      "37": "count = int(seconds / amount) val seconds %= amount time_comp[label.strip()] = count",
      "38": "count = int(seconds / amount) minutes %= amount time_comp[label.strip()] = count",
      "39": "count = int(seconds / amount)  seconds %= amount time_comp[label.strip()] = count",
      "40": "count = convertor(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "41": "count = int(seconds / amount) var seconds = int(seconds / amount) var %= amount time_comp[label.strip()] = count",
      "42": "counter = counter(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "43": "count = int(seconds / amount) if (float &&!float) return result time_comp[label.strip()] = count",
      "44": "count = convert_to_float(seconds / amount) %= amount time_comp[label.strip()] = count",
      "45": "count = int(seconds / amount) decimals %= amount time_comp[label.strip()] = count",
      "46": "count = int(second / amount) seconds %= amount time_comp[label.strip()] = count",
      "47": "count = flot(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "48": "count = unit(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "49": "count = int(s / amount) seconds %= amount time_comp[label.strip()] = count"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/api.py",
    "target_filename": "nio/api.py",
    "source_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0^",
    "target_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "predictions": [
      "homeserver = urlparse(homeserver) if homeserver else None"
    ],
    "correct": false,
    "top_five": {
      "0": "homeserver = urlparse(homeserver) if homeserver else None",
      "1": "homeserver = urlparse(server) if homeserver else None",
      "2": "homeserver = urlparse(homeserver) if homeserver else None:",
      "3": "homeserver = urlparse(server) if homeserver else None:",
      "4": "homeserver = urlparse(server) if homeserver else None: homeserver = urllib.parse(server)",
      "5": "homeserver = urlparse(homeserver) if homeserver else None: homeserver = urllib.parse(homeserver)",
      "6": "homeserver = urlparse(server) if homeserver else None: homeserver = urlparse(server)",
      "7": "homeserver = urlparse(server, options) if homeserver else None: homeserver = urlparse(server, options)",
      "8": "homeserver = urlparse(homeserver) if homeserver else None: homeserver = urlparse(homeserver)",
      "9": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).SaveAsPath(urllib.parse.ParseResult)",
      "10": "homeserver = urlparse(homeserver)",
      "11": "homeserver = urlparse(server|urllib.parse.ParseResult) if homeserver else None: homeserver = urlparse(server|urllib.parse.ParseResult)",
      "12": "homeserver = urlparse(server) if homeserver else None: homeserver = null",
      "13": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.name, urllib.parse.ParseResult)",
      "14": "homeserver = urlparse(server, options) if homeserver else None: homeserver ='str' but is declared as type Optional[urllib.parse.ParseResult]",
      "15": "homeserver = urlparse(server, options) if homeserver else None: homeserver ='str' but is used as type Optional[urllib.parse.ParseResult]",
      "16": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.name, urllib.parse.ParseResult);",
      "17": "homeserver = urlparse(homeserver) if homeserver else None: homeserver = urllib.parse(server.ParseResult)",
      "18": "homeserver = urlparse(server, options) if homeserver else None: homeserver = urllib.parse(server, options)",
      "19": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.name)",
      "20": "homeserver = urlparse(server) if homeserver else None: homeserver = urllib.parse(homeserver)",
      "21": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).parse()",
      "22": "homeserver = urlparse(server) if homeserver else None: homeserver = urlparse(homeserver)",
      "23": "homeserver = urlparse(server, options) if homeserver else None: homeserver = config.urls.parse(server, options)",
      "24": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.alias, urllib.parse.ParseResult)",
      "25": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id)",
      "26": "homeserver = urlparse(server, options) if homeserver else None: homeserver = config.urlse(server, options)",
      "27": "homeserver = urlparse(server, options) if homeserver else None: homeserver = urlparse(homeserver, options)",
      "28": "homeserver = urlparse(server, options) if homeserver else None:",
      "29": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).ParseResult(urllib.parse.ParseResult)",
      "30": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.PORT_NAME, urllib.parse.ParseResult);",
      "31": "homeserver = urlparse(server.config.URL) if homeserver else None: homeserver = urlparse(server.config.URL)",
      "32": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.name, urllib.parse.ParseResult, server.name)",
      "33": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.model, urllib.parse.ParseResult)",
      "34": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).parse(homeserver)",
      "35": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).parseResult(urllib.parse.ParseResult)",
      "36": "homeserver = urlparse(server, options) if homeserver else None: homeserver ='str' but is used as type Option[urllib.parse.ParseResult]",
      "37": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, urllib.parse.ParseResult)",
      "38": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).SaveAsHtml(urllib.parse.ParseResult)",
      "39": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).bind(null, null)",
      "40": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.PORT_NAME, urllib.parse.ParseResult)",
      "41": "homeserver = urlparse(server.config.url) if homeserver else None: homeserver = urlparse(server.config.url)",
      "42": "homeserver = urlparse(homeserver) if homeserver else None: homeserver = null",
      "43": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.name, urllib.parse.ParseResult, null)",
      "44": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.config.result);",
      "45": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.profile, urllib.parse.ParseResult, null)",
      "46": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.config.urls, null, callback.modules, urllib.parse.ParseResult)",
      "47": "homeserver = urlparse(homeserver) if homeserver else None: return callback(null, null, server.alias, urllib.parse.ParseResult);",
      "48": "homeserver = urlparse(homeserver) if homeserver else None: homeserver = urllib.parse(server.params)",
      "49": "homeserver = urlparse(webpackConfig.id) if homeserver else None: homeserver = urlparse(webpackConfig.id).parseResult"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
    "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 93,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ReactiveX/RxPY",
    "source_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "target_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "source_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90^",
    "target_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "predictions": [
      "duetime = self.to_datetime(duetime) si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)"
    ],
    "correct": false,
    "top_five": {
      "0": "duetime = self.to_datetime(duetime) si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
      "1": "duetime = self.to_datetime(duetime) si: ScheduledItem[TState] = ScheduledItem(self, state, action, duetime)",
      "2": "duetime = self.to_datetime(duetime) si: ScheduledItem[Variable[typing.TState]] = ScheduledItem(self, state, action, duetime)",
      "3": "duetime = self.to_datetime(duetime) si: ScheduledItem[Variable.TState] = ScheduledItem(self, state, action, duetime)",
      "4": "duetime = self.to_datetime(duetime) si: ScheduledItem[variant.TState] = ScheduledItem(self, state, action, duetime)",
      "5": "duetime = self.to_datetime(duetime) si: ScheduledItem[TYPE_State] = ScheduledItem(self, state, action, duetime)",
      "6": "duetime = self.to_datetime(duetime) si: ScheduledItem[vuetification.TState] = ScheduledItem(self, state, action, duetime)",
      "7": "duetime = self.to_datetime(duetime) si: ScheduledItem[TYPING.TState] = ScheduledItem(self, state, action, duetime)",
      "8": "duetime = self.to_datetime(duetime) si: ScheduledItem[v] = ScheduledItem(self, state, action, duetime)",
      "9": "duetime = self.to_datetime(duetime) si: ScheduledItem[__text.TState] = ScheduledItem(self, state, action, duetime)",
      "10": "duetime = self.to_datetime(duetime) si: ScheduledItem[basics.TState] = ScheduledItem(self, state, action, duetime)",
      "11": "duetime = self.to_datetime(duetime) si: ScheduledItem[vctor.TState] = ScheduledItem(self, state, action, duetime)",
      "12": "duetime = self.to_datetime(duetime) si: ScheduledItem[TreeValue.TState] = ScheduledItem(self, state, action, duetime)",
      "13": "duetime = self.to_datetime(duetime) si: ScheduledItem[versity.TState] = ScheduledItem(self, state, action, duetime)",
      "14": "duetime = self.to_datetime(duetime) si: ScheduledItem[status] = ScheduledItem(self, state, action, duetime)",
      "15": "duetime = self.to_datetime(duetime)",
      "16": "duetime = self.to_datetime(duetime) si: ScheduledItem[variable.TState] = ScheduledItem(self, state, action, duetime)",
      "17": "duetime = self.to_datetime(duetime) si: ScheduledItem[variable[typing.TState]] = ScheduledItem(self, state, action, duetime)",
      "18": "duetime = self.to_datetime(duetime) si: ScheduledItem[versatile.TState] = ScheduledItem(self, state, action, duetime)",
      "19": "duetime = self.to_datetime(duetime) si: ScheduledItem[Tab.State] = ScheduledItem(self, state, action, duetime)",
      "20": "duetime = self.to_datetime(duetime) si: ScheduledItem[variable[typing.TState]] = ScheduledItem(self, state, action, duetime)",
      "21": "duetime = self.to_datetime(duetime) si: ScheduledItem[Tracking.TState] = ScheduledItem(self, state, action, duetime)",
      "22": "duetime = self.to_datetime(duetime) si: ScheduledItem[vuetify.TState] = ScheduledItem(self, state, action, duetime)",
      "23": "duetime = self.to_datetime(duetime) si: ScheduledItem[VB] = ScheduledItem(self, state, action, duetime)",
      "24": "duetime = self.to_datetime(duetime) si: ScheduledItem[TYPE_TState] = ScheduledItem(self, state, action, duetime)",
      "25": "duetime = self.to_datetime(duetime) si: ScheduledItem[self.typing.TState] = ScheduledItem(self, state, action, duetime)",
      "26": "duetime = self.to_datetime(duetime) si: ScheduledItem[viability.TState] = ScheduledItem(self, state, action, duetime)",
      "27": "duetime = self.to_datetime(duetime) si: ScheduledItem[State] = ScheduledItem(self, state, action, duetime)",
      "28": "duetime = self.to_datetime(duetime) si: ScheduledItem[testState] = ScheduledItem(self, state, action, duetime)",
      "29": "duetime = self.to_datetime(duetime) si: ScheduledItem[NSValue.TState] = ScheduledItem(self, state, action, duetime)",
      "30": "duetime = self.to_datetime(duetime) si: ScheduledItem[variable.TState] = ScheduledItem(self, state, action, duetime)",
      "31": "duetime = self.to_datetime(duetime) si: ScheduledItem[TabValue.TState] = ScheduledItem(self, state, action, duetime)",
      "32": "duetime = self.to_datetime(duetime) si: ScheduledItem[Typing.TState] = ScheduledItem(self, state, action, duetime)",
      "33": "duetime = self.to_datetime(duetime) si: ScheduledItem[VB.Type.TState] = ScheduledItem(self, state, action, duetime)",
      "34": "duetime = self.to_datetime(duetime) si: ScheduledItem[basicState] = ScheduledItem(self, state, action, duetime)",
      "35": "duetime = self.to_datetime(duetime) si: ScheduledItem[t.State] = ScheduledItem(self, state, action, duetime)",
      "36": "duetime = self.to_datetime(duetime) si: ScheduledItem[VT] = ScheduledItem(self, state, action, duetime)",
      "37": "duetime = self.to_datetime(duetime) si: ScheduledItem[__type__].TState] = ScheduledItem(self, state, action, duetime)",
      "38": "duetime = self.to_datetime(duetime) si: ScheduledItem[vctory.TState] = ScheduledItem(self, state, action, duetime)",
      "39": "duetime = self.to_datetime(duetime) si: ScheduledItem[t.TState] = ScheduledItem(self, state, action, duetime)",
      "40": "duetime = self.to_datetime(duetime) si: ScheduledItem[translate.TState] = ScheduledItem(self, state, action, duetime)",
      "41": "duetime = self.to_datetime(duetime) si: ScheduledItem[TYPE.TState] = ScheduledItem(self, state, action, duetime)",
      "42": "duetime = self.to_datetime(duetime) si: ScheduledItem[throwing.TState] = ScheduledItem(self, state, action, duetime)",
      "43": "duetime = self.to_datetime(duetime) si: ScheduledItem[var.TState] = ScheduledItem(self, state, action, duetime)",
      "44": "duetime = self.to_datetime(duetime) si: ScheduledItem[NSValue] = ScheduledItem(self, state, action, duetime)",
      "45": "duetime = self.to_datetime(duetime) si: ScheduledItem[__version] = ScheduledItem(self, state, action, duetime)",
      "46": "duetime = self.to_datetime(duetime) si: ScheduledItem[struct.TState] = ScheduledItem(self, state, action, duetime)",
      "47": "duetime = self.to_datetime(duetime) si: ScheduledItem[TR] = ScheduledItem(self, state, action, duetime)",
      "48": "duetime = self.to_datetime(duetime) si: ScheduledItem[TL] = ScheduledItem(self, state, action, duetime)",
      "49": "duetime = self.to_datetime(duetime) si: ScheduledItem[VT].State = ScheduledItem(self, state, action, duetime)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,\n",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_line": "    other_indices: dict = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAI",
    "source_filename": "monai/visualize/img2tensorboard.py",
    "target_filename": "monai/visualize/img2tensorboard.py",
    "source_changeid": "718d11abb2310ab74321256032a264488a7883b4^",
    "target_changeid": "718d11abb2310ab74321256032a264488a7883b4",
    "predictions": [
      "image_axes: Sequence[int] = (1, 2), other_indices: dict = None, scale_factor: float = 1,"
    ],
    "correct": false,
    "top_five": {
      "0": "image_axes: Sequence[int] = (1, 2), other_indices: dict = None, scale_factor: float = 1,",
      "1": "image_axes: Sequence[int] = (1, 2), scale_factor: float = 1,",
      "2": "image_axes: Sequence[int] = (1, 2), other_indices: None, scale_factor: float = 1,",
      "3": "image_axes: Sequence[int] = (1, 2), other_indices: dict = Null, scale_factor: float = 1,",
      "4": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : 'undefined'), scale_factor: float = 1,",
      "5": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : None, scale_factor: float = 1,",
      "6": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : null, scale_factor: float = 1,",
      "7": "image_axes: Sequence[int] = (1, 2), other_indices: dict = TypeError(typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "8": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : None, scale_factor: float = 1,",
      "9": "image_axes: Sequence[int] = (1, 2), other_indices: dict = none, scale_factor: float = 1,",
      "10": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : None, scale_factor: float = 1,",
      "11": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : 'undefined', scale_factor: float = 1,",
      "12": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : null), scale_factor: float = 1,",
      "13": "image_axes: Sequence[int] = (1, 2), other_indices: dict = Nothing, scale_factor: float = 1,",
      "14": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any] : None, scale_factor: float = 1,",
      "15": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "16": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : null), scale_factor: float = 1,",
      "17": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "18": "image_axes: Sequence[int] = (1, 2), other_indices: dict = TypeError('typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "19": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : null, scale_factor: float = 1,",
      "20": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any] : 'None', scale_factor: float = 1,",
      "21": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : None, scale_factor: float = 1,",
      "22": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict === Typeof dict?' && typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "23": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "24": "image_axes: Sequence[int] = (1, 2), other_indices: dict = Non, scale_factor: float = 1,",
      "25": "image_axes: Sequence[int] = (1, 2), other_indices: null, scale_factor: float = 1,",
      "26": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : 'None', scale_factor: float = 1,",
      "27": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == Typeof dict?' && typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "28": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any] : None, scale_factor: float = 1,",
      "29": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "30": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any] : 'None'), scale_factor: float = 1,",
      "31": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? Any, typing.Any] : None, scale_factor: float = 1,",
      "32": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "33": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : undefined, scale_factor: float = 1,",
      "34": "image_axes: Sequence[int] = (1, 2), autres_indices: dict = None, scale_factor: float = 1,",
      "35": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any] : null, scale_factor: float = 1,",
      "36": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : 'None'), scale_factor: float = 1,",
      "37": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any]) : None, scale_factor: float = 1,",
      "38": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict!== Dict[typing.Any, typing.Any]), scale_factor: float = 1,",
      "39": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? typing.Dict[typing.Any, typing.Any] : null), scale_factor: float = 1,",
      "40": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == Dict?'? Any|Any : None), scale_factor: float = 1,",
      "41": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'number'? typing.Dict[typing.Any, typing.Any] : 'undefined'), scale_factor: float = 1,",
      "42": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? Any, typing.Any] : None, scale_factor: float = 1,",
      "43": "image_axes: Sequence[int] = (1, 2), other_indices: dict = null, scale_factor: float = 1,",
      "44": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == Dict?[typing.Any, typing.Any]), scale_factor: float = 1,",
      "45": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'undefined'? typing.Dict[typing.Any, typing.Any] : 'None', scale_factor: float = 1,",
      "46": "image_axes: Sequence[int] = (1, 2), other_indices: dict = Any, scale_factor: float = 1,",
      "47": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == 'Dict'? Any|Any : None), scale_factor: float = 1,",
      "48": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict == Dict?? Any|Any : None), scale_factor: float = 1,",
      "49": "image_axes: Sequence[int] = (1, 2), other_indices: dict = isNaN(typeof dict!== Dict(typing.Any, typing.Any)), scale_factor: float = 1,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2221,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\","
    ],
    "correct": false,
    "top_five": {
      "0": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "1": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "2": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "3": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_id: str = \"google_cloud_default\",",
      "4": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[float], gcp_conn_id: str = \"google_cloud_default\",",
      "5": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"0.0.0.0\", gcp_conn_id: str = \"google_cloud_default\",",
      "6": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "7": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[Sequence[Tuple[str, str]]], gcp_conn_id: str = \"google_cloud_default\",",
      "8": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: None, gcp_conn_id: str = \"google_cloud_default\",",
      "9": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\"login\", gcp_conn_id: str = \"google_cloud_default\",",
      "10": "timeout: Optional[float] = None, metadata: Optional[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "11": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_id: str = \"google_cloud_default\",",
      "12": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"google_cloud_default\", gcp_conn_id: str = \"google_cloud_default\",",
      "13": "timeout: Optional[float] = None, metadata: Optional[Sequence[Structure[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "14": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "15": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultPrefix: str = \"google_cloud_default\", gcp_conn_id: str = \"google_cloud_default\",",
      "16": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"boolean\", gcp_conn_id: str = \"google_cloud_default\",",
      "17": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = None,",
      "18": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = 0,",
      "19": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultMethods: Optional[Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "20": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: false, gcp_conn_id: str = \"google_cloud_default\",",
      "21": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "22": "timeout: Optional[float] = None, metadata: Optional[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "23": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_logout: Optional[float] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "24": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultMethods: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "25": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"100%\", gcp_conn_id: str = \"google_cloud_default\",",
      "26": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_users\"], gcp_conn_id: str = \"google_cloud_default\",",
      "27": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = 1], gcp_conn_id: str = \"google_cloud_default\",",
      "28": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", auto_refresh: false, gcp_conn_id: str = \"google_cloud_default\",",
      "29": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: None, gcp_conn_id: str = \"google_cloud_default\",",
      "30": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "31": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: null, gcp_conn_id: str = \"google_cloud_default\",",
      "32": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_username: Optional[float], gcp_conn_id: str = \"google_cloud_default\",",
      "33": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"google_cloud_default\",",
      "34": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", defaultValue: str = \"12345678989\", gcp_conn_id: str = \"google_cloud_default\",",
      "35": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "36": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", auto_setup_id: Optional[float], gcp_conn_id: str = \"google_cloud_default\",",
      "37": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\", password: \"secret\", gcp_conn_id: str = \"google_cloud_default\",",
      "38": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", cache: false, gcp_conn_id: str = \"google_cloud_default\",",
      "39": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, auto_bootloader: false, gcp_conn_id: str = \"google_cloud_default\",",
      "40": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "41": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\"], gcp_conn_id: str = \"google_cloud_default\",",
      "42": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout: Optional[float] = Null, gcp_conn_id: str = \"google_cloud_default\",",
      "43": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticator\"], gcp_conn_id: str = \"google_cloud_default\",",
      "44": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, auto_refresh: false, gcp_conn_id: str = \"google_cloud_default\",",
      "45": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_id: str = \"google_cloud_default\", gcp_conn_id: str = \"google_cloud_default\",",
      "46": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: null, gcp_conn_id: str = \"google_cloud_default\",",
      "47": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\", password: \"\" } ], gcp_conn_id: str = \"google_cloud_default\",",
      "48": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login_timeout: Optional[float] = 0, default_login_timeout = None, gcp_conn_id: str = \"google_cloud_default\",",
      "49": "timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = \"\", default_login: Optional[\", login: Optional[\" authenticate_username\", password: Optional[\"authenticate_username\", gcp_conn_id: str = \"google_cloud_default\","
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"\n    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):\n        \"\"\"\n",
    "target_code": "    \"\"\"\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        \"\"\"\n",
    "warning_line": "                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rec_len is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "osmocom/pysim",
    "source_filename": "pySim/filesystem.py",
    "target_filename": "pySim/filesystem.py",
    "source_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5^",
    "target_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "predictions": [
      "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "1": "if (str) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "2": "def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "3": "if (str.length) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "4": "var fid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:st=None, size= { 1,None } ):",
      "5": "if (str == null) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "6": "if (str == \"\" && fid:str) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "7": "(function (def) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "8": "(function(def) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "9": "var fid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, size= { 1,None } ):",
      "10": "var foo = \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "11": "if (size > 6) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "12": "var fid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:st=None, size= { 1,None } ): \"\"",
      "13": "if (str!= null) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "14": "if (str == fid) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "15": "var sfid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ): \"\"",
      "16": "if (str.length > 0) { fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:CardDF):",
      "17": "var sfid = fid, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ):",
      "18": "if (!str) return def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "19": "if(str) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "20": "var sfid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ):",
      "21": "if (str == '') { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "22": "var sfid = fid.str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ):",
      "23": "var id = fid.str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ):",
      "24": "if (str.length > 6) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "25": "cardDF:false, rec_len:true, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\";",
      "26": "if (str == \"\" && fid:str.length) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "27": "var fid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "28": "cardDF:false, rec_len:true, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"",
      "29": "cardDF.includes('.') def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "30": "if(str.length) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "31": "var sfid = fid, sfid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:CardDF):",
      "32": "var sfid =str, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:None, size= { 1,None, size:",
      "33": "var fid =str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, size= { 1,None } ): \"\"",
      "34": "var ref = \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "35": "var id = fid.str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ): \"\"",
      "36": "var sfid = fid.str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, size= { 1,None } ): \"\"",
      "37": "cardDF:false, rec_len:true, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\" Rec",
      "38": "if (str.length == 0) { fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:None, size= { 1,None } ):",
      "39": "var sfid = fid, sfid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:Men, size= { 1,None } ):",
      "40": "cardDF:false; def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "41": "if (size > 8) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "42": "if (str == \"\" && fid:str, sfid:str=None, name:str=None, desc:str=None) { fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"",
      "43": "if (Status!= \"\" || Status!= \"\") { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "44": "if (str) } def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "45": "if (str) return def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "46": "if (str.length > 8) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "47": "if (str.length == 0) { fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" def __init__(self, fid:str, sfid:CardDF):",
      "48": "if (Status.length > 0) { def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "49": "var id = fid.str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 659,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/channel.py",
    "target_filename": "aiormq/channel.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, destination: str = None, source: str = None, routing_key: str = \"\", *,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "1": "self, destination: str = None, source: str, routing_key: str = \"\", *,",
      "2": "self, source: str = None, routing_key: str = \"\", *,",
      "3": "self, destination: str = None, source: str = null, routing_key: str = \"\", *,",
      "4": "self, toString: str = None, source: str = None, routing_key: str = \"\", *,",
      "5": "self, destination: str = None, routing_key: str = \"\", *,",
      "6": "self, toString: str, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "7": "self, destination: str = None, source: str = Nothing, routing_key: str = \"\", *,",
      "8": "self, toString: str = None, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "9": "self, destination: str = None, source: str = None, route_key: str = \"\", *,",
      "10": "self, destination: str = None, source: str = none, routing_key: str = \"\", *,",
      "11": "self, toString(), destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "12": "self, destination: str = None, source: str || None, routing_key: str = \"\", *,",
      "13": "self, destination: str = '', source: str = '', routing_key: str = \"\", *,",
      "14": "self, destination: str = None, source: str = Non, routing_key: str = \"\", *,",
      "15": "self, toString: null, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "16": "self, destination: str = None, origin: str = None, routing_key: str = \"\", *,",
      "17": "self, _destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "18": "self, self.destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "19": "self, self, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "20": "self, destination: str = None, source: str = _.defaults.None, routing_key: str = \"\", *,",
      "21": "self, destination: str = None, source: str = Object.values(None), routing_key: str = \"\", *,",
      "22": "self, destination: str = None, source: str = '', routing_key: str = \"\", *,",
      "23": "self, destination: str = None, source: null, routing_key: str = \"\", *,",
      "24": "self, to: self, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "25": "self, destination: str = None, source: str = All, routing_key: str = \"\", *,",
      "26": "self, destination: str = None, source: str = Allowed, routing_key: str = \"\", *,",
      "27": "self, direction: str = None, source: str = None, routing_key: str = \"\", *,",
      "28": "self, destination: str = null, source: str = null, routing_key: str = \"\", *,",
      "29": "self, destination: str = None, source: str = No, routing_key: str = \"\", *,",
      "30": "self, destination: str = All, source: str = None, routing_key: str = \"\", *,",
      "31": "self, origin: str = None, source: str = None, routing_key: str = \"\", *,",
      "32": "self, source: str, routing_key: str = \"\", *,",
      "33": "self, destination: str = None, source: str = Null, routing_key: str = \"\", *,",
      "34": "self, destination: str = None, route_key: str = \"\", *,",
      "35": "self, path: str = None, source: str = None, routing_key: str = \"\", *,",
      "36": "self, destination: str = None, source: str + \"\", routing_key: str = \"\", *,",
      "37": "self, destination: str = None, source: str = _.defaults.NONE, routing_key: str = \"\", *,",
      "38": "self, toString: str, routing_key: str = \"\", *,",
      "39": "self, destination: str = None, source: none, routing_key: str = \"\", *,",
      "40": "self, destination: null, source: null, routing_key: str = \"\", *,",
      "41": "self, destination: str = Nothing, source: str = Nothing, routing_key: str = \"\", *,",
      "42": "self, destination, source: str = None, routing_key: str = \"\", *,",
      "43": "self, destination: str = None, source: str = _.defaults(None), routing_key: str = \"\", *,",
      "44": "self, destination: str = None, source: str; routing_key: str = \"\", *,",
      "45": "self, destination: str, source: str, routing_key: str = \"\", *,",
      "46": "self, destination: str = None, source: str = Object.values(NONE), routing_key: str = \"\", *,",
      "47": "self, destination: str = None, source: str = _.defaults(null), routing_key: str = \"\", *,",
      "48": "self, destination: str = None, source: str = _.defaults.Null, routing_key: str = \"\", *,",
      "49": "self, target: str = None, routing_key: str = \"\", *,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):\n",
    "target_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_line": "        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " kwarg2 is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebook/TestSlide",
    "source_filename": "tests/mock_callable_testslide.py",
    "target_filename": "tests/mock_callable_testslide.py",
    "source_changeid": "97c39d89c2a047a3396be659645bd89dab01d859^",
    "target_changeid": "97c39d89c2a047a3396be659645bd89dab01d859",
    "predictions": [
      "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):"
    ],
    "correct": false,
    "top_five": {
      "0": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "1": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "2": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "3": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None; async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "4": "arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "5": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, arg3: str, kwarg1: str = None, kwarg2: str = None ):",
      "6": "arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None; async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "7": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "8": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None : async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "9": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg3: str = None ):",
      "10": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function () {",
      "11": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async async instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "12": "self._init( async_instance_method, self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "13": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: _.isString( str ) ):",
      "14": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, arg3: str, arg4: str, kwarg1: str = None, kwarg2: str = None ):",
      "15": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "16": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None; async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "17": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): (",
      "18": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( typeof self.arg1 === 'undefined' ) {",
      "19": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( typeof self.arg1 === 'function' ) {",
      "20": "self.arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "21": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function( self, arg1: str, arg2: str, arg3: str, ) {",
      "22": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( typeof arg1 ==='string' ) {",
      "23": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None ):",
      "24": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = Null, kwarg2: str = None ):",
      "25": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( typeof self.arg1 ==='string' ) {",
      "26": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = null, kwarg2: str = null ):",
      "27": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method(self, arg1: str, arg2: str, arg3: str, kwarg1: str = None, kwarg2: str = None ):",
      "28": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function( fire, arg1, arg2, arg3) {",
      "29": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = null, kwarg2: str = None ):",
      "30": "self, arg1: str, arg2: str, arg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "31": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( (arg1 === null ) && arg1 === null ) {",
      "32": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): return arg1;",
      "33": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( typeof self.arg1 === 'object' ) {",
      "34": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = Nothing, kwarg2: str = None ):",
      "35": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = None, kwarg3: str = None ):",
      "36": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function( fireEvent, arg1, arg2, arg3) {",
      "37": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: st = None, kwarg2: st = None ):",
      "38": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: _.is_undefined, kwarg2: _.is_undefined ):",
      "39": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None; async def async_instance_method( self, arg1: str, arg2: str, arg3: str, kwarg1: str = None, kwarg2: str = None ):",
      "40": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function( str ) {",
      "41": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): return false;",
      "42": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, arg3: str, kwarg1: str = None, kwarg2: str = None ): async function () {",
      "43": "self._instance_method( arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ):",
      "44": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): assert.equal( str, 'Async' );",
      "45": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): assert.equal( str, 0, arg3: str, arg4: str, arg5)",
      "46": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): return true;",
      "47": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): if ( typeof arg1 === 'object' ) {",
      "48": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function (arg1 || null, arg2) {",
      "49": "self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None: async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None ): async function (arg1 || 0 || arg2 || arg3 || arg4)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               symbol_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " symbol_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "def object(self, symbol_name: str = None, offset: int = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "def object(self, symbol_name: str = None, offset: int = None,",
      "1": "def object(self, symbol_name: str = None, type_name: str = None, offset: int = None,",
      "2": "def object(self, symbol_name: str = None, offset: int = None,",
      "3": "def object(self, symbol_name: _.str = None, type_name: _.str = None, offset: int = None,",
      "4": "def object(self, symbol_name: str = Nothing, offset: int = None,",
      "5": "def object(self, symbol_name: _.str, type_name: _.str, offset: int = None,",
      "6": "def object(self, symbol_name, type_name: str = None, offset: int = None,",
      "7": "def object(self, simbol_name: str = None, offset: int = None,",
      "8": "def object(self, symbol_name: str = Null, type_name: str = None, offset: int = None,",
      "9": "def object(self, symbol_name: str = Nothing, type_name: str = None, offset: int = None,",
      "10": "def object(self, symbol_name: string = None, type_name: str = None, offset: int = None,",
      "11": "def object(self, symbol_name: str = Node, type_name: str = None, offset: int = None,",
      "12": "def object(self, symbol_name: _.str, type_name: _.null, offset: int = None,",
      "13": "def object(self, symbol_name: int = None, offset: int = None,",
      "14": "def object(self, symbol_name: str = Null, type_name: str = Null, offset: int = None,",
      "15": "def object(self, symbol_name: _.str = None, type_name: _.null, offset: int = None,",
      "16": "def object(self, symbol_name: str = Nothing, type_name: str = Nothing, offset: int = None,",
      "17": "def object(self, symbolic_name: str = None, offset: int = None,",
      "18": "def object(self, type_name: str = None, offset: int = None,",
      "19": "def object(self, symbol_name: str = none, offset: int = None,",
      "20": "def object(self, symbol_name: _.str = None, type_name: _.ghost_str = None, offset: int = None,",
      "21": "def object(self, symbol_name: str = Null, offset: int = None,",
      "22": "def object(self, symbol_name: troy_str = None, offset: int = None,",
      "23": "def object(self, symbol_name: _.str, type_name: _.none, offset: int = None,",
      "24": "def object(self, symbol_name: _.str = None, type_name: _.tr = None, offset: int = None,",
      "25": "def object(self, signal_name: str = None, offset: int = None,",
      "26": "def object(self, symbol_name: str = '', offset: int = None,",
      "27": "def object(self, symbol_name: str = None.toString(), offset: int = None,",
      "28": "def object(self, symbol_name: _.str = None, type_name: _.trim(), offset: int = None,",
      "29": "def object(self, symbol_name: _.str, type_name: _.tr = None, offset: int = None,",
      "30": "def object(self, symbol_name: _.str = None, type_name: _.null.str, offset: int = None,",
      "31": "def object(self, symbol_name: _.str = None, type_name: _.null || None, offset: int = None,",
      "32": "def object(self, symbol_name: _.str, type_name: _.ghost_str, offset: int = None,",
      "33": "def object(self, symbol_name: str = None, type_name: str = None, offset: int = None,",
      "34": "def object(self, symbol_name: str = None, off: int = None,",
      "35": "def object(self, symbol_name: _.str, type_name: _.trim(), offset: int = None,",
      "36": "def object(self, symbol_name: str = None,offset: int = None,",
      "37": "def object(self, symbol_name: _.str = None, type_name: _.isNone, offset: int = None,",
      "38": "def object(self, symbol_name: _str = None, offset: int = None,",
      "39": "def object(self, symbol_name: string = None, offset: int = None,",
      "40": "def object(self, symbol_name: _.str, type_name: _.then([0-9]), offset: int = None,",
      "41": "def object(self, token_name: str = None, offset: int = None,",
      "42": "def object(self, symbol_name: _.str, type_name: _.isNone, offset: int = None,",
      "43": "def object(self, symbol_name: _.str = None, type_name: _.int = None, offset: int = None,",
      "44": "def object(self, symbol_name: str = All, offset: int = None,",
      "45": "def object(self, symbol_name: _.str, type_name: _.int = None, offset: int = None,",
      "46": "def object(self, symbol_name: _.str = None, type_name: _.null.str = None, offset: int = None,",
      "47": "def object(self, symbol_name: _.str, type_name: _.type_null, offset: int = None,",
      "48": "def object(self, symbol_name: _.str, type_name: _.toString(), offset: int = None,",
      "49": "def object(self, symbol_name: str = None, _offset: int = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def start(self, caller_frame: types.FrameType = None):\n        \"\"\"\n",
    "target_code": "\n    def start(self, caller_frame: types.FrameType | None = None):\n        \"\"\"\n",
    "warning_line": "    def start(self, caller_frame: types.FrameType = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 101,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "joerick/pyinstrument",
    "source_filename": "pyinstrument/profiler.py",
    "target_filename": "pyinstrument/profiler.py",
    "source_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919^",
    "target_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "predictions": [
      "def start(self, caller_frame): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def start(self, caller_frame): \"\"\"",
      "1": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"hello, world!\", types.FrameType: None } ): \"\"\"",
      "2": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", options: { \"options\" } ): \"\"\"",
      "3": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, world!\", types.FrameType: None } ): \"\"\"",
      "4": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"hello, world!\", types.FrameType: false } ): \"\"\"",
      "5": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", types.FrameType: None } ): \"\"\"",
      "6": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, Null, options): \"\"\"",
      "7": "def start(self, caller_frame: caller_frame || 'undefined'): \"\"\"",
      "8": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, world!\", types.FrameType: false } ): \"\"\"",
      "9": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, false): \"\"\"",
      "10": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello World!\", types.FrameType: None } ): \"\"\"",
      "11": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, Thumbnail: false } ): \"\"\"",
      "12": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, null, false } ): \"\"\"",
      "13": "def start(self, caller_frame: def.hasType(types.FrameType)): \"\"\"",
      "14": "def start(self, caller_frame: caller_frame; caller_frame.parent().parent()).setState( { type: \"Binary\" }, types.FrameType: caller_frame.parent() } ): \"\"\"",
      "15": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello IoT.js!\", types.FrameType: None } ): \"\"\"",
      "16": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, message: \"Hello IoT! \", types.FrameType: false } ): \"\"\"",
      "17": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello IoT.js!\", types.FrameType: false } ): \"\"\"",
      "18": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"hello, world!\", options: { \"options\" } ): \"\"\"",
      "19": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, reality: true } ): \"\"\"",
      "20": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, Null, false } ): \"\"\"",
      "21": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", types.FrameType: false } ): \"\"\"",
      "22": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, world!\", types.FrameType: None } ), def start(self, caller_frame): \"\"\"",
      "23": "def start(self, caller_frame: caller_frame, types.FrameType = None): \"\"\"",
      "24": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", types.FrameType: None } ), def start(self, caller_frame): \"\"\"",
      "25": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, world!\", options: { \"options\" } ): \"\"\"",
      "26": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, reality: { \"true\" } ): \"\"\"",
      "27": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" } ): \"\"\"",
      "28": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", options: { message: \"Hello World!\" } } ): \"\"\"",
      "29": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", options: { message: \"Hello World!\" } ): \"\"\"",
      "30": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"hello, world!\", types.FrameType: None } ), def start(self, caller_frame): \"\"\"",
      "31": "def start(self, caller_frame: caller_frame; caller_frame.parent().parent()).setState( { type: \"HTMLElement\" }, types.FrameType = None } ): \"\"\"",
      "32": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, Null, types.FrameType): \"\"\"",
      "33": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, true, false } ): \"\"\"",
      "34": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", options: { \"options\" } );",
      "35": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, message: \"Hello IoT.js\" } ): \"\"\"",
      "36": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, world!\", types.FrameType: \"None\" } ): \"\"\"",
      "37": "def start(self, caller_frame: caller_frame.isTypeOf(types.FrameType)): \"\"\"",
      "38": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screenshot\" } ): \"\"\"",
      "39": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, options: { \"checkbox\" } ): \"\"\"",
      "40": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; start(self, caller_frame): \"\"\"",
      "41": "def start(self, caller_frame: caller_frame.hasOwnProperty(type)): \"\"\"",
      "42": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, null): \"\"\"",
      "43": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"hello, world!\", types.FrameType: \"none\" } ): \"\"\"",
      "44": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello IoT.js!\", types.FrameType: caller_frame.defaultMessage } ): \"\"\"",
      "45": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"\" }, false } ): \"\"\"",
      "46": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", types.FrameType: \"None\" } ): \"\"\"",
      "47": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, message: \"Hello IoT! \", types.FrameType: None } ): \"\"\"",
      "48": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"screen\" }, message: \"Hello World!\" } ): \"\"\"",
      "49": "def start(self, caller_frame: caller_frame || 'undefined': types.FrameType; caller_frame.defaultMessage = def.send( { message: \"Hello, World!\", options: { \"message\" } } ): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_line": "        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scrapy/scrapy",
    "source_filename": "scrapy/core/downloader/handlers/http2.py",
    "target_filename": "scrapy/core/downloader/handlers/http2.py",
    "source_changeid": "38d361792c02ae2b25323258d070c04d8906495a^",
    "target_changeid": "38d361792c02ae2b25323258d070c04d8906495a",
    "predictions": [
      "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'H2ConnectionPool', crawler=None"
    ],
    "correct": false,
    "top_five": {
      "0": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'H2ConnectionPool', crawler=None",
      "1": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None, crawler=None",
      "2": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: $ { H2ConnectionPool }, crawler=None",
      "3": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: None, crawler=None",
      "4": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, crawler=None",
      "5": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: _.H2ConnectionPool = None, crawler=None",
      "6": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: HybridConnectionPool = None, crawler=None",
      "7": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool, crawler=None",
      "8": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonAccessible, crawler=None",
      "9": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: ConnectionPool, crawler=None",
      "10": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProjective.H2ConnectionPool = None, crawler=None",
      "11": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: _H2ConnectionPool = None, crawler=None",
      "12": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProductionPool = None, crawler=None",
      "13": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: $ { bytes } = None, crawler=None",
      "14": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProtocol.H2ConnectionPool, crawler=None",
      "15": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: $ { pool.name } = None, crawler=None",
      "16": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'H2ConnectionPool' = None, crawler=None",
      "17": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProcessor.H2ConnectionPool, crawler=None",
      "18": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: '', crawler=None",
      "19": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonConnectionPool, crawler=None",
      "20": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'ConnectionPool', crawler=None",
      "21": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'None', crawler=None",
      "22": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: i18n.H2ConnectionPool = None, crawler=None",
      "23": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: $ { poolId } = None, crawler=None",
      "24": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'All', crawler=None",
      "25": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Bytes.Pool = None, crawler=None",
      "26": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: React.H2ConnectionPool = None, crawler=None",
      "27": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: HydeCoinConnectionPool = None, crawler=None",
      "28": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: $ { pool.bytes } = None, crawler=None",
      "29": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: ConnectionPool = None, crawler=None",
      "30": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonFixed, crawler=None",
      "31": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonLinkedInstance.H2ConnectionPool, crawler=None",
      "32": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: HydeClusterPool = None, crawler=None",
      "33": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Nonexistant, crawler=None",
      "34": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Bytes.H2ConnectionPool = None, crawler=None",
      "35": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: HydrogenFixedPool = None, crawler=None",
      "36": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonAccessoryPool = None, crawler=None",
      "37": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: $ { BytesValue } = None, crawler=None",
      "38": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Nonexistent, crawler=None",
      "39": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProductionPool, crawler=None",
      "40": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonExistingPool, crawler=None",
      "41": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: ExistingConnectionPool = None, crawler=None",
      "42": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonCompatiblePool = None, crawler=None",
      "43": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProcessor.H2ConnectionPool = None, crawler=None",
      "44": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: 'H2ConnectionPool, crawler=None",
      "45": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonProcessivePool = None, crawler=None",
      "46": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonLinkedInstance.H2ConnectionPool = None, crawler=None",
      "47": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonAcceptable, crawler=None",
      "48": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: HydeComboPool = None, crawler=None",
      "49": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: NonResolved, crawler=None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, rf_path: str=None):\n        super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3\n",
    "target_code": "\n    def __init__(self):\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3",
      "1": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "2": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path) self.number_of_variables = 3",
      "3": "def __init__(self, rf_path: str=none): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3",
      "4": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path = null) self.number_of_variables = 3",
      "5": "def __init__(self, rf_path: str==None): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3",
      "6": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=null) self.number_of_variables = 3",
      "7": "def __init__(self, rf_path: str==None): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "8": "def __init__(self, rf_path: str ==None): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3",
      "9": "def __init__(self, rf_path: str ==None): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "10": "def __init__(self, rf_path: str=none): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "11": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path, null) self.number_of_variables = 3",
      "12": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).replace(/ \\ rf_path/g, '') self.number_of_variables = 3",
      "13": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/').replace(/ \\ s+/g, '') self.number_of_variables = 3",
      "14": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).remove() self.number_of_variables = 3",
      "15": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path); self.number_of_variables = 3",
      "16": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path, str) self.number_of_variables = 3",
      "17": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).replace(/ \\ +/, '') self.number_of_variables = 3",
      "18": "def __init__(self, rf_path: str ==None): super(Fonseca, self).__init__(rf_path) self.number_of_variables = 3",
      "19": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).replace(/ \\ s+/g, '') self.number_of_variables = 3",
      "20": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).replace(/ \\ S+/g, '') self.number_of_variables = 3",
      "21": "def __init__(self, rf_path: str = None): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3",
      "22": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/').add_variables(rf_path) self.number_of_variables = 3",
      "23": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/') self.number_of_variables = 3",
      "24": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).toString() self.number_of_variables = 3",
      "25": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).remove_select() self.number_of_variables = 3",
      "26": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path = str) self.number_of_variables = 3",
      "27": "def __init__(self, rf_path: str=0): super(Fonseca, self).__init__(rf_path) self.number_of_variables = 3",
      "28": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path, rf_path) self.number_of_variables = 3",
      "29": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).remove_variables() self.number_of_variables = 3",
      "30": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=str) self.number_of_variables = 3",
      "31": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path|'') self.number_of_variables = 3",
      "32": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).remove_variables[0] self.number_of_variables = 3",
      "33": "def __init__(self, rf_path: str = ''): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "34": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=self.rf_path) self.number_of_variables = 3",
      "35": "def __init__(self, rf_path: str = null): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "36": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split(\"/\") self.number_of_variables = 3",
      "37": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path), rf_path) self.number_of_variables = 3",
      "38": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).rf_path self.number_of_variables = 3",
      "39": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=none) self.number_of_variables = 3;",
      "40": "def __init__(self, rf_path: str = 0,1 } ): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "41": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/').replace(/ \\ rf_path \\ /g) self.number_of_variables = 3",
      "42": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=>none) self.number_of_variables = 3",
      "43": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/').replace(/ ^ s+/g, '') self.number_of_variables = 3",
      "44": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/').replace(/ \\ s+/g, '')) self.number_of_variables = 3",
      "45": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path); self.number_of_variables = 3;",
      "46": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=>rf_path) self.number_of_variables = 3",
      "47": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path=undefined) self.number_of_variables = 3",
      "48": "def __init__(self, rf_path: str=None): super(Fonseca, self).__init__(rf_path).split('/').add_variables(self.number_of_variables) self.number_of_variables = 3",
      "49": "def __init__(self, rf_path: str=none): super(Fonseca, self).__init__(rf_path) self.number_of_variables = 3"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, {})\n",
    "target_code": "        \"\"\"\n        for style_class in reversed(style_classes):\n            style_data = self.data.get(style_class, {})\n",
    "warning_line": "        style_classes = reversed(style_classes)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/gui/ui_style.py",
    "target_filename": "arcade/gui/ui_style.py",
    "source_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b^",
    "target_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "predictions": [
      "style_classes = listed[str]: \"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )"
    ],
    "correct": false,
    "top_five": {
      "0": "style_classes = listed[str]: \"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "1": "style_classes = style_classes.reversed() style_classes = style_classes.transversed(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "2": "style_classes = style_classes.reversed() style_classes = style_classes.toString() style_classes = style_classes.filter(style_class) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "3": "style_classes = style_classes.reversed() style_classes = style_classes.reversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "4": "style_classes = style_classes.reversed(str): \"\" style_classes = style_classes.reversed(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "5": "style_classes = listed[str] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "6": "style_classes = listed[str] style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "7": "style_classes = style_classes.reversed() style_classes = style_classes.transform(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "8": "style_classes = style_classes.reversed() style_classes = style_classes.transversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "9": "style_classes = listed[str](style_classes): \"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "10": "style_classes = style_classes.reversed() style_classes = style_classes.toString() style_classes = style_classes.filter(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "11": "style_classes = listed[str](style_classes): \"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "12": "style_classes = style_classes.reversed(str): \"\" style_classes = style_classes.reversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "13": "style_classes = style_classes.reversed() style_classes = style_classes.transversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "14": "style_classes = style_classes || \"\"\" style_classes = style_classes || \"\" for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "15": "style_classes = style_classes.transversed(str): \"\" style_classes = style_classes.transversed(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "16": "style_classes = style_classes!== undefined && style_classes = style_classes.reversed() style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "17": "style_classes = style_classes.reversed() style_classes = style_classes.toString() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "18": "style_classes = style_classes.reversed(str): \"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "19": "style_classes = style_classes!== undefined && style_classes = style_classes.reversed(str)) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "20": "style_classes = style_classes.reversed() style_classes = style_classes.toString() style_classes = style_classes.filter(style_class) } for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "21": "style_classes = style_classes.reversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "22": "style_classes = style_classes.reversed() style_classes = style_classes.transformed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "23": "style_classes = style_classes.reversed() style_classes = style_classes.reversed() style_data = self.data.get(style_class, { } )",
      "24": "style_classes = listed[str](style_classes): \"\" style_classes = reversed[str](style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "25": "style_classes = style_classes || \"\"; style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "26": "style_classes = style_classes.reversed() style_classes = style_classes.inverse() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "27": "style_classes = reversed(style_classes): \"\"\" style_classes = style_classes.reversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "28": "style_classes = list[str] style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "29": "style_classes = listed[str]: \"\"\" style_classes = reversed[str] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "30": "style_classes = style_classes!== undefined && style_classes = style_classes.reversed() style_classes = style_classes.transversed(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "31": "style_classes = style_classes || \"\" style_classes = style_classes.reversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "32": "var style_classes = reversed(style_classes): \"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "33": "style_classes = style_classes.reversed() style_classes = style_classes.get(List[str]) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "34": "style_classes = style_classes.reversed() style_classes = style_classes.reversed() style_classes = style_classes.toString() style_data = self.data.get(style_class, { } )",
      "35": "style_classes = listed[str] (style_classes): \"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "36": "style_classes = style_classes.reversed() style_classes = style_classes.transformed(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "37": "style_classes = style_classes || '' for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "38": "style_classes = style_classes || \"\" style_classes = style_classes.reversed(str) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "39": "style_classes = style_classes || \"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "40": "style_classes = type List[str] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "41": "style_classes = style_classes!== undefined && style_classes = style_classes.reversed() style_classes = style_classes.reversed() for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "42": "style_classes = listed[str]: \"\"\" for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "43": "style_classes = style_classes!== undefined && style_classes = style_classes.reversed() style_classes = style_classes.transversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "44": "style_classes = list[str]: \"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "45": "style_classes = style_classes.reversed() style_classes = style_classes.reversed() style_classes = style_classes.get(style_class, { } )",
      "46": "style_classes = style_classes.reversed() style_classes = style_classes.toString() style_classes = style_classes.toString() style_data = self.data.get(style_class, { } )",
      "47": "style_classes = style_classes.reversed() style_classes = style_classes.vertical() style_classes = style_classes.vertical() style_data = self.data.get(style_class, { } )",
      "48": "style_classes = style_classes.reversed() style_classes = style_classes.reversed() style_classes = style_classes.classes.filter(style_class) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "49": "style_classes = style_classes.reversed() style_classes = style_classes.reversed() style_classes = style_classes.class_data = self.data.get(style_class, { } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:\n",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_line": "        announcements_to_consume: Set[Announcement] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 387,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Chia-Network/chia-blockchain",
    "source_filename": "chia/wallet/wallet.py",
    "target_filename": "chia/wallet/wallet.py",
    "source_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13^",
    "target_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "predictions": [
      "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord:"
    ],
    "correct": false,
    "top_five": {
      "0": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord:",
      "1": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord:",
      "2": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: Set[Announcement],",
      "3": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionId]",
      "4": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[Announcement]",
      "5": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = '', ) -> TransactionRecord:",
      "6": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None,...) -> TransactionRecord:",
      "7": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, err_token: err_token, ) -> TransactionRecord:",
      "8": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set[Method]",
      "9": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionAmount],",
      "10": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement], ) -> TransactionRecord:",
      "11": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set[Amount],",
      "12": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: set[Announcement],",
      "13": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[Amount],",
      "14": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set.to_consume,",
      "15": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = False, ) -> TransactionRecord:",
      "16": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set[Announcement]",
      "17": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[Method]",
      "18": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = None, ) -> TransactionRecord:",
      "19": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = 0,",
      "20": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: '$1,",
      "21": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionId]",
      "22": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ), default_to_consume: Set[Announcement] = None, ) -> TransactionRecord:",
      "23": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = Null, ) -> TransactionRecord:",
      "24": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, _ -> TransactionRecord:",
      "25": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = True, ) -> TransactionRecord:",
      "26": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionAmount],",
      "27": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: Set[Announcement] = 0, default_token: bool, ) -> TransactionRecord:",
      "28": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = False, ) -> TransactionRecord: Set[TransactionId]",
      "29": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[Announcement]",
      "30": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionId]",
      "31": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set.to_consume,",
      "32": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = False, ) -> TransactionRecord:",
      "33": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, err_to_watch: false, ) -> TransactionRecord:",
      "34": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[TractionAmount],",
      "35": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: Set[Announcement] = 0, default_token: bool, ) -> TransactionRecord: Set[TransactionId]",
      "36": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionAmount]",
      "37": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = False, ) -> TransactionRecord: Set[Announcement]",
      "38": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None,",
      "39": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, err_token_to_consume: err_token, ) -> TransactionRecord:",
      "40": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = '',",
      "41": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: Set[Announcement], ) -> TransactionRecord:",
      "42": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[MajorAnnouncement]",
      "43": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, default_token: bool, ) -> TransactionRecord:",
      "44": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ), default_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set[TransactionId]",
      "45": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] + ', ) -> TransactionRecord:",
      "46": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord: Set[Txn]",
      "47": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, ) -> TransactionRecord: Set[Announcement],",
      "48": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = '0', ) -> TransactionRecord:",
      "49": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = None, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = 0, defaultValue: Set[Announcement] = None, ) -> TransactionRecord:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def notice(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 334,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "1": "self.lines.append(line) message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "2": "self.lines.append(line) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "3": "self.lines.append(line) message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "4": "self.lines.append(line) def note(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "5": "self.lines.append(line) def message(self, target: str, message: str, tags dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "6": "self.lines.append(line) def message(self, target: str, message: str, tags: dict = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "7": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "8": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "9": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "10": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "11": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "12": "self.lines.append(line) self.message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "13": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "14": "self.lines.append(line) self.message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))",
      "15": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "16": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "17": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "18": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)); def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "19": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=NONE): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "20": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=NONE): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "21": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "22": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "23": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "24": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "25": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags));",
      "26": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict==None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "27": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "28": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))",
      "29": "self.lines.append(line) self.message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "30": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self.add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "31": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "32": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "33": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "34": "self.lines.append(line) toMeasure(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "35": "self.lines.append(line) def message(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))",
      "36": "self.lines.append(line) self.message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "37": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))));",
      "38": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags)))",
      "39": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.notice(target, message, tags))))",
      "40": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "41": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "42": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None) : self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))));",
      "43": "self.lines.append(line) self.message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "44": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "45": "self.lines.append(line) self.def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) self.def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))))));",
      "46": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)).def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "47": "self.lines.append(line) def message(self, target: str, message: str, tags: dict = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict ==None): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "48": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict==None): self._add_line(utils.irc.protocol.notice(target, message, tags)))))",
      "49": "self.lines.append(line) def message(self, target: str, message: str, tags: dict=None): self._add_line(util.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: dict=None): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_line": "        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1140,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hikari-py/hikari",
    "source_filename": "hikari/orm/http/base_http_adapter.py",
    "target_filename": "hikari/orm/http/base_http_adapter.py",
    "source_changeid": "cf143052e1228280ed895c06da9177611d8ea088^",
    "target_changeid": "cf143052e1228280ed895c06da9177611d8ea088",
    "predictions": [
      "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,"
    ],
    "correct": false,
    "top_five": {
      "0": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "1": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNTSPECIFIED,",
      "2": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "3": "] = unspecified.UNSPECIFIED, parents_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "4": "], ] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "5": "] = unspecified.UNSPECIFIED, parents: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "6": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRerequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "7": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNTIFIED,",
      "8": "] = unspecified.UNSPECIFIED, parent_categories: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "9": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNISPECIFIED,",
      "10": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "11": "] = unspecified.UNSPECIFIED, child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "12": "] = unspecified.UNSPECIFIED, mother_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "13": "] = unspecified.UNTIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "14": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,",
      "15": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "16": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[_channels.GuildCategoryCb] = unspecified.Cb,",
      "17": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNDEFINED,",
      "18": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[_channels.GuildCategoryCb] = unspecified.CB,",
      "19": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, type_hints.NotRequired[_channels.GuildCategoryLikeB] = unspecified.UNSPECIFIED,",
      "20": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified, nsfw: unspecified,",
      "21": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, ctx: type_hints.NotRequired[_channels.GuildCategoryCtx] } ;",
      "22": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, type_hints.NotRequired[_channels.GuildCategoryLikeA] = unspecified.UNSPECIFIED,",
      "23": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[_channels.GuildCategoryCb] = unspecified.CROSS,",
      "24": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_child_row: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified, nsfw: unspecified,",
      "25": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[_channels.GuildCategoryCb] = unspecified.CB];",
      "26": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, _nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "27": "], _ ] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "28": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[_channels.GuildCategoryCB] = unspecified.CB,",
      "29": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified,",
      "30": "], obj: unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "31": "] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "32": "] = unspecified.UNSPECIFIED, parent_next_line: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "33": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_child_category: type_hints.NotRequired[_channels.GuildCategoryElement] = unspecified, nsfw: unspecified,",
      "34": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.NotRequired[_channels.GuildCategoryCb] = unspecified.UNSPECIFIEL,",
      "35": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_child_row: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "36": "] = unspecified.UNSPECIFIED, parent_category: types.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "37": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryEffect] = unspecified,",
      "38": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subclass: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
      "39": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified, bool,",
      "40": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, type_hints.NotRequired[_channels.GuildCategoryEffect] = unspecified.UNSPECIFIED,",
      "41": "] = unspecified.UNSPECIFIED, parent_next: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "42": "] = unspecified.UNSPECIFIED, parental_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "43": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, cb: type_hints.Cb[_channels.GuildCategoryCb] = unspecified.Cb,",
      "44": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.TYPES,",
      "45": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[boolean] = unspecified.UNSPECIFIED,",
      "46": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryLikeA] = unspecified, nsfw: unspecified,",
      "47": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_subcategory: type_hints.NotRequired[_channels.GuildCategoryEffect] = unspecified, bool,",
      "48": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, parent_child_node: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "49": "] = unspecified.UNSPECIFIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 208,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, destination: str = None, source: str = None, routing_key: str = \"\", *,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "1": "self, destination: str = None, source: str, routing_key: str = \"\", *,",
      "2": "self, source: str = None, routing_key: str = \"\", *,",
      "3": "self, destination: str = None, source: str = null, routing_key: str = \"\", *,",
      "4": "self, toString: str = None, source: str = None, routing_key: str = \"\", *,",
      "5": "self, destination: str = None, routing_key: str = \"\", *,",
      "6": "self, toString: str, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "7": "self, destination: str = None, source: str = Nothing, routing_key: str = \"\", *,",
      "8": "self, toString: str = None, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "9": "self, destination: str = None, source: str = None, route_key: str = \"\", *,",
      "10": "self, destination: str = None, source: str = none, routing_key: str = \"\", *,",
      "11": "self, toString(), destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "12": "self, destination: str = None, source: str || None, routing_key: str = \"\", *,",
      "13": "self, destination: str = '', source: str = '', routing_key: str = \"\", *,",
      "14": "self, destination: str = None, source: str = Non, routing_key: str = \"\", *,",
      "15": "self, toString: null, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "16": "self, destination: str = None, origin: str = None, routing_key: str = \"\", *,",
      "17": "self, _destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "18": "self, self.destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "19": "self, self, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "20": "self, destination: str = None, source: str = _.defaults.None, routing_key: str = \"\", *,",
      "21": "self, destination: str = None, source: str = Object.values(None), routing_key: str = \"\", *,",
      "22": "self, destination: str = None, source: str = '', routing_key: str = \"\", *,",
      "23": "self, destination: str = None, source: null, routing_key: str = \"\", *,",
      "24": "self, to: self, destination: str = None, source: str = None, routing_key: str = \"\", *,",
      "25": "self, destination: str = None, source: str = All, routing_key: str = \"\", *,",
      "26": "self, destination: str = None, source: str = Allowed, routing_key: str = \"\", *,",
      "27": "self, direction: str = None, source: str = None, routing_key: str = \"\", *,",
      "28": "self, destination: str = null, source: str = null, routing_key: str = \"\", *,",
      "29": "self, destination: str = None, source: str = No, routing_key: str = \"\", *,",
      "30": "self, destination: str = All, source: str = None, routing_key: str = \"\", *,",
      "31": "self, origin: str = None, source: str = None, routing_key: str = \"\", *,",
      "32": "self, source: str, routing_key: str = \"\", *,",
      "33": "self, destination: str = None, source: str = Null, routing_key: str = \"\", *,",
      "34": "self, destination: str = None, route_key: str = \"\", *,",
      "35": "self, path: str = None, source: str = None, routing_key: str = \"\", *,",
      "36": "self, destination: str = None, source: str + \"\", routing_key: str = \"\", *,",
      "37": "self, destination: str = None, source: str = _.defaults.NONE, routing_key: str = \"\", *,",
      "38": "self, toString: str, routing_key: str = \"\", *,",
      "39": "self, destination: str = None, source: none, routing_key: str = \"\", *,",
      "40": "self, destination: null, source: null, routing_key: str = \"\", *,",
      "41": "self, destination: str = Nothing, source: str = Nothing, routing_key: str = \"\", *,",
      "42": "self, destination, source: str = None, routing_key: str = \"\", *,",
      "43": "self, destination: str = None, source: str = _.defaults(None), routing_key: str = \"\", *,",
      "44": "self, destination: str = None, source: str; routing_key: str = \"\", *,",
      "45": "self, destination: str, source: str, routing_key: str = \"\", *,",
      "46": "self, destination: str = None, source: str = Object.values(NONE), routing_key: str = \"\", *,",
      "47": "self, destination: str = None, source: str = _.defaults(null), routing_key: str = \"\", *,",
      "48": "self, destination: str = None, source: str = _.defaults.Null, routing_key: str = \"\", *,",
      "49": "self, target: str = None, routing_key: str = \"\", *,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        room_creator: str = None,\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
    "target_code": "        self,\n        room_creator: Optional[str] = None,\n        is_public: bool = True,\n        room_version: Optional[str] = None,\n        tok: Optional[str] = None,\n        expect_code: int = 200,\n",
    "warning_line": "        room_creator: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " room_creator is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "matrix-org/synapse",
    "source_filename": "tests/rest/client/v1/utils.py",
    "target_filename": "tests/rest/client/v1/utils.py",
    "source_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945^",
    "target_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945",
    "predictions": [
      "self, expect_code: int = 200,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, expect_code: int = 200,",
      "1": "self, room_creator: str = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "2": "self, room_creator: str = None, is_public: bool = True, room_version: str = None, tok: str, expect_code: int = 200,",
      "3": "self, room_creator: str, is_public: bool = True, room_version: str, tok: str, expect_code: int = 200,",
      "4": "self, room_creater: str = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "5": "self, room_creator: null, is_public: bool = True, room_version: null, tok: str = None, expect_code: int = 200,",
      "6": "self, room_creator: props.str, is_public: bool = True, room_version: props.str = None, tok: props.tok, expect_code: int = 200,",
      "7": "self, room_creator: str = None, expect_code: int = 200,",
      "8": "self, room_creator: string = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "9": "self, room_creator: null, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "10": "self, room_creator: is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "11": "self, room_creator: _.is_public: bool = True, room_version: _.is_public, tok: _.is_public, expect_code: int = 200,",
      "12": "self, room_creator: str = None, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "13": "self, room_creator: _(null, str), is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "14": "self, room_creator: _(?: is_public: bool = True, room_version: _(?: None), tok: _(?: None, expect_code: int = 200,",
      "15": "self, room_creator: null, is_public: bool = True, room_version: null, tok: null, expect_code: int = 200,",
      "16": "self, room_creator: none, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "17": "self, room_creator: str = None, is_public: bool = True, room_version: str = None, tok: str || None, expect_code: int = 200,",
      "18": "self, room_creator: int = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "19": "self, room_creator: str = None, is_public: bool = True, room_version: null, tok: str = None, expect_code: int = 200,",
      "20": "self, room_creators: str = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "21": "self, room_creator: _(?: is_public: bool = True, room_version: _(?: None, tok: _(?: None, expect_code: int = 200,",
      "22": "self, room_creator: str = None, is_public: bool = True, room_versions: str = None, tok: str = None, expect_code: int = 200,",
      "23": "self, room_creator: str = None, accept_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "24": "self, room_creator: sh = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "25": "self, room_creator: string = None, is_public: bool = True, room_version: string = None, tok: string = None, expect_code: int = 200,",
      "26": "self, room_creator: str = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "27": "self, room_creater: str = None, is_public: bool = True, room_version: str = None, tok: str, expect_code: int = 200,",
      "28": "self, room_creator: None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "29": "self, room_creator: str = None, is_public: bool = True, room_version: str, tok: str, expect_code: int = 200,",
      "30": "self, room_creator: str = None, is_public: bool = True, room_version: str = None, expect_code: int = 200,",
      "31": "self, room_creator: str = None, is_public: bool = True, room_version: str = Nothing, tok: str = None, expect_code: int = 200,",
      "32": "self, room_creator: string = None, is_public: bool = True, room_version: string = None, tok: str = None, expect_code: int = 200,",
      "33": "self, room_creator: all_stars, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "34": "self, room_creator: int = 200, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "35": "self, room_creator: non_existent, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "36": "self, room_creator: str = None, room_version: str = None, tok: str, expect_code: int = 200,",
      "37": "self, room_creator: _(?: is_public: bool = True, room_version: _(?: None, tok: _(?: None), expect_code: int = 200,",
      "38": "self, room_creator: str = None, are_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "39": "self, room_creator_: str = None, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "40": "self, room_creator, is_public: bool = True, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "41": "self, room_creator: sh = None, is_public: bool = True, room_version: sh = None, tok: str = None, expect_code: int = 200,",
      "42": "self, room_creator: str = None, is_public: bool = True, room_version: str = None, tok: str = Nothing, expect_code: int = 200,",
      "43": "self, room_creator: string = None, is_public: bool = True, room_version: str = None, tok: string = None, expect_code: int = 200,",
      "44": "self, room_creator: _.is_public: bool = True, room_version: _.is_public, tok: _.is_none, expect_code: int = 200,",
      "45": "self, room_creator: _.is_public: bool = True, room_version: _.is_public, tok: _.is_null, expect_code: int = 200,",
      "46": "self, room_creator: str = None, is_public: bool = True, room_version: string = None, tok: str = None, expect_code: int = 200,",
      "47": "self, room_creator: _(!str), is_public: bool = True, room_version: _(!tok || None), expect_code: int = 200,",
      "48": "self, room_creator: str = None, is_public, room_version: str = None, tok: str = None, expect_code: int = 200,",
      "49": "self, room_creator: _.is_public: bool = True, room_version: _.is_public, tok: _.is_not_public, expect_code: int = 200,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    y: int,\n    channel_id: str = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "target_code": "    y: int,\n    channel_id: Optional[str] = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "warning_line": "    channel_id: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_id is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theislab/squidpy",
    "source_filename": "squidpy/im/crop.py",
    "target_filename": "squidpy/im/crop.py",
    "source_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed^",
    "target_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed",
    "predictions": [
      "y: int, channel_id: str = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?"
    ],
    "correct": false,
    "top_five": {
      "0": "y: int, channel_id: str = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "1": "y: int, channel_id: str = None, xs: int = 100, #TODO: are these defaults reasonable or should no defaults be specified?",
      "2": "y: int, channel_id: str = None, xs: int = 100 # TODO: are these defaults reasonable or should no defaults be specified?",
      "3": "y: int, channel_id: str = None, xs: int = 100",
      "4": "y: int, channel_id: str = null, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "5": "y: int, channel_id: str = Nothing, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "6": "y: int, channel_id: str = None, xs: int = 100... # TODO: are these defaults reasonable or should no defaults be specified?",
      "7": "y: int, channel_id: str = none, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "8": "y: int, channel_id: str = None, xs: int = 100, # TODO: should no defaults be specified?",
      "9": "y: int, channel_id: str = None, xs: int = 100, # TODO: should this defaults be specified?",
      "10": "y: int, channel_id: str = None, xs: int = 100# TODO: are these defaults reasonable or should no defaults be specified?",
      "11": "y: int, channel_id: str = '', xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "12": "y: int, channel_id: str = 0, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "13": "y: int, channel_id: str = None, xs: int = 100 * 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "14": "y: int, channel_id: str = None, xs: integer = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "15": "y: int, channel_id: str, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "16": "y: int, channel_id, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "17": "y: int, channel_id: str = None, xs: int = 100, # TODO: can this be a string? Are these defaults reasonable or should no defaults be specified?",
      "18": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME || '', # TODO: are these defaults reasonable or should no defaults be specified?",
      "19": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id || '', # TODO: are these defaults reasonable or should no defaults be specified?",
      "20": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id || '', TODO: are these defaults reasonable or should no defaults be specified?",
      "21": "y: int, channel_id str = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "22": "y: int, channel_id: str = None, xs: int = 100; # TODO: are these defaults reasonable or should no defaults be specified?",
      "23": "y: int, channel_id: str = Null, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "24": "y: int, channel_id: str = None, xs: int = 100,",
      "25": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME || '', TODO: are these defaults reasonable or should no defaults be specified?",
      "26": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, xs, # TODO: are these defaults reasonable or should no defaults be specified?",
      "27": "y: int, channel_id: str = None, xs: int = 100, # TODO: should these defaults be specified?",
      "28": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NOPEX, # TODO: are these defaults reasonable or should no defaults be specified?",
      "29": "y: int, channel_id: str = None, xs: int = 100, _TODO: are these defaults reasonable or should no defaults be specified?",
      "30": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME_SPECIFIC_VALUE, # TODO: are these defaults reasonable or should no defaults be specified?",
      "31": "y: int, channel_id: str = None, xs: int = 100, 'use strict', # TODO: are these defaults reasonable or should no defaults be specified?",
      "32": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, STRING_NAME, # TODO: are these defaults reasonable or should no defaults be specified?",
      "33": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id declared as None, # TODO: are these defaults reasonable or should no defaults be specified?",
      "34": "y: int, channel_id: str = None, xs: int = 100, @TODO: are these defaults reasonable or should no defaults be specified?",
      "35": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME_HOME, # TODO: are these defaults reasonable or should no defaults be specified?",
      "36": "y: int, channel_id: string = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "37": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME, # TODO: are these defaults reasonable or should no defaults be specified?",
      "38": "y: int, channel_id: str = None, xs: int = 100, $ TODO: are these defaults reasonable or should no defaults be specified?",
      "39": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME || '*', # TODO: are these defaults reasonable or should no defaults be specified?",
      "40": "y: int, channel_id: str = None, # TODO: are these defaults reasonable or should no defaults be specified?",
      "41": "y: int, channel_id: str = None, xs: int = 100 TODO: are these defaults reasonable or should no defaults be specified?",
      "42": "y: int, channel_id: str = 0 || None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "43": "y: int, channel_id: str = None, xs: int = 100, NODE_TYPE: are these defaults reasonable or should no defaults be specified?",
      "44": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME_HOME # TODO: are these defaults reasonable or should no defaults be specified?",
      "45": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME || 'EINVALID', # TODO: are these defaults reasonable or should no defaults be specified?",
      "46": "y: int, channel_id: str = None, xs: int = 50, # TODO: are these defaults reasonable or should no defaults be specified?",
      "47": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME || '' TODO: are these defaults reasonable or should no defaults be specified?",
      "48": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME_API_VALUE, # TODO: are these defaults reasonable or should no defaults be specified?",
      "49": "y: int, channel_id: str = None, xs: int = 100, NODE_NAME: channel_id, NODE_NAME_SPECIFICATIONS, # TODO: are these defaults reasonable or should no defaults be specified?"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        user_id:      str,\n        display_name: str  = None,\n        avatar_url:   str  = None,\n        power_level:  int  = 0,\n",
    "target_code": "        user_id:      str,\n        display_name: Optional[str] = None,\n        avatar_url:   Optional[str] = None,\n        power_level:  int  = 0,\n",
    "warning_line": "        display_name: str  = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " display_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 501,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/rooms.py",
    "target_filename": "nio/rooms.py",
    "source_changeid": "54370462a3691387e011912c8450ee062168198a^",
    "target_changeid": "54370462a3691387e011912c8450ee062168198a",
    "predictions": [
      "user_id: str, avatar_url: str, power_level: int = 0,"
    ],
    "correct": false,
    "top_five": {
      "0": "user_id: str, avatar_url: str, power_level: int = 0,",
      "1": "user_id: str, avatar_url: str = None, power_level: int = 0,",
      "2": "user_id: str, display_name: str = None, avatar_url: str, power_level: int = 0,",
      "3": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_module_level: int = 0,",
      "4": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_level: int = 0,",
      "5": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_level: int = 0,",
      "6": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_level: int = 0,",
      "7": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_level: int = 0,",
      "8": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_level: int,",
      "9": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_level: int,",
      "10": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_level: int = 0,",
      "11": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules:, power_level: int = 0,",
      "12": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_module_level: int,",
      "13": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_level: int",
      "14": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.de_level: int = 0,",
      "15": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_level: 0,",
      "16": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_level: int = 0,",
      "17": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_module_level: int = 0,",
      "18": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_level: int = 0,",
      "19": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules: str, power_level: int = 0,",
      "20": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_ or _.ode_module_level: int = 0,",
      "21": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_level: 0,",
      "22": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.debug: str, power_level: int = 0,",
      "23": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_module_level: 0,",
      "24": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules: 0,",
      "25": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_level: int,",
      "26": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_module_level: 0,",
      "27": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules: null, power_level: int = 0,",
      "28": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules: None, power_level: int = 0,",
      "29": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_level: int",
      "30": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules: int = 0,",
      "31": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_moduled: str, power_level: int = 0,",
      "32": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_level: int = 0,",
      "33": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_level: int",
      "34": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_moduled: str, power_level: int = 0,",
      "35": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modulet = 0,",
      "36": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.node_module_level: int = 0,",
      "37": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.debug_level: int = 0,",
      "38": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.destructor_level: int = 0,",
      "39": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules: int,",
      "40": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_module_level: int",
      "41": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modulese_level: int = 0,",
      "42": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_ or _.ode_modules_level: int = 0,",
      "43": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_moduled: null,",
      "44": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.debug: str,",
      "45": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules:, power_level: int = 0,",
      "46": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.node_module_level: int,",
      "47": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_module_level: int,",
      "48": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.debug: int,",
      "49": "user_id: str, display_name: _.str, avatar_url: _.node_modules_ or _.node_modules_ or _.node_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ or _.ode_modules_ ord.ode_level: int = 0,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "target_code": "\n    def __init__(self, chat: 'Chat', *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "warning_line": "    def __init__(self, chat: 'Chat' = None, *,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " chat is declared to have type `Chat` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 243,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/ehForwarderBot",
    "source_filename": "ehforwarderbot/chat.py",
    "target_filename": "ehforwarderbot/chat.py",
    "source_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b^",
    "target_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b",
    "predictions": [
      "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "1": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: optional[str] = None, id: ChatID = ChatID(\"\"),",
      "2": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Options[str] = None, id: ChatID = ChatID(\"\"),",
      "3": "def __init__(self, chat: chat.__Chat = None, *, name: str = \"\", alias: optional[str] = None, id: ChatID = ChatID(\"\"),",
      "4": "def __init__(self, chat: chat.__Chat = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "5": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = Nothing, id: ChatID = ChatID(\"\"),",
      "6": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional [str] = None, id: ChatID = ChatID(\"\"),",
      "7": "def __init__(self, chat: 'Chat' = Nothing, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "8": "def __init__(self, chat: chat.__Chat = None, *, name: str = \"\", alias: options[str] = None, id: ChatID = ChatID(\"\"),",
      "9": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"),",
      "10": "def __init__(self, chat: 'Chat' = none, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "11": "def __init__(self, chat: 'Chat' = All, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "12": "def __init__(self, chat: ['Chat', None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "13": "def __init__(self, chat: isChat('Chat') = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "14": "def __init__(self, chat: 'Chat' = NotFound, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "15": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = none, id: ChatID = ChatID(\"\"),",
      "16": "def __init__(self, chat: chat.__Chat = None, *, name: str = \"\", alias: options.optional[str] = None, id: ChatID = ChatID(\"\"),",
      "17": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: optional[str] = None, id: ChatID = ChatID(\"\"),",
      "18": "def __init__(self, chat: 'Chat' = No, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "19": "def __init__(self, chat: 'Chat' = None, *, names: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "20": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: options[str] = None, id: ChatID = ChatID(\"\"),",
      "21": "def __init__(self, chat: 'Chat' = none, *, name: str = \"\", alias: Optional[str] = none, id: ChatID = ChatID(\"\"),",
      "22": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None and id: ChatID = ChatID(\"\"),",
      "23": "def __init__(self, chat: chatID = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "24": "def __init__(self, chat: 'Chat' = None, *, alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "25": "def __init__(self, chat: \"Chat\" = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "26": "def __init__(self, chat: 'Chat' = None, *, title: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "27": "def __init__(self, chat: 'Chat' = None, *, name: \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "28": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: OptionalCallback[str] = None, id: ChatID = ChatID(\"\"),",
      "29": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, auto_init: false, id: ChatID = ChatID(\"\"),",
      "30": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: OptionalJs[str] = None, id: ChatID = ChatID(\"\"),",
      "31": "def __init__(self, chat: chatType = 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "32": "def __init__(self, chat: 'Chat' = Non, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "33": "def __init__(self, chat: 'Chat' = None, *, word: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "34": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, user: None, id: ChatID = ChatID(\"\"),",
      "35": "def __init__(self, chat: def.Chat = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "36": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional$[str] = None, id: ChatID = ChatID(\"\"),",
      "37": "def __init__(self, chat: chatStatus = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "38": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = No, id: ChatID = ChatID(\"\"),",
      "39": "def __init__(self, chat: 'Chat' = Null, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "40": "def __init__(self, chat: 'Chat' = Any, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "41": "def __init__(self, chat: name = 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "42": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id, ChatID = ChatID(\"\"),",
      "43": "def __init__(self, chat: Chat = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "44": "d\u00e9f __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "45": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, ID: ChatID = ChatID(\"\"),",
      "46": "def __init__(self, chat: chat.__name, *, name: str = \"\", alias: optional[str] = None, id: ChatID = ChatID(\"\"),",
      "47": "def __init__(self, chat: = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "48": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\",\"),",
      "49": "def __init__(self, chat: 'Chat' = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatId = ChatID(\"\"),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: int = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "target_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "warning_line": "        timestamp: int = cast(float, message.timestamp)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "robinhood/faust",
    "source_filename": "faust/topics.py",
    "target_filename": "faust/topics.py",
    "source_changeid": "08e3003188557cc18bfd085315892beb1d99584c^",
    "target_changeid": "08e3003188557cc18bfd085315892beb1d99584c",
    "predictions": [
      "value: bytes = cast(bytes, message.value) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)"
    ],
    "correct": false,
    "top_five": {
      "0": "value: bytes = cast(bytes, message.value) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "1": "value: bytes = cast(bytes, message.value) var timestamp = int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "2": "value: bytes = cast(bytes, message.value)",
      "3": "value: bytes = cast(bytes, message.value) var timestamp = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "4": "value: bytes = cast(bytes, message.value) timestamp: float.timestamp logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "5": "value: bytes = cast(bytes, message.value) values: float, timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "6": "value: bytes = cast(bytes, message.value) timestamp: float.getTimestamp(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "7": "value: bytes = cast(bytes, message.value) timestamp: float.isFloat(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "8": "value: bytes = cast(bytes, message.value) timestamp: utils.int(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "9": "value: bytes = cast(bytes, message.value) timestamp: undefined logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "10": "value: bytes = cast(bytes, message.value) timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "11": "value: bytes = cast(bytes, message.value) timestamp: cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "12": "value: bytes = cast(bytes, message.value) timestamp: float.toInt(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "13": "value: bytes = cast(bytes, message.value) timestamp: float.call(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "14": "value: bytes = cast(bytes, message.value) timestamp: float[0], timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "15": "value: bytes = cast(bytes, message.value) timestamp: float.then(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "16": "value: bytes = cast(bytes, message.value) timestamp: utils.isFloat(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "17": "value: bytes = cast(bytes, message.value) timestamp: float || 0 logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "18": "value: bytes = cast(bytes, message.value) timestamp: null || message.timestamp logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "19": "value: bytes = cast(bytes, message.value) timestamp: float[0], timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "20": "value: bytes = cast(bytes, message.value) var timestamp = cast(int, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "21": "value: bytes = cast(bytes, message.value) values: float; timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "22": "value: bytes = cast(bytes, message.value) datestamp: int = cast(float, message.date.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "23": "value: bytes = cast(bytes, message.value) var timestamp = parseFloat(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "24": "value: bytes = cast(bytes, message.value) value: float; timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "25": "value: bytes = cast(bytes, message.value) datestamp: float.getTimestamp(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "26": "value: bytes = cast(bytes, message.value) timestamp: floatType.isFloat(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "27": "value: bytes = cast(bytes, message.value) isNaN(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "28": "value: bytes = cast(bytes, message.value) timestamp: parseFloat(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "29": "value: bytes = cast(bytes, message.value) var timestamp = float.timestamp logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "30": "value: bytes = cast(bytes, message.value) datestamp: cast(float, message.date.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "31": "value: bytes = cast(bytes, message.value) timestamp: port.float(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "32": "value: bytes = cast(bytes, message.value) daystamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "33": "value: bytes = cast(bytes, message.value) datestamp: cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "34": "value: bytes = cast(bytes, message.value) timestamp: float.toFixed(2) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "35": "value: bytes = cast(bytes, message.value) timestamp: float || [] logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "36": "value: bytes = cast(bytes, message.value) timestamp: float += message.timestamp logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "37": "value: bytes = cast(bytes, message.value) identifier: message.identifier || null logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "38": "value: bytes = cast(bytes, message.value) values: byteValues[0] } ) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "39": "value: bytes = cast(bytes, message.value) timestamp: float; logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "40": "value: bytes = cast(bytes, message.value) timestamp: message.timestamp logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "41": "value: bytes = cast(bytes, message.value) logger.debug('send: topic=%r key=%r value=%r messagestamp=%r', topic, key, value, timestamp)",
      "42": "value: bytes = cast(bytes, message.value) logging.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "43": "value: bytes = cast(bytes, message.value) timestamp: float || null logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "44": "value: bytes = cast(bytes, message.value) timestamp: null; logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "45": "value: bytes = cast(bytes, message.value) logger.debug('send: topic=%r key=%r value=%r message.timestamp=%r', topic, key, value, timestamp)",
      "46": "value: bytes = cast(bytes, message.value) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "47": "value: bytes = cast(bytes, message.value) var timestamp = undefined logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "48": "value: bytes = cast(bytes, message.value) hash: logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, hash)",
      "49": "value:bytes = cast(bytes, message.value) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def get(self, key: str, default: Optional = None) -> Any:\n        try:\n",
    "target_code": "\n    def get(self, key: str, default: Optional[Any] = None) -> Any:\n        try:\n",
    "warning_line": "    def get(self, key: str, default: Optional = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " default is declared to have type `Optional[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 119,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ducdetronquito/scalpl",
    "source_filename": "scalpl/scalpl.py",
    "target_filename": "scalpl/scalpl.py",
    "source_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216^",
    "target_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216",
    "predictions": [
      "def get(self, key: str, default: Optional = None) -> Any: try:"
    ],
    "correct": false,
    "top_five": {
      "0": "def get(self, key: str, default: Optional = None) -> Any: try:",
      "1": "def get(self, str, default: Optional = None) -> Any: try:",
      "2": "def get(self, key: str, default: optional = None) -> Any: try:",
      "3": "def get(self, key: str, default: Optional = All) -> Any: try:",
      "4": "def get(self, str, default: optional = None) -> Any: try:",
      "5": "def get(self, key: str, default: opts.Optional = None) -> Any: try:",
      "6": "def get(self, key: str, default: Optional = None) -> All: try:",
      "7": "def get(self, key: str, default: defaultOptional = None) -> Any: try:",
      "8": "def get(self, key: str, default: optional = None) -> Any: try:",
      "9": "def get(self, key: str) -> Any: try:",
      "10": "def get(self, key: str, default: isNaN(optional)) -> Any: try:",
      "11": "def get(self, key: str, default: Optional = None) -> Any type: try:",
      "12": "def get(self, key: str, default: Optional = None) -> any: try:",
      "13": "def get(self, key: str, default: options.NoOptional = None) -> Any: try:",
      "14": "def get(self, key: str, default: type == 'optional') -> Any: try:",
      "15": "def get(self, key: str, default: _Optional = None) -> Any: try:",
      "16": "def get(self, key: str, default:!optional || None) -> Any: try:",
      "17": "def get(self, string) -> Any: try:",
      "18": "def get(self, key: str, value: default: Optional = None) -> Any: try:",
      "19": "def get(self, key) -> Any: try:",
      "20": "def get(self, key: str, default: Optional = None) -> (Any): try:",
      "21": "def get(self, key: str, default: options.Optional = None) -> Any: try:",
      "22": "def get(self, key: str, default: _.optional = None) -> Any: try:",
      "23": "def get(self, key: str, default: isAnything(optional)) -> Any: try:",
      "24": "def get(self, key: str, default: Validator = None) -> Any: try:",
      "25": "def get(self, key: str, _default: Optional = None) -> Any: try:",
      "26": "def get(self, key: str, default: Optional = none) -> Any: try:",
      "27": "def get(self, key: str, default: Accept = None) -> Any: try:",
      "28": "def get(self, key: str, default: default: Optional = None) -> Any: try:",
      "29": "def get(self, key: str, default: isOptional(some)) -> Any: try:",
      "30": "def get(self, keys, default: Optional = None) -> Any: try:",
      "31": "def get(self, keys: str, default: Optional = None) -> Any: try:",
      "32": "def get(self, string, default: Optional = None) -> Any: try:",
      "33": "def get(self, key: str, default: isOptional || None) -> Any: try:",
      "34": "def get(self, key: str, default: option = None) -> Any: try:",
      "35": "def get(self, key: str, default: Optional = None) -> Some: try:",
      "36": "def get(self, key: str, default: Optional = None) -> None: try:",
      "37": "def get(self, key: str, default: type == 'any') -> Any: try:",
      "38": "def get(self, key: str, default: Default = None) -> Any: try:",
      "39": "def get(self, key: str, default: None) -> Any: try:",
      "40": "def get(self, key: str, default: Optional = None) => Any: try:",
      "41": "def get(self, key: str, default: Acceptable = None) -> Any: try:",
      "42": "def get(self, key: str, optional: None) -> Any: try:",
      "43": "def get(self, type: str, default: Optional = None) -> Any: try:",
      "44": "def get(self, key: str, default: Options = None) -> Any: try:",
      "45": "def get(self, key: str, default: isAnything: false) -> Any: try:",
      "46": "def get(self, key: str, default: Optional = None) -> AnyType: try:",
      "47": "def get(self, key: str, default: All] -> Any: try:",
      "48": "def get(self, key: str, default: Optional = None) ->Any: try:",
      "49": "def get(self, key: str, default: Optional = None) -> (Any: try:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        project_id: str,\n        region: str = None,\n        location: Optional[str] = None,\n",
    "target_code": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
    "warning_line": "        region: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " region is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 931,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "project_id: str, region: str = None, location: Optional[str] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "project_id: str, region: str = None, location: Optional[str] = None,",
      "1": "project_id: str, str = None, location: Optional[str] = None,",
      "2": "project_id: str, location: Optional[str] = None,",
      "3": "project_id: str, country: str = None, location: Optional[str] = None,",
      "4": "project_id: str, city_id: None, region: str = None, location: Optional[str] = None,",
      "5": "project_id: str, region: str = Type === 'None', location: Optional[str] = None,",
      "6": "project_id: str, city_id: str, region: str = None, location: Optional[str] = None,",
      "7": "str, project_id: str, region: str = None, location: Optional[str] = None,",
      "8": "project_id: str, type:'script', region: str = None, location: Optional[str] = None,",
      "9": "project_id: str, area: str = None, location: Optional[str] = None,",
      "10": "project_id: str, region: None, location: Optional[str] = None,",
      "11": "project_id: str, region: str = null, location: Optional[str] = None,",
      "12": "project_id: str, region: str = Type === None, location: Optional[str] = None,",
      "13": "project_id: str, type: '', region: str = None, location: Optional[str] = None,",
      "14": "project_id: str, region: str = Nothing, location: Optional[str] = None,",
      "15": "project_id: str, state: str = None, location: Optional[str] = None,",
      "16": "project_id: str, region: str = Null, location: Optional[str] = None,",
      "17": "project_id: str, strRegion: None, location: Optional[str] = None,",
      "18": "project_id: str, region: str = All, location: Optional[str] = None,",
      "19": "project_id: str, region: str = none, location: Optional[str] = None,",
      "20": "project_id: str, namespace: str, location: Optional[str] = None,",
      "21": "project_id: str, regional: str = None, location: Optional[str] = None,",
      "22": "project_id: str, type:'string', location: Optional[str] = None,",
      "23": "project_id: str, locale: str = None, location: Optional[str] = None,",
      "24": "project_id: str, region: str = Non, location: Optional[str] = None,",
      "25": "project_id: str, nation: str = None, location: Optional[str] = None,",
      "26": "proiect_id: str, region: str = None, location: Optional[str] = None,",
      "27": "project_id: str, region: str = NotRegion, location: Optional[str] = None,",
      "28": "project_id: str, str=None, location: Optional[str] = None,",
      "29": "project_id: str, geographic_region: str = None, location: Optional[str] = None,",
      "30": "project_id: str, target_region: str = None, location: Optional[str] = None,",
      "31": "project_id: str, locale: Optional[str] = None,",
      "32": "proiectul_id: str, region: str = None, location: Optional[str] = None,",
      "33": "project_id: str, region: null, location: Optional[str] = None,",
      "34": "project_id: str, locale: None, location: Optional[str] = None,",
      "35": "project_id: str, region: str == None, location: Optional[str] = None,",
      "36": "project_id: str, type:'script', location: Optional[str] = None,",
      "37": "project_id: str, region: str = No, location: Optional[str] = None,",
      "38": "project_id: str, destination: str = None, location: Optional[str] = None,",
      "39": "project_id: str, region: str = 0, location: Optional[str] = None,",
      "40": "project_id: str, destination: None, location: Optional[str] = None,",
      "41": "project_id: str, territory: str = None, location: Optional[str] = None,",
      "42": "project_id: str, size: None, location: Optional[str] = None,",
      "43": "project_id: str, destination: str, location: Optional[str] = None,",
      "44": "project_id: str, association: None, location: Optional[str] = None,",
      "45": "project_id: str, type: String, location: Optional[str] = None,",
      "46": "project_id: str, value: str, location: Optional[str] = None,",
      "47": "project_id: str, localization: Optional[str] = None,",
      "48": "project_id: str, region: str = None, location: Optional[str] = none,",
      "49": "project_id: str, region: str = None, location: Optional[str] = Nothing,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None,\n) -> Any:\n",
    "target_code": "    persistence_store: BasePersistenceLayer,\n    config: Optional[IdempotencyConfig] = None,\n) -> Any:\n",
    "warning_line": "    config: IdempotencyConfig = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " config is declared to have type `IdempotencyConfig` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "target_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "persistence_store: BasePersistenceLayer, config: config = None, ) -> Any:"
    ],
    "correct": false,
    "top_five": {
      "0": "persistence_store: BasePersistenceLayer, config: config = None, ) -> Any:",
      "1": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, ) -> Any:",
      "2": "persistence_store: BasePersistenceLayer, config: DefaultConfig, ) -> Any:",
      "3": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, ) -> Any:",
      "4": "persistence_store: BasePersistenceLayer, config: _IdempotencyConfig = None, ) -> Any:",
      "5": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, ) -> Any:",
      "6": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, ) -> Any:",
      "7": "persistence_store: BasePersistenceLayer, config: config, ) -> Any:",
      "8": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig, ) -> Any:",
      "9": "persistence_store: BasePersistenceLayer, config: config = IdempotencyConfig, ) -> Any:",
      "10": "persistence_store: BasePersistenceLayer, config: _.isIdempotencyConfig = None, ) -> Any:",
      "11": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig' = None, ) -> Any:",
      "12": "persistence_store: BasePersistenceLayer, config: config = None, ) -> Any:",
      "13": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, _(config) -> Any:",
      "14": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig$ { None }, ) -> Any:",
      "15": "persistence_store: BasePersistenceLayer, config: config = Node.IdempotencyConfig, ) -> Any:",
      "16": "persistence_store: BasePersistenceLayer, config: Node.config, ) -> Any:",
      "17": "persistence_store: BasePersistenceLayer, config: 'IdempotencyConfig' = None, ) -> Any:",
      "18": "persistence_store: BasePersistenceLayer, config: configValue = None, ) -> Any:",
      "19": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, config: defaultConfig, ) -> Any:",
      "20": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig$ { isIdempotencyConfig }, ) -> Any:",
      "21": "persistence_store: BasePersistenceLayer, config: _.isAny(IdempotencyConfig), ) -> Any:",
      "22": "persistence_store: BasePersistenceLayer, config: configDefinition = None, ) -> Any:",
      "23": "persistence_store: BasePersistenceLayer, config: defaultConfig, ) -> Any:",
      "24": "persistence_store: BasePersistenceLayer, config: config = Node.config, ) -> Any:",
      "25": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig> = None, ) -> Any:",
      "26": "persistence_store: BasePersistenceLayer, config: Node.IdempotencyConfig, ) -> Any:",
      "27": "persistence_store: BasePersistenceLayer, config: config = Node.config, ) -> Any:",
      "28": "persistence_store: BasePersistenceLayer, config: config = Any, ) -> Any:",
      "29": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, _ -> Any:",
      "30": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None>, ) -> Any:",
      "31": "persistence_store: BasePersistenceLayer, config: _.isNone(IdempotencyConfig), ) -> Any:",
      "32": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig > None, ) -> Any:",
      "33": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig\u2018 = None, ) -> Any:",
      "34": "persistence_store: BasePersistenceLayer, config: AuthenticationConfig = None, ) -> Any:",
      "35": "persistence_store: BasePersistenceLayer, config: ManifestConfig = None, ) -> Any:",
      "36": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig\u2019 = None, ) -> Any:",
      "37": "persistence_store: BasePersistenceLayer, config: config = IdempotencyConfig' = None, ) -> Any:",
      "38": "persistence_store: BasePersistenceLayer, config: config = Exist, ) -> Any:",
      "39": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, config: Node.config, ) -> Any:",
      "40": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, config: defaultConfig, ) -> Any:",
      "41": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, config: Node.config, ) -> Any:",
      "42": "persistence_store: BasePersistenceLayer, config: config = IdempotencyConfig = None, ) -> Any:",
      "43": "persistence_store: BasePersistenceLayer, config: _IS_Idempotency = None, ) -> Any:",
      "44": "persistence_store: BasePersistenceLayer, config: AuthenticationConfig, ) -> Any:",
      "45": "persistence_store: BasePersistenceLayer, config: config = None, _ -> Any:",
      "46": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig = None, 'use strict', ) -> Any:",
      "47": "persistence_store: BasePersistenceLayer, config: config = IdempotencyConfig = None, ) -> Any:",
      "48": "persistence_store: BasePersistenceLayer, config: config = Nonexistent, ) -> Any:",
      "49": "persistence_store: BasePersistenceLayer, config: config = IdempotencyConfig = None, ) -> Any:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_line": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "alibaba/TinyNeuralNetwork",
    "source_filename": "tinynn/converter/operators/tflite/transformable.py",
    "target_filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1^",
    "target_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "predictions": [
      "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null,"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null,",
      "1": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFundefined)",
      "2": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregator', eps: null,",
      "3": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Actor'],",
      "4": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFundefined),",
      "5": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFunction",
      "6": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor', eps: null,",
      "7": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregator'],",
      "8": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: false,",
      "9": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFuniz)",
      "10": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Adjector', eps: null,",
      "11": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'),",
      "12": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float,",
      "13": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuns: deflite.ActivationFuniz)",
      "14": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFunique)",
      "15": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFundefined,",
      "16": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuns]",
      "17": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFunison)",
      "18": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFunique),",
      "19": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: false, fusedActivationFundefined)",
      "20": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor', eps: null, fusedActivationFundefined)",
      "21": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: true,",
      "22": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Adjuster'],",
      "23": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: deflite.Union[QuantizationParameters]",
      "24": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFunclears,",
      "25": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregator', eps: null, fusedActivationFundefined)",
      "26": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFundefined);",
      "27": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: None, quantization: deflite.Union[QuantizationParameters]",
      "28": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Block'],",
      "29": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Adjector', eps: null, fusedActivationFundefined)",
      "30": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: null",
      "31": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregate', eps: null,",
      "32": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none,",
      "33": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFunique,",
      "34": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFunison)",
      "35": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuns,",
      "36": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Mathmatics]),",
      "37": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuniz)",
      "38": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFunintended)",
      "39": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFunison,",
      "40": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregator', eps: null, eps: null,",
      "41": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['ActionTens'],",
      "42": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuns: deflite.ActivationFunction",
      "43": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregator', eps: null, fusedActivationFuniz)",
      "44": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['ActionTensor', eps: null,",
      "45": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Variable', eps: null,",
      "46": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuns: deflite.ActivationFunique",
      "47": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Aggregator'], eps: null,",
      "48": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: float, quantization: none, fusedActivationFuns: deflite.",
      "49": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE): def __init__(self, inputs: typing.List['Tensor'], eps: null, fusedActivationFuni"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        exchange: str = None,\n        *,\n",
    "target_code": "        self,\n        exchange: str = '',\n        *,\n",
    "warning_line": "        exchange: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exchange is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, exchange: str = None, *,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, exchange: str = None, *,",
      "1": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : -1 * _.indexOf('') : - 1",
      "2": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1",
      "3": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(') : - 1",
      "4": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(' ) : - 1",
      "5": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.') : - 1",
      "6": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(' ') : str = None, *,",
      "7": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.') : - 1",
      "8": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1",
      "9": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(' -1), *,",
      "10": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(' ') : - 1",
      "11": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.') : str = None, *,",
      "12": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) : - 1",
      "13": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : -1 * _.indexOf('.') : - 1",
      "14": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : -1 * _.indexOf('') :",
      "15": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(' -1),",
      "16": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : 0 * _.indexOf('') : str = None, *,",
      "17": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : -1 * _.indexOf('.') : - 1",
      "18": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')) - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('') : - 1",
      "19": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 2 * _.indexOf('')) - 1 * _.indexOf('') - 1",
      "20": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(''))? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(') : - 1",
      "21": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : 0 * _.indexOf('') : - 1",
      "22": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.') : str = None, *,",
      "23": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('') : - 1",
      "24": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1",
      "25": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : 0 * _.indexOf('') :",
      "26": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : 0 * _.indexOf('.') : str = None, *,",
      "27": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(') :",
      "28": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('/') : - 1",
      "29": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')) - 1 * _.indexOf('') : - 1",
      "30": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) : - 1",
      "31": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf(') : - 1",
      "32": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')) : -1 * _.indexOf('') : - 1",
      "33": "self, exchange: str = 1 * _.indexOf('')!== -1? _.indexOf('') : 0 * _.indexOf('')? _.indexOf('') : 0 * _.indexOf('')) : 0 * _.indexOf('') : 0 * _.indexOf(') : str = None, *,",
      "34": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('.') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : -1 * _.indexOf('.') : str = None, *,",
      "35": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 2 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1",
      "36": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('.')) : - 1 * _.indexOf('.')? _.indexOf('.') : - 1 * _.indexOf('.')) : 0 * _.indexOf('.') : str = None, *,",
      "37": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : 0 * _.indexOf('')? _.indexOf('') : 0 * _.indexOf('')) : 0 * _.indexOf('')",
      "38": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : -1 * _.indexOf('') : str = None, *,",
      "39": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1",
      "40": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('') : - 1 * _.indexOf('') : - 1",
      "41": "self, exchange: str = 1 * _.indexOf('')!== -1? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.exchange: str =",
      "42": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('')) - 1 * _.indexOf('') :",
      "43": "self, exchange: str = 1 * _.indexOf('') - 1 * _.indexOf('') - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1 * _.indexOf('')) - 1 * _.indexOf('') - 1",
      "44": "self, exchange: str = 1 * _.indexOf('')!== -1? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : -1 * _.indexOf: - 1",
      "45": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(' ) : str = None, *,",
      "46": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf(') : str = None, *,",
      "47": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : 0 * _.indexOf('')? _.indexOf('') : 0 * _.indexOf('')) : 0 * _.indexOf('') : 0 * _.indexOf('')) : _e, *,",
      "48": "self, exchange: str = 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : 0 * _.indexOf('') : str =",
      "49": "self, exchange: str = 1 * _.indexOf('')!== -1? _.indexOf('') : - 1 * _.indexOf('')? _.indexOf('') : - 1 * _.indexOf('')) : - 1 * _.indexOf('')? _.indexOf(') : - 1"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: int = 1.0,\n                 ):\n",
    "target_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
    "warning_line": "                 noise_variance: int = 1.0,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " noise_variance is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "GPflow/GPflow",
    "source_filename": "gpflow/models/sgpr.py",
    "target_filename": "gpflow/models/sgpr.py",
    "source_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb^",
    "target_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb",
    "predictions": [
      "num_latent: Optional[int] = None, noise_variance: int = 1.0, ):"
    ],
    "correct": false,
    "top_five": {
      "0": "num_latent: Optional[int] = None, noise_variance: int = 1.0, ):",
      "1": "num_latent: Optional[int] = None, noise_variance: async int = 1.0, ):",
      "2": "num_latent: Optional[int] = None, noise_variance: float, ):",
      "3": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 'float' : 1.0, ):",
      "4": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? float : 1.0, ):",
      "5": "num_latent: Optional[int] = None, noise_variance: Float(1.0), ):",
      "6": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1 : 0; ):",
      "7": "num_latent: Optional[int] = None, noise_variance: Float.isFloat(1.0), ):",
      "8": "num_latent: Optional[int] = None, noise_variance: _.float(1.0), ):",
      "9": "num_latent: Optional[int] = None, noise_variance: Float.int = 1.0, ):",
      "10": "num_latent: Optional[int] = None, noise_variance: notNull(int), ):",
      "11": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1,'standard': 1.0, ):",
      "12": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1,'standard_boolean' : 1.0, ):",
      "13": "num_latent: Optional[int] = None, noise_variance: tensor, ):",
      "14": "num_latent: Optional[int] = None, noise_variance: hasOwnProperty.int = 1.0, ):",
      "15": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0; ):",
      "16": "num_latent: Optional[int] = None, noise_variance: n = 0, n_noise_variance: n_noise_variance, ):",
      "17": "num_latent: Optional[int] = None, noise_variance: value, ):",
      "18": "num_latent: Optional[int] = None, noise_variance: _.isFloat(1.0), ):",
      "19": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1 : 0, ):",
      "20": "num_latent: Optional[int] = None, noise_variance: int = 1.0, if (!isNaN(noise_variance)) return true,",
      "21": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1 : 0 (null, noise_variance) : 0 (null), ):",
      "22": "num_latent: Optional[int] = None, noise_variance: float (), ):",
      "23": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1,'standard_float' : 1.0, ):",
      "24": "num_latent: Optional[int] = None, noise_variance: tmp_noise_variance, ):",
      "25": "num_latent: Optional[int] = None, noise_variance: notNull(int = 1.0), ):",
      "26": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1, 0 : 0; ):",
      "27": "num_latent: Optional[int] = None, noise_variance: n = 0, n_noise_variance: int = 1.0, ):",
      "28": "num_latent: Optional[int] = None, noise_variance: Float, ):",
      "29": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : float, ):",
      "30": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1, 0 : 0 (null, noise_variance) : float (null, noise_variance)",
      "31": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : 0 (null), ):",
      "32": "num_latent: Optional[int] = None, noise_variance: _int = 1.0, ):",
      "33": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : float (null, noise_variance)",
      "34": "num_latent: Optional[int] = None, noise_variance: float (1.0, 5):",
      "35": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1 : 0 (null, 0) : 0 (null), ):",
      "36": "num_latent: Optional[int] = None, noise_variance: n = 0? n : 1.0, ):",
      "37": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1, 0 : 0 (null, noise_variance) : float, ):",
      "38": "num_latent: Optional[int] = None, noise_variance: null, ):",
      "39": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : float (null, noise_variance) : 0",
      "40": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1 : 0 : 0 (null, noise_variance) : float (null, noise_variance) : 0",
      "41": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1,'standard_buffer' : 1.0, ):",
      "42": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1, 'float' : 1.0, ):",
      "43": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? [1-9] : [], ):",
      "44": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? [0, 0, 0] : [], ):",
      "45": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : float(null), ):",
      "46": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : Float, ):",
      "47": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 0 : 0 (null, noise_variance) : 0 (null, noise_variance_offset) : 0",
      "48": "num_latent: Optional[int] = None, noise_variance: isNaN(int)? 1 : 0 (null, 'float') : 1.0, ):",
      "49": "num_latent: Optional[int] = None, noise_variance: n = 10, ):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",\n",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_line": "        organization_id: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " organization_id is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mapillary/mapillary_tools",
    "source_filename": "mapillary_tools/upload_api_v4.py",
    "target_filename": "mapillary_tools/upload_api_v4.py",
    "source_changeid": "79159001d365c75215f0c05ba3b7937180563026^",
    "target_changeid": "79159001d365c75215f0c05ba3b7937180563026",
    "predictions": [
      "entity_size: int, file_type: FileType = \"zip\","
    ],
    "correct": false,
    "top_five": {
      "0": "entity_size: int, file_type: FileType = \"zip\",",
      "1": "entity_size: int, organization_id: null, file_type: FileType = \"zip\",",
      "2": "entity_size: int, organization_id: async int = None, file_type: FileType = \"zip\",",
      "3": "entity_size: int, organization_id: system.env.NODE_ENV === 'NONE', file_type: FileType = \"zip\",",
      "4": "entity_size: int, organization_id: isNone, file_type: FileType = \"zip\",",
      "5": "entity_size: int, organization_id: system.env.NODE_ENV === NONE, file_type: FileType = \"zip\",",
      "6": "entity_size: int, organization_id: number === 0? None : None, file_type: FileType = \"zip\",",
      "7": "entity_size: int, organization_id: _.isNone, file_type: FileType = \"zip\",",
      "8": "entity_size: int, organization_id: system.env.NODE_ENV === None, file_type: FileType = \"zip\",",
      "9": "entity_size: int, organization_id: _.isNone(int), file_type: FileType = \"zip\",",
      "10": "entity_size: int, organization_id: encodeURIComponent(int), file_type: FileType = \"zip\",",
      "11": "entity_size: int, organization_id: isNONE, file_type: FileType = \"zip\",",
      "12": "entity_size: int, organization_id: database.organization_id, file_type: FileType = \"zip\",",
      "13": "entity_size: int, organization_id: system.getOwnPropertyNames(int), file_type: FileType = \"zip\",",
      "14": "entity_size: int, organization_id: function () { return $ { organization_id }, file_type: FileType = \"zip\",",
      "15": "entity_size: int, organization_id: encodeURIComponent(organization_id), file_type: FileType = \"zip\",",
      "16": "entity_size: int, organization_id: system.getId('organization_id'), file_type: FileType = \"zip\",",
      "17": "entity_size: int, organization_id: Async Int(), file_type: FileType = \"zip\",",
      "18": "entity_size: int, organization_id: system.env.NODE_ENV == 'NONE', file_type: FileType = \"zip\",",
      "19": "entity_size: int, organization_id: encodeURIComponent('id', 'zip'), file_type: FileType = \"zip\",",
      "20": "entity_size: int, organization_id: vars.organization_id = None, file_type: FileType = \"zip\",",
      "21": "entity_size: int, organization_id: Array.isArray(None) || None, file_type: FileType = \"zip\",",
      "22": "entity_size: int, organization_id: int = None, file_type: FileType = \"zip\",",
      "23": "entity_size: int, organization_id: type == None, file_type: FileType = \"zip\",",
      "24": "entity_size: int, organization_id: type == 'number', file_type: FileType = \"zip\",",
      "25": "entity_size: int, organization_id: system.env.NODE_ENV === 'None', file_type: FileType = \"zip\",",
      "26": "entity_size: int, organization_id: system.env.NODE_ENV == NONE, file_type: FileType = \"zip\",",
      "27": "entity_size: int, organization_id: ASCII.CHAR_TYPE, file_type: FileType = \"zip\",",
      "28": "entity_size: int, organization_id: AsyncInt(NONE), file_type: FileType = \"zip\",",
      "29": "entity_size: int, organization_id: _.isNone(int), file_type: FileType = \"zip\",",
      "30": "entity_size: int, organization_id: array.isArray(None) || None, file_type: FileType = \"zip\",",
      "31": "entity_size: int, organization_id: parseInt(NONE), file_type: FileType = \"zip\",",
      "32": "entity_size: int, organization_id: AsyncInt(None), file_type: FileType = \"zip\",",
      "33": "entity_size: int, organization_id: var_id = None, file_type: FileType = \"zip\",",
      "34": "entity_size: int, organization_id: parseInt(null, \",\"), file_type: FileType = \"zip\",",
      "35": "entity_size: int, organization_id: AsyncInt(null), file_type: FileType = \"zip\",",
      "36": "entity_size: int, organization_id: number === 0? None : Int, file_type: FileType = \"zip\",",
      "37": "entity_size: int, organization_id: integer = None, file_type: FileType = \"zip\",",
      "38": "entity_size: int, organization_id: system.getId('organization_id') || None, file_type: FileType = \"zip\",",
      "39": "entity_size: int, organization_id: system.env.NODE_ENV == None, file_type: FileType = \"zip\",",
      "40": "entity_size: int, organization_id: Async Int(None), file_type: FileType = \"zip\",",
      "41": "entity_size: int, organization_id: type == 'int', file_type: FileType = \"zip\",",
      "42": "entity_size: int, organization_id: env = None, file_type: FileType = \"zip\",",
      "43": "entity_size: int, organization_id: None, file_type: FileType = \"zip\",",
      "44": "entity_size: int, organization_id: parseInt(int), file_type: FileType = \"zip\",",
      "45": "entity_size: int, organization_id: _.isNONE, file_type: FileType = \"zip\",",
      "46": "entity_size: int, organization_id: database.organisation_id, file_type: FileType = \"zip\",",
      "47": "entity_size: int, organization_id: var None = [], file_type: FileType = \"zip\",",
      "48": "entity_size: int, organization_id: system.getId('organization_id') = None, file_type: FileType = \"zip\",",
      "49": "entity_size: int, organization_id: async Int(), file_type: FileType = \"zip\","
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_line": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/extensions/base.py",
    "target_filename": "pystac/extensions/base.py",
    "source_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752^",
    "target_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "predictions": [
      "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "1": "def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "2": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: return false }",
      "3": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "4": "def _get_property(self, prop_name: str, typ: AnyIdType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "5": "def _get_property(self, prop_name: str, typ: AnyType.typ -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "6": "def _get_property(self, prop_name: str, typ: AnyType -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "7": "def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "8": "def _get_property(self, prop_name: str, typ: Variable[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "9": "def _get_property(self, prop_name: str, typ: AnyType ) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "10": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result = Type[P];",
      "11": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P] result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "12": "def _get_property(self, prop_name: str, typ: AnyItem[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "13": "def _get_property(self, prop_name: str, typ: AnyType.P) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "14": "def _get_property(self, prop_name: str, typ: AnyType.typ) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "15": "def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: return false }",
      "16": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result = Type[P] = False;",
      "17": "def _get_property(self, prop_name: str, typ: Any_type -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "18": "def _get_property(self, prop_name: str, typ: _Type[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "19": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: return type === 'object'",
      "20": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: return false",
      "21": "def _get_property(self, prop_name: str, typ: AnyType = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "22": "def _get_property(self, prop_name: str, typ: AnyType.type -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "23": "def _get_property(self, prop_name: str, typ: AnyType(String[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "24": "def _get_property(self, prop_name: str, typ: AnyType || Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "25": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result.isNaN(type)",
      "26": "def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P] result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "27": "def _get_property(self, prop_name: str, typ: AnyType(String[P])) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "28": "def _get_property(self, prop_name: str, typ: AnyIdType[P] -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "29": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: return false }",
      "30": "def _get_property(self, prop_name: str, typ: AnyType.P -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "31": "def _get_property(self, prop_name: str, typ: AllTypes[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "32": "def _get_property(self, prop_name: str, typ: _Type[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "33": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "34": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result = type === 'object'",
      "35": "def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result = Type[P];",
      "36": "def _get_property(self, str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "37": "def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result === False",
      "38": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result === False",
      "39": "def _get_property(self, prop_name: str, typ: Any[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "40": "def _get_property(self, prop_name: str, typ: This.Type[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "41": "def _get_property(self, prop_name: str, typ: AnyIterable[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "42": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result === False",
      "43": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result = Type[P] + prop_name;",
      "44": "def _get_property(self, prop_name: str, typ: HumanType[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "45": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: result = Type[P] = False",
      "46": "def _get_property(self, prop_name: str, typ: Anything[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "47": "def _get_property(self, prop_name: str, typ: AnyType[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None: return Type[P];",
      "48": "def _get_property(self, prop_name: str, typ: AllTypes[P] ) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "49": "def _get_property(self, prop_name: str, typ: AnyType[P] ) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "target_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " network_max_retries is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 206,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nabla-c0d3/sslyze",
    "source_filename": "sslyze/utils/ssl_connection.py",
    "target_filename": "sslyze/utils/ssl_connection.py",
    "source_changeid": "761c458b2207abc530b430e56d26bced6e4b9714^",
    "target_changeid": "761c458b2207abc530b430e56d26bced6e4b9714",
    "predictions": [
      "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = None"
    ],
    "correct": false,
    "top_five": {
      "0": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = None",
      "1": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = None",
      "2": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = None",
      "3": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = 0",
      "4": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = 0",
      "5": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = infinite",
      "6": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = None",
      "7": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = infinite",
      "8": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = All",
      "9": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = All",
      "10": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout == None",
      "11": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout == None",
      "12": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = 0",
      "13": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeouts = []",
      "14": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = 0",
      "15": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Definitive()",
      "16": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, obj) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = obj",
      "17": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeouts = []",
      "18": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = All",
      "19": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = false",
      "20": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Definitive()",
      "21": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, obj) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = None",
      "22": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = false",
      "23": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = self.NETWORK_TIMEOUT",
      "24": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Definite(self.NETWORK_TIMEOUT)",
      "25": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = self.NETWORK_TIMEOUT",
      "26": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Definite(self.NETWORK_TIMEOUT)",
      "27": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = All",
      "28": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = = None",
      "29": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = null",
      "30": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = DefinitiveType(int, 0)",
      "31": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = null",
      "32": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = DefinitiveType(int, 0)",
      "33": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = 100",
      "34": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Descendants.slice(0, 20)",
      "35": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = 100",
      "36": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = = None",
      "37": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = DefinitiveType(int,'max_retries')",
      "38": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout_isNone",
      "39": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Descendants.slice(0, 20)",
      "40": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = DefinitiveType(int,'max_retries')",
      "41": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = infinite",
      "42": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = retryNumber",
      "43": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout == None else network_timeout = infinite",
      "44": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Definite(self.IN_TIMEOUT)",
      "45": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout_isNone",
      "46": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Definite(self.IN_TIMEOUT)",
      "47": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = retryNumber",
      "48": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) => None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = Descendants.splice(0, 10);",
      "49": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout = ByteBuffer(self.NETWORK_TIMEOUT)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n\n",
    "target_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_line": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 309,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/federated",
    "source_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "target_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119^",
    "target_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "predictions": [
      "collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))"
    ],
    "correct": false,
    "top_five": {
      "0": "collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "1": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "2": "_intern_pool: Dict[typing.Type[Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "3": "var _intern_pool = Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "4": "if (!typeof _intern_pool!== 'undefined') { _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "5": "var _intern_pool = Dict[typing.Type[Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "6": "var collections = collections || { } ; _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "7": "_intern_pool: Dict[TypingType[typing.Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "8": "(function () { var key = _intern_pool.key || ''; _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "9": "_intern_pool: Dict[typing_type[any], dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "10": "if (!_intern_pool) { _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "11": "collection.get_intern_pool(dict) { _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "12": "var collections = collections || { } ; _intern_pool: Dict[typing.Type[Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "13": "if (!typeof _intern_pool!== 'undefined') { _intern_pool: Dict[typing.Type[Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "14": "(_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "15": "(function() { var data = { }, _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "16": "(function() { var key, _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "17": "collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )), _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "18": "if (!function() { _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "19": "collection.get_intern_pool_name = 'Dict[TypingType[typing.Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "20": "(function () { _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "21": "collection._intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "22": "async _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "23": "if (!weakref) { _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "24": "(function () { var key = _intern_pool.key || ''; _intern_pool: Dict[typing.Type[Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "25": "_intern_pool: Dict[typing.Type[any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "26": "_intern_pool: Dict[typing_type[Any], dict[Any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "27": "collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )), _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda))",
      "28": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections._intern_pool!== undefined && collections._intern_pool.length > 0) {",
      "29": "collection.get_intern_pool(dict) { _intern_pool: Dict[typing.Type[Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "30": "var _intern_pool = Dict[typing.Type[Any], Dict[any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "31": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections.default_pool!== undefined && collections.default_pool.length > 0) {",
      "32": "_intern_pool: Dict[typing_type[Any], dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "33": "self._intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "34": "return true; } _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "35": "_intern_pool: Dict[TypingType[typing.Any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "36": "negligible_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "37": "_intern_pool: Dict[TypingType[any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "38": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections.get_intern_pool_id === 'any' ) {",
      "39": "_intern_pool: Dict[typing.Type[Any], Dict[[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "40": "_intern_pool: Dict[typing.Type[Any], Dict[any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "41": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if (_intern_pool.size > 0 && _intern_pool.length > 0) {",
      "42": "_intern_pool: Dict[typing_type[any], dict[Any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "43": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections._intern_pool!== undefined && _intern_pool.length > 0 ) {",
      "44": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections.get_intern_pool_id() && _intern_pool.length > 0) {",
      "45": "slipstream_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "46": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections.get_intern_pool_id === 'any') {",
      "47": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if ( collections.default_pool!== undefined && _intern_pool.length > 0 ) {",
      "48": "declared_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "49": "(function () { var key = _intern_pool.key || ''; _intern_pool: Dict[typing.Type[any], Dict[any, any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_line": "    fold_method_args: Tuple[Any] = (),",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 789,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unitaryfund/mitiq",
    "source_filename": "mitiq/zne/scaling.py",
    "target_filename": "mitiq/zne/scaling.py",
    "source_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc^",
    "target_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "predictions": [
      "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: float, **kwargs,"
    ],
    "correct": false,
    "top_five": {
      "0": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: float, **kwargs,",
      "1": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[Any] = (), **kwargs,",
      "2": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float[Any] = (), **kwargs,",
      "3": "scale_factor: float, fold_method: Callable[[Circuit, float, Any]], Circuit], fold_method_args: Any || (), **kwargs,",
      "4": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[[typing.Any]] = (), **kwargs,",
      "5": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[any] = (), **kwargs,",
      "6": "scale_factor: float, fold_method: Callable[[Circuit, float, Any]], Circuit], fold_method_args: Any = (), **kwargs,",
      "7": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float.Tuple[Any] = (), **kwargs,",
      "8": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float.Any[Any] = (), **kwargs,",
      "9": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: standard_args, **kwargs,",
      "10": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: standard.args, **kwargs,",
      "11": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "12": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Any.method, **kwargs,",
      "13": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Type[Any] = (), **kwargs,",
      "14": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[[any]] = (), **kwargs,",
      "15": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Number[method_args](Tuple[typing.Any] = (), **kwargs,",
      "16": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Number(Tuple[typing.Any]), **kwargs,",
      "17": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: AnyCharType[0] = (), **kwargs,",
      "18": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Standard.Filter.Tuple[[typing.Any]] = (), **kwargs,",
      "19": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Standard.Filter.Tuple[Any] = (), **kwargs,",
      "20": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Common.Folder[Any] = (), **kwargs,",
      "21": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: () => ( { Any: (Any)), **kwargs,",
      "22": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: NormalizedTuple[[typing.Any]] = (), **kwargs,",
      "23": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[type.Any] = (), **kwargs,",
      "24": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: normalize(Tuple[typing.Any]), **kwargs,",
      "25": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float.Any, **kwargs,",
      "26": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: args, **kwargs,",
      "27": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: NormalizedTuple[typing.Any] = (), **kwargs,",
      "28": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args = args, **kwargs,",
      "29": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Standard.Folder[Any] = (), **kwargs,",
      "30": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: AnyCharType.charAt(any_charAt), **kwargs,",
      "31": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Boolean(Tuple[typing.Any]), **kwargs,",
      "32": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float.Any.Tuple[Any] = (), **kwargs,",
      "33": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float.Any[method], **kwargs,",
      "34": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: standard.Arguments, **kwargs,",
      "35": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: () => ( { \"Any\": \"Any\" } ), **kwargs,",
      "36": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Float.Any[Tuple[method] = (), **kwargs,",
      "37": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[method.Any] = (), **kwargs,",
      "38": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: AnyCharType.charAt(any_charAt) = (), **kwargs,",
      "39": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: () => ( { Any: [Any] } ), **kwargs,",
      "40": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: List[Any] = (), **kwargs,",
      "41": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Standard.Filter.Tuple[[]] = (), **kwargs,",
      "42": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args = Array[type.Any] = (), **kwargs,",
      "43": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args = (), **kwargs,",
      "44": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Array[[].Any] = (), **kwargs,",
      "45": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: () => ( { Any: [Any, Any] } ), **kwargs,",
      "46": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: floats, **kwargs,",
      "47": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: AnyCharType[any] = (), **kwargs,",
      "48": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: AnyCharType[3], **kwargs,",
      "49": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: AnyCharType[Any] = (), **kwargs,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_line": "        gw: \"Gateway\" = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " gw is declared to have type `Gateway` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rytilahti/python-miio",
    "source_filename": "miio/gateway/devices/subdevice.py",
    "target_filename": "miio/gateway/devices/subdevice.py",
    "source_changeid": "6453bfee512150e3f062670e890533fcd67067ea^",
    "target_changeid": "6453bfee512150e3f062670e890533fcd67067ea",
    "predictions": [
      "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "1": "self, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "2": "self, gw: \"Gateway\" = None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "3": "self, gw: Gateway, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "4": "self, gw: None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "5": "self, model_info: Optional[Dict] = None,",
      "6": "self, gw: Gateway, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "7": "self, gw: Node.location.path>, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "8": "self, gw: Node.location.pathname' = None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "9": "self, gw: 'Gateway', dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "10": "self, gw: None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "11": "self, gw: \"Gateway\" = None, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "12": "self, gw: 'Gateway', dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "13": "self, gw: \"Gateway\", dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "14": "self, gw: \"Gateway\", dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "15": "self, gw: Node.location.pathname', dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "16": "self, gw: None, model_info: Optional[Dict] = None,",
      "17": "self, gw: None, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "18": "self, dev_info: SubDeviceInfo || None, model_info: Optional[Dict] = None,",
      "19": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = none,",
      "20": "self, gw: \"Gateway\" = None, model_info: Optional[Dict] = None,",
      "21": "self, var dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "22": "self, gw: Node.location.pathname' = None, model_info: Optional[Dict] = None,",
      "23": "self, dev_info:SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "24": "self, const dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "25": "self, dev_info: SubDeviceInfo = Nothing, model_info: Optional[Dict] = None,",
      "26": "self, dev_info: ModelInfo = None, model_info: Optional[Dict] = None,",
      "27": "self, dev_info: None, model_info: Optional[Dict] = None,",
      "28": "self, derive_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "29": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, show_info: Optional[Dict] = None,",
      "30": "self, gw: None, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "31": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, show_info: Optional[Gateway] = None,",
      "32": "self, deref_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "33": "self, dev_info: SubDictInfo = None, model_info: Optional[Dict] = None,",
      "34": "self, dev_info: SubDeviceInfo = None, modeling_info: Optional[Dict] = None,",
      "35": "self, dev_info: SubDeviceInfo = Non, model_info: Optional[Dict] = None,",
      "36": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, model_info: Optional[Gateway] = None,",
      "37": "self, gw: Node.location.path>, model_info: Optional[Dict] = None,",
      "38": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, gw: \"Gateway\" = None,",
      "39": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, view_info: Optional[Gateway] = None,",
      "40": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = Nothing,",
      "41": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, driver_info: \"Gateway\" = None,",
      "42": "self, dev_info: SubDeviceInfo = None, mod\u00e8le_info: Optional[Dict] = None,",
      "43": "self, dev_info: ModelDeviceInfo = None, model_info: Optional[Dict] = None,",
      "44": "self, dev_info: OtherDeviceInfo = None, model_info: Optional[Dict] = None,",
      "45": "self, dev_info: MiniToolbox = None, model_info: Optional[Dict] = None,",
      "46": "self, dev_info: SubDeviceInfo + \", model_info: Optional[Dict] = None,",
      "47": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, view_info: Optional[Dict] = None,",
      "48": "self, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None, window_info: Optional[Gateway] = None,",
      "49": "self, dev_info: NodeInfo = None, model_info: Optional[Dict] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": true,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        dev: FlairDataset = DataPairDataset(\n            dev_file,\n",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_line": "        dev: FlairDataset = DataPairDataset(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 282,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/datasets/text_text.py",
    "target_filename": "flair/datasets/text_text.py",
    "source_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f^",
    "target_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "predictions": [
      "dev: DataPairDataset( dev_file,"
    ],
    "correct": false,
    "top_five": {
      "0": "dev: DataPairDataset( dev_file,",
      "1": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined'); dev: DataPairDataset( dev_file,",
      "2": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!= 'undefined'); dev_file: FlairDataset( dev_file,",
      "3": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined')); dev: FlairDataset( dev_file,",
      "4": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined'); dev: FlairDataset( dev_file,",
      "5": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['FlairDataset'] : typeof dev_file!== 'undefined'); dev_file: FlairDataset( dev_file,",
      "6": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? DataPairDataset['flair_dataset'] : 'undefined') ); dev: DataPairDataset( dev_file,",
      "7": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined'); dev_file: FlairDataset( dev_file,",
      "8": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? DataPairDataset['FlairDataset'] : 'undefined') ); dev_file: FlairDataset( dev_file,",
      "9": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_file'] : typeof dev_file!== 'undefined'); dev_file: FlairDataset( dev_file,",
      "10": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset[FlairDataset] : typeof dev_file!== 'undefined')); dev: DataPairDataset( dev_file,",
      "11": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined') ); dev_file: dev_file,",
      "12": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined'); dev_file: DataPairDataset( dev_file,",
      "13": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset]. FlairDataset = DataPairDataset( dev_file,",
      "14": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['FlairDataset'] : typeof dev_file!= 'undefined'); dev_file: FlairDataset( dev_file,",
      "15": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? process.env.AIR_DATASET_SOURCE' : 'AIR_DATASET_SOURCE')); dev_file: DataPairDataset( dev_file,",
      "16": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['FlairDataset'] : typeof dev_file!== 'undefined')); dev: DataPairDataset( dev_file,",
      "17": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset[FlairDataset] : typeof dev_file!== 'undefined') ); dev: DataPairDataset( dev_file,",
      "18": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined')? : dev_file,",
      "19": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== ': dev_file,",
      "20": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['FlairDataset'] : typeof dev_file!= 'undefined'); dev_file: DataPairDataset( dev_file,",
      "21": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!=='string' )? DataPairDataset[FlairDataset] : typeof dev_file!== 'function' : dev_file,",
      "22": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? DataPairDataset['FlairDataset'] : 'undefined') ); dev_file: DataPairDataset( dev_file,",
      "23": "dev: StyleFlairDataset = DataPairDataset( dev_file,",
      "24": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_file'] : typeof dev_file!= 'undefined'); dev_file: FlairDataset( dev_file,",
      "25": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['FlairDataset'] : typeof dev_file!== 'undefined')); dev: FlairDataset( dev_file,",
      "26": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? DataPairDataset['flair_dataset'] : typeof dev_file!== ') : dev_file,",
      "27": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined')); dev: DataPairDataset( dev_file,",
      "28": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset][0] : ': 'FlairDataset[ DataPairDataset( dev_file,",
      "29": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? DataPairDataset['FlairDataset'] : 'undefined') ); dev_file: 'FlairDataset( dev_file,",
      "30": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? dataset['FlairDataset'] : 'undefined') ); dev_file,",
      "31": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset][0] : ': 'FlairDataset( dev_file,",
      "32": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset][0] : ': 'FlairDataset[Dataset[1]( dev_file,",
      "33": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined')",
      "34": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined');",
      "35": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined' )? DataPairDataset[FlairDataset] : 'option'); dev_file,",
      "36": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset] : function); dev: DataPairDataset( dev_file,",
      "37": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined'); dev: 'file,",
      "38": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset'] === 'function') || ( typeof DataPairDataset!== 'undefined'? DataPairDataset['flair_dataset'] : 'undefined') ); dev: FlairDataset( dev_file,",
      "39": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_file'] : typeof dev_file!== 'undefined')); dev: FlairDataset( dev_file,",
      "40": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!= 'undefined')); dev: FlairDataset( dev_file,",
      "41": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset][0] : ': 'FlairDataset[1] : DataPairDataset( dev_file,",
      "42": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!= 'undefined'); dev_file: dev_file,",
      "43": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['FlairDataset'] : typeof dev_file!== 'undefined'); dev_file: dev_file,",
      "44": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset] : 'Optional[Dataset[DataPairDataset[ DataPairDataset( dev_file,",
      "45": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'function')? DataPairDataset[FlairDataset] : typeof DataPairDataset[FlairDataset][0] : ': 'FlairDataset[Dataset( dev_file,",
      "46": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!== 'undefined'); dev: File( dev_file,",
      "47": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined')? DataPairDataset['flair_dataset'] : typeof dev_file!= 'undefined');",
      "48": "dev: TypeFlairDataset but is declared as typetyping.Optional[DataPairDataset] while ((type === 'function') && type['FlairDataset']) || ( typeof DataPairDataset!== 'undefined'? 'dataset['FlairDataset'] : 'undefined') ); dev_file,",
      "49": "dev: FlaairDataset = DataPairDataset( dev_file,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_line": "        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/web3.py",
    "source_filename": "web3/providers/auto.py",
    "target_filename": "web3/providers/auto.py",
    "source_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1^",
    "target_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "predictions": [
      "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "1": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "2": "self, potentiel_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "3": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "4": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: null",
      "5": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, possible_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "6": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _other_providers: self, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "7": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, potential_providers_: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "8": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "9": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Null",
      "10": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _providers_: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "11": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: null",
      "12": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _other_providers: String[union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "13": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _other_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "14": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.base,",
      "15": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] ==None ) -> None:",
      "16": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.base;",
      "17": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, possible_providers: Union[Callable[..., BaseProvider]]=None ) -> None:",
      "18": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: NULL",
      "19": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: true",
      "20": "self, potential_providers: Sequence[Union[typing.Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "21": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_types: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "22": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, potentially_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "23": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, possible_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "24": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.BaseProvider.base;",
      "25": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Union[Callable[..., BaseProvider]]=None,",
      "26": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _proxy_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "27": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> none:",
      "28": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None, callback: Sequence[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "29": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Sequence[union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "30": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _other_providers: Sequence[union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "31": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.base.BaseProvider,",
      "32": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Null",
      "33": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.BaseProvider.base,",
      "34": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: true",
      "35": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None, callback: Sequence[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Sequence[Callable[..., BaseProvider], Type[BaseProvider]]=None, callback: Sequence[Callable[..., BaseProvider]]=None,",
      "36": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Sequence[Web3.Callable[..., BaseProvider]] ==None? Sequence[Web3.Callable[..., BaseProvider]] : 'Sequence[Web3.Callable[..., BaseProvider]';",
      "37": "self, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "38": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.base",
      "39": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.base[Web3.provider]",
      "40": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Sequence[Callable[..., BaseProvider]]=None;",
      "41": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.BaseProvider,",
      "42": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, default_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "43": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: union[Callable[..., BaseProvider]]=None,",
      "44": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.BaseProvider.base",
      "45": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Sequence[Callable[..., BaseProvider]]=None,",
      "46": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, eventual_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "47": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: web3.providers.base.BaseProvider.base, String: Null",
      "48": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: Union[Callable[..., BaseProvider]]=None;",
      "49": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None: self, _provider_names: web3.providers.base.BaseProvider.names, potential_providers: Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None: union[Callable[..., BaseProvider]]=None;"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
    "target_code": "\n    def __get__(self, instance: Any, owner: Any = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_line": "    def __get__(self, instance: object, owner: type = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 66,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pgjones/quart",
    "source_filename": "src/quart/config.py",
    "target_filename": "src/quart/config.py",
    "source_changeid": "c6905c0abe702031e79520c1474f2996657bd245^",
    "target_changeid": "c6905c0abe702031e79520c1474f2996657bd245",
    "predictions": [
      "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "1": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: None if self.converter is not None:",
      "2": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: negligible if self.converter is not None:",
      "3": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is Not:",
      "4": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignored if self.converter is not None:",
      "5": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type : ignore if self.converter is not None:",
      "6": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: null if self.converter is not None:",
      "7": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as typing.Type[typing.Any] if self.converter is not None:",
      "8": "def __get__(self, instance: object, owner: type = None) -> Any: def __get__(self, instance: object, owner: type = None) if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "9": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key]# type: ignore if self.converter is not None:",
      "10": "def __get__(self, instance: object, owner: type = None) -> Any: if instance = None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "11": "def __get__(self, instance: object, owner: type = None) -> Any: case 'any': return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "12": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is Not None:",
      "13": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = 'None' if self.converter is not None:",
      "14": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: undefined if self.converter is not None:",
      "15": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self.instance.object, owner: type = None) if self.converter is not None:",
      "16": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # kind: ignore if self.converter is not None:",
      "17": "def __get__(self, instance: object, owner: type = None) -> None: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "18": "def __get__(self, instance: object, owner: type = None) -> Any: def __get__(self, instance: object, owner: type = None) return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "19": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as typing.Type[typing.Any] but is declared as None if self.converter is not None:",
      "20": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: neg || ignore if self.converter is not None:",
      "21": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self._id] # type: ignore if self.converter is not None:",
      "22": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None: return self result._get__(null, true)",
      "23": "def __get__(self, instance: object, owner: type = None) -> Any: if instance of type is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "24": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "25": "def __get__(self, instance: object, owner: type = None) -> Any: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "26": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self, instance.nodeType, owner: type = None) if self.converter is not None:",
      "27": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = ignore if self.converter is not None:",
      "28": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as typing.Type[typing.Any] but is declared as None if self.converter is not None:",
      "29": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self, instance.nodeId, owner: type = None) if self.converter is not None:",
      "30": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as typing.Type[typing.Any] but is declared as None if self.converter is not None:",
      "31": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None: return def __get__(self, instance: object, owner: type = None)",
      "32": "def __get__(self, instance: object, owner: type = None) -> Any: if self.instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "33": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as type but is declared as Any by default def __get__(self, instance: object, owner: type = None)",
      "34": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None: return def __get__(self, instance.object)",
      "35": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None: return self result;",
      "36": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self.instance.object, owner: type = None) # type: ignore if self.converter is not None:",
      "37": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self, instance.node_id, owner: type = None) if self.converter is not None:",
      "38": "def __get__(self, instance: object, owner: type = none) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "39": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None: return def __get__(self, instance)",
      "40": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self.instance.items[owner]) # type: ignore if self.converter is not None:",
      "41": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as type but is declared as Any if self.converter is not None:",
      "42": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: _type if self.converter is not None:",
      "43": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = 'Any' if self.converter is not None:",
      "44": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self.instance, owner: type = None) if self.converter is not None:",
      "45": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as such in def __get__(self, instance) if self.converter is not None:",
      "46": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: __get__(self, instance.nodeType, owner: type = None) # type: ignore if self.converter is not None:",
      "47": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # owner: type = None but is declared as typing.Type[typing.Any]; if self.converter is not None:",
      "48": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # types: ignore if self.converter is not None:",
      "49": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None: return self result._get__(null, false)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator\n\n",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_line": "OVERLAYS = None  # type: Generator",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BEEmod/BEE2.4",
    "source_filename": "src/texturing.py",
    "target_filename": "src/texturing.py",
    "source_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6^",
    "target_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "predictions": [
      "SPECIAL = None # type: Generator"
    ],
    "correct": false,
    "top_five": {
      "0": "SPECIAL = None # type: Generator",
      "1": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNone",
      "2": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny",
      "3": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONSTONE # type: Generator Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "4": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONSTONE # type: Generator Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNone",
      "5": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyMas",
      "6": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONNE = None # type: Generator Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "7": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNone",
      "8": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyMasIns.OnlyType.OnlyMain",
      "9": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "10": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlySmalEnd, Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "11": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyMain",
      "12": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONE = None # type: Generator Buttons.OnlyType.",
      "13": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMasByMorGener",
      "14": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMat.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "15": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONSTONE # type: Generator Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyleMas",
      "16": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny",
      "17": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMat.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "18": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNone",
      "19": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMat.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNone",
      "20": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny",
      "21": "SPECIAL = None # type: Generator this.GENERATOR_OVERLAYS = None # type: Generator this.GENERATOR_OVERLAYS.number = 0 this.SPECIAL = None # type: Generator this.GENERATOR_OVERLAYS.number = 0 this.SPECIAL = None # type: Generator this.GENERATOR_OVERLAYS.number = 0 this.SPECIAL.number = 0 this.SPECIAL.number = 0 this.SPECIAL = None # type: Generator",
      "22": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlySingestType.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "23": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyMat.OnlyType.OnlyType.OnlyType.OnlyMain",
      "24": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMat.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNumber",
      "25": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyMasByMorGener",
      "26": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyMashinderMen",
      "27": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType",
      "28": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNone",
      "29": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONNE = None # type: Generator Buttons.OnlyType.",
      "30": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONSTONE # type: Generator Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny",
      "31": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNumber",
      "32": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyMas.OnlyType.OnlyType.OnlyMain",
      "33": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyMeny",
      "34": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONSTONE # type: Generator Buttons.OnlyType.OnlyMain",
      "35": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMain",
      "36": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONE = None # type: Generator Buttons.Only type: None",
      "37": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNoneType.OnlyMenziMat.",
      "38": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyMasBo",
      "39": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyNONE # type:",
      "40": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenver",
      "41": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNoneType.OnlyNone",
      "42": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONS = None # type: Generator Buttons.OnlyType.",
      "43": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenziMas.OnlyMenziMat.",
      "44": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlySingestType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNumber",
      "45": "SPECIAL = None # type: Generator this.GENERATOR_OVERLAYS = None # type: Generator this.GENERATOR_OVERLAYS.number = 0 this.SPECIAL = None # type: Generator this.GENERATOR_OVERLAYS.number = 0 this.SPECIAL_OVERLAYS = None # type: Generator this.GENERATOR_OVERLAYS.number = 0 this.SPECIAL_OVERLAYS.number = 0 this.SPECIAL_OVERLAYS = None # type: Generator",
      "46": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.Only, InvalidatingType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMenyMas",
      "47": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONSTONE # type: Generator Buttons.Only type: None",
      "48": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNONDRAGING = None # type: Generator",
      "49": "SPECIAL = None # type: Generator Buttons.Type.Generator OVERLAYS = None # type: Generator Buttons.Type.Generator BUTTONS # type: Generator Buttons.Type.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyMeny.OnlyType.Buttons.OnlyType.OnlyType.OnlyType.OnlyType.OnlyType.OnlyNoneType.OnlyMenziMenziMat."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               type_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 121,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "def object(self, symbol_name: str = None, offset: int = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "def object(self, symbol_name: str = None, offset: int = None,",
      "1": "def object(self, symbol_name: str = None, type_name: str = None, offset: int = None,",
      "2": "def object(self, symbol_name: str = None, type_name: int = None, offset: int = None,",
      "3": "def object(self, symbol_name: str = None, type_name: _.str = None, offset: int = None,",
      "4": "def object(self, symbol_name: str = None, offset: int = None,",
      "5": "def object(self, symbol_name: str = None, type_name: offset: int = None,",
      "6": "def object(self, symbol_name: str = None, type_name: str = None, offset: int = None,",
      "7": "def object(self, symbol_name: str = None, type_name: _.isNone, offset: int = None,",
      "8": "def object(self, symbol_name: str = None, type_name: str = null, offset: int = None,",
      "9": "def object(self, symbol_name: str = None, type_name: troy_str = None, offset: int = None,",
      "10": "def object(self, symbol_name: str = None, type_name: str, offset: int = None,",
      "11": "def object(self, symbol_name: str = None, type_name: _.isNone(str), offset: int = None,",
      "12": "def object(self, symbol_name: str = None, type_name: str = '', offset: int = None,",
      "13": "def object(self, symbol_name: str = None, type_name: undefined, offset: int = None,",
      "14": "def object(self, symbol_name: str = None, type_name: trojan_name, offset: int = None,",
      "15": "def object(self, symbol_name: str = None, type_name: _.isTypeOf(str), offset: int = None,",
      "16": "def object(self, symbol_name: str = None, type_name: troy_str, offset: int = None,",
      "17": "def object(self, symbol_name: str = None, type_name: str = 0, offset: int = None,",
      "18": "def object(self, symbol_name: str = None, type_name: _.str, offset: int = None,",
      "19": "def object(self, symbol_name: str = None, type_name: str = Nothing, offset: int = None,",
      "20": "def object(self, symbol_name: str = None, type_name: stats.str = None, offset: int = None,",
      "21": "def object(self, symbol_name: str = None, type_name: str = Null, offset: int = None,",
      "22": "def object(self, symbol_name: str = None, type_name: isString(str)? None : None, offset: int = None,",
      "23": "def object(self, symbol_name: str = None, type_name: dia = None, offset: int = None,",
      "24": "def object(self, symbol_name: str = None, type_name: _.isString(str), offset: int = None,",
      "25": "def object(self, symbol_name: str = None, type_name: _.isNone(), offset: int = None,",
      "26": "def object(self, symbol_name: str = None, type_name: _.isNONE, offset: int = None,",
      "27": "def object(self, symbol_name: str = None, type_name: isString(str)? None : None, offset: int = None,",
      "28": "def object(self, symbol_name: str = None, type_name: isString(str), offset: int = None,",
      "29": "def object(self, symbol_name: str = None, type_name: str, offset: int = None,",
      "30": "def object(self, symbol_name: str = None, type_name: str == None, offset: int = None,",
      "31": "def object(self, symbol_name: str = None, type_name: isString(str)? None : None, offset: int = None,",
      "32": "def object(self, symbol_name: str = None, type_name: str = undefined, offset: int = None,",
      "33": "def object(self, symbol_name: str = None, type_name: isString || None, offset: int = None,",
      "34": "def object(self, symbol_name: str = None, type_name: buffer = None, offset: int = None,",
      "35": "def object(self, symbol_name: str = None, type_name: isString(str)? None : None, offset: int = None,",
      "36": "def object(self, symbol_name: str = None, type_name: int = None,",
      "37": "def object(self, symbol_name: str = None, type_name: isStr, offset: int = None,",
      "38": "def object(self, symbol_name: str = None, type_name: str = = None, offset: int = None,",
      "39": "def object(self, symbol_name: str = None, type_name: str.toString(), offset: int = None,",
      "40": "def object(self, symbol_name: str = None, type_name: buffer_name, offset: int = None,",
      "41": "def object(self, symbol_name: str = None, type_name: string = None, offset: int = None,",
      "42": "def object(self, symbol_name: str = None, type_name: isString(str)? null : None, offset: int = None,",
      "43": "def object(self, symbol_name: str = None, type_name: isNaN, offset: int = None,",
      "44": "def object(self, symbol_name: str = None, type_name: _.null, offset: int = None,",
      "45": "def object(self, symbol_name: str = None, type_name: _(str), offset: int = None,",
      "46": "def object(self, symbol_name: str = None, type_name: isString(str) || None, offset: int = None,",
      "47": "def object(self, symbol_name: str = None, type_name: int = None, offset: int = None,",
      "48": "def object(self, symbol_name: str = None, type_name: str = none, offset: int = None,",
      "49": "def object(self, symbol_name: str = None, type_name: isString = None, offset: int = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,   # type: int\n    max_size=None  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,   # type: None\n    max_size=None  # type: int\n",
    "warning_line": "    average_size=None,   # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 940,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None # type: int"
    ],
    "correct": false,
    "top_five": {
      "0": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "1": "int: min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "2": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "3": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_count=0",
      "4": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_length=0",
      "5": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None,",
      "6": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int message_size=None",
      "7": "min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "8": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_size=None",
      "9": "# type: int: min_size=0, # type: int average_size=None # type: int max_size=None # type: int",
      "10": "# type: int: min_size=0, # type: int average_size=None # type: int max_size=None",
      "11": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_max_size # type: int",
      "12": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_max_size=None",
      "13": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_weight=None",
      "14": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_average_size=None",
      "15": "mini_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "16": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None",
      "17": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unique_type=None",
      "18": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int custom_size=None",
      "19": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unique_size=None",
      "20": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_store_items # type: int",
      "21": "minimum_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "22": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int units_average_size=None",
      "23": "@each(this, int, value) } average_size=None, # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "24": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_weight=None? unit_weight : None",
      "25": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_max_size# type: int triple_max_size=None",
      "26": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_size=None",
      "27": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int units_max_size=None",
      "28": "average_size=None, # type: int: min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "29": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int largest_size=None",
      "30": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int units_to_null # type: int",
      "31": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_weight=None # type: int",
      "32": "min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "33": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_store_items_average_size=None",
      "34": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int default_size=None",
      "35": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_max_size# type: int",
      "36": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_type=None",
      "37": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None# type: int",
      "38": "@each(this, int, value) } average_size = int: min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "39": "mini_size = 0, # type: int average_size=None, # type: int max_size=None # type: int",
      "40": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_weight=0",
      "41": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_large=None",
      "42": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_length=100 # type: int",
      "43": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int page_size=None",
      "44": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_to_null # type: int",
      "45": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int matrix_average_size=None",
      "46": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int_reduce_size=None",
      "47": "int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "48": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int unit_of_length === 0",
      "49": "# type: int: min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int double_sided=None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_line": "            embeddings = cached_path(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " embeddings is declared to have type `str` but is used as type `Path`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2082,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/embeddings/token.py",
    "target_filename": "flair/embeddings/token.py",
    "source_changeid": "0b834f5167d11f06037398fcbe1554f244167e18^",
    "target_changeid": "0b834f5167d11f06037398fcbe1554f244167e18",
    "predictions": [
      ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir"
    ],
    "correct": false,
    "top_five": {
      "0": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "1": "var embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "2": ") embeddings = cached_path( f \" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "3": ") embeddings = cached_path( \"[ { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "4": ") embeddings = cached_path( \"/\" + f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "5": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings ^ _s { size }.zip\", cache_dir=cache_dir",
      "6": ") embeddings = cached_path( \"http: embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "7": ") embeddings = cached_path( f\".base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "8": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir,",
      "9": ") embeddings = cached_path( \"\" + f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "10": ") embeddings = cached_path( f\" { base_path } { embeddings } / \\ embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "11": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "12": ") embeddings = cached_path( f\" { base_path } { embeddeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "13": "); embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "14": ") embeddings = cached_path( \"[ \\ base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "15": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } __s { size }.zip\", cache_dir=cache_dir",
      "16": ") embeddings = cached_path( \"bg_src=\" + f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "17": ") embeddings = cached_path( f\" { base_path } { embeddings ^ / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "18": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\",",
      "19": ") embeddings = cached_path( \"img_src=\" + f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "20": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir;",
      "21": ") embeddings = cached_path( \"bg_id=\" + this.base_id + \" \\ embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "22": "]) embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "23": ") embeddings = cached_path( f\" { base_path ^ { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "24": "), embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "25": ") embeddings = cached_path(f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "26": ") embeddings = cached_path( \"/\"\", f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "27": ") embeddings = cached_path( f\" { base_path } { embeddings \\ / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "28": ") embeddings = cached_path( \"bg_id=\" + this._id + \" \\ embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "29": ") embeddings = cached_path( \"/\"+i, f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "30": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _r \\ size }.zip\", cache_dir=cache_dir",
      "31": "const embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "32": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\"",
      "33": ") embeddings = cached_path( \"\"./\" + f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "34": ".bind(this)) embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "35": ") embeddings = cached_path( \"# embeddings\": base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "36": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _t \\ size }.zip\", cache_dir=cache_dir",
      "37": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\u201c,",
      "38": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s \\ size }.zip\", cache_dir=cache_dir",
      "39": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir || \"/\");",
      "40": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _t { size }.zip\", cache_dir=cache_dir",
      "41": ") embeddings = cached_path( \"/\", \" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "42": ") embeddings = cached_path( \"/\", f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "43": ") embeddings = cached_path( \"[ ^ base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "44": ") embeddings = cached_path( F\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "45": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _x \\ _s { size }.zip\", cache_dir=cache_dir",
      "46": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir()",
      "47": ") embeddings = cached_path( \"/\", \" \\ base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "48": ") embeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir(\"/\"),",
      "49": ") embeddeddings = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n            usd_volume: float = [\n                (\n",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_line": "            usd_volume: float = [",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 97,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hummingbot/hummingbot",
    "source_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "target_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1^",
    "target_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "predictions": [
      "(function () {"
    ],
    "correct": false,
    "top_five": {
      "0": "(function () {",
      "1": "usd_volume: type == float but is used as type List[typing.Any]",
      "2": "usd_volume: type == 'float'? List[typing.Any] : [ (",
      "3": "usd_volume: type === float but is used as type List[typing.Any]",
      "4": "usd_volume: type == 'float' but is actually type List[typing.Any]",
      "5": "usd_volume: type == float but is actually type List[typing.Any]",
      "6": "usd_volume: type == 'float' but is used as type List[typing.Any]",
      "7": "usd_volume: type === 'float'? List[typing.Any] : [ (",
      "8": "usd_volume: type === float but is actually type List[typing.Any]",
      "9": "usd_volume: type == 'float' but is actually type List[typing.Any];",
      "10": "usd_volume: type === 'float' but is actually type List[typing.Any]",
      "11": "usd_volume: [ (",
      "12": "usd_volume: type == float but is actually type List[typing.Any];",
      "13": "usd_volume: type === 'float' but is used as type List[typing.Any]",
      "14": "usd_volume: type == 'float'? List[typing.Any] : [",
      "15": "usd_volume: type === float but is actually type List[typing.Any];",
      "16": "usd_volume: type == 'number'? List[typing.Any] : [ (",
      "17": "usd_volume: type == float but is defined as type List[typing.Any]",
      "18": "usd_volume: type === 'float' but is actually type List[typing.Any];",
      "19": "usd_volume: async () => { } ;",
      "20": "usd_volume: type number } ; (",
      "21": "usd_volume: type == float but is considered as type List[typing.Any]",
      "22": "usd_volume: type == 'float' but is defined as type List[typing.Any]",
      "23": "usd_volume: type == float but is treated as type List[typing.Any]",
      "24": "usd_volume: async float = [ (",
      "25": "usd_volume: type == float but is implemented as type List[typing.Any]",
      "26": "usd_volume: type === float but is considered as type List[typing.Any]",
      "27": "usd_volume: type == float but is expressed as type List[typing.Any]",
      "28": "usd_volume: type === float but is treated as type List[typing.Any]",
      "29": "usd_volume: type == 'float'; (",
      "30": "usd_volume: type == 'float' but is actually type List[typing.Any] [ (",
      "31": "usd_volume: type === 'float'? List[typing.Any] : [",
      "32": "usd_volume: type == 'float' || [ (",
      "33": "usd_volume: type === float but is defined as type List[typing.Any]",
      "34": "usd_volume: type == float but is used as type List[typing.Any];",
      "35": "usd_volume: type == 'float' but is implemented as type List[typing.Any]",
      "36": "usd_volume: type == float but is instead used as type List[typing.Any]",
      "37": "usd_volume: type == float but is often used as type List[typing.Any]",
      "38": "usd_volume: type === float but is implemented as type List[typing.Any]",
      "39": "usd_volume: type == 'object'? List[typing.Any] : [ (",
      "40": "usd_volume: type === float but is instead used as type List[typing.Any]",
      "41": "usd_volume: type == float but is type == List[typing.Any]",
      "42": "usd_volume: type == float but is accepted as type List[typing.Any]",
      "43": "usd_volume: type === float but is expressed as type List[typing.Any]",
      "44": "usd_volume: type === float but is used as type List[typing.Any];",
      "45": "usd_volume: type === 'float' but is defined as type List[typing.Any]",
      "46": "usd_volume: type === float but is type === List[typing.Any]",
      "47": "usd_volume: type == 'float' but is treated as type 'List[typing.Any]",
      "48": "usd_volume: type == 'float' but is expressed as type List[typing.Any]",
      "49": "usd_volume: type == float but is actually type List[typing.Any] [ ("
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
    "warning_line": "    def __init__(self, reason: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " reason is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 28,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theacodes/nox",
    "source_filename": "nox/command.py",
    "target_filename": "nox/command.py",
    "source_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62^",
    "target_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "predictions": [
      "def __init__(self, reason: reason == None) -> None: super(CommandFailed, self).__init__(reason)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, reason: reason == None) -> None: super(CommandFailed, self).__init__(reason)",
      "1": "def __init__(self, reason: str == None) -> None: super(CommandFailed, self).__init__(reason)",
      "2": "def __init__(self, reason) -> None: super(CommandFailed, self).__init__(reason)",
      "3": "def __init__(self, reason: str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "4": "def __init__(self, reason: reason == None) -> none: super(CommandFailed, self).__init__(reason)",
      "5": "def __init__(self, reason: reason = = None) -> None: super(CommandFailed, self).__init__(reason)",
      "6": "def __init__(self, reason: str == None) -> none: super(CommandFailed, self).__init__(reason)",
      "7": "def __init__(self, reason: reason.str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "8": "def __init__(self, reason: str = = None) -> None: super(CommandFailed, self).__init__(reason)",
      "9": "def __init__(self, reason: reason || None) -> None: super(CommandFailed, self).__init__(reason)",
      "10": "def __init__(self, reason: reasons.str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "11": "def __init__(self, reason: reason.str == None) -> None: super(CommandFailed, self).__init__(reason)",
      "12": "def __init__(self, reason: reason.name === 'None') -> None: super(CommandFailed, self).__init__(reason)",
      "13": "def __init__(self, reason: props.str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "14": "def __init__(self, reason: str === None) -> None: super(CommandFailed, self).__init__(reason)",
      "15": "def __init__(self, reason: reason || '') -> None: super(CommandFailed, self).__init__(reason)",
      "16": "def __init__(self, reason: str = == None) -> None: super(CommandFailed, self).__init__(reason)",
      "17": "def __init__(self, reason: str = null) -> None: super(CommandFailed, self).__init__(reason)",
      "18": "def __init__(self, reason: str = undefined) -> None: super(CommandFailed, self).__init__(reason)",
      "19": "def __init__(self) -> None: super(CommandFailed, self).__init__(reason)",
      "20": "def __init__(self, reason: reason = == None) -> None: super(CommandFailed, self).__init__(reason)",
      "21": "def __init__(self, reason: reason || 'All') -> None: super(CommandFailed, self).__init__(reason)",
      "22": "def __init__(self, reason : str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "23": "def __init__(self, reason: str == none) -> None: super(CommandFailed, self).__init__(reason)",
      "24": "def __init__(self, reason: reason, 0) -> None: super(CommandFailed, self).__init__(reason)",
      "25": "def __init__(self, reason: str = 'All') -> None: super(CommandFailed, self).__init__(reason)",
      "26": "def __init__(self, reason: reason === None) -> None: super(CommandFailed, self).__init__(reason)",
      "27": "def __init__(self, reason: root.str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "28": "def __init__(self, reason: purpose.str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "29": "def __init__(self, reason: str = None) -> none: super(CommandFailed, self).__init__(reason)",
      "30": "def __init__(self, reason: string) -> None: super(CommandFailed, self).__init__(reason)",
      "31": "def __init__(self, reason: result = None) -> None: super(CommandFailed, self).__init__(reason)",
      "32": "def __init__(self, reason: str = 0, null) -> None: super(CommandFailed, self).__init__(reason)",
      "33": "def __init__(self, reason: str == Nothing) -> None: super(CommandFailed, self).__init__(reason)",
      "34": "def __init__(self, reason: cause == None) -> None: super(CommandFailed, self).__init__(reason)",
      "35": "def __init__(self, reason: reason ==\"\" + str) -> None: super(CommandFailed, self).__init__(reason)",
      "36": "def __init__(self, reason: motive) -> None: super(CommandFailed, self).__init__(reason)",
      "37": "def __init__(self, reason: str = 0, done: false } ) super(CommandFailed, self).__init__(reason)",
      "38": "def __init__(self, reason: str = 0, done: false } ): super(CommandFailed, self).__init__(reason)",
      "39": "def __init__(self, reason: reason = = None) -> none: super(CommandFailed, self).__init__(reason)",
      "40": "def __init__(self, reason: reason!== None) -> None: super(CommandFailed, self).__init__(reason)",
      "41": "def __init__(self, reason: str = 0) -> None: super(CommandFailed, self).__init__(reason)",
      "42": "def __init__(self, reason: str == null) -> None: super(CommandFailed, self).__init__(reason)",
      "43": "def __init__(self, reason: reasonString == None) -> None: super(CommandFailed, self).__init__(reason)",
      "44": "def __init__(self, reason: reason: str == None) -> None: super(CommandFailed, self).__init__(reason)",
      "45": "def __init__(self, reason = None) -> None: super(CommandFailed, self).__init__(reason)",
      "46": "def __init__(self, reason: reason >= None) -> None: super(CommandFailed, self).__init__(reason)",
      "47": "def __init__(self, reason: str = []) -> None: super(CommandFailed, self).__init__(reason)",
      "48": "def __init__(self, reason: str == Undefined) -> None: super(CommandFailed, self).__init__(reason)",
      "49": "def __init__(self, reason ) -> None: super(CommandFailed, self).__init__(reason)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_line": "        path_scope: irast.ScopeTreeNode=None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/pathctx.py",
    "target_filename": "edb/edgeql/compiler/pathctx.py",
    "source_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa^",
    "target_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "predictions": [
      "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=None, optional: bool=False,"
    ],
    "correct": false,
    "top_five": {
      "0": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=None, optional: bool=False,",
      "1": "ir_set: irast.Set, *, optional: bool=False,",
      "2": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode, optional: bool=False,",
      "3": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Null, optional: bool=False,",
      "4": "ir_set: irast.Set, *, path_scope=irast.ScopeTreeNode, optional: bool=False,",
      "5": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=0, optional: bool=False,",
      "6": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=null, optional: bool=False,",
      "7": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode.LowerCase(), optional: bool=False,",
      "8": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=NONE, optional: bool=False,",
      "9": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=False, optional: bool=False,",
      "10": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Boolean, optional: bool=False,",
      "11": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=NotFixed, optional: bool=False,",
      "12": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode = null, optional: bool=False,",
      "13": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=SimpleTreeNode, optional: bool=False,",
      "14": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Dark, optional: bool=False,",
      "15": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=LowerCase(), optional: bool=False,",
      "16": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Irast.ScopeTreeNode, optional: bool=False,",
      "17": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=DarkGreen, optional: bool=False,",
      "18": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=TreeNull, optional: bool=False,",
      "19": "ir_set: irast.Set, *, path_scope=irast.ScopeTreeNode=None, optional: bool=False,",
      "20": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=DarkBlue, optional: bool=False,",
      "21": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Zero, optional: bool=False,",
      "22": "ir_set: irast.Set, *, path_schema: irast.ScopeTreeNode, optional: bool=False,",
      "23": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Geometry.ScopeTreeNode, optional: bool=False,",
      "24": "ir_set: irast.Set, *, path_script: irast.ScopeTreeNode, optional: bool=False,",
      "25": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Child, optional: bool=False,",
      "26": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Binary, optional: bool=False,",
      "27": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode==None, optional: bool=False,",
      "28": "ir_set: irast.Set, *, path_scope: irast.scopetree.ScopeTreeNode=None, optional: bool=False,",
      "29": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Tree, optional: bool=False,",
      "30": "ir_set: irast.Set, *, path_scope_re: irast.ScopeTreeNode=None, optional: bool=False,",
      "31": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Bad, optional: bool=False,",
      "32": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=String, optional: bool=False,",
      "33": "ir_set: irast.Set, *, path_rep: irast.ScopeTreeNode, optional: bool=False,",
      "34": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Missing, optional: bool=False,",
      "35": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode==null, optional: bool=False,",
      "36": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode.None, optional: bool=False,",
      "37": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=none, optional: bool=False,",
      "38": "ir_set: irast.Set, *, path_scope_id: irast.ScopeTreeNode, optional: bool=False,",
      "39": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode = undefined, optional: bool=False,",
      "40": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode = Null, optional: bool=False,",
      "41": "ir_set: irast.Set, **, path_scope: irast.ScopeTreeNode=None, optional: bool=False,",
      "42": "ir_set: irast.Set, *, path_target: irast.target.ScopeTreeNode, optional: bool=False,",
      "43": "ir_set: irast.Set, *, path_scope: irast.TreeNode, optional: bool=False,",
      "44": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Geometry.TreeNull, optional: bool=False,",
      "45": "ir_set: irast.Set, *, path_ref: irast.ScopeTreeNode, optional: bool=False,",
      "46": "ir_set: irast.Set, *, path_start: irast.Boolean, optional: bool=False,",
      "47": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Geometry.TreeNode, optional: bool=False,",
      "48": "ir_set: irast.Set, *, path_to: irast.ScopeTreeNode, optional: bool=False,",
      "49": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode=Geometry.TreeElem, optional: bool=False,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
    "target_code": "        \"\"\"\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
    "warning_line": "        signer_key = SignerKey.ed25519_public_key(signer_key)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 912,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/transaction_builder.py",
    "target_filename": "stellar_sdk/transaction_builder.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "1": "\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "2": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signer_key_str = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "3": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevocationSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "4": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.reevoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "5": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signer_key_str = signer_key.str op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "6": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signer_key_s = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "7": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) const op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "8": "\u201c\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "9": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source, signer_key) return self.append_operation(op)",
      "10": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source).revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "11": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key) return self.append_operation(op)",
      "12": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source).revoke_signer_sponsorship(account_id, signer_key) return self.append_operation(op)",
      "13": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) open_secrets(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "14": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signer_key_op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "15": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) open_signer_sponsorship = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "16": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return own.append_operation(op)",
      "17": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) _op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "18": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = Responsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "19": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "20": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = ReevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "21": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key).split(\"/\") op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "22": "\"\"\" signer_key = SignerKey.ed25519_ public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "23": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signer_key_str = signer_key.str return self.append_operation(op)",
      "24": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signed_key op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "25": "\u201e\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "26": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source).revoke() return self.append_operation(op)",
      "27": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = ReverseSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "28": "\"\"\" signer_key = S.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "29": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revocation_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "30": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "31": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) res = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "32": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source, signed_key) return self.append_operation(op)",
      "33": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source, true) return self.append_operation(op)",
      "34": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key)_op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "35": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source, false) return self.append_operation(op)",
      "36": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevocationSponsorship.revocation_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "37": "\u201c\u201d signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "38": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op) signer_key = SignerKey.ed25519_public_key(signer_key)",
      "39": "\"\"\" signer_key = SignerKey.ed25519_private_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "40": "\"\"\" signer_key = SignerKey.ed25519_public_key(signeder_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "41": "\"\"] signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "42": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = Revocation.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "43": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = revokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "44": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return yourself.append_operation(op)",
      "45": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key]) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "46": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = Revokes.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "47": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) signature_op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "48": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship[account_id, signer_key, source] return self.append_operation(op)",
      "49": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) returnself.append_operation(op)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
    "warning_line": "    def __init__(self, format: str = None, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " format is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/fields.py",
    "target_filename": "src/marshmallow/fields.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "def __init__(self, format: str, **kwargs): super().__init__(**kwargs)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, format: str, **kwargs): super().__init__(**kwargs)",
      "1": "def __init__(self, format: str = None, **kwargs): super().__init__(**kwargs)",
      "2": "def __init__(self, format: str = None, **kwargs) super().__init__(**kwargs)",
      "3": "def __init__(self, format: str = null, **kwargs): super().__init__(**kwargs)",
      "4": "def __init__(self, format: str = 0, **kwargs): super().__init__(**kwargs)",
      "5": "def __init__(self, format: str = undefined, **kwargs): super().__init__(**kwargs)",
      "6": "def __init__(self, format: str, **kwargs) super().__init__(**kwargs)",
      "7": "def __init__(self, format: str = void 0, **kwargs): super().__init__(**kwargs)",
      "8": "def __init__(self, format: str, **kwargs): super().__init__(**kwargs)",
      "9": "def __init__(self, format: str = 0; format: '', **kwargs): super().__init__(**kwargs)",
      "10": "def __init__(self, format: str = 0, kwargs): super().__init__(**kwargs)",
      "11": "def __init__(self, format: string, **kwargs): super().__init__(**kwargs)",
      "12": "def __init__(self, format: str = Object.Kwargs, **kwargs): super().__init__(**kwargs)",
      "13": "def __init__(self, format: str = Undefined, **kwargs): super().__init__(**kwargs)",
      "14": "def __init__(self, format: str = Object.getOwnPropertyNames(kwargs)): super().__init__(**kwargs)",
      "15": "def __init__(self, format: str = '', **kwargs): super().__init__(**kwargs)",
      "16": "def __init__(self, format: str = 0; format: 'void 0', **kwargs): super().__init__(**kwargs)",
      "17": "def __init__(self, format: str == None, **kwargs): super().__init__(**kwargs)",
      "18": "def __init__(self, format: str = All, **kwargs): super().__init__(**kwargs)",
      "19": "def __init__(self, format: str = 0; format: 'undefined', **kwargs): super().__init__(**kwargs)",
      "20": "def __init__(self, format: str = NonField, **kwargs): super().__init__(**kwargs)",
      "21": "def __init__(self, format: str = = None, **kwargs): super().__init__(**kwargs)",
      "22": "def __init__(self, format: str = Array, **kwargs): super().__init__(**kwargs)",
      "23": "def __init__(self, format: str = 0, **kwargs) super().__init__(**kwargs)",
      "24": "def __init__(self, format: str = Object, **kwargs): super().__init__(**kwargs)",
      "25": "def __init__(self, format: str = 'undefined', **kwargs): super().__init__(**kwargs)",
      "26": "def __init__(self, format: str =, **kwargs): super().__init__(**kwargs)",
      "27": "def __init__(self, format: str = format_None, **kwargs): super().__init__(**kwargs)",
      "28": "def __init__(self, format: str = null, **kwargs) super().__init__(**kwargs)",
      "29": "def __init__(self, format: str = Node.format, **kwargs): super().__init__(**kwargs)",
      "30": "def __init__(self, format: str = 0, *kwargs): super().__init__(**kwargs)",
      "31": "def __init__(self, format: str = format_NONE, **kwargs): super().__init__(**kwargs)",
      "32": "def __init__(self, format: str = undef, **kwargs): super().__init__(**kwargs)",
      "33": "def __init__(self, format: str = NaN, **kwargs): super().__init__(**kwargs)",
      "34": "def __init__(self, format: str = NotFound, **kwargs): super().__init__(**kwargs)",
      "35": "def __init__(self, format: str = = None, **kwargs) super().__init__(**kwargs)",
      "36": "def __init__(self, format: str = Unicode, **kwargs): super().__init__(**kwargs)",
      "37": "def __init__(self, format: str = toString(), **kwargs): super().__init__(**kwargs)",
      "38": "def __init__(self, format: str = Normal, **kwargs): super().__init__(**kwargs)",
      "39": "def __init__(self, format: str = 0; format: '', **kwargs) super().__init__(**kwargs)",
      "40": "def __init__(self, format: __str, **kwargs): super().__init__(**kwargs)",
      "41": "def __init__(self, format: str = Alternative, **kwargs): super().__init__(**kwargs)",
      "42": "def __init__(self, format: str = Allowed, **kwargs): super().__init__(**kwargs)",
      "43": "def __init__(self, format: str = EXT4, **kwargs): super().__init__(**kwargs)",
      "44": "def __init__(self, format: str = 0, kwargs) super().__init__(**kwargs)",
      "45": "def __init__(self, format: str = void 0 (kwargs)) super().__init__(**kwargs)",
      "46": "def __init__(self, format: str == None, **kwargs) super().__init__(**kwargs)",
      "47": "def __init__(self, format: str = Nothing, **kwargs): super().__init__(**kwargs)",
      "48": "def __init__(self, format: str = N, **kwargs): super().__init__(**kwargs)",
      "49": "def __init__(self, format: str = undefined, **kwargs) super().__init__(**kwargs)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, rf_path: str=None):\n        super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1\n",
    "target_code": "\n    def __init__(self):\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "1": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "2": "def __init__(self, rf_path: str=none): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "3": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path) self.number_of_variables = 1",
      "4": "def __init__(self, rf_path: str==None): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "5": "def __init__(self, rf_path: str=none): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "6": "def __init__(self, rf_path: str==None): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "7": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=null) self.number_of_variables = 1",
      "8": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path = null) self.number_of_variables = 1",
      "9": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path = str) self.number_of_variables = 1",
      "10": "def __init__(self, rf_path: str ==None): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "11": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path, str) self.number_of_variables = 1",
      "12": "def __init__(self, rf_path: str ==None): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "13": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1;",
      "14": "super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "15": "def __init__(self, rf_path: str=0): super(Schaffer, self).__init__(rf_path) self.number_of_variables = 1",
      "16": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path, null) self.number_of_variables = 1",
      "17": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path); self.number_of_variables = 1;",
      "18": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).replace(/ \\ S+/g, '') self.number_of_variables = 1",
      "19": "def __init__(self, rf_path: str=null): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "20": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=str) self.number_of_variables = 1",
      "21": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1;",
      "22": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).replace(/ \\ rf_path/g, '') self.number_of_variables = 1",
      "23": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).replace(/ \\ s+/g, '') self.number_of_variables = 1",
      "24": "def __init__(self, rf_path: str = null): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "25": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).split('/').add_variables(self._variables[0]) self.number_of_variables = 1",
      "26": "def __init__(self, rf_path: str=None) super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "27": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).toString() self.number_of_variables = 1",
      "28": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).replace(/ \\ +/, '') self.number_of_variables = 1",
      "29": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).remove() self.number_of_variables = 1",
      "30": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).split('/') self.number_of_variables = 1",
      "31": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).split('/').add_variables(self.number_of_variables) self.number_of_variables = 1",
      "32": "def __init__(self, rf_path: str=0): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "33": "def __init__(self, rf_path: str=0): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "34": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path|'') self.number_of_variables = 1",
      "35": "def __init__(self, rf_path: str = 0,1 } ): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "36": "def __init__(self, rf_path: str=undefined): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "37": "def __init__(self, rf_path: str = ''): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "38": "def __init__(self, rf_path: str=None) super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "39": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=undefined) self.number_of_variables = 1",
      "40": "def __init__(self, rf_path: str = None): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "41": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).split('/').add_variables(rf_path) self.number_of_variables = 1",
      "42": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path[0]) self.number_of_variables = 1",
      "43": "def __init__(self, rf_path: str=''): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "44": "def __init__(self, rf_path: str ==None): super(Schaffer, self).__init__(rf_path) self.number_of_variables = 1",
      "45": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path).rf_path self.number_of_variables = 1",
      "46": "def __init__(self, rf_path: str, null): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "47": "super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "48": "def __init__(self, rf_path: str=none): super(Schaffer, self).__init__(rf_path) self.number_of_variables = 1",
      "49": "def __init__(self, rf_path: str=None): super(Schaffer, self).__init__(rf_path=>none) self.number_of_variables = 1"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def run(self, host: str = None, port: int = None, *args, **kwargs):\n        host = host or self.config.HOST\n",
    "target_code": "\n    def run(self, host: Optional[str] = None, port: Optional[int] = None,\n            *args, **kwargs) -> None:\n        host = host or self.config.HOST\n",
    "warning_line": "    def run(self, host: str = None, port: int = None, *args, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " host is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nonebot/nonebot",
    "source_filename": "none/__init__.py",
    "target_filename": "none/__init__.py",
    "source_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd^",
    "target_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd",
    "predictions": [
      "def run(self, host: str = None, port: int = None, *args): host = host or self.config.HOST"
    ],
    "correct": false,
    "top_five": {
      "0": "def run(self, host: str = None, port: int = None, *args): host = host or self.config.HOST",
      "1": "def run(self, host: str = None, port: int = None, *args, **kwargs): host = host or self.config.HOST",
      "2": "def run(self, host: str = None, port: undefined, *args, **kwargs): host = host or self.config.HOST",
      "3": "def run(self, host: str = None, port: null, *args, **kwargs): host = host or self.config.HOST",
      "4": "def run(self, host: str = None, port: i18n = None, *args, **kwargs): host = host or self.config.HOST",
      "5": "def run(self, host: str = None, port: nonNull, *args, **kwargs): host = host or self.config.HOST",
      "6": "def run(self, host: str = None, port: i18n, *args, **kwargs): host = host or self.config.HOST",
      "7": "def run(self, host: str = None, port: undefined, *args): host = host or self.config.HOST",
      "8": "def run(self, host: str = None, port: ttl = None, *args, **kwargs): host = host or self.config.HOST",
      "9": "def run(self, host: str = None, port: ion = None, *args, **kwargs): host = host or self.config.HOST",
      "10": "def run(self, host: str = None, port: i2c: None, *args, **kwargs): host = host or self.config.HOST",
      "11": "def run(self, host: str = None, port: itron = None, *args, **kwargs): host = host or self.config.HOST",
      "12": "def run(self, host: str = None, port: idn = None, *args, **kwargs): host = host or self.config.HOST",
      "13": "def run(self, host: str = None, port: notNull, *args, **kwargs): host = host or self.config.HOST",
      "14": "def run(self, host: str = None, port: int = None, *args, *kwargs): host = host or self.config.HOST",
      "15": "def run(self, host: str = None, port: _.int = None, *args, **kwargs): host = host or self.config.HOST",
      "16": "def run(self, host: str = None, port: tmp = None, *args, **kwargs): host = host or self.config.HOST",
      "17": "def run(self, host: str = None, port: integer, *args, **kwargs): host = host or self.config.HOST",
      "18": "def run(self, host: str = None, port: idx = 0, args: *args } ): host = host or self.config.HOST",
      "19": "def run(self, host: str = None, port: ipv4, *args, **kwargs): host = host or self.config.HOST",
      "20": "def run(self, host: str = None, port: null, *args): host = host or self.config.HOST",
      "21": "def run(self, host: str = None, port: notFound, *args, **kwargs): host = host or self.config.HOST",
      "22": "def run(self, host: str = None, port: isNone, *args, **kwargs): host = host or self.config.HOST",
      "23": "def run(self, host: str = None, port: ipv4All, *args, **kwargs): host = host or self.config.HOST",
      "24": "def run(self, host: str = None, port: number = None, *args, **kwargs): host = host or self.config.HOST",
      "25": "def run(self, host: str = None, port: nonExistingPort, *args, **kwargs): host = host or self.config.HOST",
      "26": "def run(self, host: str = None, port: toint = None, *args, **kwargs): host = host or self.config.HOST",
      "27": "def run(self, host: str = None, port: io = None, *args, **kwargs): host = host or self.config.HOST",
      "28": "def run(self, host: str = None, port: i386, *args, **kwargs): host = host or self.config.HOST",
      "29": "def run(self, host: str = None, port:, *args, **kwargs): host = host or self.config.HOST",
      "30": "def run(self, host: str = None, port: i8700, *args, **kwargs): host = host or self.config.HOST",
      "31": "def run(self, host: str = None, port: isNull, *args, **kwargs): host = host or self.config.HOST",
      "32": "def run(self, host: str = None, port: i18n, *args): host = host or self.config.HOST",
      "33": "def run(self, host: str = None, port: int = None, **args): host = host or self.config.HOST",
      "34": "def run(self, host: str = None, port, *args): host = host or self.config.HOST",
      "35": "def run(self, host: str = None, port: _, *args, **kwargs): host = host or self.config.HOST",
      "36": "def run(self, host: str = None, port: port, *args, **kwargs): host = host or self.config.HOST",
      "37": "def run(self, host: str = None, port: none, *args, **kwargs): host = host or self.config.HOST",
      "38": "def run(self, host: str = None, port: ttl = None, *args): host = host or self.config.HOST",
      "39": "def run(self, host: str = None, port: int = None, *args ): host = host or self.config.HOST",
      "40": "def run(self, host: str = None, port: i18n = None, *args): host = host or self.config.HOST",
      "41": "def run(self, host: str = None, port: ion = None, *args): host = host or self.config.HOST",
      "42": "def run(self, host: str = None, port: i232, *args): host = host or self.config.HOST",
      "43": "def run(self, host: str = None, port: itron = None, *args): host = host or self.config.HOST",
      "44": "def run(self, host: str = None, port: int = None, *args?): host = host or self.config.HOST",
      "45": "def run(self, host: str = none, port: int = None, *args): host = host or self.config.HOST",
      "46": "def run(self, host: str = None, port: isNone, *args): host = host or self.config.HOST",
      "47": "def run(self, host: str = None, port: nonNull, *args): host = host or self.config.HOST",
      "48": "def run(self, host: str = None, port: i, *args): host = host or self.config.HOST",
      "49": "def run(self, host: str = None, port: port, *args): host = host or self.config.HOST"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> bool:\n        return capability.available(self.agreed_capabilities)\n",
    "target_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> str:\n        return capability.available(self.agreed_capabilities)\n",
    "warning_line": "        return capability.available(self.agreed_capabilities)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/IRCServer.py",
    "target_filename": "src/IRCServer.py",
    "source_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd^",
    "target_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "predictions": [
      "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool: return capability.available(self.agreed_capabilities)"
    ],
    "correct": false,
    "top_five": {
      "0": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool: return capability.available(self.agreed_capabilities)",
      "1": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool return capability.available(self.agreed_capabilities)",
      "2": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => return capability.available(self.agreed_capabilities)",
      "3": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool) => bool return capability.available(self.agreed_capabilities)",
      "4": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool () return capability.available(self.agreed_capabilities)",
      "5": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool) -> bool: return capability.available(self.agreed_capabilities)",
      "6": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool(self.agreed_capabilities)",
      "7": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool; return capability.available(self.agreed_capabilities)",
      "8": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool) => bool: return capability.available(self.agreed_capabilities)",
      "9": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool && str return capability.available(self.agreed_capabilities)",
      "10": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> boolean: return capability.available(self.agreed_capabilities)",
      "11": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool Return capability.available(self.agreed_capabilities)",
      "12": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => capability.available(self.agreed_capabilities)",
      "13": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool && str: return capability.available(self.agreed_capabilities)",
      "14": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool || str return capability.available(self.agreed_capabilities)",
      "15": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool return capability.available(self.agreed_capabilities)",
      "16": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool || irc: return capability.available(self.agreed_capabilities)",
      "17": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool() return capability.available(self.agreed_capabilities)",
      "18": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => self.agreed_capabilities.bool = (bool) => bool return capability.available(self.agreed_capabilities)",
      "19": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => assert.equal(require(self.agreed_capabilities, 'bool'))",
      "20": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> () => bool: return capability.available(self.agreed_capabilities)",
      "21": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool || str: return capability.available(self.agreed_capabilities)",
      "22": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool && available_capability(self, capability) -> bool: return capability.available(self.agreed_capabilities)",
      "23": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool : return capability.available(self.agreed_capabilities)",
      "24": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => self.agreed_capabilities.bool = () => bool return capability.available(self.agreed_capabilities)",
      "25": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool (bool) return capability.available(self.agreed_capabilities)",
      "26": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => true return capability.available(self.agreed_capabilities)",
      "27": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool || ''; return capability.available(self.agreed_capabilities)",
      "28": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool || str) return capability.available(self.agreed_capabilities)",
      "29": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool || str) => bool: return capability.available(self.agreed_capabilities)",
      "30": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool || '') -> bool: return capability.available(self.agreed_capabilities)",
      "31": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => self.agreed_capabilities.push(Capability)",
      "32": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool || str) => bool return capability.available(self.agreed_capabilities)",
      "33": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool ( return capability.available(self.agreed_capabilities))",
      "34": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => void 0 return capability.available(self.agreed_capabilities)",
      "35": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool || '') => bool: return capability.available(self.agreed_capabilities)",
      "36": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool || 'irc': return capability.available(self.agreed_capabilities)",
      "37": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool || void 0",
      "38": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool) -> bool return capability.available(self.agreed_capabilities)",
      "39": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (bool, ) => bool return capability.available(self.agreed_capabilities)",
      "40": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> utils.irc.Capability.bool() return capability.available(self.agreed_capabilities)",
      "41": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => self.agreed_capabilities.bool = (bool) -> bool: return capability.available(self.agreed_capabilities)",
      "42": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> (boolean) => bool: return capability.available(self.agreed_capabilities)",
      "43": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool () => bool return capability.available(self.agreed_capabilities)",
      "44": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => self.agreed_capabilities.bool = (bool) -> bool return capability.available(self.agreed_capabilities)",
      "45": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool, return capability.available(self.agreed_capabilities)",
      "46": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => self.agreed_capabilities.bool = true return capability.available(self.agreed_capabilities)",
      "47": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> opts -> bool: return capability.available(self.agreed_capabilities)",
      "48": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool => yield capability.available(self.agreed_capabilities)",
      "49": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> bool (): return capability.available(self.agreed_capabilities)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0\n\n",
    "target_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_line": "        return plans and len(plans) > 0",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "synek/git-plan",
    "source_filename": "git_plan/service/plan.py",
    "target_filename": "git_plan/service/plan.py",
    "source_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc^",
    "target_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "predictions": [
      "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\"",
      "1": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0",
      "2": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0:",
      "3": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return plans",
      "4": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.getPlan(plans)",
      "5": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plan)",
      "6": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans)",
      "7": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return test",
      "8": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return \"\"",
      "9": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.getList(project.plan_dir)",
      "10": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.getPlan(project.plan_dir)",
      "11": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.start()])",
      "12": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Build a map to the given directory\"\"",
      "13": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans.newPlan)",
      "14": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\"",
      "15": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.key])",
      "16": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.getPlans()",
      "17": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plan.plan_dir])",
      "18": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.getPlans(project.plan_dir)",
      "19": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return plans and len(plans) > 0:",
      "20": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.getPlans(plans)",
      "21": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return test(plans.length - 1);",
      "22": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Build a map with the option(plans)",
      "23": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans[0]])",
      "24": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.length])",
      "25": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[planning_dir])",
      "26": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.size])",
      "27": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plan])",
      "28": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return check if a plan already exists in the given directory\"\"\"",
      "29": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.title])",
      "30": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans.join(new Directory, 'exist'))",
      "31": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Build a map with the help of a mapper;\"",
      "32": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.plan_dir])",
      "33": "return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\"",
      "34": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan exists in the given directory\"\"\"",
      "35": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return os.getPath(plans)",
      "36": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.body[0]])",
      "37": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return os.get(plans)",
      "38": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Build a map with the help of a map-provider\"",
      "39": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.listdir])",
      "40": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.bonus = true",
      "41": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.preventDefault()",
      "42": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.index])",
      "43": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Build a map with the help of a mapget(project.plan_dir)",
      "44": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return createPath(plans, os.plan_dir, 0)",
      "45": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans[plans.id])",
      "46": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans.newDir)",
      "47": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return os.isPlan(plans)",
      "48": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: return os.getPath(plans.length)",
      "49": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0: \"\"\"Check if a plan already exists in the given directory\"\"\" plans.push(plans.getList(project.plan_dir))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
    "target_code": "    @classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        return [choice for choice in cls]\n",
    "warning_line": "        return [choice for choice in cls]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 11,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SectorLabs/django-postgres-extra",
    "source_filename": "psqlextra/types.py",
    "target_filename": "psqlextra/types.py",
    "source_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813^",
    "target_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "predictions": [
      "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]"
    ],
    "correct": false,
    "top_five": {
      "0": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "1": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"]]: return [choice for choice in cls]",
      "2": "def all(cls) -> List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "3": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "4": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]]: return [choice for choice in cls]",
      "5": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"] return [choice for choice in cls]",
      "6": "@classmethod def all(cls) -> List[\"ListPostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "7": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] return [choice for choice in cls]",
      "8": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] return [choice for choice in cls]",
      "9": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [choice for choice in cls]",
      "10": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "11": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "12": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "13": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "14": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [choice for choice in cls]",
      "15": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "16": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod]\"]: return [choice for choice in cls]",
      "17": "@classmethod def all(cls) -> List[StrEnum]: return [choice for choice in cls]",
      "18": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "19": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"true\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[\"]: return [choice\" }",
      "20": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === cls.rule.choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "21": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"] >> List[\"List[\"List[\"List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "22": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"true\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[\"]: return [choice\"]",
      "23": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\" + cls.length, \"0\" + method + \" \\ n\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "24": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice = cls.choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "25": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"true\" || choice === \"right\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"]: return [choice for choice in cls]",
      "26": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"true\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[\"]: return [choice\"",
      "27": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"true\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[\"]: return [choice for choice in cls\"]",
      "28": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "29": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice)",
      "30": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "31": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\" + cls.length, \"0\" + method + \" \\ n\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "32": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "33": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"];",
      "34": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\" + method + \" \\ n\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "35": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]: return [choice for choice in cls]",
      "36": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]: return [choice for choice in cls]",
      "37": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice = cls.choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]",
      "38": "@classmethod def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] || List[StrEnum] return [choice for choice in cls]",
      "39": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"] >> List[\"List[PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "40": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "41": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || choice === \"true\" || choice === \"true\" || choice === \"right\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"]: return [choice for choice in cls\"]",
      "42": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"] but got List[StrEnum] }",
      "43": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice) }",
      "44": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\").then(choice || \"\");",
      "45": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice = cls.choice || undefined); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum] }",
      "46": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"];",
      "47": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\").then(choice => choice === \"choice\" || \"\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"] >> List[\"List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "48": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "49": "def all(cls) -> List[\"List[PostgresPartitioningMethod\"]] = [].join(\" \\ n\"); return [choice for choice in cls]: @classmethod def all(cls) -> List[\"List[StrEnum]\"]; }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return {\"resistance\": voltage / current}\n\n",
    "target_code": "        return {\"resistance\": voltage / current}\n    else:\n        raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_line": "        return {\"resistance\": voltage / current}",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "electronics/ohms_law.py",
    "target_filename": "electronics/ohms_law.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "return { \"resistance\": voltage / current }"
    ],
    "correct": false,
    "top_five": {
      "0": "return { \"resistance\": voltage / current }",
      "1": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"resymbol\" : typeof",
      "2": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof",
      "3": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj / typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"resymbol\" : typeof",
      "4": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return value of obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!==? \"resymbol\" : typeof",
      "5": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"resymbol\" : typeof",
      "6": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype.constructor? \"symbol\" : typeof",
      "7": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { returntypeof obj; } : function (obj) { return typeof obj!== \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype.constructor? \"resymbol\" : typeof",
      "8": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.prototype? \"resymbol\" : typeof",
      "9": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.service? \"resymbol\" : typeof",
      "10": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== new? \"resymbol\" : typeof",
      "11": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return default value; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype.constructor? \"resymbol\" : typeof",
      "12": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== Person? \"resymbol\" : typeof",
      "13": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return value of typeof obj!== \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"resymbol\" : typeof",
      "14": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!= voltage? \"resymbol\" : typeof",
      "15": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return (obj && typeof obj) && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== Symbol.prototype.constructor? \"resymbol\" : typeof",
      "16": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value as obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== Symbol.prototype? \"resymbol\" : typeof",
      "17": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Person? \"symbol\" : typeof",
      "18": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? JSON : typeof",
      "19": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value as obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== Symbol.prototype? \"symbol\" : typeof",
      "20": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!= resistance? \"symbol\" : typeof",
      "21": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!=== voltage? \"symbol\" : typeof",
      "22": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof",
      "23": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { returntypeof obj; } : function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === {? \"resymbol\" : typeof",
      "24": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype &? \"symbol\" : typeof",
      "25": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj / typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== voltage? \"resymbol\" : typeof",
      "26": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj / typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof",
      "27": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== new? \"symbol\" : typeof",
      "28": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.resymbol\" : typeof",
      "29": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype &? \"symbol\" : typeof",
      "30": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.prot? \"resymbol\" : typeof",
      "31": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype &",
      "32": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== status? \"symbol\" : typeof",
      "33": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? : typeof",
      "34": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== {? \"symbol\" : typeof",
      "35": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? obj :? \"resymbol\" : typeof",
      "36": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof",
      "37": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== Person? \"symbol\" : typeof",
      "38": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== status? \"resymbol\" : typeof",
      "39": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return { \"resistance\": voltage / current } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!==== {? \"symbol\" : typeof",
      "40": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return function (obj) { return obj / typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype && obj!== resistance? \"symbol\" : typeof",
      "41": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return value of obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!==? \"symbol\" : typeof",
      "42": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.proj? JSON : typeof",
      "43": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.service? JSON : typeof",
      "44": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.symbol\" : typeof",
      "45": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return default value; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype &&? \"symbol\" : typeof",
      "46": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return value of typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.service? voltage : current &",
      "47": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { returntypeof obj; } : function (obj) { return typeof obj!== \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype &&",
      "48": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor =? : ob &",
      "49": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor =? : typeof"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
    "target_code": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_line": "    return origin and issubclass(origin, Collection)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 71,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "konradhalas/dacite",
    "source_filename": "dacite/types.py",
    "target_filename": "dacite/types.py",
    "source_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708^",
    "target_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "predictions": [
      "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection)"
    ],
    "correct": false,
    "top_five": {
      "0": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection)",
      "1": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], bool])",
      "2": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'a href=\"http: return origin and issubclass(origin, Collection)",
      "3": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'a href=\"http: return origin and issubclass(origin, Collection)",
      "4": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], bool)",
      "5": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' && Union[Type[typing.Any], bool])",
      "6": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], boolearnorigin + ')",
      "7": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], 'boolean')",
      "8": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && Union[Type[typing.Any], bool])",
      "9": "origin = extract_origin_collection(t) return origin issubclass(origin, Collection)",
      "10": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[typing.Any] + &&",
      "11": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[typing.Any], &&",
      "12": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], 'bool)",
      "13": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], 'bool)",
      "14": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Collection.type + 'bool)",
      "15": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[typing.Any], &&&",
      "16": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[[typing.Any], &&",
      "17": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && origin.type='Boolean')",
      "18": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' && Union[Type[typing.Any] || typeof 'boolean'!== 'boolean')",
      "19": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, Union[Type[typing.Any], bool])",
      "20": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && '.toLowerCase() + Collection.toLowerCase())",
      "21": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && origin.type + 'bool)",
      "22": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[[typing.Any], &&&",
      "23": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, true, lodash=' && Union[Type[[typing.Any], boolearnorigin",
      "24": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, true, lodash=' && Collection.type + 'bool)",
      "25": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, origin + Collection.subclass(origin)",
      "26": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && Union[Type[typing.Any], 'boolean')",
      "27": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], boolearnorigin + 'bool)",
      "28": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any] + &&&&&",
      "29": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any] || ').boolean(origin)",
      "30": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, origin + Collection.subclasses.length)",
      "31": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, origin)",
      "32": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, origin + Collection.classList.subclass(origin)",
      "33": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[[typing.Any] + &&",
      "34": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + '/lodash>')",
      "35": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any] && ').boolean(origin)",
      "36": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Collection.type=' ').boolean(true, true, original_origin_collection.original_type [typing.Any])",
      "37": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, origin + Collection.classList.toLowerCase())",
      "38": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, true, lodash=' && Union[Type[[typing.Any], bool])",
      "39": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, origin + Collection.subclass(origin))",
      "40": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any], boolearnorigin + ', Collection)",
      "41": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, true, lodash=' && Union[Type[typing.Any], boolearnorigin",
      "42": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[[typing.Any] + &",
      "43": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, true, lodash=' && Union[Type[typing.Any] + &&",
      "44": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash=' + Collection.subclassesTo(null, 'a href=\"http: return origin and issubclass(origin, Collection)",
      "45": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[typing.Any] + &",
      "46": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[typing.Any], &&&&",
      "47": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && Union[Type[typing.Any] || ').boolean)",
      "48": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(true, true, lodash=' && Union[Type[[typing.Any] +!)",
      "49": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection).boolean(null, 'lodash=' + origin + ').boolean(null, 'lodash_type=' && 'lodash_type=' && ').boolean(null, 'lodash=' && Union[Type[typing.Any]+ &&"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None\n\n",
    "target_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "sensepost/objection",
    "source_filename": "objection/commands/ios/hooking.py",
    "target_filename": "objection/commands/ios/hooking.py",
    "source_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf^",
    "target_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "predictions": [
      "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None"
    ],
    "correct": false,
    "top_five": {
      "0": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "1": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') }",
      "2": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') }",
      "3": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "4": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return none",
      "5": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "6": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "7": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "8": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "9": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return NoClasses: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "10": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return NodeType: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "11": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return No class list: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "12": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All classes: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "13": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 }.format(response.error_reason), fg='red') }",
      "14": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return NodeType = typing.List[typing.Any]: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "15": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') get All Classes: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "16": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') console.log('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "17": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return No class List: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "18": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') error = new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "19": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') } return None",
      "20": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') reject(new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')) return None",
      "21": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return FewerClasses[typing.List.Any]]: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "22": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return NodeType = Typing.List[typing.Any]: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "23": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') reject(new Error('Failed to list classes with error: { 0 } ').format(response.error_reason), fg='red') return None",
      "24": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') error = new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "25": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') }",
      "26": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') reject(new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red'))",
      "27": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') {",
      "28": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') const error = new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "29": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') expect(response.error_reason).to.equal('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "30": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') } return None",
      "31": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') } failed to list classes with error: { 0 } '.format(response.error_reason), fg=')",
      "32": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } ).format(response.error_reason), fg='red') return None",
      "33": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.send( { message: 'Failed to list classes with error: { 0 } ', response: 'Failed to list classes with error: { 0 } ', response: 'Failed to list classes with error: { 0 }'} )",
      "34": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') {",
      "35": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 }.format(response.error_reason), fg='red') return None",
      "36": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } ).format(response.error_reason), fg='red') }",
      "37": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \\",
      "38": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 }.format(response.error_reason), fg='red')",
      "39": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.secho('Failed to select classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "40": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "41": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } \u2019.format(response.error_reason), fg='red') }",
      "42": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.send( { message: 'Failed to list classes with error: { 0 }'+ error_message, response: 'Failed to list classes with error: { 0 }'+ error_message, response: 'Failed to list classes with error' } ) }",
      "43": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') } else { return None",
      "44": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') } ) return None",
      "45": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') } failed to list classes with error: { 0 } '.format(response.error_reason), g=')",
      "46": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.send( { message: 'Failed to list classes with error: { 0 } ', response: 'Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') }",
      "47": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \\",
      "48": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') ^",
      "49": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return All: click.send( { message: 'Failed to list classes with error: { 0 }'+ error.message, response: 'Failed to list classes with error: { 0 } ', response: 'Failed to list classes with error: { 0 } ', fg=') }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                            return desc\n        return None\n\n",
    "target_code": "                            return desc\n        return \"\"\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 245,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/player.py",
    "target_filename": "tale/player.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "return desc"
    ],
    "correct": false,
    "top_five": {
      "0": "return desc",
      "1": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr",
      "2": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr.Derg",
      "3": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exportstr",
      "4": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr);",
      "5": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr>",
      "6": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from $ { desc } )",
      "7": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exports.Derived from'+ module.exportstr",
      "8": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from (' + module.exportstr)",
      "9": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr;",
      "10": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr",
      "11": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from '+Derived from );",
      "12": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr)",
      "13": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from '+Derived from'+ module.exports.Derived from );",
      "14": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from $ { desc } );",
      "15": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exportstr>",
      "16": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from \u00a3 { desc } )",
      "17": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from.",
      "18": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr + ');",
      "19": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from '+module.Exports.Derived from'+ module.exportstr",
      "20": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from (' + module.')",
      "21": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr>Buttons.Der",
      "22": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr;",
      "23": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ componentDerived from );",
      "24": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exportstr> {",
      "25": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr butcher",
      "26": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exports.Derived from.",
      "27": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from (' + module.exports.Derived from'+ module.exportstr)",
      "28": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr",
      "29": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from (Derived from'+ module.exports.Derived from );",
      "30": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr",
      "31": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from \u00a3 { desc } );",
      "32": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from ('+dest))",
      "33": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr Buttons.Derg",
      "34": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exports.Derived from. + module.Byn')",
      "35": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr + ')",
      "36": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exportstr> }",
      "37": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exportstr> { from n",
      "38": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr Matr",
      "39": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportse);",
      "40": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from (dderived from'+ module.exports.Derived from );",
      "41": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr>>",
      "42": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportse;",
      "43": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from. + module.exports.Derived from. + module.);",
      "44": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exportstr')",
      "45": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from $ { desc } but fired from );",
      "46": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ componentDerived from'+ componentDerived from ');",
      "47": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from ('+model)+');",
      "48": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from '+Derived from'+ module.exports.Derived from ;",
      "49": "return desc throw new Error(Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from'+ module.exports.Derived from None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
    "target_code": "    if unit in units:\n        return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    else:\n",
    "warning_line": "        return int(amount[:-1]) * 100_000_000_000 / units[unit]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 144,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/bolt11.py",
    "target_filename": "lnbits/bolt11.py",
    "source_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2^",
    "target_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "predictions": [
      "if unit in units: return amount[:-1] * 100_000_000_000 / units[unit] else:"
    ],
    "correct": false,
    "top_five": {
      "0": "if unit in units: return amount[:-1] * 100_000_000_000 / units[unit] else:",
      "1": "if unit in units: return amount[:-1]* 100_000_000_000 / units[unit] else:",
      "2": "if unit in units: return int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "3": "if unit in units: return amount[:-1] int(amount) * 100_000_000_000 / units[unit] else:",
      "4": "if unit in units: return amountOf(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "5": "if unit in units: return amount[:-1] = 100_000_000_000 / units[unit] else:",
      "6": "if unit in units: return amountOf(amount) * 100_000_000_000 / units[unit] else:",
      "7": "if unit in units: return amountOf(100_000_000_000) * 100_000_000_000 / units[unit] else:",
      "8": "if unit in units: return amount[:-1] * 100_0000_000_000 / units[unit] else:",
      "9": "if unit in units: return anmount[:-1] * 100_000_000_000 / units[unit] else:",
      "10": "if unit in units: return anmount[:-1]* 100_000_000_000 / units[unit] else:",
      "11": "if unit in units: return amountOwed * 100_000_000_000 / units[unit] else:",
      "12": "if unit in units: return this.int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "13": "if unit in units: return amount[:-1] * 100_000_0000_000 / units[unit] else:",
      "14": "if unit in units: return amountInt(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "15": "if unit in units: return amount[:-1] as_int(amount) * 100_000_000_000 / units[unit] else:",
      "16": "if unit in units: return amount[:-1] ast(100_000_000_000) * 100_000_000_000 / units[unit] else:",
      "17": "if unit in units: return isFloat(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "18": "if unit in units: return amount[:-1] * 100_000_00_000 / units[unit] else:",
      "19": "if unit in units: return floating_amount(amount) * 100_000_000_000 / units[unit] else:",
      "20": "if unit in units: return amount[:-1] as an integer * 100_000_000_000 / units[unit] else:",
      "21": "if unit in units: return amount[:-1] = * 100_000_000_000 / units[unit] else:",
      "22": "if unit in units: return int(amount[:-1]) * 100_0000_000_000 / units[unit] else:",
      "23": "if unit in units: return toInt(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "24": "if unit in units: return sum(amount) * 100_000_000_000 / units[unit] else:",
      "25": "if unit in units: return this.float(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "26": "if unit in units: return amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "27": "if unit in units: return amount[:-1]* 100_0000_000_000 / units[unit] else:",
      "28": "if unit in units: return amount[:-1] ascii(100_000_000_000) * 100_000_000_000 / units[unit] else:",
      "29": "if unit in units: return amount[:-1] * 100_000_000_00 / units[unit] else:",
      "30": "if unit in units: return this.float(amount) * 100_000_000_000 / units[unit] else:",
      "31": "if unit in units: return value * 100_000_000_000 / units[unit] else:",
      "32": "if unit in units: return anmount[:-1] = 100_000_000_000 / units[unit] else:",
      "33": "if unit in units: return amount*10*100_000_000 / units[unit] else:",
      "34": "if unit in units: return amount[:-1] / 100_000_000_000 / units[unit] else:",
      "35": "if unit in units: return amount[:-1] valued at * 100_000_000_000 / units[unit] else:",
      "36": "if unit in units: return amount * 100_000_000_000 / units[unit] else:",
      "37": "if unit in units: return amount*10 * 100_000_000_000 / units[unit] else:",
      "38": "if unit in units: return amount[:-1]x 100_000_000_000 / units[unit] else:",
      "39": "if unit in units: return amount[:-1] = 100_0000_000_000 / units[unit] else:",
      "40": "if unit in units: return int(amount[:-1]) * 100_000_0000_000 / units[unit] else:",
      "41": "if unit in units: return amount[:-1]*100_000_000_000 / units[unit] else:",
      "42": "if unit in units: return amount*100_000_000 / units[unit] else:",
      "43": "if unit in units: return amount[:-1]* 100_000_0000_000 / units[unit] else:",
      "44": "if unit in units: return amount[:-1] ** 100_000_000_000 / units[unit] else:",
      "45": "if unit in units: return amount[:-1] * 100_00_000_000 / units[unit] else:",
      "46": "if unit in units: return amount[:-1] ascii(100_000_000_000) else:",
      "47": "if unit in units: return int(amount[:-1]) * 100_000_000_00 / units[unit] else:",
      "48": "if unit in units: return total * 100_000_000_000 / units[unit] else:",
      "49": "if unit in units: return amount* 100_000_000_000 / units[unit] else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
    "target_code": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_line": "    return subdomain",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/extensions/subdomains/crud.py",
    "target_filename": "lnbits/extensions/subdomains/crud.py",
    "source_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d^",
    "target_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "predictions": [
      "subdomain = await get_subdomain(payment_hash) return subdomain"
    ],
    "correct": false,
    "top_five": {
      "0": "subdomain = await get_subdomain(payment_hash) return subdomain",
      "1": "subdomain = await get_subdomain(payment_hash)",
      "2": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) }",
      "3": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain:, Payment type: }, Optional[Subdomain:",
      "4": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, _subdomain: subdomain, Optional[Subdomain",
      "5": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) } return subdomain",
      "6": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomain:",
      "7": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain) }, Optional[Subdomain:",
      "8": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain: subdomain, Optional[Subdomain",
      "9": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain:, Payment type: }, Optional[Subdomain:",
      "10": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type: +subdomain.toLowerCase() } )",
      "11": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains])",
      "12": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type.$ {, Optional[Subdomain",
      "13": "subdomain = await get_subdomain(payment_hash) callback(Received payment method: $ { payment_hash }, subdomain = await get_subdomain(payment_hash) } ) return subdomain",
      "14": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomain,,",
      "15": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, _subdomain: subdomain, Optional[Subdomain:",
      "16": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) } return subdomain:",
      "17": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain.toLowerCase() } ) }",
      "18": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomain,",
      "19": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, _subdomain: subdomain, Optional[Subdomains] }",
      "20": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, _subdomain, Optional[Subdomain:",
      "21": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Subdomains should be fake!) return subdomain",
      "22": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain) } return subdomain",
      "23": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type.$ { but got Optional[Subdomain",
      "24": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment method:  + Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) }",
      "25": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) } subdomain:",
      "26": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment method:  + Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain === EBase.subdomain) } ) }",
      "27": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment method:  + Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain) }, Optional[Subdomain:",
      "28": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment method:  + Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain === EBase.subdomain } )",
      "29": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment method:  + Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment method: } ) }",
      "30": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, _subdomain) } )",
      "31": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain) } Subdomain: subdomain",
      "32": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain: subdomain, Optional[Subdomain:",
      "33": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain, Optional[Subdomain:",
      "34": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]) }",
      "35": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, subdomain) }, Optional[Subdomain: subdomain",
      "36": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(payment_hash, _subdomain: subdomain, Optional[Subdomain) }",
      "37": "subdomain = await get_subdomain(payment_hash) reject(subdomain? payment_hash : Optional[Subdomains]) return subdomain",
      "38": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomain(payment_hash) }",
      "39": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, paid for:, Optional[Subdomain",
      "40": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type, Optional[Subdomain:",
      "41": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, _) } )",
      "42": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash) } )",
      "43": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomain: subdomain",
      "44": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) } Subdomain: subdomain",
      "45": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = subdomain, Payment type: } ) }, Optional[Subdomain:",
      "46": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain === 'get') }",
      "47": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment method:  + Optional[Subdomains]$ { get_subdomain(payment_hash, Payment method: } )",
      "48": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomain: }",
      "49": "subdomain = await get_subdomain(payment_hash) if (subdomain === 'fake') throw new Error(Failed to get payment from EBase.subdomain: $ { get_subdomain(payment_hash, Payment type:, Optional[Subdomains]$ { get_subdomain(payment_hash, subdomain = $ { get_subdomain(subdomain, Payment type: Optional[Subdomains }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n\n",
    "target_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_line": "        return ImageData(self._dto[\"profileiconmax\"])",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `ImageData`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "meraki-analytics/cassiopeia",
    "source_filename": "cassiopeia/core/staticdata/realms.py",
    "target_filename": "cassiopeia/core/staticdata/realms.py",
    "source_changeid": "a26127b190f398137c4cf92469c5de573ce2a018^",
    "target_changeid": "a26127b190f398137c4cf92469c5de573ce2a018",
    "predictions": [
      "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "1": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])()",
      "2": "self._defineProperty(\"images/profileiconmax\", { imageData: \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "3": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(this._dto[\"profileiconmax\"])",
      "4": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.75\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "5": "self._defineProperty(\"image/profile_iconmax\", { imageData: \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "6": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.01\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "7": "self._defineProperty(\"image-dialog-iconmax\", { imageData: \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "8": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.01\" return ImageData(self._dto[\"profileiconmax\"])",
      "9": "self._defineProperty(\"image-dialog-icon\", { imageData: \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "10": "self._defineProperty(\"image-dialog-icon-max\", { imageData: \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "11": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.25\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "12": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]): \"\"\"",
      "13": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" Return ImageData(self._dto[\"profileiconmax\"])",
      "14": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imagedata.profileiconmax)",
      "15": "self._defineProperty(\"image_resize\", { imageData: \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "16": "\"\"\"Special behavior number identifying the biggest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "17": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imagedata).flatten(true);",
      "18": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])? self._dto[\"profileiconmax\"] : \"\"\"",
      "19": "self._dto[\"profileiconmax\"]): \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "20": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) if (typeof ImageData!== \"undefined\") {",
      "21": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "22": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) \"\"\"",
      "23": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) for (var i = 0; i  self.iconmax; i++) {",
      "24": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) for (var i = 0; i  avatariconmax; i++) {",
      "25": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($myself[\"images/profileiconmax\"])",
      "26": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that has been requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "27": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])ImageData(self._dto[\"profileiconmax\"])",
      "28": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])? self._dto[\"profileiconmin\"] : \"\"\"",
      "29": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imagedata).flatten(profileiconmax)",
      "30": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) for (var i = 0; i  avatarIconMax; i++) {",
      "31": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imageData).flatten(true);",
      "32": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])().imageData(self._dto[\"profileiconmax\"])",
      "33": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"], self._dto[\"profileiconmin\"])",
      "34": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) for (var i = 0; i  self.profileiconmax; i++) {",
      "35": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]).then(function (response) {",
      "36": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($myself[\"profileiconmax\"])",
      "37": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($rootScope.profileIconMax)",
      "38": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($tmp).flatten(imageData[imagedata.iconmax])",
      "39": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) for (var i = 0; i  self._dto.profileiconmax; i++) {",
      "40": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($myself[\"profileiconmax\"] = this._dto[\"profileiconmax\"])",
      "41": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imagedata[\"profileiconmax\"]).flatten(true);",
      "42": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\" \"\" return ImageData(self._dto[\"profileiconmax\"])",
      "43": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.4\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "44": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imagedata).flatten(true); }",
      "45": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($myself[\"imagedata\"])",
      "46": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($tmp).flatten(imageData[imageData.iconmax])",
      "47": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imagedata[\"profileiconmax\"]).flatten(true); }",
      "48": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) ($rootScope.profileIconMax || 500)",
      "49": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"]) $(self.imageData).flatten(profileiconmax)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
    "target_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            return False\n        return self.parent.left is self.parent.left is self\n\n",
    "warning_line": "        return self.parent and self.parent.left is self",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Optional[bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 435,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/red_black_tree.py",
    "target_filename": "data_structures/binary_tree/red_black_tree.py",
    "source_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2^",
    "target_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "predictions": [
      "return self.parent and self.parent.left is self: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "return self.parent and self.parent.left is self: \"\"\"",
      "1": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\"",
      "2": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "3": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.right is self: \"\"\"",
      "4": "return self.parent and self.parent.left is self: \"\"\"Rends true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "5": "return self.parent and self.parent.left is self: \"\"\"Regains true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "6": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.back is self: \"\"\"",
      "7": "return self.parent and self.parent.left is self: \"\"\"Rends true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.right is self: \"\"\"",
      "8": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.backwards is self: \"\"\"",
      "9": "return self.parent.and--is-self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "10": "return self.parent and self.parent.left is self: \"\"\"PubSub.PubSub.Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "11": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.back is self: \"\"",
      "12": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.led is self: \"\"\"",
      "13": "return self.parent and self.parent.left is self: \"\"\"Rturns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "14": "return self.parent and self.parent.left is self: \"\"\"Regains true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.right is self: \"\"\"",
      "15": "return self.parent and self.parent.left is self: \"\"\"Rows true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "16": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.centered is self: \"\"\"",
      "17": "return self.parent and self.parent.left is self: \"\"\"Rents true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "18": "return self.parent and self.parent.left is self: \"\"\"Rends true iff this node is the left child of its parent.\"\"\"",
      "19": "return self.parent and self.parent.left is self: \"\"\"Returns true if (this node is the left child of its parent.\"\"\"",
      "20": "return self.parent and self.parent.left is self: \"\"\"Rans true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "21": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.other than self.parent.left is self: \"\"\"",
      "22": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.eq.first = self.parent.first",
      "23": "return self.parent and self.parent.left is self: \"\"\"Raises confidence iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "24": "return self.parent and self.parent.left is self: \"\"\"Rends true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.back is self: \"\"\"",
      "25": "return self.parent and self.parent.left is self: \"\"\"R Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "26": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.top is self: \"\"\"",
      "27": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.eq.first = self.parent.first || self.parent.second = self.parent.first",
      "28": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.first = self;",
      "29": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.eq.secondsTo('left')",
      "30": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.removed is self: \"\"\"",
      "31": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.children_1.default.right is self: \"\"\"",
      "32": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.backward is self: \"\"\"",
      "33": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.shifted is self: \"\"\"",
      "34": "return self.parent and self.parent.left is self: \"\"\"Rends false iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "35": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.eq.secondsTo(\"before\"); }",
      "36": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.east is self: \"\"\"",
      "37": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.innerHTML = ''",
      "38": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.backwards is self: \"\"",
      "39": "return self.parent and self.parent.left is self: \"\"\"Returns true if this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "40": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.eq.secondsTo(\"before\", \"after\"); }",
      "41": "return self.parent and self.parent.left is self: \"\"\"Rates true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self: \"\"\"",
      "42": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.foo is self: \"\"\"",
      "43": "return self.parent and self.parent.left is self: \"\"\"Exists when (this node!= null) { return self.parent and self.parent.left is self: \"\"\"",
      "44": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.connected is self: \"\"\"",
      "45": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.eq.first = self;",
      "46": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.node.first = self.parent.first",
      "47": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.bottom is self: \"\"\"",
      "48": "return self.parent and self.parent.left is self: \"\"\"Rends true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.backwards is self: \"\"\"",
      "49": "return self.parent and self.parent.left is self: \"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.first = self.parent.first"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n\n",
    "target_code": "\n    def __str__(self) -> str:\n        return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_line": "        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `typing.List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 122,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "target_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298^",
    "target_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "predictions": [
      "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]"
    ],
    "correct": false,
    "top_five": {
      "0": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "1": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]; } ;",
      "2": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]; },",
      "3": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self) -> None:",
      "4": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]; }",
      "5": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self) -> None",
      "6": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "7": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: } ;",
      "8": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self) -> None;",
      "9": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: },",
      "10": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: default: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "11": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + ';",
      "12": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]; } )",
      "13": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "14": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '|'; }",
      "15": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '|'; } ;",
      "16": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return [self.query(1, 1, self.size, i, i) || 0; for i = 0; i  range(1, self.size + 1)]",
      "17": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: }",
      "18": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '*'; }",
      "19": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: {",
      "20": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] || 0;",
      "21": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + ''; }",
      "22": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] || 0; }",
      "23": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '; } ;",
      "24": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '; }",
      "25": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: default: return [",
      "26": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return _type of self.query === 'number'? self.query(1, 1, self.size, i, i) : '';",
      "27": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '|';",
      "28": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '; },",
      "29": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return _type of self.query === 'number'? self.query(1, 1, self.size, i) : '';",
      "30": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]; },",
      "31": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: {,",
      "32": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return [self.query(1, 1, self.size, i, i) || 0; for i = 0; i  range(1, self.size + 1)];",
      "33": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] = true; }",
      "34": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '[' + self.length + ']; } ;",
      "35": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + ';'; }",
      "36": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return _type of self.query ==='string'? self.query(1, 1, self.size, i) : '';",
      "37": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: default: return [self.query(2, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "38": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: self.query(i, i)",
      "39": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '|'; },",
      "40": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return [self.query(1, 1, self.size, i) || 0; for i = 0; i  range(1, self.size + 1)]",
      "41": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return _type but got typing.List[int] but got None but got typing.List[int] } ;",
      "42": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] || 0; } ;",
      "43": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return [self.query(2, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "44": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] + '*';",
      "45": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)];",
      "46": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: return _type of self.query === 'number'? self.query(1, 1, self.size, i, i) : self.query(1, 1, self.size, i)",
      "47": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] +'||'+",
      "48": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]; }",
      "49": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]: def __str__(self)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if file_hash == \"\":\n            return False\n        try:\n",
    "target_code": "        if file_hash == \"\":\n            return \"\"\n        try:\n",
    "warning_line": "            return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/Trust.py",
    "target_filename": "UM/Trust.py",
    "source_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41^",
    "target_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "predictions": [
      "if file_hash == \"\": try:"
    ],
    "correct": false,
    "top_five": {
      "0": "if file_hash == \"\": try:",
      "1": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\"); try:",
      "2": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try:",
      "3": "if file_hash == \"\": return False try:",
      "4": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ try: return False, '''');",
      "5": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: { return",
      "6": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> } try:",
      "7": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\"); try:",
      "8": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ ^ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ try: return False, '''');",
      "9": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, id, \"\");",
      "10": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\"); try:",
      "11": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\"); try:",
      "12": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\");",
      "13": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return True",
      "14": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\"); try:",
      "15": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: { return false",
      "16": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\"); try:",
      "17": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return False, blob[7]",
      "18": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: {",
      "19": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\"); try:",
      "20": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/g, ''); try:",
      "21": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\"); try:",
      "22": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return false",
      "23": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: } return",
      "24": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ ^ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try:",
      "25": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/g, ''');",
      "26": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return False try:",
      "27": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/g, '');",
      "28": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> \\ try:",
      "29": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, ''')",
      "30": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\"); try:",
      "31": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: }",
      "32": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ try: return False, '''')",
      "33": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/g, ''')",
      "34": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return False, \"\");",
      "35": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: { return Emphas() {",
      "36": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ try: return False, ''''');",
      "37": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: try:",
      "38": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return False, '';",
      "39": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/>) { try:",
      "40": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return False,",
      "41": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ try: return False, ''');",
      "42": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try: return False, ''');",
      "43": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ ^ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> { try:",
      "44": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ ^ s*$/g, \"\").replace(/ \\ s*$/g, \"\"); try:",
      "45": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/> } try: { return",
      "46": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/>)/g, \"\");",
      "47": "if file_hash == \"\": throw Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s+/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, \"\").replace(/ \\ s*$/g, '')",
      "48": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/g, '''); try:",
      "49": "if file_hash == \"\": throw new Error(\"Cannot find file \" + file_hash + \".\").replace(/ ^ s+/g, '\").replace(/ \\ s+/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\").replace(/ \\ s*$/g, '\"); try:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            if target.is_ammo_depot:\n                yield target\n",
    "target_code": "            if target.is_ammo_depot:\n                assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_line": "                yield target",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dcs-liberation/dcs_liberation",
    "source_filename": "game/commander/theaterstate.py",
    "target_filename": "game/commander/theaterstate.py",
    "source_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3^",
    "target_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "predictions": [
      "if target.is_ammo_depot: yield target"
    ],
    "correct": false,
    "top_five": {
      "0": "if target.is_ammo_depot: yield target",
      "1": "if target.is_ammo_depot: yield target;",
      "2": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but yield target typing.Generator[TheaterGroundObject[], None, None]",
      "3": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target",
      "4": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] yield target: if target.is_ammo_depot: yield target",
      "5": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Iterator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target",
      "6": "if target.is_ammo_depot: yield target typing.Iterator[TheaterGroundObject] but yield target typing.Generator[TheaterGroundObject[], None, None]",
      "7": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]",
      "8": "if target.is_ammo_depot: yield target = typing.Iterator[BuildingGroundObject] but yield target = typing.Generator[TheaterGroundObject[], None, None]",
      "9": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] but yield target: yield target",
      "10": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] return null",
      "11": "if target.is_ammo_depot: yield target = typing.Iterator[BuildingGroundObject] but yield target = typing.Generator[TheaterGroundObject[], None, None];",
      "12": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] return type [7, 8]",
      "13": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None].bind(this)); yield target: if target.is_ammo_depot: yield target",
      "14": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but yield target typing.Iterator[TheaterGroundObject[], None, None]",
      "15": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target;",
      "16": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(Fatal error: yield target.is_ammo_depot);",
      "17": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Iterator[TheaterGroundObject[], None, None].bind(this)); yield target: if target.is_ammo_depot: yield target",
      "18": "if target.is_ammo_depot: yield target = typing.Iterator[BuildingGroundObject] but yield target.is_ammo_depot: yield target",
      "19": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(Ammo is not a valid target object);",
      "20": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None].bind(this));",
      "21": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None].bind(this))",
      "22": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target.is_ammo_depot",
      "23": "if target.is_ammo_depot: yield target = typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None];",
      "24": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None].test(type)",
      "25": "if target.is_ammo_depot: yield target = typing.Iterator[BuildingGroundObject] but yield target = typing.Iterator[TheaterGroundObject[], None, None]",
      "26": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"Cannot find target.\")",
      "27": "if target.is_ammo_depot: yield target.is_base_type === 'object' && target.classList.concat(BuildingGroundObject)? target.classList.concat(TheaterGroundObject[], None, None]) :",
      "28": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None];",
      "29": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] but yield target.is_ammo_depot: yield target",
      "30": "if target.is_ammo_depot: yield target = typing.Iterator[BuildingGroundObject] but yield target = typing.Iterator[TheaterGroundObject[], None, None];",
      "31": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Iterator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target;",
      "32": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but yield target typing.Generator[TheaterGroundObject[], None, None] but yield target.is_ammo_depot: yield target",
      "33": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] yield target: yield target",
      "34": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target.is_ammo_depot;",
      "35": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Iterator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\"); yield target: if target.is_ammo_depot: yield target.is_ammo_depot",
      "36": "if target.is_ammo_depot: yield target typing.Iterator[TheaterGroundObject] but yield target typing.Iterator[BaseGroundObject[], None, None]",
      "37": "if target.is_ammo_depot: yield target = typing.Iterator[TheaterGroundObject] but yield target = typing.Generator[TheaterGroundObject[], None, None]",
      "38": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but yield target typing.Generator[TheaterGroundObject[], None, None];",
      "39": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"Block\");",
      "40": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Iterator[TheaterGroundObject[], None, None] but yield target: yield target",
      "41": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(ammo_depot is not a valid target object);",
      "42": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None] return type [8]",
      "43": "if target.is_ammo_depot: yield target = typing.Iterator[TheaterGroundObject] but yield target = typing.Iterator[TheaterGroundObject[], None, None]",
      "44": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"An error occured\");",
      "45": "if target.is_ammo_depot: yield target typing.Iterator[TheaterGroundObject] but yield target typing.Iterator[TheaterGroundObject[], None, None]",
      "46": "if target.is_ammo_depot: yield target = typing.Iterator[TheaterGroundObject] but yield target.is_ammo_depot: yield target",
      "47": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(\"Cannot find module.exports for \" + args + \"'\");",
      "48": "if target.is_ammo_depot: yield target typing.Iterator[BuildingGroundObject] but got typing.Generator[TheaterGroundObject[], None, None]; const error = new Error(Fatal error: yield target.is_ammo_depot)",
      "49": "if target.is_ammo_depot: yield target.is_ammo_depot"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        else:\n            return self.error.to_string()\n\n",
    "warning_line": "            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 107,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dagster-io/dagster",
    "source_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "target_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84^",
    "target_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "predictions": [
      "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")"
    ],
    "correct": false,
    "top_five": {
      "0": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "1": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "2": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string()",
      "3": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "4": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: return check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "5": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "6": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() } else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "7": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return null",
      "8": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source === ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "9": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: return self.error.message.failed(f\"Unexpected error setting: { self.error_source } \")",
      "10": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string()",
      "11": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() let elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "12": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") throw new Error(user_code_error.to_string())",
      "13": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: try { check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "14": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() lif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "15": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: self.error.message.failed(f\"Unexpected error setting: { self.error_source } \")",
      "16": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: \\ self.error_source } \")",
      "17": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() debug(\"Unexpected error setting: { self.error_source } \") elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "18": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: return check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "19": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return null",
      "20": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: self.error.message.str + \": \\ n \\ n\" + user_code_error.to_string()",
      "21": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string()restul else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "22": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() var elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "23": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return elif (user_code_error.toString())",
      "24": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return false",
      "25": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string(); if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "26": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source === ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "27": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return elif_error_source == ErrorSource.FRAMEWORK_ERROR",
      "28": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return elif (user_code_error.to_string())",
      "29": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() break else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "30": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") lookup(user_code_error, \": \\ n \\ n\" + user_code_error.to_string())",
      "31": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") get(user_code_error)",
      "32": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") user_code_error.to_string()",
      "33": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return elif_error_source == ErrorSource.FRAMEWORK_ERROR: false }",
      "34": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return user_code_error.to_string()",
      "35": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif _self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { _self.error_source } \")",
      "36": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source ^ \")",
      "37": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "38": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() fs.elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "39": "return self.error.message.strip() + \": \\ n \\ n \" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "40": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") setError(user_code_error, \"something went wrong\");",
      "41": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (errorSource == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "42": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return null",
      "43": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") expect(user_code_error.to_string())",
      "44": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if(self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "45": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return elif (el == ErrorSource.FRAMEWORK_ERROR)",
      "46": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "47": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") throw new Error(user_code_error.to_string())",
      "48": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() errif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "49": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() if (self.error_source == ErrorSource.FRAMEWORK_ERROR) return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return user_code_error.to_string()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            # threading library\n            return None\n        frames: List[Tuple[FrameType, int]] = [\n",
    "target_code": "            # threading library\n            return []\n        frames: List[Tuple[FrameType, int]] = [\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 796,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "plasma-umass/scalene",
    "source_filename": "scalene/scalene_profiler.py",
    "target_filename": "scalene/scalene_profiler.py",
    "source_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58^",
    "target_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "predictions": [
      "# threading library return None frames: List[Tuple[FrameType, int]] = ["
    ],
    "correct": false,
    "top_five": {
      "0": "# threading library return None frames: List[Tuple[FrameType, int]] = [",
      "1": "# threading library return None frames: List[Tuple[FrameType, int, FrameType]] = [",
      "2": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]]",
      "3": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]",
      "4": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]",
      "5": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]]]",
      "6": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]]",
      "7": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]]]",
      "8": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]]",
      "9": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]]]]",
      "10": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.keys(FrameTypes), Object.prototype.hasOwnPropertyrotype) : List[Tuple[FrameType, int, FrameType]]",
      "11": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : Object.prototype.hasOwnProperty.call(arguments, int, FrameType, int) : [List[Tuple[FrameType, int, FrameType]]",
      "12": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int, FrameType]]]",
      "13": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int, FrameType]]]]",
      "14": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]]]]",
      "15": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int, FrameType]]]]]",
      "16": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : Object.prototype.hasOwnProperty.call(arguments, int, FrameType) : int, Object.map[Tuple[FrameType, int, FrameType]",
      "17": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]]",
      "18": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]",
      "19": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]",
      "20": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]]",
      "21": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]",
      "22": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : Object.prototype.hasOwnProperty.call(arguments, int, FrameType, int) : [List[Tuple[FrameType, int, FrameType]",
      "23": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.childNodes) : (Object.prototype.hasOwnProperty.call(arguments, 1)) Object.map[Tuple[Tuple[FrameType, int, FrameType]]",
      "24": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]]]",
      "25": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]",
      "26": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]][Tuple[FrameType, int]]]]]",
      "27": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int, FrameType]]]]]",
      "28": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : Object.prototype.hasOwnProperty.call(arguments, int, FrameType, int)) : List[Tuple[FrameType, int, FrameType]",
      "29": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]",
      "30": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]]",
      "31": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int, FrameType]]",
      "32": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]]]]]]]",
      "33": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]",
      "34": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int, FrameType]]]",
      "35": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int]]]]",
      "36": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int, FrameType]]]]",
      "37": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int, FrameType]]",
      "38": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]][Tuple[FrameType, int]]]]]",
      "39": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), List[Tuple[FrameType, int, FrameType]]) : None",
      "40": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]][Tuple[FrameType, int]]]]]]",
      "41": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]",
      "42": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.hasOwnProperty.call(arguments)) : List[Tuple[FrameType, int, FrameType]]]][Tuple[FrameType, int, FrameType]]]]]",
      "43": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.keys(FrameTypes), Object.prototype.hasOwnPropertyrotype) : List[Tuple[FrameType, int, FrameType]",
      "44": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]]",
      "45": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.child) : Object.prototype.hasOwnProperty.call(arguments, int, FrameType, int) : List[Tuple[FrameType, int, FrameType]",
      "46": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]][Tuple[FrameType, int]]",
      "47": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]][Tuple[FrameType, int]]]]",
      "48": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(FrameTypes).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.keys(FrameTypes), Object.prototype.child) : List[Tuple[FrameType, int, FrameType]]]]][Tuple[FrameType, int]]]]",
      "49": "# threading library return None frames: List[Tuple[FrameType, int], Object.keys(Frames).map((i) => (type === 'object')? (Object.prototype.hasOwnProperty.call(arguments), Object.prototype.childNodes) : List[Tuple[FrameType, int, FrameType]]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n\n",
    "target_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_line": "        return self._mem_slot",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 112,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Qiskit/qiskit-terra",
    "source_filename": "qiskit/pulse/instructions/acquire.py",
    "target_filename": "qiskit/pulse/instructions/acquire.py",
    "source_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23^",
    "target_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "predictions": [
      "return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "1": "return self._classification_result_type === 'function'? Classification readout result.' : \" return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "2": "return self._mem_slot: '\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "3": "return self._mem_slot: _.isClassified(self._mem_slot)? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "4": "return self._classification_result_type === 'analysis'? Classification readout result.' : \" return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "5": "return self._mem_slot: _.isSameSlot(self._mem_slot)? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "6": "return self._classified_slots[0].slots.write_code: function(mem) { return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "7": "return self._classification_results_in_mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "8": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'object')? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "9": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "10": "return self._mem_slot: _.isClassified(self._classified_slot)? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "11": "return self._classification_result_type === 'function'? Classification readout result as a function() { } return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "12": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "13": "return self._mem_slot: _.isClassified(self._classified_slot)? self._classified_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "14": "return self._classification_results_from_classification_results_to_self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "15": "return self._classification_result_type === 'analysis'? Classification readout result as a function() { } return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "16": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'object'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "17": "return self._classification_result_type ==='mysticism'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "18": "return self._classification_result_type === 'classification'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "19": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number')? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "20": "return self._classification_result_type === 'classification'?classification_result_type : '\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "21": "return self._mem_slot: _.isSameSlot(self._mem_slot)? self._mem_slot = \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "22": "return self._classification_result_type === 'coded'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "23": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'number'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "24": "return self._mem_slot: _.isClassified(self._mem_slot, type, readoutResult)? self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "25": "return self.classified_slot || 'normal'; } return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "26": "return self._classification_result_type === 'function'? self._mem_slot : '\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "27": "return self._classification_result_type === 'coded'? self._mem_slot : '\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "28": "return self._classified_slots[0].slots.write_out_result_type || (type ==='memory'? Optional[memorySlot] : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "29": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : \"\"\"",
      "30": "return self._mem_slot: _.isSameSlot(self._mem_slot)? self._mem_slot[0] : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "31": "return self.classification_results_in_mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "32": "return self._classification_result_type === 'classification'?classification_result_type : '\"\"The classical memory slot which will store the classified readout result.\"\"\" return self._mem_slot: \"\"\"The traditional memory slot which will store the classified readout result.\"\"\"",
      "33": "return self._classification_result_type ==='mysticism'? self._mem_slot : '\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "34": "return self._classification_result_type === 'function'? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "35": "return self._classification_result_type === 'classification'?classification_result_type : \"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "36": "return self._classification_result_type === 'function'? self._mem_slot : 'Classification readout result.'; } ; return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "37": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : \"\"",
      "38": "return self._mem_slot: _.isClassified(self._mem_slot, type, readoutResult)? self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "39": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : number: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "40": "return self._classified_slots[0].slots.write_out_result_type || (type ==='memory'? Optional[memorySlot] : Classified ReadoutResult$ { mem_slot } ; } ; return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "41": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "42": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : '\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "43": "return self._classified_slots[0].slots.write_out_result_type || (type ==='memory'? Optional[memorySlot] : ClassifiedReadoutResult$ { mem_slot } ; } ; return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "44": "return self._classified_slots[0].slots.write_out_result_type || (type ==='memory'? Optional[memorySlot] : ClassifiedReadoutResult.$ { mem_slot } ; } ; return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "45": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : \"\"\"\"",
      "46": "return self._classified_slots[0].slots.write_out_result_type || (type ==='memory'? Optional[memorySlot] : Classified ReadoutResult.$ { mem_slot } ; } ; return self._mem_slot: \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "47": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : type of self._mem_slot : \"\"\"The classical memory slot which will store the classified readout result.\"\"\"",
      "48": "return self._mem_slot: _.isSameSlot(self._mem_slot || type === 'number'? self._mem_slot : type of self._mem_slot!== 'undefined'? self._mem_slot : typeof self._mem_slot!== 'undefined'? self._mem_slot : \"\"\"",
      "49": "return self._classification_results_from_classification_results_to_self._mem_slot \"\"\"The classical memory slot which will store the classified readout result.\"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                self._confidence_hi.update(conf_hi)\n            return None\n        else:\n",
    "target_code": "                self._confidence_hi.update(conf_hi)\n            return self\n        else:\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `TimeSeries` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "u8timeseries/timeseries.py",
    "target_filename": "u8timeseries/timeseries.py",
    "source_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c^",
    "target_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "predictions": [
      "self._confidence_hi.update(conf_hi) return None else:"
    ],
    "correct": false,
    "top_five": {
      "0": "self._confidence_hi.update(conf_hi) return None else:",
      "1": "self._confidence_hi.update(conf_hi) } else:",
      "2": "self._confidence_hi.update(conf_hi) else:",
      "3": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value.$ { self._confidence_hi } ) } else:",
      "4": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(Found unexpected timeseries value.$ { self._confidence_hi } ) } else:",
      "5": "self._confidence_hi.update(conf_hi) throw new Error(Unexpected TimeSeries error: $ { self._confidence_hi } ).update(conf_hi) } else:",
      "6": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).update(conf_hi) } else:",
      "7": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi.getTimeSeries() is invalid) } else:",
      "8": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ) } else:",
      "9": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(\"Invalid timeseries value.$ { self._confidence_hi } ) } else:",
      "10": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi.getTimeSeries() is invalid) return None else:",
      "11": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"Fatal error: self._confidence_hi.update(conf_hi)) } else:",
      "12": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"Fail to update TimeSeries value: $ { self._confidence_hi } ) } else:",
      "13": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi +'cannot be called with the name'+ conf_hi) } else:",
      "14": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value.$ { self._confidence_hi } ) return None else:",
      "15": "self._confidence_hi.update(conf_hi) throw new Error(The time series'+ self._confidence_hi.getTimeSeries() is invalid) } else:",
      "16": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi.getTimeseries() is invalid) } else:",
      "17": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value: $ { self._confidence_hi.update(conf_hi) } ) return None else:",
      "18": "self._confidence_hi.update(conf_hi) throw new Error(The time series'+ self._confidence_hi.getTimeSeries() is invalid) return None else:",
      "19": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi.getTimeseries() is invalid) return None else:",
      "20": "self._confidence_hi.update(conf_hi) throw new Error(\"There is no valid timeseries for \" + conf_hi) } else:",
      "21": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value: $ { self._confidence_hi.update(conf_hi) } ) return None else:",
      "22": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(Function failed: $ { self._confidence_hi } ) } else:",
      "23": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(Function error: $ { self._confidence_hi } ) } else:",
      "24": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi +'cannot be called with the name \" + conf_hi) } else:",
      "25": "self._confidence_hi.update(conf_hi) throw new Error(Unexpected TimeSeries error: $ { self._confidence_hi } ) } else:",
      "26": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"failed to update timeseries\"); } else:",
      "27": "self._confidence_hi.update(conf_hi) throw new Error('Invalid TimeSeries') return None else:",
      "28": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value: $ { self._confidence_hi.update(conf_hi) } ) } else:",
      "29": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value: $ { self._confidence_hi } ) } else:",
      "30": "self._confidence_hi.update(conf_hi) throw new Error('Invalid timeseries'+ self._confidence_hi.getTimeseries()) } else:",
      "31": "self._confidence_hi.update(conf_hi) throw new Error(Unexpected TimeSeries error: $ { self._timeseries_hi } ).error(\"Failed to update self.conf_hi\"); } else:",
      "32": "self._confidence_hi.update(conf_hi) throw new Error(\"Invalid timeseries '\" + self._data.timeseries) } else:",
      "33": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"Fatal error: self._data_hi.update(conf_hi)) } else:",
      "34": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"Fail to update Timeseries value: $ { self._confidence_hi } ) } else:",
      "35": "self._confidence_hi.update(conf_hi) throw new Error('Invalid timeseries'+ self._confidence_hi.getTimeSeries()) } else:",
      "36": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"Fail to update TimeSeries value: \" + conf_hi) } else:",
      "37": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(\"Failed to update timeseries\"); } else:",
      "38": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._timeseries_hi } ) } else:",
      "39": "self._confidence_hi.update(conf_hi) throw new Error(The timeseries'+ self._confidence_hi.getTimeSeries() is not valid) } else:",
      "40": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(Found unexpected timeseries value.$ { self._confidence_hi } ) return None else:",
      "41": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).error(found unexpected timeseries value.$ { self._conf_hi } ) } else:",
      "42": "self._confidence_hi.update(conf_hi) throw new Error(\"Invalid timeseries '\" + self._confidence_hi.getTimeseries()); } else:",
      "43": "self._confidence_hi.update(conf_hi) throw new Error(Unexpected TimeSeries error: $ { self._timeseries_hi } ) } else:",
      "44": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpected timeseries value.$ { self._confidence_hi } ).next(none) } else:",
      "45": "self._confidence_hi.update(conf_hi) throw new Error(Found unexpectedly: %s) } else:",
      "46": "self._confidence_hi.update(conf_hi) throw new Error(\"Cannot find timeseries for \" + conf_hi) return None else:",
      "47": "self._confidence_hi.update(conf_hi) throw new Error('Invalid timeseries'+ self._confidence_hi.date()) } else:",
      "48": "self._confidence_hi.update(conf_hi) throw new Error(Previous TimeSeries error: $ { self._confidence_hi } ).error(Function $ { self._confidence_hi } ) } else:",
      "49": "self._confidence_hi.update(conf_hi) throw new Error(\"Invalid TimeSeries\"); } else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def _get_params(self, **kwargs) -> dict:\n        return None\n\n",
    "target_code": "    def _get_params(self, **kwargs) -> dict:\n        return {}\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "tests/models/test_modelmanager.py",
    "target_filename": "tests/models/test_modelmanager.py",
    "source_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb^",
    "target_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "predictions": [
      "def _get_params(self, **kwargs) -> dict: return None"
    ],
    "correct": false,
    "top_five": {
      "0": "def _get_params(self, **kwargs) -> dict: return None",
      "1": "def _get_params(self, **kwargs) -> dict: { return None",
      "2": "def _get_params(self, **kwargs) -> dict: } return None",
      "3": "def _get_params(self, **kwargs) -> dict: { return None:",
      "4": "def _get_params(self, **kwargs) -> dict: \\ return None",
      "5": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._typing.Dict[typing.Any, typing.Any] } ) }",
      "6": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._type[typing.Any] } ) }",
      "7": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._typing.Dict[typing.Any, typing.Any] }",
      "8": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._typing.Any] } ) }",
      "9": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params.length]) } : return None",
      "10": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._type[self.Any] } ) }",
      "11": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params.length]) } return None",
      "12": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._chart[self.typing.Any] } ) }",
      "13": "def _get_params(self, **kwargs) -> dict: { return None: def _get_params(self, 'dict', '[typing.Dict[typing.Any, typing.Any] } )",
      "14": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params.length]) } ; }",
      "15": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params(_get_params(_get_params), _get_params(self, _kwargs)) }",
      "16": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params(_get_params(_get_params), self._params(_get_params(_get_params), _get_params(self, 'dict')) }",
      "17": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._get_params('_get_params'), self._get_params('_get_params')",
      "18": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._dikt[self.typing.Any] } ) }",
      "19": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._type[typing.Any] { ) }",
      "20": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._chart[self.typing.Any] } ",
      "21": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._type[self.typing.Any] } ) }",
      "22": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._typing.Dict[typing.Any, typing.Any] {",
      "23": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self.Any]) } : return None",
      "24": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params(_get_params(self, 'kwargs')) }",
      "25": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._typing.Any] { ) }",
      "26": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params]) } : self.type[typing.Dict[typing.Any, typing.Any] }",
      "27": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self.') } : return None",
      "28": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._chart[self.type[typing.Any] } ",
      "29": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params(_get_params(_get_params), self._params(_get_params(_get_params), _get_params(self, _kwargs)) }",
      "30": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._type[self.Any] { ) }",
      "31": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params.length]) } ;",
      "32": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._type]], self._params[self._params[self._type]) }",
      "33": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self.') } ; }",
      "34": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params.length]) }",
      "35": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length]), self._params[self._params[self._params[self.type[typing.Any] } ) }",
      "36": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._dev.to_params) }",
      "37": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params]), self._params[self._params[self._params]) }",
      "38": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params.length]) }",
      "39": "def _get_params(self, **kwargs) -> dict: { return None: def _get_params(self, 'dict')",
      "40": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._chart[self.type[typing.Any] } ) }",
      "41": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params.length]) } return None: }",
      "42": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params]), self._params[self._params[self._params.length]) } : return None",
      "43": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._type[typing.Any, typing.Any] } ) }",
      "44": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self.Any]) } ; }",
      "45": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._chart[self.type[typing.Any] }",
      "46": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params]) } : self.type[typing.Any] }",
      "47": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params('_get_params'), self._params[self._params[self._params.length], self._params[self._params[self._params[self._dikt[self] } ) }",
      "48": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params(_get_params(_get_params), self._params(_get_params(_get_params), _get_params(self, _get_params)) } : return None",
      "49": "def _get_params(self, **kwargs) -> dict: } return All: def _get_params(self, '_get_params', self._get_params(_get_params(_get_params), self._params(_get_params(_get_params(_get_params), _get_params(self, _kwargs) } : return None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text\n\n",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_line": "        return text",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Text` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 169,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "willmcgugan/rich",
    "source_filename": "rich/text.py",
    "target_filename": "rich/text.py",
    "source_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06^",
    "target_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "predictions": [
      "return text: text = render(text, style, emoji=emoji) text.justify = justify return text"
    ],
    "correct": false,
    "top_five": {
      "0": "return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "1": "return text: return type } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "2": "return type } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "3": "return text: sendToRender(text, style, emoji=emoji) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "4": "return text: text = render(text, style, emoji=emoji) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "5": "return text; } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "6": "return text: document.getElementById('id') } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "7": "return text: process.env.NODE_ENV === 'test' return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "8": "return text: text = render(text, style, id = emoji.userOptions.length return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "9": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/g, '') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "10": "return text: text = render(text, style, id = emoji.userOptions.length return text: text = render(text, style, id, emoji=emoji) text.justify = justify return text",
      "11": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/g, '$1') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "12": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s+/g, '') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "13": "return text: process.env.NODE_ENV === 'production' return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "14": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/g, '') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "15": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/g, '$1') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "16": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*(.*)/g, '') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "17": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/, '$1') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "18": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/, '') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "19": "return text: data = { } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "20": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/g, '$1') } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "21": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/g, '$1') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "22": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*(.*)/g, '') } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "23": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/g, '$1') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "24": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/, '$1') } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "25": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s+/g, '') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "26": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/, '') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "27": "return text: text = render(text, style, emoji=emoji) return text: text.justify = justify return text",
      "28": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/, '') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "29": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/, '$1') } ; return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "30": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s+/g, '') } ; return text: return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "31": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/, '$1') } ) return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "32": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/g, '$1') } ; return text: return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "33": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ w+$/, '$1') } ; return text: return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "34": "text = render(text, style, emoji=emoji) text.justify = justify return text",
      "35": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/g, '$1') } ; return text: return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "36": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*(?:[0-9] { 1,2 } )/g, '') } return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "37": "return text: return type return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "38": "return text: return type { return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "39": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*(?:[0-9] { 1,2 } )/g, '') return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "40": "return text: return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "41": "return text; } return text: text = render(text, style, emoji=emoji) text.justify = justify; return text",
      "42": "return text: sendToRender(text, style, emoji=emoji) text.justify = justify return text",
      "43": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*(.*)/g, '') } ) return text: return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "44": "return text: return type \\ return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "45": "return type { return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "46": "return text: return type ^ return text: text = render(text, style, emoji=emoji) text.justify = justify return text",
      "47": "return text: text = render(text, style, emoji=emoji) text.replace(/ \\ s*$/g, '$1') }.justify = justify return text",
      "48": "return text: text = render(text, style, id = emoji.userOptions.length return text: text = render(text, style, id, emoji=id) text.justify = justify return text",
      "49": "return type \\ return text: text = render(text, style, emoji=emoji) text.justify = justify return text"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2\n\n",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return [matrix1, matrix2]\n\n",
    "warning_line": "        return matrix1, matrix2",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 124,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "target_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2:"
    ],
    "correct": false,
    "top_five": {
      "0": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2:",
      "1": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2;",
      "2": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2;",
      "3": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2:",
      "4": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2",
      "5": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix1, matrix2",
      "6": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix2, matrix3:",
      "7": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix2, matrix3;",
      "8": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return dimension1, matrix2;",
      "9": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix1, matrix2;",
      "10": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2",
      "11": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension1, matrix2",
      "12": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix2, matrix3:",
      "13": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix2, matrix3;",
      "14": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension2[0];",
      "15": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension1[0];",
      "16": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return dimension1, matrix2",
      "17": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:",
      "18": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix3, matrix4:",
      "19": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension2[0], dimension3[0] == dimension4[1]",
      "20": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension1[0], matrix2:",
      "21": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.isEmpty( matrix1, matrix2 )? dimension1[0] : dimension1[0];",
      "22": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix1, matrix2:",
      "23": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return typeof matrix1 == 'number'? matrix1[0] : dimension1[0];",
      "24": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return typeof matrix1 == 'number'? matrix1[0] : dimension2;",
      "25": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: dimension1 == dimension2[0];",
      "26": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return dimension1, matrix2:",
      "27": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.equal(type[1], _.equal[2], _.equal[3], _.equal[4], _.equal[5]);",
      "28": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension1[0], matrix2;",
      "29": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return dimension1[0], matrix2:",
      "30": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension1[0], dimension2[0] == dimension3[1]",
      "31": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension2[0] == dimension3[0] and dimension3[0] == dimension4[1]: return matrix1, matrix2;",
      "32": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.isEmpty( matrix1, matrix2 )? dimension1[0] : dimension2[0];",
      "33": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.isEmpty(type, any)? dimension1[0] : dimension1[0];",
      "34": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return typeof matrix1 == 'number'? matrix1[0] : matrix2;",
      "35": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.isEmpty(type, any)? dimension1[0] : dimension2;",
      "36": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return typeof matrix1 == 'number'? matrix1[0] : dimension2[0];",
      "37": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.equal(typing.Tuple[typing.Any], typing.List[typing.Any]]);",
      "38": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix3, matrix4:",
      "39": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension2, matrix3;",
      "40": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1[0], matrix2:",
      "41": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension2, matrix3:",
      "42": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return matrix2, matrix3",
      "43": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension1[0] + dimension2[0];",
      "44": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension2[0] == dimension3[1] and dimension3[0] == dimension4[1]: return matrix1, matrix2;",
      "45": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return _.isEmpty(type, any)? this._isEmpty(type, any) :",
      "46": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: dimension1 = dimension1[0];",
      "47": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return type [0, typing.Tuple[typing.List[typing.Any]]];",
      "48": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension2[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2;",
      "49": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2: if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] return dimension3[0];"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return count_label + short_label\n",
    "target_code": "        return count_label + short_label\n\n  raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_line": "        return count_label + short_label",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 582,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "return count_label + short_label"
    ],
    "correct": false,
    "top_five": {
      "0": "return count_label + short_label",
      "1": "return count_label + short_label; } return _.isString(count_label)? _.isString(short_label) : _.isString(short_label);",
      "2": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length)Mathrow, Mathrow,",
      "3": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length)Mathrow, Mathrow,",
      "4": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math), Mathrow, Mathrow,",
      "5": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), _.isNone(length)) : Math.round(length)Mathrow, Mathrow,",
      "6": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math); } ; }",
      "7": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)), _.max(length - Math.min(length)), _.max(length - Math.min(length)) : Math.round(length) / Math.min(length).to[3]; } :",
      "8": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math), Mathrow,",
      "9": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length)Mathrow, Mathrow,",
      "10": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.round(length)*Math.max(length)*Math), Mathrow, Mathrow,",
      "11": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.round(length)*Math), Mathrow, Mathrow,",
      "12": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.round(length)*Math.max(length - Math.min(length))*Math.max(length - Math.min(length))*Math.floor([Mathrow, Mathrow,",
      "13": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length - Math.log(length)*Math.');",
      "14": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.round(length)*Math.max(length)*Math), Mathrow,",
      "15": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length)Mathrow, Mathrow,",
      "16": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math), Mathrow, Mas,",
      "17": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)), _.max(length - Math.min(length)), _.max(length - Math.min(length)) : Math.round(length - Math.min(length));Mathrow, -fill; }",
      "18": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.round(length)*Math.max(length)*Math); } ; }",
      "19": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.round(length)*Math.max(length)*Math), Mathrow, Mashort_label",
      "20": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.round(length)*Math.max(length - Math.min(length))*Math.max(length - Math.min(length))*Math.floor(short_label",
      "21": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length))*Math.max(length - Math.min(length))*Math.floor(short_label",
      "22": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length); } ;",
      "23": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math), Mathrow, Mashort_label",
      "24": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length))*Math.max(length - Math.min(length))*Math.parselement(s, ');",
      "25": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), _.isNone(length)) : Math.round(length); } ;",
      "26": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.floor([Mathrow, Mathrow,",
      "27": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.round(length));",
      "28": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.round(length)*Math.max(length)*Math), Mathrow, Mas,",
      "29": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)), _.isNaN(length)) : Math.round(length); }",
      "30": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length))*Math.max(length - Math.min(length))*Math.floor([Mathrow, Mathrow,",
      "31": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.parselement(s, Mas,",
      "32": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : An exception occurred in the count_label_prefix : _.isNone(short_label) : _.isNone(short_label);",
      "33": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.round(length)*Math), Mathrow, Mas,",
      "34": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.round(length)*Math), Mathrow, Mashort_label",
      "35": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)*Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math); } ; }",
      "36": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.parselement(s, ');",
      "37": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)), _.isNaN(length)) : Math.round(length); } ;",
      "38": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.floor(short_label",
      "39": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.parselement(s, Mathrow,",
      "40": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length); } ;",
      "41": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)+Math.round(length)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.parselement(s, 'Mas,",
      "42": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.round(length));",
      "43": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.round(length)*Math), Mathrow,",
      "44": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.round(length)*Math.max(length - Math.min(length)), _.isNone(length)) : Math.round(length)Mathrow, Major,",
      "45": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.max(length)*Math.parselement(s, 'Mas,",
      "46": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length - Math.log(length)*Math.'); } ; }",
      "47": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), _.isNone(length)) : Math.round(length)Mathrow, Mathrow,",
      "48": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.log(length)*25)+Math.round(length)*Math.max(length - Math.log(length)), Math.max(length)*Math.max(length)*Math), Mathrow, [Mashort_label",
      "49": "return count_label + short_label; } ; return _.isNone(count, short_label)? count_label : Alias, Math.round(length - Math.min(length)*25)*Math.max(length - Math.min(length)*Math.max(length)*Math.max(length)*Math.max(length)*Math.parselement(s, Mathrow,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> bytes:\n    \"\"\"\n",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    \"\"\"\n",
    "warning_line": "    \"\"\"",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bytes` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trezor/trezor-firmware",
    "source_filename": "core/mocks/generated/trezorconfig.pyi",
    "target_filename": "core/mocks/generated/trezorconfig.pyi",
    "source_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058^",
    "target_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "predictions": [
      "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes: \"\"\"",
      "1": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"\"\"",
      "2": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes: \"\"\"",
      "3": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"\"\"",
      "4": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"\"",
      "5": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"\"",
      "6": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config])",
      "7": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = 0 }",
      "8": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = 0 } ;",
      "9": "$('#extmod/modtrezorconfig/modtrezorconfig.c').def get(app: int, key: int, public: bool = False) -> bytes: \"\"\"",
      "10": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, options])",
      "11": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = [ 0 ]",
      "12": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, options])",
      "13": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, bytes])",
      "14": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = 0 }",
      "15": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config])",
      "16": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, (x, y, z) => {",
      "17": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes (input, bytes.length) }",
      "18": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, bytes])",
      "19": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> ByteCount(bytes) }",
      "20": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"",
      "21": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> ByteCount(bytes) }",
      "22": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes: 0 } ;",
      "23": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = 0",
      "24": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, bytes]) }",
      "25": "$('#extmod/modtrezorconfig/modtrezorconfig.c').defGet(app: int, key: int, public: bool = False) -> bytes: \"\"\"",
      "26": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = [ null ]",
      "27": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = [ 0 ]",
      "28": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config]);",
      "29": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = []",
      "30": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes (bool) }",
      "31": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, (x, y, z) => {",
      "32": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, app])",
      "33": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = 0 } ;",
      "34": "\"\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"\"\"",
      "35": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, (typeof config = { } ) => {",
      "36": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = '\"\"",
      "37": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> ByteArray(bytes) }",
      "38": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> ByteCount(bytes) }",
      "39": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes (input, bytes.length) }",
      "40": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config, options]) }",
      "41": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes (bool) {",
      "42": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> ByteCount(bytes) }",
      "43": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, (bool, config, bytes) => {",
      "44": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = bool || 0",
      "45": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, config]) }",
      "46": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes (bytes) }",
      "47": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, [bool, bytes])",
      "48": "\"\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = \"\"",
      "49": "\"\": # extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes = Object.assign( { }, () => {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        print()\n        return\n    for i in range(len(board)):\n",
    "target_code": "        print()\n        return True\n    for i in range(len(board)):\n",
    "warning_line": "        return",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 56,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "backtracking/n_queens.py",
    "target_filename": "backtracking/n_queens.py",
    "source_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1^",
    "target_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "predictions": [
      "print() return for i in range(len(board)):"
    ],
    "correct": false,
    "top_five": {
      "0": "print() return for i in range(len(board)):",
      "1": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } return for i in range(len(board)):",
      "2": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) { return for i in range(len(board)):",
      "3": "print() throw new Error(There is no module for'+ module.exports + ').debug(PrintError while ulimit setting is set to 0) } return for i in range(len(board)):",
      "4": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } return for i in range(len(board)):",
      "5": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) { return for i in range(len(board)):",
      "6": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module.exports = '\" + err) return for i in range(len(board)):",
      "7": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } ) return for i in range(len(board)):",
      "8": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) \\ return for i in range(len(board)):",
      "9": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  range(len(board)).length > 0; i++) return for i in range(len(board)):",
      "10": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Printer is not loaded yet!\"); return for i in range(len(board)):",
      "11": "print() throw new Error(There is no module for'+ module.exports + ').debug(PrintError while ulimit setting is set to 0;) } return for i in range(len(board)):",
      "12": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Printer is not loaded for module.exports.) return for i in range(len(board)):",
      "13": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length - 1; i++) } return for i in range(len(board)):",
      "14": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print(bool, null, board[i]) } for i in range(len(board)):",
      "15": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print(bool, null, []) return for i in range(len(board)):",
      "16": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Printer is not loaded yet.\"); return for i in range(len(board)):",
      "17": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print('bool', null, board[i]) } return for i in range(len(board)):",
      "18": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  range(len(board)).length > 0; i++) { return for i in range(len(board)):",
      "19": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  range(len(board)).length > 0; i++) } return for i in range(len(board)):",
      "20": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, 'None') } return for i in range(len(board)):",
      "21": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print('bool', null, board) } return for i in range(len(board)):",
      "22": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, ['\"]) } return for i in range(len(board)):",
      "23": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Printer is not loaded for module.exports: \" + err) return for i in range(len(board)):",
      "24": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print('bool', null, board[i]) } for i in range(len(board)):",
      "25": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, board) } return for i in range(len(board)):",
      "26": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print(bool, null, board[i]) } return for i in range(len(board)):",
      "27": "print() throw new Error(There is no module for'+ module.exports + ').error(Print error: $ { err.message } ) } return for i in range(len(board)):",
      "28": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  boards.length; i++) } return for i in range(len(board)):",
      "29": "print() throw new Error(There is no module for'+ module.exports + ').debug(PrintError while ulimit setting is set to 0;) return for i in range(len(board)):",
      "30": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print error: \" + err) return for i in range(len(board)):",
      "31": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Printer is not loaded yet!\") return for i in range(len(board)):",
      "32": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print(bool, null, []) } return for i in range(len(board)):",
      "33": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print('bool', null, board); for i in range(len(board)):",
      "34": "print() throw new Error(There is no module for'+ module.exports + ').error(PrintError while ulimit setting is set to 0) } return for i in range(len(board)):",
      "35": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Printer is not loaded yet\"); return for i in range(len(board)):",
      "36": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', 'None') } return for i in range(len(board)):",
      "37": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) \\ return for i in range(len(board)):",
      "38": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) ^ return for i in range(len(board)):",
      "39": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('boolean') return for i in range(len(board)):",
      "40": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print(bool, null, []) } for i in range(len(board)):",
      "41": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, []) } return for i in range(len(board)):",
      "42": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; i++) } print('bool', null, board); return for i in range(len(board)):",
      "43": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, 'None') } for i in range(len(board)):",
      "44": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('boolean', board[i]) } return for i in range(len(board)):",
      "45": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', board[i]) } return for i in range(len(board)):",
      "46": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, board); for i in range(len(board)):",
      "47": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  boards.length; i++) { return for i in range(len(board)):",
      "48": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for (var i = 0; i  board.length; ++i) } print('bool', null, board); return for i in range(len(board)):",
      "49": "print() throw new Error(There is no module for'+ module.exports + ').error(\"The module'+ module.exports + '\").debug(\"Print module for'+ err) return for i in range(len(board)):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
    "target_code": "    \"\"\"\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_line": "    return unicodedata.normalize(",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "oppia/oppia",
    "source_filename": "utils.py",
    "target_filename": "utils.py",
    "source_changeid": "72937725a323b0cc1ccec150c81b041abeacb575^",
    "target_changeid": "72937725a323b0cc1ccec150c81b041abeacb575",
    "predictions": [
      "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "1": "\"\"\" return unicodedata.normalize( 'NKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "2": "\"\"\" return unicodedata.normalize( 'NFKD', (input_string) => python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "3": "\"\"\" return unicodedata.normalize( 'NFC', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "4": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "5": "\"\"\" return unicodedata.normalize( 'NPKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "6": "\"\"\" return unicodedata.normalize( return 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "7": "\"\"\" return unicodedata.normalize( type === 'bytes'? python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "8": "\"\"\" return unicodedata.normalize( 'nfKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "9": "\"\"\" return unicodedata.normalize( 'NKFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "10": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined'? input_string.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "11": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined'? input_string : '').encode('ascii', 'ignore')",
      "12": "\"\"\" return unicodedata.normalize( 'NFKD', ( input_string!= null)? python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "13": "\"\"\" return unicodedata.normalize( type 'bytes', 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "14": "\"\"\" return unicodedata.normalize( 7, 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "15": "\"\"\" return unicodedata.normalize( 'NSFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "16": "\"\"\" return unicodedata.normalize( 'NVD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "17": "\"\"\" return unicodedata.normalize( require('./bytes').unicode('NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "18": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string) : '\"') encode('ascii', 'ignore')",
      "19": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string) : typeof python_utils === 'function') } return \"\" + unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('as', 'ignore')",
      "20": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "21": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string) : typeof python_utils === 'function') } return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('asci', 'ignore')",
      "22": "\"\"\" return unicodedata.normalize( 'NFKD', ( input_string!= null ) => python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "23": "\"\"\" return unicodedata.normalize( 'NBD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "24": "\"\"\" return unicodedata.normalize( type == 'bytes'? python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "25": "\u201c\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "26": "\"\"\" return unicodedata.normalize( 'nfkd', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "27": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined'? input_string.normalize( 'NKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "28": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined'? input_string : '\"').encode('ascii', 'ignore')",
      "29": "\"\"\" return unicodedata.normalize('NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "30": "\"\"\" return unicodedata.normalize( require('./utf-8').python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "31": "\"\"\" return unicodedata.normalize( 'NFKD', utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "32": "\"\"\" var unicodedata = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "33": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string) : '\"') normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "34": "\"\"!\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "35": "\"\"\" get unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "36": "\"\"\" return unicodedata.normalize( astr, 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "37": "\"\"\" return unicodedata.normalize( 8, 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "38": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined'? input_string : '\"') python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "39": "\"\"\" return unicodedata.normalize( return 'NKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "40": "\"\"\" return unicodedata.normalize( 'nfkD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "41": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined' && python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "42": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string) : typeof python_utils!== 'undefined'? python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "43": "\"\"\" return unicodedata.normalize( typeof python_utils ==='string'? python_utils.UNICODE(input_string) : typeof python_utils === 'function') } return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "44": "\"\"\" return unicodedata.normalize( [ 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "45": "\"\"\" return unicodedata.normalize( type === 'bytes'? python_utils.UNICODE(input_string) : '\"') encode('ascii', 'ignore')",
      "46": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string!== 'undefined'? input_string : '\"') encode('ascii', 'ignore')",
      "47": "\"\"\" return unicodedata.normalize( typeof input_string ==='string'? input_string : 'bytes') : return \"\"\" return unicodedata.normalize( typeof input_string ==='string' ) python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "48": "\"\"\" return unicodedata.normalize( return python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "49": "\"\"\" return unicodedata.normalize( 'NNFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "target_code": "\n    def __iter__(self) -> \"SuperpropertiesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_line": "        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 197,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/logic/lineage.py",
    "target_filename": "pronto/logic/lineage.py",
    "source_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327^",
    "target_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "predictions": [
      "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "1": "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "2": "def __iter__(self) -> \"SuperclassesIterator\": return this._super(self.entity, distance=self.distance, with_self=self.with_self)",
      "3": "def __iter__(self) -> \"SuperclassesIterator\": return this._isIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "4": "def __iter__(self) -> \"SuperpropertiesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "5": "def __iter__(self) -> \"SuperclassesIterator\": return __super(self.entity, distance=self.distance, with_self=self.with_self)",
      "6": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__distance__(self.entity, distance=self.distance, with_self=self.with_self)",
      "7": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__proxy__(self.entity, distance=self.distance, with_self=self.with_self)",
      "8": "def __iter__(self) -> \"SuperclassesIterator\": return this._is_an_iter(self.entity, distance=self.distance, with_self=self.with_self)",
      "9": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__iter__(self.entity, distance=self.distance, with_self=self.with_self)",
      "10": "def __iter__(self) -> \"SuperpropertiesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "11": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self._iterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "12": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__iterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "13": "def __iter__(self) -> \"SuperclassesIterator\": return \"SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "14": "def __iter__(self) -> \"SuperpropertiesIterator\": return this._isIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "15": "def __iter__(self) -> \"SuperclassesIterator\": return this._transforms(self.entity, distance=self.distance, with_self=self.with_self)",
      "16": "def __iter__(self) -> \"SuperclassesIterator\": return this._is_an_iterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "17": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__err__(self.entity, distance=self.distance, with_self=self.with_self)",
      "18": "def __iter__(self) -> \"SuperclassesIterator\": return _this._super(self.entity, distance=self.distance, with_self=self.with_self)",
      "19": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__properties__(self.entity, distance=self.distance, with_self=self.with_self)",
      "20": "def __iter__(self) -> \"SuperclassesIterator\": return this._getIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "21": "def __iter__(self) -> \"SuperclassesIterator\": return _this._superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "22": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__self.__distance__(self.entity, distance=self.distance, with_self=self.with_self)",
      "23": "def __iter__(self) -> \"SuperclassesIterator\": return _super_(self.entity, distance=self.distance, with_self=self.with_self)",
      "24": "def __iter__(self) -> \"SuperclassesIterator\": return _this.super_propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "25": "def __iter__(self) -> \"SuperclassesIterator\": return this._is_super(self.entity, distance=self.distance, with_self=self.with_self)",
      "26": "def __iter__(self) -> \"SuperclassesIterator\": return this._is_an_iterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "27": "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "28": "def __iter__(self) -> \"SuperclassesIterator\": return _this._super_propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "29": "def __iter__(self) -> \"SuperclassesIterator\": return this._super_propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "30": "def __iter__(self) -> \"SuperclassesIterator\": return super(self.entity, distance=self.distance, with_self=self.with_self)",
      "31": "def __iter__(self) -> \"SuperpropertiesIterator\": return this._superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "32": "def __iter__(self) -> \"SuperclassesIterator\": return this._superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "33": "def __iter__(self) -> \"SuperclassesIterator\": return this._getSuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "34": "def __iter__(self) -> \"SuperclassesIterator\": return _this.Iterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "35": "def __iter__(self) -> \"SuperclassesIterator\": return _this.SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "36": "def __iter__(self) -> \"SuperpropertiesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "37": "def __iter__(self) -> \"SuperclassesIterator\": return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "38": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.iterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "39": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__distance__(self.entity, with_self=self.with_self)",
      "40": "def __iter__(self) -> \"SuperclassesIterator\": return _.isIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "41": "def __iter__(self) -> \"SuperclassesIterator\": return validButtons(self.entity, distance=self.distance, with_self=self.with_self)",
      "42": "def __iter__(self) -> \"SuperclassesIterator\": return async(self.entity, distance=self.distance, with_self=self.with_self)",
      "43": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.with_self: self.entity, distance=self.distance, with_self=self.with_self)",
      "44": "def __iter__(self) -> \"SuperclassesIterator\": return async (self.entity, distance=self.distance, with_self=self.with_self)",
      "45": "def __iter__(self) -> \"SuperpropertiesIterator\": return this._super(self.entity, distance=self.distance, with_self=self.with_self)",
      "46": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__iter__(self, distance=self.distance, with_self=self.with_self)",
      "47": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__iter__(self)",
      "48": "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) },",
      "49": "def __iter__(self) -> \"SuperclassesIterator\": return _super__self.__self.__distance? with_self=self.with_self : with_self, def __iter__(self)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:\n",
    "target_code": ") -> JsonSchema:\n    if is_true_schema(schema) or is_false_schema(schema):\n        return schema\n    if \"anyOf\" in schema:\n",
    "warning_line": "        return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, typing.Any]` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 988,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "IBM/lale",
    "source_filename": "lale/schema_simplifier.py",
    "target_filename": "lale/schema_simplifier.py",
    "source_changeid": "b38267abe490e869338f212179b03521e89013ee^",
    "target_changeid": "b38267abe490e869338f212179b03521e89013ee",
    "predictions": [
      "if \"anyOf\" in schema:"
    ],
    "correct": false,
    "top_five": {
      "0": "if \"anyOf\" in schema:",
      "1": "if schema is False: if \"anyOf\" in schema:",
      "2": "if (schema is False) return False if \"anyOf\" in schema:",
      "3": ") -> JsonSchema: if \"anyOf\" in schema:",
      "4": "if schema is False: return False if \"anyOf\" in schema:",
      "5": "if \"schema\" is False: if \"anyOf\" in schema:",
      "6": "if (schema === undefined) return False if \"anyOf\" in schema:",
      "7": "if (schema.hasOwnProperty(\"anyOf\")) return False if \"anyOf\" in schema:",
      "8": "if (schema.anyOf) return False if \"anyOf\" in schema:",
      "9": "if (schema is correct) return False if \"anyOf\" in schema:",
      "10": "if (schema.type === 'object') return Schema.default if \"anyOf\" in schema:",
      "11": "if (schema is True) return False if \"anyOf\" in schema:",
      "12": "if (schema.type === 'object') return False if \"anyOf\" in schema:",
      "13": "if (schema.type === 'undefined') return False if \"anyOf\" in schema:",
      "14": "if you have schema in JsonSchema: return False if \"anyOf\" in schema:",
      "15": "if (schema.type === 'object') { return Schema.default if \"anyOf\" in schema:",
      "16": "if you have an instance of JsonSchema: return Schema.default if \"anyOf\" in schema:",
      "17": "if (schema.type === 'object') return false if \"anyOf\" in schema:",
      "18": "if \"schema\" is False: return False if \"anyOf\" in schema:",
      "19": "if (schema.valid) return False if \"anyOf\" in schema:",
      "20": "if you have schema: return False if \"anyOf\" in schema:",
      "21": "if (schema.isTypeOf) return False if \"anyOf\" in schema:",
      "22": "if you have a Schema that doesn't require a schema return false if \"anyOf\" in schema:",
      "23": "if there is no schema in the Schema: return Schema.default if \"anyOf\" in schema:",
      "24": "if this.schema && schema is False: return False if \"anyOf\" in schema:",
      "25": "if \"schema\" in schema: if \"anyOf\" in schema:",
      "26": "if you have an instance of JsonSchema: return Schema.defaults.AnyOf if \"anyOf\" in schema:",
      "27": "if (schema has properties) return Schema.defaults if \"anyOf\" in schema:",
      "28": "if you have an instance of JsonSchema: return Schema.defaults[schema] if \"anyOf\" in schema:",
      "29": "if (schema.boolean) return False if \"anyOf\" in schema:",
      "30": "if this.schema && schema is False: if \"anyOf\" in schema:",
      "31": "if there is no schema in the schema: return Schema.default if \"anyOf\" in schema:",
      "32": "if \"schema\" in schema: return Schema.default if \"anyOf\" in schema:",
      "33": "if you have a Schema that doesn't require a schema return False if \"anyOf\" in schema:",
      "34": "if \"schemas\" are correct: return False if \"anyOf\" in schema:",
      "35": "if you have an instance of JsonSchema: return Schema.defaults.anyOf if \"anyOf\" in schema:",
      "36": "if you are using JsonSchema: return false if \"anyOf\" in schema:",
      "37": "if \"schema\" in schema: return false if \"anyOf\" in schema:",
      "38": "if (schema.type === 'object') return Schema.default Schema.type = Schema.default if \"anyOf\" in schema:",
      "39": "if (schema.hasOwnProperty(\"anyOf\")) return false if \"anyOf\" in schema:",
      "40": "if (schema.type === 'object') return Schema.default Schema -> JsonSchema: if \"anyOf\" in schema:",
      "41": "if schema is False: return false if \"anyOf\" in schema:",
      "42": "if you have schema in JsonSchema: return false if \"anyOf\" in schema:",
      "43": "if you have an instance of JsonSchema: return Schema.defaults.Of(schema) if \"anyOf\" in schema:",
      "44": "if (schema == undefined) return False if \"anyOf\" in schema:",
      "45": "if (schema.type === 'undefined') return false if \"anyOf\" in schema:",
      "46": "if it(schema): return False if \"anyOf\" in schema:",
      "47": "if (schema has properties) return Schema.default if \"anyOf\" in schema:",
      "48": "if you have an instance of JsonSchema: return Schema.defaults.getSchema().anyOf if \"anyOf\" in schema:",
      "49": "if (schema is not perfect) return False if \"anyOf\" in schema:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n\t\t\treturn se.InvalidSeEbookException\n\n",
    "target_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n\t\t\treturn se.InvalidSeEbookException.code\n\n",
    "warning_line": "\t\t\treturn se.InvalidSeEbookException",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 738,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/executables.py",
    "target_filename": "se/executables.py",
    "source_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0^",
    "target_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "predictions": [
      "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException"
    ],
    "correct": false,
    "top_five": {
      "0": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException",
      "1": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")",
      "2": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, )",
      "3": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"\")",
      "4": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ')",
      "5": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, cccache, ')",
      "6": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"\");",
      "7": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccache, ')",
      "8": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") throw new Error(\"Couldn\u2019t find endnotes.xhtml file.\"); return se.InvalidSeEbookException:",
      "9": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccccache, )",
      "10": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccccache, ')",
      "11": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") const error = new Error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException",
      "12": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \")",
      "13": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\")",
      "14": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\"); return se.InvalidSeEbookException:",
      "15": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \");",
      "16": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ))",
      "17": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ) return se.InvalidSeEbookException",
      "18": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\")",
      "19": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, se.xhtml)",
      "20": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, p, ')",
      "21": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, cccache, )",
      "22": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\"); return se.InvalidSeEbookException:",
      "23": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, p.xhtml)",
      "24": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccc)",
      "25": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \")",
      "26": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, '%= c|b/g, ')",
      "27": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ));",
      "28": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\"))",
      "29": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\"))",
      "30": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, '%= c|b/g, ')",
      "31": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"\").replace(/ \\ b)",
      "32": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccache, )",
      "33": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, cc)",
      "34": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= d+) \\ /(.*)/g, \"%= c|b/g, \"%= d+) \\ /g, \"%= b/g, \"%= c|b/>\");",
      "35": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\")",
      "36": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccccache, );",
      "37": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, b/>",
      "38": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, p, cache, ')",
      "39": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, n)",
      "40": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, b/>)",
      "41": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= d+) \\ /(.*)/g, \"%= b/g, \"%= c|b/g, \"%= d+) \\ /g",
      "42": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\")",
      "43": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, p.xhtml)",
      "44": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\"); return se.InvalidSeEbookException: se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")",
      "45": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, seEbookException, )",
      "46": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, ccache, ');",
      "47": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \")",
      "48": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"%= p/g, \"\");",
      "49": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\").replace(/ \\ b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, \"%= b/g, \"%= c|b/g, cccache, ');"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @property\n    def layer_name(self) -> str:\n        return self._layer_name\n",
    "target_code": "    @property\n    def layer_name(self) -> typing.Optional[str]:\n        return self._layer_name\n",
    "warning_line": "        return self._layer_name",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/layers.py",
    "target_filename": "volatility/framework/interfaces/layers.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name"
    ],
    "correct": false,
    "top_five": {
      "0": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name",
      "1": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name }",
      "2": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } ",
      "3": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return",
      "4": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } ->",
      "5": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self",
      "6": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } -> str",
      "7": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self.",
      "8": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name cons",
      "9": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } -> str:",
      "10": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name const",
      "11": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } -> str: return",
      "12": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default",
      "13": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } ",
      "14": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } if",
      "15": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } -> str: return self",
      "16": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default:",
      "17": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } -> str: return self.",
      "18": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self.add",
      "19": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } /",
      "20": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } s",
      "21": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } st",
      "22": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } strim",
      "23": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } de",
      "24": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default: de",
      "25": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } def",
      "26": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name constrim",
      "27": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } if(",
      "28": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default: def",
      "29": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } if (",
      "30": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default: defn",
      "31": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name const",
      "32": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } -> str: return self.add",
      "33": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } defn",
      "34": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } if(de",
      "35": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name const",
      "36": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name de",
      "37": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name const",
      "38": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } if(def",
      "39": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name def",
      "40": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self.addLa",
      "41": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default: defno",
      "42": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self.addLayer",
      "43": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name const",
      "44": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name } strim()",
      "45": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default: defno",
      "46": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self.addE",
      "47": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name const",
      "48": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name default: defno",
      "49": "return self._typed_layer_name || typeof self._typed_layer ==='string'? self._typed_layer_name : typeof self._layer_name!=='string'? self._layer_name : typeof self._layer_name return self.jo"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef escape(expr: str) -> None:\n    return expr.replace(\"'\", \"''\")\n",
    "target_code": "\ndef escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")\n",
    "warning_line": "    return expr.replace(\"'\", \"''\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 118,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Shougo/deoplete.nvim",
    "source_filename": "rplugin/python3/deoplete/util.py",
    "target_filename": "rplugin/python3/deoplete/util.py",
    "source_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7^",
    "target_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7",
    "predictions": [
      "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")"
    ],
    "correct": false,
    "top_five": {
      "0": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")",
      "1": "def escape(expr: str) -> None: { return expr.replace(\"'\", \"''\")",
      "2": "def escape(expr: str) -> None: } return expr.replace(\"'\", \"''\")",
      "3": "def escape(expr: str) -> None; return expr.replace(\"'\", \"''\")",
      "4": "def escape(expr: str) -> None but got str return expr.replace(\"'\", \"''\")",
      "5": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"'\") }",
      "6": "def escape(expr: str) -> None return expr.replace(\"'\", \"''\")",
      "7": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '') } /$ { expr.replace(\"') }",
      "8": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.str } &&",
      "9": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '') } /$ { expr.replace(\"') {",
      "10": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"') }",
      "11": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.escape(\"'\") } ",
      "12": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.replace(\"'\", \"'\") }",
      "13": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.replace(\"'\", \"'\") } &",
      "14": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" in str) } )",
      "15": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.replace(\"'\", \"'\") } ) }",
      "16": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" in str) } )",
      "17": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.replace(\"'\", \"'\") } ) {",
      "18": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\").toString() } ",
      "19": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.str } /$ {",
      "20": "def escape(expr: str) -> None: constr = expr.replace(\"'\", \"''\")",
      "21": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && &&",
      "22": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.escape(\"'\") } )",
      "23": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '') } /$ { expr.replace(\"') } &",
      "24": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" + str) } )",
      "25": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\", \"''\")) } /$ { expr.replace(\"'\", \"''\") }",
      "26": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.replace(\"'\", \"'\") } )",
      "27": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '') } /$ { expr.replace(\"')",
      "28": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")",
      "29": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.str.length &&",
      "30": "def escape(expr: str) -> None >> return expr.replace(\"'\", \"''\")",
      "31": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && ') { /$ { expr.str } ",
      "32": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"''\") }",
      "33": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\", \"''\")",
      "34": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.replace(\"'\", \"') } &",
      "35": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\").toString() } )",
      "36": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && ') } /> { &",
      "37": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"'\") {",
      "38": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.str.length } )",
      "39": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.str.grabbing(\"'\") } )",
      "40": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"') {",
      "41": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '\" && '\") } /$ { expr.str } ",
      "42": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && '') } /$ { expr.replace(\"');",
      "43": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"''\") } ",
      "44": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.str.join(\"'\") } )",
      "45": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\")) } /$ { expr.replace(\"'\", \"'\") } ) }",
      "46": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\", \"''\")",
      "47": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.escape(\"'\")) {",
      "48": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.escape(\"') } &",
      "49": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")!== null? $ { expr.escape(\"'\" && expr.replace(\"'\" && expr.replace(\"'\") && expr.replace(\"'\" && expr.replace(\"'\") && /$ { expr.escape(\"') &&"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
    "target_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                vty = v.type\n",
    "warning_line": "            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 445,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/Expr.py",
    "target_filename": "WDL/Expr.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)"
    ],
    "correct": false,
    "top_five": {
      "0": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "1": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "2": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.type(kty)",
      "3": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty);",
      "4": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == vty.Map(None): vty = v.typecheck(kty)",
      "5": "k.typecheck(kty) if vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "6": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None) or vty == v.typecheck(kty)",
      "7": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typeCheck(kty)",
      "8": "k.typecheck(kty) if vty == Undefined or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "9": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == V.Map(None): vty = v.typecheck(kty)",
      "10": "k.typecheck(kty) if vty == undefined or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "11": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(vty)",
      "12": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None) vty = v.typecheck(kty)",
      "13": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(none)",
      "14": "k.typecheck(kty) var vty = v.typecheck(None) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "15": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.type(kty);",
      "16": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.type(kty, 'String')",
      "17": "k.typecheck(kty) var vty = v.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "18": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None); vty = v.typecheck(kty)",
      "19": "k.typecheck(kty) var vty = v.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "20": "k.typecheck(kty) if vty == null or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "21": "k.typecheck(kty) if vty == Nothing else if vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "22": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == undefined: vty = v.typecheck(kty)",
      "23": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == Map(None): vty = v.typecheck(kty)",
      "24": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == vty == T.Map(None): vty = v.typecheck(kty)",
      "25": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == t.Map(None): vty = v.typecheck(kty)",
      "26": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None) or vty == undefined: vty = v.typecheck(kty)",
      "27": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(none): vty = v.typecheck(kty)",
      "28": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.type(kty)",
      "29": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == v.typecheck(kty)",
      "30": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == nonexistant: vty = v.typecheck(kty)",
      "31": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == vty.Map(None): vty = v.typecheck(kty)",
      "32": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty);",
      "33": "k.typecheck(kty) if vty == None or vty == T.Array(T.Some()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "34": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(none);",
      "35": "k.typecheck(kty) if vty == Null or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "36": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None) or vty == v.typecheck(kty) }",
      "37": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.type(kty, 'String');",
      "38": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == v.typecheck(kty) return vty",
      "39": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typeCheck(kty)",
      "40": "k.typecheck(kty) if vty == 0 or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "41": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == v.typecheck(none) vty = v.typecheck(kty)",
      "42": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == v.typecheck(kty) }",
      "43": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(ty)",
      "44": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == v.typecheck(kty) return vty;",
      "45": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None) or vty == v.typecheck(kty)",
      "46": "k.typecheck(kty) if vty == Nothing or vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "47": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) oder vty == T.Map(None): vty = v.typecheck(kty)",
      "48": "k.typecheck(kty) if vty == None oder vty == T.Array(T.Any()) or vty == T.Map(None): vty = v.typecheck(kty)",
      "49": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()) or vty == T.Map(None) ou vty = v.typecheck(kty)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
    "target_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_line": "                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 433,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libp2p/py-libp2p",
    "source_filename": "libp2p/pubsub/gossipsub.py",
    "target_filename": "libp2p/pubsub/gossipsub.py",
    "source_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397^",
    "target_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "predictions": [
      "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] )"
    ],
    "correct": false,
    "top_five": {
      "0": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] )",
      "1": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - own.degree, self.mesh[topic], [] )",
      "2": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - degree, self.mesh[topic], [] )",
      "3": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).get_mesh_from_minus( num_mesh_peers_in_topic - self.chat.degree, self.mesh[topic], [] )",
      "4": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic -self.degree, self.mesh[topic], [] )",
      "5": "selected_peers = GossipSub.select_to_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] )",
      "6": "selected_peers = GossipSub.select_ from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] )",
      "7": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to[ip_mesh_peers",
      "8": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_m_peers",
      "9": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to[ip\" &&",
      "10": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_m\");",
      "11": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id + 1)",
      "12": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to[ip\" &",
      "13": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_m\");",
      "14": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_m_peers",
      "15": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] );",
      "16": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"mousel\");",
      "17": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select[ip\" &",
      "18": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select[ip\" &",
      "19": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).get_mesh_from_minus( num_mesh_peers_in_topic - self.chat.degree, self.mesh[topic] )",
      "20": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to[ip]",
      "21": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_m\" &&",
      "22": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to.to[ipSub.select_in_mesh[topic]",
      "23": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to.to[ipSub.select_mesh[topic]",
      "24": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select[ip\" &&",
      "25": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_m[ip_mesh_peers",
      "26": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_masked_mesh_peers",
      "27": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"mousel\");",
      "28": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).get_mesh_from_minus( num_mesh_peers_in_topic - self.geometry.degree, self.mesh[topic], [] )",
      "29": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"mous\");",
      "30": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id + : [id, ip.mesh[topic]",
      "31": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_t[ip_mesh_peers",
      "32": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id +!== \"select_from_to[ipSub.select_from_m\");",
      "33": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_m[ip]",
      "34": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select[ip]",
      "35": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select[ip]",
      "36": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_m\" &",
      "37": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select[ip\");",
      "38": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to[ip_mesh_",
      "39": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to\");",
      "40": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id +!== \"mousel\");",
      "41": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!=== \"select_from_to[ipSub.select_from_mob_mesh_peers",
      "42": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_m\" &&",
      "43": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select[ip\");",
      "44": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self[topic], [] )",
      "45": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).map(ctx, num_mesh_peers_in_topic - self.g, num_mesh_peers_in_topic - self.g, num_mesh_peers_in_topic])",
      "46": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_to[ip\" &&&",
      "47": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_m\" &",
      "48": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== \"select_from_to[ipSub.select_from_m[ip]",
      "49": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] ).filter((id => id == \"select\" && id!== \"minus\" && id!== \"yes\" && id!== \"yes\" && id!== 1 &&&&&&&&&&"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],\n",
    "target_code": "        restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_line": "            expiration=int(data['expiration']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "restored = cls( expiration=data['expiration']), balance_proof=data['balance_proof'],"
    ],
    "correct": false,
    "top_five": {
      "0": "restored = cls( expiration=data['expiration']), balance_proof=data['balance_proof'],",
      "1": "restored = cls( expiration=data['expiration'], balance_proof=data['balance_proof'],",
      "2": "restored = cls( expiration=int(data['expiration']), balance_proof=data['balance_proof'],",
      "3": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration, balance_proof=data['balance_proof'],",
      "4": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int instead, balance_proof=data['balance_proof'],",
      "5": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter inpiration, balance_proof=data['balance_proof'],",
      "6": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int.toString(), balance_proof=data['balance_proof'],",
      "7": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int in expiration, balance_proof=data['balance_proof'],",
      "8": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int, balance_proof=data['balance_proof'],",
      "9": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration, balance_proof=data['balance_proof'],",
      "10": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int instead, balance_proof=data['balance_proof'],",
      "11": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int for 3rd parameter expiration, balance_proof=data['],",
      "12": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead, balance_proof=data['balance_proof'],",
      "13": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter input to call ContractSendChannelUpdateTransfer.__input__ but got int for 2nd parameter input, balance_proof=data['balance_proof'],",
      "14": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__invalid__ but got int instead, balance_proof=data['balance_proof'],",
      "15": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead, balance_proof=data['balance_proof'],",
      "16": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__invalid__ but got int for 2nd parameter expiration, balance_proof=data['balance_proof'],",
      "17": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter input to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter input, balance_proof=data['balance_proof'],",
      "18": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter inpiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration, balance_proof=data['balance_proof'],",
      "19": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int instead, balance_proof=data['balance_proof'],",
      "20": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration, balance_proof=data['],",
      "21": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int!=data['expiration']), balance_proof=data['balance_proof'],",
      "22": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ but kept int for 2nd parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 3rd, balance_proof=data['balance_proof'],",
      "23": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter inpiration, balance_proof=data['balance_proof'],",
      "24": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ but kept int for 2nd parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__proof', balance_proof=data['balance_proof'],",
      "25": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int.toString(), balance_proof=data['balance_proof'],",
      "26": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int.toString(), balance_proof=data['balance_proof'],",
      "27": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int for 3rd parameter inpiration, balance_proof=data['],",
      "28": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__int(data['expiration']), balance_proof=data['balance_proof'],",
      "29": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ for 1st parameter inpiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__invalid__, balance_proof=data['balance_proof'],",
      "30": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int, balance_proof=data['balance_proof'],",
      "31": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter input to call ContractSendChannelUpdateTransfer.__input__ but got int instead, balance_proof=data['balance_proof'],",
      "32": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter input to call ContractSendChannelUpdateTransfer.__input__ but got int for 2nd parameter expiration, balance_proof=data['balance_proof'],",
      "33": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int.toString(), balance_proof=data['balance_proof'],",
      "34": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int, balance_proof=data['balance_proof'],",
      "35": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.toString(), balance_proof=data['balance_proof'],",
      "36": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__, balance_proof=data['balance_proof'],",
      "37": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int in expiration, balance_proof=data['balance_proof'],",
      "38": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ for 1st parameter input to call ContractSendChannelUpdateTransfer.__input__ but got int instead.__init__, balance_proof=data['balance_proof'],",
      "39": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter input to call ContractSendChannelUpdateTransfer.__input__ but got int, balance_proof=data['balance_proof'],",
      "40": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.reduce(data['expiration']), balance_proof=data['balance_proof'],",
      "41": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int in expiration, balance_proof=data['balance_proof'],",
      "42": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter inpiration, balance_proof=data['],",
      "43": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ for 1st parameter input to call ContractSendChannelUpdateTransfer.__input__ but got int instead.__input__, balance_proof=data['balance_proof'],",
      "44": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 2nd parameter expiration'' to call ContractSendChannelUpdateTransfer.__init__ but got int in expiration, balance_proof=data['balance_proof'],",
      "45": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter expiration' to call ContractSendChannelUpdateTransfer.__init__ but got int(data['expiration']), balance_proof=data['balance_proof'],",
      "46": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int for 1st parameter input to call ContractSendChannelUpdateTransfer.__init__ but got int instead, balance_proof=data['balance_proof'],",
      "47": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ but kept int for 2nd parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int.toString, balance_proof=data['balance_proof'],",
      "48": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ but kept int for 2nd parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.toString, balance_proof=data['balance_proof'],",
      "49": "restored = cls( expiration = null for 1st parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__init__ but kept int for 2nd parameter expiration to call ContractSendChannelUpdateTransfer.__init__ but got int instead.__proof, balance_proof=data['balance_proof'],"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )\n",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_line": "        InitializationData(unit_data={}, shared=annotation[\"inputs\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 128,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "target_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )"
    ],
    "correct": false,
    "top_five": {
      "0": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "1": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "2": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "3": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "4": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "5": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) );",
      "6": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) );",
      "7": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) );",
      "8": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"])",
      "9": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) );",
      "10": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. Instance[1]: assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]",
      "11": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] after InitializationData.write_assignment_data( unit_data)",
      "12": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.List[Variable[_KT], Variable[_VT]]. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "13": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) );",
      "14": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[KT], shared=annotation[\"inputs\"]",
      "15": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"])",
      "16": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) );",
      "17": "async InitializationData(unit_data= { }, shared=annotation[\"inputs\"]): assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "18": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. Instance[1]: assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"])",
      "19": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "20": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.List[Variable[_KT], Variable[_VT]] instead. InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "21": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] but got InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "22": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[unit_data[unit_data] but shared=annotation[\"inputs\"]",
      "23": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[annotation[\"inputs\"] }",
      "24": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] but got InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "25": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]].write_block_info( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "26": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitData(unit_data): assignment.write_assignment_data( InitializationData(unit_data), shared=annotation[\"inputs\"])",
      "27": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]) )",
      "28": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[unit_data[_KT], Variable[_VT]]] but shared=annotation[\"inputs\"]",
      "29": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. AssignmentData(unit_data)",
      "30": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[unit_data= { }, shared=annotation[\"inputs\"])",
      "31": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[annotation[\"inputs\"] but shared=annotation[",
      "32": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] after InitializationData.write_assignment_data( unit_data)",
      "33": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[KT], shared=annotation[\"inputs\"])",
      "34": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitData(unit_data): assignment.write_assignment_data( InitializationData(unit_data), shared=annotation[\"inputs\"]",
      "35": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[annotation[\"inputs\"])",
      "36": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[annotation[\"inputs\"]",
      "37": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[unit_data[var_id, shared=annotation[\"inputs\"]",
      "38": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitData(unit_data): assignment.write_assignment_data( InitializationData(unit_data)",
      "39": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[unit_data= { }, shared=annotation[\"inputs\"] but shared=annotation[\"inputs\"]",
      "40": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.Dict[unit_data= { }, shared=annotation[\"inputs\"]",
      "41": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.Dict[Variable[_KT], Variable[_VT]] but shared=annotation[\"inputs\"]",
      "42": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[Variable[_KT], shared=annotation[\"inputs\"]",
      "43": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]]. InitData(unit_data): assignment.write_assignment_data( InitializationData(unit_data, shared=annotation[\"inputs\"]",
      "44": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[r, shared=annotation[\"inputs\"]",
      "45": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[R]] but shared=annotation[\"inputs\"]",
      "46": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call type.unit_data but got typing.Dict[Variable[_KT], Variable[_VT]]",
      "47": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] instead. write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "48": "assignment.write_assignment_data( InitializationData[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[unit_data] but got Type.Type[unit_data] but shared=annotation[\"inputs\"]",
      "49": "assignment.write_assignment_data( InitializationData[typing.Dict[str, typing.Any]] for 1st parameter unit_data to call InitializationData.__init__ but got typing.Dict[Variable[_KT], Variable[_VT]] for 2nd parameter unit_data to call typing.List[typing.Dict[st[Variable[_KT], shared=annotation[\"inputs\"])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "target_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_line": "                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 267,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/automagic/windows.py",
    "target_filename": "volatility/framework/automagic/windows.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)"
    ],
    "correct": false,
    "top_five": {
      "0": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "1": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physic_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "2": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "3": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "4": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) if (!hits) {",
      "5": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "6": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "7": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]].scan(context, PageMapScanner(useful), progress_callback)",
      "8": "physical_layer = require.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "9": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "10": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "11": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].toString() hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "12": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].toString() hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "13": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "14": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].toString() hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "15": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].path() hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "16": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physij_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "17": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "18": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer]].scan(context, PageMapScanner(useful), progress_callback)",
      "19": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "20": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer][scan_data](context, PageMapScanner(useful), progress_callback)",
      "21": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].toString() hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "22": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async.params.hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "23": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]].scan(context, PageMapScanner(useful), progress_callback)",
      "24": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) for (var i = 0; i  hits.length; i++) {",
      "25": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async parameter hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "26": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer][physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "27": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].path() hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "28": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer]scan(context, PageMapScanner(useful), progress_callback)",
      "29": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].path() hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "30": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async parameter hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "31": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async.params.hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "32": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].path() hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "33": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer][bytes, int, str].toString() hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "34": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async parameter hits = context.memory[physizable.layer][physical_layer]scan(context, PageMapScanner(useful), progress_callback)",
      "35": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async parameter hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "36": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) progress_callback if (!hits) {",
      "37": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].path() hits = context.memory[physizable.layer]scan(context, PageMapScanner(useful), progress_callback)",
      "38": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] for (var i = 0; i  hits.length; i++) {",
      "39": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer][physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "40": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async.params.hits = context.memory[physizable.layer][physical_layer][bool, bytes, progress_callback)",
      "41": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim()",
      "42": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "43": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer]scan(context, PageMapScanner(useful), progress_callback)",
      "44": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer][scan_path](context, PageMapScanner(useful), progress_callback)",
      "45": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "46": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async.params.hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "47": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str].trim() hits = context.memory[physizable.layer][physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "48": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] async.items[i]] hits = context.memory[physizable.layer].scan(context, PageMapScanner(useful), progress_callback)",
      "49": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physizable.layer][physizable.layer][bool, bytes, int, str]] bool, bytes, int, str] for (var i = 0; i  hits.length; i++) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"\n    return bool(name) and name != '_' and len(name) < min_length\n",
    "target_code": "    \"\"\"\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_line": "    return bool(name) and name != '_' and len(name) < min_length",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/wemake-python-styleguide",
    "source_filename": "wemake_python_styleguide/helpers/variables.py",
    "target_filename": "wemake_python_styleguide/helpers/variables.py",
    "source_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9^",
    "target_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "predictions": [
      "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" }"
    ],
    "correct": false,
    "top_five": {
      "0": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" }",
      "1": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } ;",
      "2": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\"",
      "3": "return bool(name) and name!= '_' and len(name)  min_length: \"\" \" }",
      "4": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').ret(name)",
      "5": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')",
      "6": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '');",
      "7": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')",
      "8": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = positional only parameter to call len but got Optional[str] for 1st positional only parameter to call len but got Optional[str] return bool(name) and name!= '_' and len(name)  min_length: \"\" } name: name }",
      "9": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '')",
      "10": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/');",
      "11": "return bool(name) and name!= '_' and len(name)  min_length: \"\" \" } ;",
      "12": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/function(name) {",
      "13": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" {",
      "14": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '')",
      "15": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '')",
      "16": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(name)",
      "17": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')",
      "18": "return bool(name) and name!= '_' and len(name)  min_length: \"\" \"",
      "19": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/ }",
      "20": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/ \\",
      "21": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '')",
      "22": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/ {",
      "23": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = positional only parameter to call len but got Optional[str] in positional only.toString() return bool(name) and name!= '_' and len(name)  min_length: \"\" }",
      "24": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').retrim()",
      "25": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '');",
      "26": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').retrim()",
      "27": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '')",
      "28": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '').replace(/ \\ W/g, ')",
      "29": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"');",
      "30": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').type(name)",
      "31": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/ ^",
      "32": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/data.replace(name)",
      "33": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '')/> {",
      "34": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(name)",
      "35": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '');",
      "36": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, ')",
      "37": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '').replace(/ \\ W/g, ').ret(name)",
      "38": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(name)",
      "39": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = positional only parameter to call len but got Optional[str] for 1st positional only parameter to call len but got Optional[str] return bool(name) and name!= '_' and len(name)  min_length: \"\" } name || name = name }",
      "40": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '')",
      "41": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '')",
      "42": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ \\ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "43": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '').replace(/ \\ W/g, ')",
      "44": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '\"').replace(/ \\ W/g, '').replace(/ \\ W/g, ');",
      "45": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = url.replace(/ ^ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "46": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = positional only parameter to call len but got Optional[str] for 1st positional only parameter to call len but got Optional[str] return bool(name) and name!= '_' and len(name)  min_length: \"\" } name + name }",
      "47": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/),",
      "48": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '').replace(/ \\ W/g, '\"').replace(/ \\ W/g, ')",
      "49": "return bool(name) and name!= '_' and len(name)  min_length: \"\"\" } name = value.replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(/ \\ s*$/, '').replace(name, '_')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        results = self.fit(model)\n        self._set_running_stage(None, model)\n\n",
    "target_code": "        results = self.fit(model)\n        self._running_stage = None\n\n",
    "warning_line": "        self._set_running_stage(None, model)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `LightningEnum` for 1st positional only parameter to call `Trainer._set_running_stage` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1036,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PyTorchLightning/pytorch-lightning",
    "source_filename": "pytorch_lightning/trainer/trainer.py",
    "target_filename": "pytorch_lightning/trainer/trainer.py",
    "source_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b^",
    "target_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b",
    "predictions": [
      "results = self.fit(model)"
    ],
    "correct": false,
    "top_five": {
      "0": "results = self.fit(model)",
      "1": "results = self.fit(model) for (i = 0, l = model.length; i  l; i++) { self._set_running_stage(None, model)",
      "2": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { self._set_running_stage(None, model)",
      "3": "results = self.fit(model) for (let i = 0; i  self.length; i++) { self._set_running_stage(None, model)",
      "4": "results = self.fit(model) for (i = 0, l = model.length; i  l; i++) { self._set_running_stage(None, model) }",
      "5": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(None, model)",
      "6": "results = self.fit(model) for (let i = 0; i  self.size.length; i++) { self._set_running_stage(None, model)",
      "7": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { const empty = self.get_closest(null) self._set_running_stage(empty, model)",
      "8": "results = self.fit(model) for (let i = 0; i  self._size_stage.length; i++) { self._set_running_stage(None, model)",
      "9": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { self._set_running_stage(None, model) }",
      "10": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { result = self._set_running_stage(None, model)",
      "11": "results = self.fit(model) for (i = 0, l = model.length; i  l; ++i) { self._set_running_stage(None, model)",
      "12": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { self._set_running_stage(null, model) }",
      "13": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], no_running_stage[i]) }",
      "14": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], non_running_stage[i]) }",
      "15": "results = self.fit(model) for (let i = 0; i  self._size_stage_length; i++) { self._set_running_stage(None, model)",
      "16": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], non_running_stage[i])",
      "17": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(null, model) }",
      "18": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { const empty = self.get_closest(null) self._set_running_stage(None, model)",
      "19": "results = self.fit(model) for (let i = 0; i  self._size.length; i++) { self._set_running_stage(None, model)",
      "20": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non-running_stage[i], non-running_stage[i], non-running_stage[i]) }",
      "21": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(None, model) }",
      "22": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { const model = self.get_real_life_stage_number() self._set_running_stage(None, model)",
      "23": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { self._set_running_stage(none, model)",
      "24": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage[i]) }",
      "25": "results = self.fit(model) for (let i = 0; i  self.running_stage_length; i++) { self._set_running_stage(None, model)",
      "26": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i])",
      "27": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self, model)",
      "28": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _lightning_enum) }",
      "29": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], non_running_stage[i], no_running_stage[i]) }",
      "30": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], no_lightning_enum) }",
      "31": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], no_running_stage[i], no_running_stage[i]) }",
      "32": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i]) }",
      "33": "results = self.fit(model) for (let i = 0; i  self.length; i++) { self._set_running_stage(None, model) }",
      "34": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(null, model)",
      "35": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(none, model)) }",
      "36": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(None, model)) }",
      "37": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { self._set_running_stage(null, model)",
      "38": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(none, model)",
      "39": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(None, model)",
      "40": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage[i]]) }",
      "41": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], no_running_stage[i], no_lightning_enum) }",
      "42": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(none, model) }",
      "43": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i])) }",
      "44": "results = self.fit(model) for (let i = 0; i  self._set_running_stage.length; i++) { const empty = self.get_closest(i) self._set_running_stage(empty, model)",
      "45": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(none, model)",
      "46": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _running_stage[i]) }",
      "47": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(null, model)) }",
      "48": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._train_running_stage[i]) }",
      "49": "results = self.fit(model) for (let i = 0; i  self.running_stage.length; i++) { self._set_running_stage(self.model, self.fit(running_stage[i], non_running_stage[i], non_running_stage[i], _self._set_running_stage(None, model) }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "target_code": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_line": "        self.query_ethereum_tokens(tokens, self.balances[S_ETH])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 131,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rotki/rotki",
    "source_filename": "rotkehlchen/blockchain.py",
    "target_filename": "rotkehlchen/blockchain.py",
    "source_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282^",
    "target_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "predictions": [
      "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'total': self.tokens } ) }"
    ],
    "correct": false,
    "top_five": {
      "0": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "1": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "2": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balaances, 'totals': self.totals }",
      "3": "self.owned_eth_tokens.extend(tokens)self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "4": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, own.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "5": "self.own_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "6": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function (key) { return { 'per_account': self.balances, 'totals': self.totals } ) }",
      "7": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals ^",
      "8": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals':self.totals }",
      "9": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totales': self.totals }",
      "10": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) returning { 'per_account': self.balances, 'totals': self.totals }",
      "11": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return \\ 'per_account': self.balances, 'totals': self.totals }",
      "12": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totales }",
      "13": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account':self.balances, 'totals': self.totals }",
      "14": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals \\",
      "15": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances.totals, 'totals': self.totals }",
      "16": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function (key) { return { 'per_account': self.balances, 'totals': self.totals } ) } )",
      "17": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function (token) { return { 'per_account': self.balances, 'totals': self.totals } ) }",
      "18": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function (e) { return { 'per_account': self.balances, 'totals': self.totals } ) }",
      "19": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "20": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) returned { 'per_account': self.balances, 'totals': self.totals }",
      "21": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).remove() } return { 'per_account': self.balances, 'totals': self.totals }",
      "22": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balaances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "23": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return } 'per_account': self.balances, 'totals': self.totals }",
      "24": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function () { return { 'per_account': self.balances, 'totals': self.totals } ) }",
      "25": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals {",
      "26": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': own.balances, 'totals': self.totals }",
      "27": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return ^ 'per_account': self.balances, 'totals': self.totals }",
      "28": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } ); }",
      "29": "self_owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "30": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } ) }",
      "31": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, internal_tokens.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "32": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, totals': self.totals } )",
      "33": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, internal_blockchain.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "34": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens,self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "35": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(txn.tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "36": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': own.totals }",
      "37": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) returns { 'per_account': self.balances, 'totals': self.totals }",
      "38": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(blockchain.tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "39": "self.owned_eth_tokens.extend(tokens) own.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "40": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balance, 'totals': self.totals }",
      "41": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { per_account': self.balances, 'totals': self.totals } )",
      "42": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balanced, 'totals': self.totals }",
      "43": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function (e) { return { 'per_account': self.balances, 'totals': self.totals } ) } )",
      "44": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function (token) { return { 'per_account': self.balances, 'totals': self.totals } ) } )",
      "45": "self.owned_eth_tokens.extend(tokens) selbst.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "46": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]).forEach(function () { return { 'per_account': self.balances, 'totals': self.totals } ) } )",
      "47": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'persoan': self.balances, 'totals': self.totals }",
      "48": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(obj, tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "49": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, yourself.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    assert {} == load_data(\n        datadir='',\n        pairs=[],\n",
    "target_code": "    assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_line": "        datadir='',",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 373,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "tests/data/test_history.py",
    "target_filename": "tests/data/test_history.py",
    "source_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf^",
    "target_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "predictions": [
      "assert { } == load_data( datadir='', pairs=[],"
    ],
    "correct": false,
    "top_five": {
      "0": "assert { } == load_data( datadir='', pairs=[],",
      "1": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )",
      "2": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )/g, pairs=[],",
      "3": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "4": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\.replace( datadir, pairs=[],",
      "5": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ ) /g, pairs=[],",
      "6": "assert { } == load_data( path.join('')).replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '')",
      "7": "assert { } == load_data( path.join('')).replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '')",
      "8": "assert { } == load_data( path.join('')).replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )",
      "9": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ )",
      "10": "assert { } == load_data( path.join('')).replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )/g, pairs=[],",
      "11": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ )/g, pairs=[],",
      "12": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ )",
      "13": "assert { } == load_data( path.join('')).replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, '').replace(/ \\ r/g, ')",
      "14": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )",
      "15": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ )/g, pairs=[],",
      "16": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )/g, pairs=[],",
      "17": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\, pairs=[],",
      "18": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ /g, pairs=[],",
      "19": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ se, pairs=[],",
      "20": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )",
      "21": "assert { } == load_data( path.join('')).replace(/ \\ t/g, '').replace(/ \\ t/g, '').replace(/ \\ t/g, '').replace(/ \\ t/g, '').replace(/ \\ t/g, '').replace(/ \\ t/g, '').replace(/ \\ t/g, '')",
      "22": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )/g, pairs=[],",
      "23": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ datadir=''''', pairs=[],",
      "24": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, datadir, pairs=[],",
      "25": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ /gb, pairs=[],",
      "26": "assert { } == load_data( path.join('')).replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, '').replace(/ \\ n/g, ')",
      "27": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )",
      "28": "assert { } == load_data( path.join('')).replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\.replace( datadir, pairs=[],",
      "29": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )/g, pairs=[],",
      "30": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, pairs=[],",
      "31": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^.replace( datadir, pairs=[],",
      "32": "assert { } == load_data( path.join('')).replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "33": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s/gb, datadir, pairs=[],",
      "34": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, datadir='''''')",
      "35": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s/g, pairs=[],",
      "36": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\.replace( datadir, pairs=[],",
      "37": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\.replace( datadir, pairs=[],",
      "38": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ ) {",
      "39": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '');",
      "40": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '');",
      "41": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ datadir=''''');",
      "42": "assert { } == load_data( path.join('')).replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ ) /g, pairs=[],",
      "43": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ ) /g, pairs=[],",
      "44": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "45": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\, ''''''''');",
      "46": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '');",
      "47": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ ^ s+/g, '').replace(/ \\ ) /g, pairs=[],",
      "48": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ datadir='''', pairs=[],",
      "49": "assert { } == load_data( path.join('')).replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ s+/g, '').replace(/ \\ )? }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
    "target_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_line": "        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/cli/simple_table.py",
    "target_filename": "airflow/cli/simple_table.py",
    "source_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3^",
    "target_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "predictions": [
      "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)"
    ],
    "correct": false,
    "top_five": {
      "0": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "1": "rows = [d.values() for d in data] output = data.views.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "2": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "3": "rows = [d.values() for d in data] output = tableform.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "4": "rows = [d.values() for d in data] output = union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "5": "rows = [d.values() for d in data] output = tabletop[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "6": "rows = [d.values() for d in data] output = tableview(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "7": "rows = [d.values() for d in data] output = tabletop(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "8": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate print(output)",
      "9": "rows = [d.values() for d in data] output = data.lookup(tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "10": "rows = [d.values() for d in data] output = data.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "11": "rows = [d.values() for d in data] output = data.view.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "12": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 2nd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "13": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] print(output)",
      "14": "rows = [d.values() for d in data] output = tableauger(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "15": "rows = [d.values() for d in data] output = tabletop[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] print(output)",
      "16": "rows = [d.values() for d in data] output = union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate print(output)",
      "17": "rows = [d.values() for d in data] output = tableaugur(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "18": "rows = [d.values() for d in data] output = data.viz.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "19": "rows = [d.values() for d in data] output = union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] print(output)",
      "20": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "21": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers = data[0].keys()) print(output)",
      "22": "rows = [d.values() for d in data] output = data.formatOutput(tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "23": "rows = [d.values() for d in data] output = data.view.format(tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "24": "rows = [d.values() for d in data] output = data.form(tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "25": "rows = [d.values() for d in data] output = tabletop[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "26": "rows = [d.values() for d in data] output = tableaug(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "27": "rows = [d.values() for d in data] output = union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "28": "rows = [d.values() for d in data] output = tabletop[tabular.format.rows, t](rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "29": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 4th parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "30": "rows = [d.values() for d in data] output = data.form[tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()] print(output)",
      "31": "rows = [d.values() for d in data] output = tabletoptabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "32": "rows = [d.values() for d in data] output = typeof output === tabulate (rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "33": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 2nd parameter headers to call tabulate but got typing.KeysView[typing.Any] print(output)",
      "34": "rows = [d.values() for d in data] output = data.formatOutput(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "35": "rows = [d.values() for d in data] output = data.viz.run(tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "36": "rows = [d.values() for d in data] output = tabletop[Rows.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()]) print(output)",
      "37": "rows = [d.values() for d in data] output = tabletop.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "38": "rows = [d.values() for d in data] output = tabletopExample(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "39": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 1st parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "40": "rows = [d.values() for d in data] output = Tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "41": "rows = [d.values() for d in data] output = tablefmt(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "42": "rows = [d.values() for d in data] output = tablemap(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "43": "rows = [d.values() for d in data] output = tableform(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "44": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 3rd parameter headers to call tabulate (rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "45": "rows = [d.values() for d in data] output = data.replace(tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "46": "rows = [d.values() for d in data] output = tableform[rows, tablefmt=\"plain\", headers=data[0].keys()] print(output)",
      "47": "rows = [d.values() for d in data] output = Union[Dict[str, str], typing.Sequence[str], str] for 6th parameter headers to call tabulate but got typing.KeysView[typing.Any] output = print(output)",
      "48": "rows = [d.values() for d in data] output = graph.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "49": "row = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
    "target_code": "                r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            except TypeError:\n                intersection_of.append(ont.get_term(typing.cast(str, item)))\n        return frozenset(intersection_of)\n",
    "warning_line": "                intersection_of.append(ont.get_term(item))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 441,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/term.py",
    "target_filename": "pronto/term.py",
    "source_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8^",
    "target_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "predictions": [
      "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)"
    ],
    "correct": false,
    "top_five": {
      "0": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "1": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "2": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "3": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "4": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except typeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "5": "r, t = item intersection_of.append(ont.get_relationship(r), t.get_term(item)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "6": "r, t = item intersection_of.append(ont.get_relationship(r, ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "7": "t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "8": "r, t = item intersection_of.append(ont.get_relationship(r), t) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "9": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except typeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "10": "r, t = item intersection_of.append(ont.get_relationship(r), t.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "11": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(t.get_term(item)) return frozenset(intersection_of)",
      "12": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(item)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "13": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t))except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "14": "r, t = item intersection_of.append(ont.get_relationship(r, ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "15": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(on.get_term(item)) return frozenset(intersection_of)",
      "16": "r, t = item intersection_of.append(ont.get_relationship(r), t.get_term(item)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "17": "if (item) intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "18": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) exception TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "19": "r, t = item intersection_of.append(ont.get_relationship(r)), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "20": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) Except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "21": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)).then(r, t) return frozenset(intersection_of)",
      "22": "r, t = item intersection_of.append(ont.get_relationship(r), o.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "23": "r, t = item intersection_of.append(ont.get_relationship(r, t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "24": "r, t = item intersection_of.append(ont.get_relationship(r), ot.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "25": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)).then(t) return frozenset(intersection_of)",
      "26": "t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "27": "r, t = item intersection_of.append(ont.get_relationship(r), oont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "28": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)).remove() return frozenset(intersection_of)",
      "29": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)).then(r, t) return frozenset(intersection_of)",
      "30": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ontology.get_term(item)) return frozenset(intersection_of)",
      "31": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_to(item)) return frozenset(intersection_of)",
      "32": "r, t = item intersection_of.append(ont.get_relationship(r), ol_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "33": "r, t = item intersection_of.append(ont.get_relationship(r), t.get_term(item)) except TypeError: intersection_of.append(t.get_term(item)) return frozenset(intersection_of)",
      "34": "r, t = item intersection_of.append(on.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "35": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(item)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "36": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except typeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "37": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t))except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "38": "r, t = item intersection_of.append(ont.get_relationship(t), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "39": "r, t = item intersection_of.append(ont.get_relationship(r, ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "40": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(font.get_term(item)) return frozenset(intersection_of)",
      "41": "r, t = item intersection_of.append(ont.get_relationship(r), t) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "42": "ret = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "43": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(onto.get_term(item)) return frozenset(intersection_of)",
      "44": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(object)) return frozenset(intersection_of)",
      "45": "r, t = item intersection_of.append(ont.get_relationship(r), t.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "46": "err = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "47": "l = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "48": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)).remove() return frozenset(intersection_of)",
      "49": "r, t = item intersection_of.append(ont.get_relationship(r, t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    target1, target2 = _get_targets(var, get_players(var), player)\n\n",
    "target_code": "\n    target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_line": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/roles/madscientist.py",
    "target_filename": "src/roles/madscientist.py",
    "source_changeid": "3b3870c9f365944134225c5b7364430c5bce0158^",
    "target_changeid": "3b3870c9f365944134225c5b7364430c5bce0158",
    "predictions": [
      "target1, target2 = _get_targets(var, get_players(var), player)"
    ],
    "correct": false,
    "top_five": {
      "0": "target1, target2 = _get_targets(var, get_players(var), player)",
      "1": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "2": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { const { a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "3": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,tooltip:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "4": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":6,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "5": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":3,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "6": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:true,\"wrap-lines\":true } ",
      "7": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":2,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "8": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:false,\"wrap-lines\":true } ",
      "9": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":5,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "10": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,light:true,light:false,\"wrap-lines\":true } ",
      "11": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":4,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "12": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\"\", \"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "13": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false\",wrap-lines\":true } ",
      "14": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links\":true,light:false,\"wrap-lines\":true } ",
      "15": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null\",smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "16": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,auto-links\":true,light:false,\"wrap-lines\":true } ",
      "17": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlighted:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "18": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:true,light:true,\"wrap-lines\":true } ",
      "19": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,light:true,light:true,light:false,\"wrap-lines\":true } ",
      "20": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true ^ ",
      "21": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-line\":true } ",
      "22": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,tooltips:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "23": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:true,\"wrap-lines\":false } ",
      "24": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:false,\"auto-links\":false,\"wrap-lines\":true } ",
      "25": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":6,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "26": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":3,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "27": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\" } ; }",
      "28": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true \\ ",
      "29": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-length\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "30": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"auto-lines\":false,\"soft-lines\":true } ",
      "31": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"auto-lines\":false,\"soft-lines\":true } ",
      "32": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,collapse:false,\"auto-links\":true,light:true,light:true,\"wrap-lines\":true } ",
      "33": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\" } ;",
      "34": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":false } ",
      "35": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:true,light:false,\"wrap-lines\":true } ",
      "36": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:false,auto:true, player:false,\"wrap-lines\":true } ",
      "37": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:true,collapse:false,\"wrap-lines\":true } ",
      "38": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"auto-lines\":false,\"wrap-lines\":true } ",
      "39": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,tool:true,collapse:false,\"auto-links\":true,light:true,\"wrap-lines\":true } ",
      "40": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\": true } ",
      "41": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tab\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:true,\"wrap-lines\":true } ",
      "42": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true { ",
      "43": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",light:false,light:true, player:false,\"wrap-lines\":true } ",
      "44": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\",tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,\"wrap-lines\":true } ",
      "45": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false\", user:false } ",
      "46": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\") { ",
      "47": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { const { a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,toolbar:true,collapse:false\",auto-links:true,light:false,\"wrap-lines\":true } ",
      "48": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { const { a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\":4,ruler:false,gutter:true,tooltip:true,collapse:false,\"auto-links\":true,light:false,\"wrap-lines\":true } ",
      "49": "if (!window.SyntaxHighlighter) { var SyntaxHighlighter=function() { var a= { defaults: { \"class-name\":\"\",\"first-line\":1,highlight:null,\"smart-tabs\":true,\"tab-size\",ruler:false,gutter:true,toolbar:true,collapse:false,\"auto-links\":true,light:true,\"wrap-lines\":true } "
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "target_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_line": "    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 115,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "datatheorem/strongarm",
    "source_filename": "tests/utils.py",
    "target_filename": "tests/utils.py",
    "source_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36^",
    "target_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "predictions": [
      "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)"
    ],
    "correct": false,
    "top_five": {
      "0": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "1": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "2": "bin = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "3": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalysiszer.get_analyzer(binary)",
      "4": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyticer.get_analyzer(binary)",
      "5": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyser = MachoAnalyzer.get_analyzer(binary)",
      "6": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "7": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyticzer.get_analyzer(binary)",
      "8": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary BUT got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "9": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinaryAnalyzer but got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "10": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinarysondern got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "11": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Option(binary)",
      "12": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option(binary)",
      "13": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary actually got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "14": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary).get_item_from_binary analyzer = MachoAnalyzer.get_analyzer(binary)",
      "15": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.Analyzer but got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "16": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.macho_binary.",
      "17": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary Analyzer but got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "18": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(compiled_code_bin_path, strongarm.macho.macho_binary.MachoBinary)",
      "19": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.macho.macho_binary",
      "20": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_ananalyzer(binary)",
      "21": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.macho_binary",
      "22": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.macho.",
      "23": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Optional[arm.macho.macho.macho.",
      "24": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary instead of typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "25": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Optional[strongarm.macho.macho.macho_binary",
      "26": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Option[arm.macho.macho.macho_binary.",
      "27": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary although got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "28": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Optional[arm.macho.macho.macho_binary",
      "29": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Option[arm.macho.macho.macho.",
      "30": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[macho.macho.macho.macho_binary",
      "31": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Optional[arm.macho.macho.macho.macho_binary",
      "32": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary else got typing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "33": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typeing.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "34": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Option[arm.macho.macho.macho_binary",
      "35": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Option[arm.macho.macho.",
      "36": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] only parameter to call strongarm.macho_binary.Malyzer.",
      "37": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.macho_binary.Binary",
      "38": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Optional[arm.macho.macho.macho_binary.",
      "39": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got type.Optional[strongarm.macho.macho_binary.MachoBinary]",
      "40": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got type.Option(binary)",
      "41": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Optional[arm.macho.macho.",
      "42": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got type.option[strongarm.macho.macho_binary.MachoBinary]",
      "43": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typeing.Optional[arm.macho.macho.macho.",
      "44": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.macho.macho.",
      "45": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binARY)",
      "46": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] only parameter to call strongarm.macho.macho_binary.MachoBinary",
      "47": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Optional[arm.macho.macho.macho.macho.",
      "48": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] but got typing.Option[arm.macho.macho.",
      "49": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary, 1st position only parameter to call strongarm.macho.macho_binary.MachoBinary but got typing.Optional[strongarm.macho.macho_binary.MachoBinary] tweeted by @analyzer"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "target_code": "                continue\n            assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_line": "            self.__check_destination_memo(account_resp, index, destination)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 410,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/server.py",
    "target_filename": "stellar_sdk/server.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "continue self.__check_destination_memo(account_resp, index, destination)"
    ],
    "correct": false,
    "top_five": {
      "0": "continue self.__check_destination_memo(account_resp, index, destination)",
      "1": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[str, typing.Any]) {",
      "2": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] after 2nd position only parameter to call Server.Any, Dict[str, typing.Any]",
      "3": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Coroutine[typing.Any, Dict[str, typing.Any]",
      "4": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Uniform[typing.Any, Dict[str, typing.Any]",
      "5": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[typing.Any]) {",
      "6": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] after 2nd position only parameter to call Server.Any, Dict[str, typing.Any] }",
      "7": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] instead of Union[Coroutine[typing.Any, Dict[str, typing.Any]",
      "8": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]; }",
      "9": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] after 2nd position only parameter to call Server.Any, Dict[str, Typing.Any]",
      "10": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Coroutine[typing.Any, Dict[str, typing.Any] but not implemented",
      "11": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Unicode[str, typing.Any] but not implemented",
      "12": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got 6th position only parameter to call Server.Any, Dict[str, typing.Any]",
      "13": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Unicode[str, typing.Any]",
      "14": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination)? self.__check_destination_memo[i]) : return (self.__check_destination_memo[typing.Any, Dict[st[d, typing.Any]) {",
      "15": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got String[typing.Any, typing.Any] but not implemented",
      "16": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Dict[str, typing.Any] but not implemented",
      "17": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[i], index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any], Dict[str, typing.Any]) {",
      "18": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got West[Coroutine[typing.Any, Dict[str, typing.Any]",
      "19": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[i], index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any], Dict[st[typing.Any, Dict[str, typing.Any]) {",
      "20": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[typing.Any], Dict[st[str, typing.Any]) {",
      "21": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[st[d, typing.Any], Dict[st[typing.Any]) {",
      "22": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[str, typing.Any]); }",
      "23": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return ((i!== self.__check_destination_memo[i])? self.__check_destination_memo[i]) : self.__check_destination_memo[index, destination)",
      "24": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got West[Canada[typing.Any, Dict[str, typing.Any]",
      "25": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[st[typing.Any], Dict[st[typing.Any]) {",
      "26": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] after 2nd position only parameter to call Server.Any, Dict[str, Typing.Any] }",
      "27": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[typing.Any], Dict[st[str, typing.Any]) }",
      "28": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Coroutine[typing.Any, Dict[str, Typing.Any]",
      "29": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Coroutine[typing.Any, Dict[str, typing.Any] instead",
      "30": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] instead of Dict[typing.Any, Dict[str, typing.Any]",
      "31": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Any",
      "32": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[st[tr, Dict[str, typing.Any]) {",
      "33": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] instead of Union[Coroutine[typing.Any, Dict[str, Typing.Any]",
      "34": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got 6th position only parameter to call Server._mo",
      "35": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[str, typing.Any]) }",
      "36": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Uniform[typing.Any, Dict[str, typing.Any] but not implemented",
      "37": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return ((i  self.__check_destination_memo[i])? self.__check_destination_memo[i]) : self.__check_destination_memo[index, destination)",
      "38": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] after 2nd position only parameter to call Server.Any, Dict[str, typing.Any] } )",
      "39": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[typing.Any, Dict[st[str, typing.Any]) {",
      "40": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return self.__check_destination_memo(account_resp, index, destination)",
      "41": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[typing.Any], Dict[st[str, typing.Any])",
      "42": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] after 2nd position only parameter to call Server.Any, Dict[str, typing.Any] } ",
      "43": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Unicode[str, typing.Any] but did not implemented",
      "44": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got West[Coroutine[typing.Any, Dict[str, Typing.Any]",
      "45": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Uniform[typing.Any, Dict[str, Typing.Any]",
      "46": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[str, Dict[st[typing.Any]) {",
      "47": "continue self.__check_destination_memo(account_resp, index, destination) for 1st position only parameter to call Server._Server__check_destination_memo but got Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]] but got Dict[str, typing.Any]",
      "48": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[st[dct[str, typing.Any]) {",
      "49": "for (var i = 0; i  self.__check_destination_memo[i]) { if (!self.__check_destination_memo[i]) { return (self.__check_destination_memo[account_resp, index, destination) && typeof self.__check_destination_memo[i] === Dict[typing.Any, typing.Any, Dict[st[d, typing.Any, Dict[st[typing.Any]) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_line": "                    else is_true(simplify(condition))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1357,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "if type(condition) == bool else is_true(simplify(condition)) )"
    ],
    "correct": false,
    "top_five": {
      "0": "if type(condition) == bool else is_true(simplify(condition)) )",
      "1": "if type(condition) == bool else is_true(simplify(condition))",
      "2": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "3": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "4": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "5": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "6": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "7": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ');",
      "8": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "9": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ');",
      "10": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/,'mythril.laser.smt.expression.replace/').replace(/ \\ $/,'mythril.laser.smt.expression.bool')",
      "11": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/,'mythril.laser.smt.expression.replace/').replace(/ \\ $/,'mythril.laser.smt.expression.bool')",
      "12": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "13": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '')",
      "14": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')/g, condition)",
      "15": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '')",
      "16": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "17": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '')",
      "18": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')/g, condition)",
      "19": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '')",
      "20": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "21": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "22": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "23": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, ')",
      "24": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "25": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "26": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, ')",
      "27": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "28": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/,'mythril.laser.smt.expression.concat(condition)).replace(/ \\ $/,'mythril.laser.smt.expression.concat(condition)))",
      "29": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, ')",
      "30": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "31": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, ')",
      "32": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '')",
      "33": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ','mythril.las, ''');",
      "34": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, ');",
      "35": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "36": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ''mythril.lasmt.')",
      "37": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')/g,'mythril.las, ''');",
      "38": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ');",
      "39": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ');",
      "40": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')",
      "41": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '');",
      "42": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, ');",
      "43": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ','mythril.las, ''');",
      "44": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, ');",
      "45": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ');",
      "46": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ')/g,'mythril.las, ''');",
      "47": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ''mythril.lasmt.')",
      "48": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, ');",
      "49": "if type(condition) == bool else is_true(simplify(condition)) ) condition = mythril.laser.smt.expression.replace(/ ^ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ \\ $/, '').replace(/ ^ $/, '').replace(/ \\ $/, ');"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "target_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_line": "                    cmd [\"singularity\", \"build\", name,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/singularity.py",
    "target_filename": "cwltool/singularity.py",
    "source_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61^",
    "target_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "predictions": [
      "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]"
    ],
    "correct": false,
    "top_five": {
      "0": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "1": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])]",
      "2": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "3": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "4": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "5": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "6": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "7": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])); cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "8": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "9": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])]",
      "10": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "11": "name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "12": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "13": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>/style> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "14": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) for (var i = 0; i  cmd.length; i++) { cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "15": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "16": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "17": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { ^ \".format(dockerRequirement[\"dockerLoad\"])]",
      "18": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])); cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "19": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) >> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "20": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])>> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "21": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\".singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "22": "name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"])) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "23": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// \\ } \".format(dockerRequirement[\"dockerLoad\"])]",
      "24": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) if (!list.__getitem__) return cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "25": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>/str> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "26": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])].trim() cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "27": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>p> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "28": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\" cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "29": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>/span> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "30": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [ \"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "31": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "32": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "33": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])) cmd [\"singularity\", \"build\", name, \"docker-archive:// { ^ \".format(dockerRequirement[\"dockerLoad\"])]",
      "34": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive/ { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "35": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\u201d cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "36": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])>/style> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "37": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>/singular> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "38": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>/sync> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "39": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd[\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "40": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) > 0) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "41": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\u00bb cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "42": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "43": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) ] cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "44": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])>/singularity> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "45": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { ^ \".format(dockerRequirement[\"dockerLoad\"])]",
      "46": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])) cmd [\"singularity\", \"build\", name, \"docker-archive:// \\ } \".format(dockerRequirement[\"dockerLoad\"])]",
      "47": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] command[\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "48": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])) cmd [\"singularity\", \"build\", name, \"docker-archive/ { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "49": "name = \" { ^.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// \\ } \".format(dockerRequirement[\"dockerLoad\"])]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\\n')\n    elif not order+'\\n' in target:\n",
    "target_code": "    if '--out' in sys.argv:\n        outfile.write(order+'\\n')\n    elif not order+'\\n' in target:\n",
    "warning_line": "        outfile.write(order.encode('utf8')+'\\n')",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 82,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "psychopy/psychopy",
    "source_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "target_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3^",
    "target_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "predictions": [
      "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:"
    ],
    "correct": false,
    "top_five": {
      "0": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "1": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') return elif not order+' \\ n' in target:",
      "2": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(bytes+' \\ n') elif not order+' \\ n' in target:",
      "3": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') params = outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "4": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(str).to.eql(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "5": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') argv.str(outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "6": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') io.TextIOBase.write(outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "7": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(bytes) elif not order+' \\ n' in target:",
      "8": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') parseInt(sys.argv[6]) elif not order+' \\ n' in target:",
      "9": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') return sys.argv[0] elif not order+' \\ n' in target:",
      "10": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') sys.argv[0] outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "11": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(str).to.eql(writeOutfile(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "12": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(bytes+' \\ n' in target:",
      "13": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(bytes+' \\ n' in target: elif not order+' \\ n' in target:",
      "14": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') downstream.write(outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "15": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') init(); if not order+' \\ n' in target:",
      "16": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') null if not order+' \\ n' in target:",
      "17": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') write(bytes) elif not order+' \\ n' in target:",
      "18": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') io.TextIOBase.write(outfile.write(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "19": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') parseInt(str, order) elif not order+' \\ n' in target:",
      "20": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') argv.str(outfile.write(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "21": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(str).to.eql(str); if not order+' \\ n' in target:",
      "22": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(argv[0]+' \\ n') elif not order+' \\ n' in target:",
      "23": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') params.push( { type:'string' } ) elif not order+' \\ n' in target:",
      "24": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') init() elif not order+' \\ n' in target:",
      "25": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') try { if not order+' \\ n' in target:",
      "26": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') parseInt(str, order, elif not order+' \\ n' in target:",
      "27": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(args[0]+' \\ n') elif not order+' \\ n' in target:",
      "28": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') decode(bytes, '') elif not order+' \\ n' in target:",
      "29": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') require('./sys/argv') elif not order+' \\ n' in target:",
      "30": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(str).to.eql(elif not order+' \\ n' in target:",
      "31": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') write_block(outfile,'\\ n') elif not order+' \\ n' in target:",
      "32": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') downstream.write(outfile.write(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "33": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(el).toEqual(str, order) elif not order+' \\ n' in target:",
      "34": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(el).toEqual(str, order); if not order+' \\ n' in target:",
      "35": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') for (var i = 0; i bytes; i++) { elif not order+' \\ n' in target:",
      "36": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') null elif not order+' \\ n' in target:",
      "37": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(el).toEqual(str); if not order+' \\ n' in target:",
      "38": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') formatError(err) elif not order+' \\ n' in target:",
      "39": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(str).to.eql(str); if not order+' \\ n' in target:",
      "40": "if '--out' in sys.argv: sys.argv.write(outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "41": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') if not order+' \\ n' in target:",
      "42": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') expect(str).to.eql(str+' \\ n') elif not order+' \\ n' in target:",
      "43": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') return el if not order+' \\ n' in target:",
      "44": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') require('./sys-argv'); if not order+' \\ n' in target:",
      "45": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') outfile.write(bytes+' \\ n' in target: sys.argv } )",
      "46": "if '--out' in sys.argv: sys.argv.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "47": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') write_block(outfile, elif not order+' \\ n' in target:",
      "48": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') writes(bytes) elif not order+' \\ n' in target:",
      "49": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') for (var i = 0; i bytes; ++i) { elif not order+' \\ n' in target:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n\n",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            state[config.url_id] = scrapper_stat\n\n",
    "warning_line": "        state[config.url_id] = scrapper_stat",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "obsei/obsei",
    "source_filename": "obsei/source/reddit_scrapper.py",
    "target_filename": "obsei/source/reddit_scrapper.py",
    "source_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c^",
    "target_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "predictions": [
      "last_index = since_id state[config.url_id] = scrapper_stat"
    ],
    "correct": false,
    "top_five": {
      "0": "last_index = since_id state[config.url_id] = scrapper_stat",
      "1": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } ",
      "2": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[!",
      "3": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str",
      "4": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got optional ||",
      "5": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got Optional[str",
      "6": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got Optional but got from str",
      "7": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got Optional.callstr",
      "8": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got Optional[str] +!",
      "9": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key ||",
      "10": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key ||",
      "11": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got Optional[str] =!",
      "12": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! delete",
      "13": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key ||",
      "14": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! delete state",
      "15": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[i] = _.last_item_str but got Optional but got from str",
      "16": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! delete state[",
      "17": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state",
      "18": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[",
      "19": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[",
      "20": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state",
      "21": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key ||",
      "22": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str delete",
      "23": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got Optional[str] = statstr",
      "24": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } delete",
      "25": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str delete state",
      "26": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str delete state[",
      "27": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key|",
      "28": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } delete state",
      "29": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } delete state[",
      "30": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } state[",
      "31": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } state",
      "32": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got optional || state[",
      "33": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got optional || state",
      "34": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key|",
      "35": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got optional || delete",
      "36": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key =",
      "37": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key ||",
      "38": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key|",
      "39": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str state[key =",
      "40": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got optional || delete state",
      "41": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[keyword_id",
      "42": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str_stat: last_index } state[key ||",
      "43": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.last_item_str but got optional || delete state[",
      "44": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[link_",
      "45": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[keyword_id",
      "46": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[link",
      "47": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! delete state[link",
      "48": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[keyword_id",
      "49": "last_index = since_id state[config.url_id] = scrapper_stat for (var i = 0; i  dict.length; i++) { last_index = since_id state[i] = config.url_id state[key] = _.last_item_str state[key] = _.last_item_str state[key] = _.get_item_from_str buttons[! state[link_id"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            data,\n            1337,\n            'promote',\n",
    "target_code": "            data,\n            UserID(1337),\n            'promote',\n",
    "warning_line": "            1337,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `UserID` for 2nd positional only parameter to call `JubeatProp._modify_profile` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/tests/test_JubeatProp.py",
    "target_filename": "bemani/tests/test_JubeatProp.py",
    "source_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7^",
    "target_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7",
    "predictions": [
      "data, 1337, 'promote',"
    ],
    "correct": false,
    "top_five": {
      "0": "data, 1337, 'promote',",
      "1": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "2": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "3": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "4": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "5": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "6": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "7": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "8": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "9": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "10": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "11": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "12": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "13": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "14": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "15": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "16": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "17": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1274, 1337, 'promote',",
      "18": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "19": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1274, 1337, 'promote',",
      "20": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "21": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1274, 1337, 'promote',",
      "22": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "23": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1273, data, 1337, 'promote',",
      "24": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1255, 1337, 'promote',",
      "25": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1255, 1337, 'promote',",
      "26": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1274, 1337, 'promote',",
      "27": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1255, 1337, 'promote',",
      "28": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1274, 1337, 'promote',",
      "29": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1273, data, 1337, 'promote',",
      "30": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1255, 1337, 'promote',",
      "31": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1234, 1337, 'promote',",
      "32": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1254, 1337, 'promote',",
      "33": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1254, 1337, 'promote',",
      "34": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "35": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional parameter to call JubeatProp._modify_profile but got int.1274, 1337, 'promote',",
      "36": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1254, 1337, 'promote',",
      "37": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1255, 1337, 'promote',",
      "38": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1254, 1337, 'promote',",
      "39": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor user_id for 2nd positional parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "40": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional parameter to call JubeatProp._modify_profile but got int.1255, 1337, 'promote',",
      "41": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID.only for 2nd positional parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "42": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1276, 1337, 'promote',",
      "43": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1276, 1337, 'promote',",
      "44": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID.only for 2nd positional parameter to call JubeatProp._modify_profile but got int.1275, 1337, 'promote',",
      "45": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1254, 1337, 'promote',",
      "46": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user.id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1337, 'promote',",
      "47": "data, 1337.bind(null, null) neither data nor props._modify_profile nor user_id for 2nd positional only parameter to call JubeatProp._modify_profile but got int.1338, 'promote',",
      "48": "data, 1337.bind(null, null) neither data nor prop._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int.1276, 1337, 'promote',",
      "49": "data, 1337.bind(null, null) neither data nor props._modify_profile nor UserID for 2nd positional parameter to call JubeatProp._modify_profile but got int instead. 1337, 'promote',"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "target_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_line": "                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 547,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "electrumsv/electrumsv",
    "source_filename": "examples/applications/restapi/handler_utils.py",
    "target_filename": "examples/applications/restapi/handler_utils.py",
    "source_changeid": "2132e0922ed952c7eb61f639b57182657532a757^",
    "target_changeid": "2132e0922ed952c7eb61f639b57182657532a757",
    "predictions": [
      "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):"
    ],
    "correct": false,
    "top_five": {
      "0": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):",
      "1": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2):",
      "2": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_new_keys(CHANGE_SUBPATH, count=split_count):",
      "3": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2)",
      "4": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_fix_keys(CHANGE_SUBPATH, count=split_count):",
      "5": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_update_keys(CHANGE_SUBPATH, count=split_count):",
      "6": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_refresh_keys(CHANGE_SUBPATH, count=split_count):",
      "7": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_current_keys(CHANGE_SUBPATH, count=split_count):",
      "8": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_big_keys(CHANGE_SUBPATH, count=split_count):",
      "9": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_clear_keys(CHANGE_SUBPATH, count=split_count):",
      "10": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_keys(CHANGE_SUBPATH, count=split_count):",
      "11": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_original_keys(CHANGE_SUBPATH, count=split_count):",
      "12": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_custom_keys(CHANGE_SUBPATH, count=split_count):",
      "13": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_clean_keys(CHANGE_SUBPATH, count=split_count):",
      "14": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_real_keys(CHANGE_SUBPATH, count=split_count):",
      "15": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_account_keys(CHANGE_SUBPATH, count=split_count):",
      "16": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_generate_keys(CHANGE_SUBPATH, count=split_count):",
      "17": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_digit_keys(CHANGE_SUBPATH, count=split_count):",
      "18": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_fixtures(CHANGE_SUBPATH, count=split_count):",
      "19": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_unique_keys(CHANGE_SUBPATH, count=split_count):",
      "20": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_set_keys(CHANGE_SUBPATH, count=split_count):",
      "21": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): count = 0;",
      "22": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_main_keys(CHANGE_SUBPATH, count=split_count):",
      "23": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): count = base_count",
      "24": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_derivation_path(CHANGE_SUBPATH, count=split_count):",
      "25": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_transition_keys(CHANGE_SUBPATH, count=split_count):",
      "26": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2);",
      "27": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_extra_keys(CHANGE_SUBPATH, count=split_count):",
      "28": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_change_keys(CHANGE_SUBPATH, count=split_count):",
      "29": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_good_keys(CHANGE_SUBPATH, count=split_count):",
      "30": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_generated_keys(CHANGE_SUBPATH, count=split_count):",
      "31": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_old_keys(CHANGE_SUBPATH, count=split_count):",
      "32": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): key = [key.derivation_data];",
      "33": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_version_keys(CHANGE_SUBPATH, count=split_count):",
      "34": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_special_keys(CHANGE_SUBPATH, count=split_count):",
      "35": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = bytes but got Optional[bytes]",
      "36": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_transition_keys(CHANGE_SUBPATH, count=transition_keys):",
      "37": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): key = [key.derivation_data[1]];",
      "38": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_escape_keys(CHANGE_SUBPATH, count=split_count):",
      "39": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_git_keys(CHANGE_SUBPATH, count=split_count):",
      "40": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): count=split_count",
      "41": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_custom_names(CHANGE_SUBPATH, count=split_count):",
      "42": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_derivation_keys(CHANGE_SUBPATH, count=split_count):",
      "43": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_liquid_keys(CHANGE_SUBPATH, count=split_count):",
      "44": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_master_keys(CHANGE_SUBPATH, count=split_count):",
      "45": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_cookies(CHANGE_SUBPATH, count=split_count):",
      "46": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_first_keys(CHANGE_SUBPATH, count=split_count):",
      "47": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_current_version(CHANGE_SUBPATH, count=split_count):",
      "48": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): count = 100;",
      "49": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2): for key in account.get_access_token(KEY.DESCRIPTION_PATH, count=split_count):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        return Interpreter(self.pipeline, context=init_context, config=self.config)\n\n",
    "target_code": "\n        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_line": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 190,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crownpku/Rasa_NLU_Chi",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "return Interpreter(self.pipeline, context=init_context, config=self.config)"
    ],
    "correct": false,
    "top_five": {
      "0": "return Interpreter(self.pipeline, context=init_context, config=self.config)",
      "1": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline)",
      "2": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode, o)",
      "3": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st][st], ode)",
      "4": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, o)",
      "5": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(node, o)",
      "6": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode)",
      "7": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode, n)",
      "8": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[j], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline)",
      "9": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode), ode)",
      "10": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(t[st[i]), ode)",
      "11": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(nult[st[i]), ode)",
      "12": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode, ode)",
      "13": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st][st, typing.pipeline, node) {",
      "14": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, n, o)",
      "15": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n), ode, ode)",
      "16": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(t[st[i], o)",
      "17": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[j], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode, o)",
      "18": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode), o)",
      "19": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(null, ode, o)",
      "20": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(node), o=self.pipeline, ode)",
      "21": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(null, o)",
      "22": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(nextend, o)",
      "23": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n), ode, o)",
      "24": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.piping, ode, ode, ode)",
      "25": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult(st, o)",
      "26": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(t[st[i]), nullu",
      "27": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(nextend)",
      "28": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, j, null, o)",
      "29": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st][i], ode)",
      "30": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode), ode, ode)",
      "31": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st], ode)",
      "32": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(t[st[i]), ode, nullu",
      "33": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, j, o)",
      "34": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, ode, nult, ode)",
      "35": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, ode, o=self.pipeline, ode)",
      "36": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[j], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode)",
      "37": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(nult[st[st], o)",
      "38": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st][i]; }",
      "39": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult(st[st], o)",
      "40": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, u)",
      "41": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode, n, o)",
      "42": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[j], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, o)",
      "43": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[j], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st][st], ode)",
      "44": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline, nult[st][i], nullu",
      "45": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(nult[st[i], o)",
      "46": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[j], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode), ode)",
      "47": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(self.pipeline, n, o)",
      "48": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, ode, n, ode)",
      "49": "return Interpreter(self.pipeline, context=init_context, config=self.config) for (var i=0, j=interpreter.__init__[i], k=self.j, n=j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.j, o=self.pipeline(n, n)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)\n",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_line": "                           scale,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 883,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/draw_commands.py",
    "target_filename": "arcade/draw_commands.py",
    "source_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd^",
    "target_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "predictions": [
      "draw_texture_rectangle(center_x, center_y, scale, texture, angle=angle, alpha=alpha)"
    ],
    "correct": false,
    "top_five": {
      "0": "draw_texture_rectangle(center_x, center_y, scale, texture, angle=angle, alpha=alpha)",
      "1": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } ;",
      "2": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = scale[i] } angle=angle, alpha=alpha }",
      "3": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]>; angle=angle, alpha=alpha=alpha; } ;",
      "4": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (3rd positional only parameter to call draw_texture_rectangle but got float) { scale, texture, angle=angle, alpha=alpha)",
      "5": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + texture_rectangle(scale, texture, angle=angle, alpha=alpha) }",
      "6": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale=scale[i] } angle=angle, alpha=alpha }",
      "7": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + 'float'; } angle=angle, alpha=alpha;",
      "8": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + i]); angle=angle, alpha=alpha;",
      "9": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=angle; } ;",
      "10": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + \"\"; angle=angle, alpha=alpha;",
      "11": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (3rd positional only parameter to call draw_texture_rectangle but got float) { angle=angle, alpha=alpha)",
      "12": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] || i++) } angle=angle, alpha=alpha }",
      "13": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + 'float'; } angle=angle, alpha=alpha;",
      "14": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle [0]]; angle=angle, alpha=alpha=alpha; } ;",
      "15": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + i]); angle=angle, alpha=alpha;",
      "16": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + \"\"; angle=angle, alpha=alpha;",
      "17": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_x || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } ;",
      "18": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (3rd positional only parameter to call draw_texture_rectangle but got float) { scale, texture, angle=angle, alpha=alpha)",
      "19": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale=scale[i] } angle=angle, alpha=alpha }",
      "20": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha }",
      "21": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; \\ ;",
      "22": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] += alpha] { angle=angle, alpha=alpha } )",
      "23": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha; } ;",
      "24": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + angle [0]; angle=angle, alpha=alpha } : angle=angle, alpha=alpha",
      "25": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + 'float'; } angle=angle, alpha=alpha;",
      "26": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; { ;",
      "27": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } s.texture_rectangle(angle, alpha) }",
      "28": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } if (angle, alpha) }",
      "29": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + texture_rectangle(scale, texture, angle=angle, alpha=alpha)",
      "30": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] || i++) } angle=angle, alpha=alpha }",
      "31": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale, texture, angle=angle, alpha=alpha)",
      "32": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } if (angle, alpha, ) }",
      "33": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } a[i]",
      "34": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_x || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]>; angle=angle, alpha=alpha=alpha; } ;",
      "35": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle>>; angle=angle, alpha=alpha;",
      "36": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = scale[i] } angle=angle, alpha=alpha }",
      "37": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + 0.5; angle=angle, alpha=alpha;",
      "38": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + angle[i]>; angle=angle, alpha=alpha; } ;",
      "39": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + angle[i]>; angle=angle, alpha=alpha=angle; } ;",
      "40": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1); angle=angle, alpha=alpha;",
      "41": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } s.texture_rectangle(angle, alpha) } alpha",
      "42": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]>; angle=angle, alpha=alpha }",
      "43": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } : alpha,",
      "44": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } var type: alpha,",
      "45": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale = center_x + (scale[i] + 1) + 'float'; angle=angle, alpha=alpha;",
      "46": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha=alpha; } ;",
      "47": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } if (angle) {",
      "48": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]]; angle=angle, alpha=alpha=alpha; } ;",
      "49": "draw_texture_rectangle(center_x, center_y, scale && (center_x = center_y || center_y == center_y))? center_x = center_y || center_y || center_y; for (var i = 0; i  scale.length; i++) { scale += center_x + (scale[i] + 1) + angle[i]>; angle=angle, alpha=alpha; } ;"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelSettled.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 542,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), block_number=typing.BlockNumber(int(data['block_number'])),"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), block_number=typing.BlockNumber(int(data['block_number'])),",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']), block_number=typing.BlockNumber(int(data['block_number'])),",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier']), block_number=typing.BlockNumber(int(data['block_number'])),",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number' from data['block_number']), block_number=typing.BlockNumber(int(data['block_number'])),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number' in data['block_number']), block_number=typing.BlockNumber(int(data['block_number'])),",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number.toLowerCase().int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 2nd parameter block_number to call ContractReceiveChannelSettled.__init__ but got int for 3rd parameter block_number but got_network_identifier=int(data['block_number')",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number'.toLowerCase().int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) and block_number=typing.BlockNumber(int(data['block_number'])),",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) setBlock_number(int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead.toLowerCase().block_number=typing.BlockNumber(data['block_number'])",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead.toString(), block_number=typing.BlockNumber(int(data['block_number')",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead. block_number=typing.BlockNumber(data['block_number'])",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 2nd parameter block_number to call ContractReceiveChannelSettled.__init__ but got int for 3rd parameter block_number but got_network_number=int(data['block_number')",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number'.toLowerCase().toString(), block_number=typing.BlockNumber(int(data['block_number'])),",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number'.toLowerCase().toString()), block_number=typing.BlockNumber(int(data['block_number'])),",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number'.toString(), block_number=typing.BlockNumber(int(data['block_number'])),",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int, block_number=typing.BlockNumber(data['block_number')",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=int(data['block_number']),",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number.toLowerCase().toString(), block_number=typing.BlockNumber(int(data['block_number'])),",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number[']),",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead.toLowerCase().block_number=typing.block_number(data['block_number'])",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining valid. block_number=typing.BlockNumber(int(data['block_number'])),",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number.toLowerCase().toLowerCase(), block_number=typing.BlockNumber(int(data['block_number'])),",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while keeping true (data['block_number']).isNumber(), block_number=typing.BlockNumber(int(data['block_number'])),",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number']",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while keeping true, block_number=typing.BlockNumber(int(data['block_number'])),",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while keeping iterator=true, block_number=typing.BlockNumber(int(data['block_number'])),",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number while calling ContractReceiveChannelSettled.__init__.toString(), block_number=typing.BlockNumber(int(data['block_number')",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead.toString(), block_number=typing.BlockNumber(int(data['block_number')),",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  network_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number[']),",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  network_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number']",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number']);",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number'",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number']),",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead.toLowerCase().block_number=typing.block_number(data['block_number')",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number.toString(), block_number=typing.BlockNumber(int(data['block_number'])),",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 2nd parameter block_number to call ContractReceiveChannelSettled.__init__ but got int instead.toLowerCase().block_number, block_number=typing.Block_number(data['block_number'])",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  network_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=int(data['block_number']),",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=to_canonical_address(data['channel_identifier']), block_number=typing.BlockNumber(int(data['block_number'])),",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got block_number' instead., block_number=typing.BlockNumber(int(data['block_number'])),",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while keeping the rest.length, block_number=typing.BlockNumber(int(data['block_number'])),",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  network_identifiers.length; i++) { callback(ChannelSettled.__init__, data['channel_identifier']), block_number=typing.BlockNumber(data['block_number']),",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int for 4th parameter block_number but got_number=int(data['block_number')",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { block_number=typing.BlockNumber(int(data['block_number'])),",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  channel_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number') }",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter block_number to call ContractReceiveChannelSettled.__init__ but got int instead. block_number=typing.BlockNumber(data['block_number'])",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  network_identifiers.length; i++) { callback(ContractReceiveChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(int(data['block_number']),",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) for (var i = 0; i  network_identifiers.length; i++) { callback(ChannelSettled.__init__, data['channel_identifier']), block_number=typing.block_number(data['block_number']),",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call ContractReceiveChannelSettled.__init__ but got int instead. Token_network_identifier = data['block_number'](int(data['block_number')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    )\n                result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "target_code": "                    )\n                result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "warning_line": "                result = json_loads(serialized)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `json_loads` but got `bytearray`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 189,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jamesoff/simplemonitor",
    "source_filename": "simplemonitor/Loggers/network.py",
    "target_filename": "simplemonitor/Loggers/network.py",
    "source_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd^",
    "target_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd",
    "predictions": [
      ") result = json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])"
    ],
    "correct": false,
    "top_five": {
      "0": ") result = json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "1": ") result = ssl_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "2": ") result = sm_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "3": ") result = svg_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "4": ") result = json_loads(serialized) self.update_remote_monitor(result, addr[0])",
      "5": ") result = pkg.loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "6": ") result = sm_json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "7": ") result = sdk_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "8": ") result = pkg.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "9": ") result = igv.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "10": ") result = ssjson_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "11": ") result = gc.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "12": ") result = self.simplemonitor.update_remote_monitor(result, addr[0])",
      "13": ") result = json_loads(serialized) this.simplemonitor.update_remote_monitor(result, addr[0])",
      "14": ") result = yr.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "15": ") result = png_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "16": ") result = json_loads(simple_loads(result, addr[0]) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "17": ") result = svg_results(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "18": ") result = yate.loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "19": ") result = html_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "20": ") result = sass_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "21": ") result = ssrc_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "22": ") result = jsonLoads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "23": ") result = pjson_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "24": ") result = json_loads(simple) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "25": ") result = pc.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "26": ") result = req.loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "27": ") result = gs.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "28": ") result = simulated_results(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "29": ") result = json_loads(serialized) home.simplemonitor.update_remote_monitor(result, addr[0])",
      "30": ") result = self.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "31": ") result = ijson_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "32": ") result = req.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "33": ") result = src_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "34": ") result = pk.json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "35": ") result = sms_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "36": ") result = simulated_json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "37": ") result = rpc_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "38": ") result = href.loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "39": ") result = ssl_loads(result) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "40": ") result = json_loads(simplified) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "41": ") result = ssl_loads(serialized) this.simplemonitor.update_remote_monitor(result, addr[0])",
      "42": ") result = ssl.loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "43": ") result = msg(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "44": ") result = res.loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "45": ") result = db_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "46": ") result = simulated_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "47": ") result = rloads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "48": ") result = simulated_result self.simplemonitor.update_remote_monitor(result, addr[0])",
      "49": ") result = serialized self.simplemonitor.update_remote_monitor(result, addr[0])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            target_state=data['target_state'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `TargetTask.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 223,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier']), target_state=data['target_state'],"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier']), target_state=data['target_state'],",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), target_state=data['target_state'],",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier'], target_state=data['target_state'],",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier'].toString(), target_state=data['target_state'],",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']), target_state=data['target_state'],",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier']], target_state=data['target_state'],",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), target_state=data['target_state'],",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= data['channel_identifier']), target_state=data['target_state'],",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=Data.getInt(data['channel_identifier']), target_state=data['target_state'],",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = null for channel_identifier to call TargetTask.__init__ but got int instead.toString(), target_state=data['target_state'],",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.substring(data['channel_identifier']), target_state=data['target_state'],",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= data['channel_identifier'].toString(), target_state=data['target_state'],",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=token_network_identifier, target_state=data['target_state'],",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), target_state=data['target_state'],",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.match(data['channel_identifier']), target_state=data['target_state'],",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=to_canonical_address(data['channel_identifier']), target_state=data['target_state'],",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got outer_network_identifier instead.toString(), target_state=data['target_state'],",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got outer_network_identifier instead.toString(), target_state=data['target_state'],",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got int, target_state=data['target_state'],",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier'].toLowerCase(), target_state=data['target_state'],",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got int, target_state=data['target_state'],",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=ascii.stringify(data['channel_identifier']), target_state=data['target_state'],",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['network_identifier']), target_state=data['target_state'],",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString(data['channel_identifier']), target_state=data['target_state'],",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got int instead.toString(), target_state=data['target_state'],",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=Data.standard_length(data['channel_identifier']), target_state=data['target_state'],",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), network_identifier=int(data['network_identifier']), target_state=data['target_state'],",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']), target_state=data['target_state'],",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got out.toString(), target_state=data['target_state'],",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=Data.Base64(data['channel_identifier']), target_state=data['target_state'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got outer_network.toString(), target_state=data['target_state'],",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = null for channel_identifier to call TargetTask.__init__ but got int instead.), target_state=data['target_state'],",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= int(data['channel_identifier']), target_state=data['target_state'],",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for next parameter target_state to call TargetTask.__init__ but got int instead.toString(),",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = null for channel_identifier to call TargetTask.__init__ but got int as well.toString(), target_state=data['target_state'],",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got outer_network=data['token_network_identifier'], target_state=data['target_state'],",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got int instead.toString(), target_state=data['target_state'],",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.substring(data['channel_identifier']) and was expecting to see a string in data['target_state'].toString(), target_state=data['target_state'],",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.substring(data['channel_identifier']) and was expecting to see a string in data['target_network_identifier'].toString(), target_state=data['target_state'],",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= data['channel_identifier'], target_state=data['target_state'],",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = null for channel_identifier to call TargetTask.__init__ but got int instead. Token_network_identifier = network_identifier, target_state=data['target_state'],",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got outer_network=data['network_identifier']), target_state=data['target_state'],",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got outer_network_identifier as well.toString(), target_state=data['target_state'],",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got outer_network_id instead.toString(), target_state=data['target_state'],",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 2nd parameter channel_identifier to call TargetTask.__init__ but got outer_network=data['token_network_identifier']), target_state=data['target_state'],",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got outer_network.toString(), target_state=data['target_state'],",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=Data.internal(data['channel_identifier']), target_state=data['target_state'],",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = data['channel_identifier']), target_state=data['target_state'],",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=toString.call(data['channel_identifier']) but got int for 3rd parameter channel_identifier to call TargetTask.__init__ but got outer_network=data['network_identifier']), target_state=data['target_state'],",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=Data.standard_format.int(data['channel_identifier']), target_state=data['target_state'],"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "target_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "1": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: RegularizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "2": "regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Options[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: NormalizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, return { ) -> None: super().__init__(vocab, regularizer)",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocabulary, regularizer)",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Standard[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "8": "init: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.RegularizerApplicator } )",
      "10": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator) } ) -> None: super().__init__(vocab, regularizer)",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.RegularizerApplicator }",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ), super().__init__(vocab, regularizer)",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: 'allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator' } ) -> None: super().__init__(vocab, regularizer)",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Alternative[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, return } ) -> None: super().__init__(vocab, regularizer)",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ), regularizer: allennlp.nn.regularizer_applicator.RegularizerApplicator ) -> None: super().__init__(vocab, regularizer)",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> (node) => None: super().__init__(vocab, regularizer)",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator } )",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> none: super().__init__(vocab, regularizer)",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: 'allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator' } )",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ), contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator)",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> () => None: super().__init__(vocab, regularizer)",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, return \\ ) -> None: super().__init__(vocab, regularizer)",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DefinitionApplicator }",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.Declarator() }",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, cb) -> None: super().__init__(vocab, regularizer)",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator }",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> (allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator)",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator) }",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator,",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator)",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DisposerApplicator }",
      "34": "regularizer: Optional[RegularizerApplicator] = None, ), regularizer: allennlp.nn.regularizer_applicator.RegularizerApplicator ) -> None: super().__init__(vocab, regularizer)",
      "35": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, called: super().__init__(vocab, regularizer)",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, } ) -> None: super().__init__(vocab, regularizer)",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: 'allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator' }",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DefinitionApplicator,",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DeclarationApplicator",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.Identifier,",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.Boolean(vocab, regularizer)",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator) } )",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator; } )",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator,",
      "45": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Default[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, err => (err) -> None: super().__init__(vocab, regularizer)",
      "47": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DeclarerApplicator",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) => None: super().__init__(vocab, regularizer)",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DeclaratorApplicator"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 79,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/graph_parser.py",
    "target_filename": "allennlp/models/graph_parser.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "1": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: RegularizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "2": "regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Options[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: NormalizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, return { ) -> None: super().__init__(vocab, regularizer)",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocabulary, regularizer)",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Standard[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "8": "init: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.RegularizerApplicator } )",
      "10": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator) } ) -> None: super().__init__(vocab, regularizer)",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.RegularizerApplicator }",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ), super().__init__(vocab, regularizer)",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: 'allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator' } ) -> None: super().__init__(vocab, regularizer)",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Alternative[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, return } ) -> None: super().__init__(vocab, regularizer)",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ), regularizer: allennlp.nn.regularizer_applicator.RegularizerApplicator ) -> None: super().__init__(vocab, regularizer)",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> (node) => None: super().__init__(vocab, regularizer)",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator } )",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> none: super().__init__(vocab, regularizer)",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: 'allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator' } )",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ), contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator)",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> () => None: super().__init__(vocab, regularizer)",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, return \\ ) -> None: super().__init__(vocab, regularizer)",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DefinitionApplicator }",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.Declarator() }",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, cb) -> None: super().__init__(vocab, regularizer)",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator }",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> (allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator)",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator) }",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator,",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator)",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DisposerApplicator }",
      "34": "regularizer: Optional[RegularizerApplicator] = None, ), regularizer: allennlp.nn.regularizer_applicator.RegularizerApplicator ) -> None: super().__init__(vocab, regularizer)",
      "35": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, called: super().__init__(vocab, regularizer)",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, } ) -> None: super().__init__(vocab, regularizer)",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: 'allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator' }",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DefinitionApplicator,",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DeclarationApplicator",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.Identifier,",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.Boolean(vocab, regularizer)",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, contract: Guaranteed(allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator) } )",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator; } )",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator,",
      "45": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Default[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, err => (err) -> None: super().__init__(vocab, regularizer)",
      "47": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DeclarerApplicator",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) => None: super().__init__(vocab, regularizer)",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, declaredBy: allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator, declaredBy: allennlp.nn.regularizer_applicator.DeclaratorApplicator"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "target_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_line": "        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 103,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/common/logging.py",
    "target_filename": "allennlp/common/logging.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO)"
    ],
    "correct": false,
    "top_five": {
      "0": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "1": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) $nin = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "2": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) OPTIONS = {",
      "3": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(!level_name && level_name.length) {",
      "4": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_DEBUG: true",
      "5": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "6": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) $nin = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "7": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = level_name || \"\";",
      "8": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = \"LEVEL\"",
      "9": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if (!level_name && level_name.length) {",
      "10": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) ESTATE_LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "11": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(!level_name) level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "12": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = \"GET_DATA_LEVEL\"",
      "13": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) $log[level_name] = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "14": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) SYSTEM_LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "15": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if (!level_name) return os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "16": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_INFO = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "17": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if (typeof LEVEL!== 'undefined') {",
      "18": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_INFO = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "19": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(!level_name) return os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "20": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) DATA_LEVEL = os.environ.get(\"ALLENNLP_DEBUG\")",
      "21": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "22": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(!level_name) {",
      "23": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(!level_name) return os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "24": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logger._nameToLevel.get(level_name, logging.INFO)",
      "25": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = level_name but LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "26": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(str) {",
      "27": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NODE_TYPE = os.environ.get(\"ALLENNLP_DEBUG\")",
      "28": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = \"env_node_modules/\" + LEVEL",
      "29": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(label && level_name === \"technical\") {",
      "30": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) DATA_TYPE = os.environ.get(\"TYPE\")",
      "31": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) DATA_LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "32": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = level_name;",
      "33": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) os.environ.get(\"ALLENNLP_DEBUG\")",
      "34": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_DEBUG: false }",
      "35": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if (!level_name) return os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "36": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) SET_LEVEL_OFFSET LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "37": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) SET_LEVEL_OFFSET LEVEL = os.environ.get(\"ALLENNLP_LOG_OFFSET\")",
      "38": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(!level_name && level_name!== \"technical\") {",
      "39": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if (level_name!== undefined) {",
      "40": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) DATA_TYPE = os.environ.get(\"SETTINGS_ARRAY\")",
      "41": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) LOG_NAME = level_name but LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "42": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) TRIM_LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\")",
      "43": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) SET_LEVEL_OFFSET LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "44": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) DATA_LEVEL = os.environ.get(\"ALLENNLP_LOG_LEVEL\");",
      "45": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if (!level && level_name!== undefined) {",
      "46": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) ESTATE_LEVEL = os.environ.get(\"ALLENNLP_DEBUG)",
      "47": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) if(label && level_name === \"System\") {",
      "48": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) DATA_TYPE = os.environ.get(\"SETTINGS_LEVEL\")",
      "49": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO) RESPONSES = {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
    "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_line": "            user_token",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algolia/algoliasearch-client-python",
    "source_filename": "algoliasearch/insights_client_async.py",
    "target_filename": "algoliasearch/insights_client_async.py",
    "source_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395^",
    "target_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "predictions": [
      "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)"
    ],
    "correct": false,
    "top_five": {
      "0": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "1": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) ;",
      "2": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) :",
      "3": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? super(UserInsightsClientAsync, self).__init__( insights_client, user_token)",
      "4": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) / \\",
      "5": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) / }",
      "6": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) / {",
      "7": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) : super(UserInsightsClientAsync, self).__init__( insights_client, user_token)",
      "8": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) _ InsightsConfig = { }",
      "9": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) || None",
      "10": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) / ^",
      "11": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) +",
      "12": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) />",
      "13": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "14": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!insights_client.is_mobile) {",
      "15": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) : super(UserInsightsClientAsync, self).__init__( insights_client._item)",
      "16": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) _ Notify( {",
      "17": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) # type: (InsightsClient, InsightsConfig)",
      "18": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (config.options) {",
      "19": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!InsightsClient.hasOwnProperty(user_token)) {",
      "20": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!InsightsClient) {",
      "21": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (SelectInsightsClient.hasOwnProperty('insightsConfig')) {",
      "22": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? insights_client._token : $ { self._invalid_token } ",
      "23": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) : super(UserInsightsClientAsync, self).__init__( insights_client._item, user_token)",
      "24": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (Status === 'Default') {",
      "25": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? super(UserInsightsClientAsync, self).__init__( insights_client._item)",
      "26": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) = { }",
      "27": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? super(UserInsightsClientAsync, self).__init__( insights_client._id, user_token)",
      "28": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (str) {",
      "29": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!InsightsClient.hasOwnProperty('token')) {",
      "30": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) var insight = new InsightsClient.__init__(self, insights_client, user_token)",
      "31": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token).bind(this))",
      "32": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? insights_client._invalid_token :",
      "33": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, myself).__init__( insights_client._transporter, user_token)",
      "34": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!InsightsConfig) {",
      "35": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) var insights = { }",
      "36": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (SelectInsightsClient) {",
      "37": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) : super(UserInsightsClientAsync, self).__init__( insights_client._id, user_token)",
      "38": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (typeof InsightsClient === 'function') {",
      "39": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? super(UserInsightsClientAsync, self).__init__( insights_client._item, user_token)",
      "40": "# type: (InsightsClient, Transporter, InsightsConfig) -> none super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "41": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? insights_client._id",
      "42": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (SelectInsights && InsightsConfig.hasOwnProperty(user_token)) {",
      "43": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (SelectInsightsConfig ==='str') {",
      "44": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!InsightsClient.hasOwnProperty('insightsConfig')) {",
      "45": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)? insights_client._items[user_token] :",
      "46": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (!insights_client._is_mobile) {",
      "47": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) -> None",
      "48": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) __invalid: true",
      "49": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) if (SelectInsightsConfig === true) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_line": "FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 29,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quay/quay",
    "source_filename": "test/specs.py",
    "target_filename": "test/specs.py",
    "source_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04^",
    "target_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "predictions": [
      "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\""
    ],
    "correct": false,
    "top_five": {
      "0": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "1": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseInt(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "2": "FAKE_MANIFEST = \"unknown_tag\" FAKE_IMAGE_ID = \"fake-image\"",
      "3": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()",
      "4": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isolator.hasOwnProperty(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "5": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseHash(hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "6": "FAKE_MANIFEST = \"unknown_tag\" FAKE_IDENTIFIER = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "7": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseInt(hashlib.sha256, \"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "8": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseInt(hashlib, \"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "9": "FAKE_MANIFEST = \"unknown_tag\" FAKE_IGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "10": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseInt(hashLib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "11": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseInt(hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "12": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isAvailable(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "13": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isAvailable(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "14": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DAGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "15": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseHash(hashLib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "16": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseHash(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "17": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashLib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "18": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseHex(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "19": "FAKE_MANIFEST = \"unknown_tag\" FAKE_SYNDICATE = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "20": "FAKE_MANIFEST = \"unknown_tag\" FAKE_SEMILLAS_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "21": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isAsync(hashlib, \"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "22": "FAKE_MANIFEST = \"unknown_tag\" FAKE_IS_RAW = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "23": "FAKE_MANIFEST = \"unknown_tag\" FAKE_EMBER_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "24": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DAWGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "25": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DRIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "26": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isAttr(hashlib, \"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "27": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAAGE_ID = \"fake-image\"",
      "28": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isolator.isolator(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "29": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DRAG = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "30": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DESCRIPTION = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "31": "FAKE_MANIFEST = \"unknown_tag\" FAKE_GITHUB = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "32": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseHex(hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "33": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + SHA256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "34": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + crypto.hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "35": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseInt(hashlib.sha256(\"fake\")) FAKE_IMAGE_ID = \"fake-image\"",
      "36": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \":\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "37": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + (hexdigest) => hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "38": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "39": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseHash(hashLib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "40": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isAvailable(hashlib.sha256) FAKE_IMAGE_ID = \"fake-image\"",
      "41": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() fake_image_id = \"fake-image\"",
      "42": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "43": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseSha256(hexdigest) FAKE_IMAGE_ID = \"fake-image\"",
      "44": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()FAKE_IMAGE_ID = \"fake-image\"",
      "45": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isolator.hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "46": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + parseArray.hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "47": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"hexdigest(sha256)\" FAKE_IMAGE_ID = \"fake-image\"",
      "48": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FOUND_IMAGE_ID = \"fake-image\"",
      "49": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() fake_imAGE_ID = \"fake-image\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
    "target_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_line": "            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 201,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "borglab/gtsfm",
    "source_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "target_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_changeid": "26f76a40e21bd082123f275404efca964faa59b9^",
    "target_changeid": "26f76a40e21bd082123f275404efca964faa59b9",
    "predictions": [
      "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )"
    ],
    "correct": false,
    "top_five": {
      "0": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "1": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "2": "max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "3": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentValue(), i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "4": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget(), i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "5": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error || compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "6": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "7": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTuple(), i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "8": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( two_view_reports_dict )",
      "9": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] );",
      "10": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] );",
      "11": "cycle_error, max_rot_error, max_trans_error = calculate_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "12": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTab(), i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "13": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] );",
      "14": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, two_view_reports_dict )",
      "15": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error; i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "16": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "17": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "18": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, 2] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, 1] );",
      "19": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTest(), i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "20": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict ) compute_cycle_error( cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "21": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "22": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1_dict, i1, i2],",
      "23": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, 1] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, 1] );",
      "24": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] )",
      "25": "cycle_error, max_rot_error and max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "26": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1_dict, i2],",
      "27": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] )",
      "28": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict ) compute_cycle_error( cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i0, i1, i2 )",
      "29": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = compute_cycle_error( two_view_reports_dict )",
      "30": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error;",
      "31": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict,[i0, i1, i2], two_view_reports_dict )",
      "32": "cycle_error, max_rot_error, max_trans_error = compute_cyclical_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "33": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1_dict, i0, i2],",
      "34": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, two_view_reports_dict )",
      "35": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[1], 2], two_view_reports_dict )",
      "36": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, int, int, int, int, int, int, int, int, int, int, int, two_view_report",
      "37": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0], int[1] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] );",
      "38": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1_dict, i1],",
      "39": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int], two_view_reports_dict )",
      "40": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2],",
      "41": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = get_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "42": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, int, int, int, int]",
      "43": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int[1]], two_view_reports_dict )",
      "44": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, int, int, int, int, int, int",
      "45": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int] ), two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int[0, int, int] );",
      "46": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, int, int, int, int, int];",
      "47": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, int, int, int, int, int",
      "48": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1_dict, i1_rot_error, two_view_trans_error",
      "49": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error = getCurrentTarget()); i2Ri1_dict, [i0, i1, i2], two_view_reports_dict: cycle_error, max_rot_error, max_trans_error = compute_cycle_error( cycle_error, max_rot_error, max_trans_error, int, int, int, int];"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "target_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_line": "        return cls(minimum=minimum, maximum=maximum)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 437,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/collection.py",
    "target_filename": "pystac/collection.py",
    "source_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93^",
    "target_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "predictions": [
      "minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") minimum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)"
    ],
    "correct": false,
    "top_five": {
      "0": "minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") minimum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "1": "minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "2": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummummum)",
      "3": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummum)",
      "4": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumma",
      "5": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumumma",
      "6": "minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") minimum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "7": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimummumma",
      "8": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummummummum)",
      "9": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimummumma",
      "10": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummium, maximum:",
      "11": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimummummum)",
      "12": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummium)",
      "13": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummium)",
      "14": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumma, maximum)",
      "15": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimumma",
      "16": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimummummummum)",
      "17": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummium, maximum)",
      "18": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummummary\") return cls(minimummummum)",
      "19": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummum)",
      "20": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimummummummummum)",
      "21": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummium, maximummum)",
      "22": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimummummum)",
      "23": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummium,",
      "24": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummummium)",
      "25": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimummummummum)",
      "26": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumma,",
      "27": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimumma",
      "28": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\");",
      "29": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummump, maximum)",
      "30": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumm, maximum)",
      "31": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumm, maximummum)",
      "32": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummummummummummary,",
      "33": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimummummium)",
      "34": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\"); }",
      "35": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumm, maximum: Optional[T]",
      "36": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumma",
      "37": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimumma, maximum:",
      "38": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummum)",
      "39": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummum) return cls(minimummummummum)",
      "40": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummium, maximum: Optional[T]",
      "41": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimummummummummum)",
      "42": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls",
      "43": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimummummium)",
      "44": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummummummummummummummummary\")",
      "45": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummi",
      "46": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummum) return cls(minimummummum)",
      "47": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimium, maximummum)",
      "48": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummary\") return cls(minimummummump, maximum)",
      "49": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximummummary\") return cls(minimummummummum)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n\n",
    "target_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_line": "        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 550,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "samschott/maestral",
    "source_filename": "maestral/cli.py",
    "target_filename": "maestral/cli.py",
    "source_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97^",
    "target_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "predictions": [
      "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[\"gui\"])"
    ],
    "correct": false,
    "top_five": {
      "0": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[\"gui\"])",
      "1": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras)",
      "2": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_requires())",
      "3": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_distribution())",
      "4": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_rules())",
      "5": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = [\"gui\"])",
      "6": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_str())",
      "7": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist._extras)",
      "8": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_instance())",
      "9": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_value())",
      "10": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_version())",
      "11": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_distribution().extras)",
      "12": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_package_items())",
      "13": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_extras())",
      "14": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_instance().extras)",
      "15": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = _.extend(pkg_resources.Distribution.requires, extras=[\"gui\"])",
      "16": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_parse_extras())",
      "17": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_rules().extras)",
      "18": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_instance().split(\"gui\"))",
      "19": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.subclasses.join(\" \"))",
      "20": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_version(str))",
      "21": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_tmp_extras())",
      "22": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.gui\"])",
      "23": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras =[\"gui\"])",
      "24": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.extension(str))",
      "25": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_schema(extras))",
      "26": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_private_extras())",
      "27": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_rules().trim())",
      "28": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_ctx())",
      "29": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_service())",
      "30": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = _.extend(pkg_resources.Distribution.requires, maestral_dist.name, extras))",
      "31": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_instance().fetch())",
      "32": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = _.extend(pkg_resources.Distribution.requires, maestral_dist._substr, extras))",
      "33": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_parsed_extras())",
      "34": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.name)",
      "35": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_instance().str)",
      "36": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.subclasses[0])",
      "37": "maestral_dist = pkg_resources.get_distribution(\"maestral\") needs = maestral_dist.requires(extras=[\"gui\"])",
      "38": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = 'gui')",
      "39": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.subclasses[1])",
      "40": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_extras())",
      "41": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist._get_extras())",
      "42": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.requires())",
      "43": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_items())",
      "44": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = [])",
      "45": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_utils())",
      "46": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = _.extend(pkg_resources.Distribution.requires, maestral_dist._extras,...extras))",
      "47": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_required_extras())",
      "48": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist._extras)",
      "49": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = maestral_dist.get_terms())"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],\n",
    "target_code": "        restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 739,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "restored = cls( payment_identifier=data['payment_identifier'], reason=data['reason'],"
    ],
    "correct": false,
    "top_five": {
      "0": "restored = cls( payment_identifier=data['payment_identifier'], reason=data['reason'],",
      "1": "restored = cls( payment_identifier=data['payment_identifier']), reason=data['reason'],",
      "2": "restored = cls( payment_identifier=int(data['payment_identifier']), reason=data['reason'],",
      "3": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.paymentID, reason=data['reason'],",
      "4": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int instead.paymentID, reason=data['reason'],",
      "5": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.paymentID, reason=data['reason'],",
      "6": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int.payment_identifier, reason=data['reason'],",
      "7": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int.payment_identifier, reason=data['reason'],",
      "8": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.), reason=data['reason'],",
      "9": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int(data['reason'], reason=data['reason'],",
      "10": "restored = cls( payment_identifier=string(data['payment_identifier']), reason=data['reason'],",
      "11": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.pay(), reason=data['reason'],",
      "12": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int.payment_identifier, reason=data['reason'],",
      "13": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int int(data['reason'], reason=data['reason'],",
      "14": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int instead.pay(), reason=data['reason'],",
      "15": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.), reason=data['reason'],",
      "16": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter, reason=data['reason'],",
      "17": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int.payment_identifier, reason=data['reason'],",
      "18": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int.payment_identifier, reason=data['reason'],",
      "19": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int.data['reason'], reason=data['reason'],",
      "20": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int(data['reason'), reason=data['reason'],",
      "21": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter, reason=data['reason'],",
      "22": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int instead.paymentID, reason=data['reason'],",
      "23": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.'_init__ but got int instead.paymentID, reason=data['reason'],",
      "24": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int again.), reason=data['reason'],",
      "25": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.pay(), reason=data['reason'],",
      "26": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int instead.), reason=data['reason'],",
      "27": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int, reason=data['reason'],",
      "28": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int(data['reason'], reason=data['reason'],",
      "29": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.'_init__ but got int.payment_identifier, reason=data['reason'],",
      "30": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.' but got int int(data['payment_identifier'), reason=data['reason'],",
      "31": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int again.), reason=data['reason'],",
      "32": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int.payment_ir, reason=data['reason'],",
      "33": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter, reason=data['reason'],",
      "34": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int int, reason=data['reason'],",
      "35": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int, reason=data['reason'],",
      "36": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int int.payment_ir, reason=data['reason'],",
      "37": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int int(data['reason'), reason=data['reason'],",
      "38": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.payment_ir, reason=data['reason'],",
      "39": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int again.), reason=data['reason'],",
      "40": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int for 2nd parameter  payment_identifier, reason=data['reason'],",
      "41": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.' but got int instead.payment_identifier, reason=data['reason'],",
      "42": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int int(data['reason'), reason=data['reason'],",
      "43": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.pay(), reason=data['reason']",
      "44": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int.payment_identifier', reason=data['reason'],",
      "45": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.' but got int int.payment_identifier, reason=data['reason'],",
      "46": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.pay(), reason=data['reason')",
      "47": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.'[data['payment_identifier']), reason=data['reason'],",
      "48": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__invalid__ but got int instead.paymentID, reason=data['reason']",
      "49": "restored = cls( payment_identifier=value but got int for 1st parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int for 2nd parameter payment_identifier to call EventInvalidReceivedLockedTransfer.__init__ but got int instead.pay(), reason=data['reason']"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "target_code": "    if expected_failure is not None:\n        assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_line": "        assert_code_snippet_fails(after, state, expected_failure)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quantumlib/Cirq",
    "source_filename": "cirq/docs/snippets_test.py",
    "target_filename": "cirq/docs/snippets_test.py",
    "source_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995^",
    "target_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "predictions": [
      "if expected_failure is not None: assert_code_snippet_fails(after, state, expected_failure)"
    ],
    "correct": false,
    "top_five": {
      "0": "if expected_failure is not None: assert_code_snippet_fails(after, state, expected_failure)",
      "1": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure)",
      "2": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails_after, state, expected_failure)",
      "3": "if expected_failure is Not None: assert_code_snippet_fails(after, state, expected_failure)",
      "4": "if expected_failure is not None: declare_code_snippet_fails(after, state, expected_failure)",
      "5": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snippet_fails(after, state, expected_failure)",
      "6": "if expected_failure is not None: return assert_code_snippet_fails(after, state, expected_failure)",
      "7": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails()",
      "8": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails[after, state, expected_failure)",
      "9": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) assert_code_snippet_resolve_errors(after, state, expected_failure)",
      "10": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str])",
      "11": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails[after, state, expected_failure]()",
      "12": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(): assert_code_snippet_fails(after, state, expected_failure)",
      "13": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure)",
      "14": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) assert_code_snippet_snippet_fails(after, state, expected_failure)",
      "15": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_path_errors(after, state, expected_failure)",
      "16": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state, expected_failure)",
      "17": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || (type === Object.prototype && type === 'object')",
      "18": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_failings(after, state, expected_failure)",
      "19": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails();",
      "20": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || (type === Object.prototype && type === 'object'))",
      "21": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_reject_fails(after, state, expected_failure)",
      "22": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails[after_state, expected_failure]()",
      "23": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(): after, state, expected_failure)",
      "24": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || ( expected_failure === null)? state : assert_code_snippet_failure)",
      "25": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_path_breaking(after, state, expected_failure)",
      "26": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_errors(after, state, expected_failure)",
      "27": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails after, state, expected_failure)",
      "28": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || (expected_failure === null)? state : assert_code_snippet_failure)",
      "29": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || (type === Object.prototype && Object.getPrototypeOf(type)).tr)",
      "30": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) assert_code_snippet_continues(after, state, expected_failure)",
      "31": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snippet_fails (after, state, expected_failure)",
      "32": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) console.log(code snippet: after$ { expected_failure } )",
      "33": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) assert_code_snippet_master_fails(after, state, expected_failure)",
      "34": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_path_to_stubby(after, state, expected_failure)",
      "35": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) assert_code_snippet_module_level_failures(after, state, expected_failure)",
      "36": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_resolve_errors(after, state, expected_failure)",
      "37": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) || assert_snippet_code_snippet_errors(after, state, expected_failure)",
      "38": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails[after, state, expected_failure]",
      "39": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails\u2018(after, state, expected_failure)",
      "40": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails2(after, state, expected_failure)",
      "41": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || (type === Object.prototype && Object.prototype.hasOwnPropertr);",
      "42": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure)",
      "43": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) persists: assert_code_snippet_fails(after, state, expected_failure)",
      "44": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) persists: assert_snippet_fails(after, state, expected_failure)",
      "45": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(): assert_snippet_fails(after, state, expected_failure)",
      "46": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) assert_code_snippet_master_fail(after, state, expected_failure)",
      "47": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) module.exports = { assert_code_snippet_fails(after, state, expected_failure)",
      "48": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_fails(after, state, expected_failure) console.log(code snippet executed successfully:, after_state, expected_failure)",
      "49": "if expected_failure is not None: reject(str for 1st positional only parameter to call assert_code_snippet_fails but got typing.Optional[str]) assert_code_snippet_snails_after_state || (state = { } ) || ( expected_failure === null)? state : assert_code_snippet_failure);"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n\n",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_line": "        save_pickle(self.ec_data, self.save_path)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "target_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_changeid": "1de404c11bc5f40b766e966573506921980ff524^",
    "target_changeid": "1de404c11bc5f40b766e966573506921980ff524",
    "predictions": [
      "self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)"
    ],
    "correct": false,
    "top_five": {
      "0": "self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "1": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "2": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exists_ok=True) save_pickle(self.ec_data, self.save_path)",
      "3": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent_mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "4": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=true, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "5": "log.info(f\"Saving model to { self.save_path } \") self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "6": "auto_update_path(self.ec_data) log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "7": "self.save_path.parent.mkdir(parents=True, exist_ok=True).save_pickle(self.ec_data, self.save_path)",
      "8": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, existence_ok=True) save_pickle(self.ec_data, self.save_path)",
      "9": "self.save_path.parent.mkdir(parents=True, exists_ok=True) save_pickle(self.ec_data, self.save_path)",
      "10": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parents.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "11": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=False, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "12": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parents=True.exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "13": "self.save_path.parent.mkdir(parents=true, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "14": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents==True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "15": "self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "16": "self.save_path.parent.mkdir(parents=True, exist_ok=True) log.info(f\"Saving model to { self.save_path } \") save_pickle(self.ec_data, self.save_path)",
      "17": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=\"True\", exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "18": "log.info(f\"Saving model to { self.save_path ^ \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "19": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=Trace, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "20": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) self.save_pickle(self.ec_data, self.save_path)",
      "21": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path) if (!self.save_path.parents[0]) {",
      "22": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True).save_pickle(self.ec_data, self.save_path)",
      "23": "self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path).innerHTML = self.save_path.parent.mkdir(parents=True, exist_ok=True)",
      "24": "auto_reset() self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "25": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) saving_pickle(self.ec_data, self.save_path)",
      "26": "auto_reset() } self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "27": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data,self.save_path)",
      "28": "auto_find_and_save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "29": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path) if (!self.save_path.parent_model) {",
      "30": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path, self.ec_data)",
      "31": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=False, exist_ok=False) save_pickle(self.ec_data, self.save_path)",
      "32": "self.save_path.parent.mkdir(parents=True, exist_ok=True) self.save_pickle(self.ec_data, self.save_path)",
      "33": "self.save_path.parent.mkdir(parents=False, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "34": "self.save_path.parent_mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "35": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path).mkdir(parents=True, exist_ok=False)",
      "36": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path, args)",
      "37": "self.save_path.parent.mkdir(parents=True, exist_ok=True).find(\"save_path\") save_pickle(self.ec_data, self.save_path)",
      "38": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path).mkdir(parents=True, exist_ok=True)",
      "39": "auto_remove_model() } self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "40": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) sauve_pickle(self.ec_data, self.save_path)",
      "41": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path, self.ec_path.new_model)",
      "42": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path, model_data)",
      "43": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path, true)",
      "44": "self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path) if (!self.save_path.nodeType!== \"R\" || self.save_path.nodeType === \"R\") {",
      "45": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) if(!self.ec_data.length) { save_pickle(self.ec_data, self.save_path)",
      "46": "self.save_path.parent.mkdir(parents=True, existence_ok=True) save_pickle(self.ec_data, self.save_path)",
      "47": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path,...)",
      "48": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path, parent)",
      "49": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path) if (!self.save_path.parent_path) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
    "target_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            context.add_layer(obj)\n",
    "warning_line": "            context.add_layer(obj)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 635,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/configuration.py",
    "target_filename": "volatility/framework/interfaces/configuration.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "obj = self._construct_class(context, config_path, args)"
    ],
    "correct": false,
    "top_five": {
      "0": "obj = self._construct_class(context, config_path, args)",
      "1": "obj = self._construct_class(context, config_path, args) context.add_layer(obj)",
      "2": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj)",
      "3": "obj = self._construct_class(context, config_path, args) if obj is None: context.add_layer(obj)",
      "4": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config_path.length; i++) { context.add_layer(obj)",
      "5": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; i++) { context.add_layer(obj)",
      "6": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  args.length; i++) { context.add_layer(obj)",
      "7": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  args.length; i++) { context.add_layer(obj)",
      "8": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.layers.length; i++) { context.add_layer(obj)",
      "9": "obj = self._construct_class(context, config_path, args) if obj is NotAnInterfaceObject: context.add_layer(obj)",
      "10": "obj = self._construct_class(context, config_path, args) if obj is NotNull: context.add_layer(obj)",
      "11": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  layers.length; i++) { context.add_layer(obj)",
      "12": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config_path.length; ++i) { context.add_layer(obj)",
      "13": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config_path.length; i++) { context.add_layer(obj) }",
      "14": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.length; i++) { context.add_layer(obj)",
      "15": "obj = self._construct_class(context, config_path, args) if obj is NotAnObject: context.add_layer(obj)",
      "16": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  layers.length; i++) { context.add_layer(obj)",
      "17": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_hierarchy.length; i++) { context.add_layer(obj)",
      "18": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  context.layers.length; i++) { context.add_layer(obj)",
      "19": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config_path.length; i++) { if obj is not None: context.add_layer(obj)",
      "20": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  args.length; ++i) { context.add_layer(obj)",
      "21": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config.layers.length; i++) { context.add_layer(obj)",
      "22": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config_paths.length; i++) { context.add_layer(obj)",
      "23": "obj = self._construct_class(context, config_path, args) for (var key in obj) { context.add_layer(obj)",
      "24": "obj = self._construct_class(context, config_path, args) if obj == None: context.add_layer(obj)",
      "25": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config.length; i++) { context.add_layer(obj)",
      "26": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; i++) { if obj is not None: context.add_layer(obj)",
      "27": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config_path.length; i++) { obj = config_path[i] context.add_layer(obj)",
      "28": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.hierarchy_levels.length; i++) { context.add_layer(obj)",
      "29": "obj = self._construct_class(context, config_path, args) if obj instanceof ObjectInterface callback(null, obj) context.add_layer(obj)",
      "30": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; ++i) { context.add_layer(obj)",
      "31": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  context.layers.length; i++) context.add_layer(obj)",
      "32": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.layers.length; ++i) { context.add_layer(obj)",
      "33": "obj = self._construct_class(context, config_path, args) if obj is NotAllowed: context.add_layer(obj)",
      "34": "obj = self._construct_class(context, config_path, args) if obj instanceof ObjectInterface callback (obj) context.add_layer(obj)",
      "35": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; i++) { context.add_layer(obj) }",
      "36": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; i++) { obj = config_path[i] context.add_layer(obj)",
      "37": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_length; i++) { context.add_layer(obj)",
      "38": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  args.length; i++) { if obj is not None: context.add_layer(obj)",
      "39": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; i++) context.add_layer(obj)",
      "40": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  args.length; i++) { context.add_layer(obj) }",
      "41": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  config_path.length; i++) if obj is not None: context.add_layer(obj)",
      "42": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  layers.length; i++) context.add_layer(obj)",
      "43": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  context.layers.length; i++) if obj is not None: context.add_layer(obj)",
      "44": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  context.layers.length; i++) context.add_layer(obj)",
      "45": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.hierarchy_slice.call(context, obj)) context.add_layer(obj)",
      "46": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.layers.length; i++) { context.add_layer(obj) }",
      "47": "obj = self._construct_class(context, config_path, args) if obj is NotNull context.add_layer(obj)",
      "48": "obj = self._construct_class(context, config_path, args) for (var i = 1; i  args.length; ++i) { context.add_layer(obj)",
      "49": "obj = self._construct_class(context, config_path, args) for (var i = 0; i  config.hierarchy_length; i++) { context.add_layer(obj)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, {})\n        # put delegation last by default\n",
    "target_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_line": "            delegator.delegations = Delegations({}, {})",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 354,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theupdateframework/python-tuf",
    "source_filename": "tests/repository_simulator.py",
    "target_filename": "tests/repository_simulator.py",
    "source_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3^",
    "target_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "predictions": [
      "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # put delegation last by default"
    ],
    "correct": false,
    "top_five": {
      "0": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # put delegation last by default",
      "1": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # throw new Error(OrderedDict[str, DelegatedRole])",
      "2": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const delegations = new Delegations( { }, { } )",
      "3": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # leave delegation last by default",
      "4": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } )",
      "5": "if delegator.delegations is None: delegator.delegations = new Delegations( { }, { } ) # put delegation last by default",
      "6": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const delegation = new Delegations( { }, { } )",
      "7": "if delegator.delegations is None: # const delegations = new Delegations( { }, { } ) # put delegation last by default",
      "8": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const existingDelegations = new Delegations( { }, { } )",
      "9": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # givenRole = defaultDelegations( { }, { } )",
      "10": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const defaultCollection = delegations[str, delegatedRole];",
      "11": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # let delegation last by default",
      "12": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const mapStructureToProps = Object.assign( { }, delegations.__init__, delegations.__init__)",
      "13": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result === 'OrderedDict[str, DelegatedRole]') return result;",
      "14": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # set delegation last by default",
      "15": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result === 'OrderedDict[str, DelegatedRole]') {",
      "16": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const defaultRequire = Delegations( { }, { } )",
      "17": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result!== null ) {",
      "18": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result!= null ) {",
      "19": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # make delegation last by default",
      "20": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # assert.equal(str, delegatedRole)",
      "21": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # throw new Error(OrderedDict[str, DelegatedRole]); }",
      "22": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const delegations = new Delegations()",
      "23": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # place delegation last by default",
      "24": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # assert.equal(str, delegatedRole);",
      "25": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # throw new Error(Delegations.__init__)",
      "26": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # stickler.getOwnPropertyDescriptor('delegations.__init__', delegations.__init__)",
      "27": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # throw new Error(Delegations.__init__ is not an option)",
      "28": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const existingDelegations = new Delegations( { } )",
      "29": "if delegator.delegations is None: delegator.delegations = InstanceDelegations( { }, { } ) # put delegation last by default",
      "30": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const mapStructureToProps = Object.assign( { }, delegations.__init__), delegations.__init__ = new Map( {",
      "31": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # placed delegation last by default",
      "32": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # throw new Error(Delegations.__init__).notFoundError(Dict[Variable[_KT], Variable[_VT]])",
      "33": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const mapStructureToProps = this._mapStructureAndRole(str, delegatedRole)",
      "34": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # throw new Error(Delegations.__init__).notFoundError(Variable[_KT], Variable[_VT]])",
      "35": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const defaultCollection = delegations[str, DelegatedRole];",
      "36": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # return delegation first by default",
      "37": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const delegation = new Delegations( { delegation: delegatedRole, assignedRole: delegatedRole } )",
      "38": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # assert.equal(str, DelegatedRole)",
      "39": "if delegator.delegations is None: # const delegations = Delegations( { }, { } ) # put delegation last by default",
      "40": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result == null ) {",
      "41": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const defaultCollection = delegations[Status, DelegatedRole];",
      "42": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result === 'OrderedDict[str, DelegatedRole]' ) {",
      "43": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const delegations = new delegations( { }, { } )",
      "44": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # make delegation first by default",
      "45": "if delegator.delegations is None: defaultDelegations( { }, { } )",
      "46": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result === 'OrderedDict[str, DelegatedRole] ) {",
      "47": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result === 'OrderedDict') {",
      "48": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # stickler.getOwnPropertyDescriptor(Delegations.__init__, { third: delegator.getOwnPropertyDescriptor } )",
      "49": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # const result = delegations[Status, DelegatedRole]; if ( result == 'OrderedDict[str, DelegatedRole]') return result;"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                        if isinstance(loss, Tuple):\n                            average_over += loss[1]\n",
    "target_code": "\n                        if isinstance(loss, tuple):\n                            average_over += loss[1]\n",
    "warning_line": "                        if isinstance(loss, Tuple):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing._SpecialForm`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 472,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/trainers/trainer.py",
    "target_filename": "flair/trainers/trainer.py",
    "source_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054^",
    "target_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054",
    "predictions": [
      "if isinstance(loss, Tuple): average_over += loss[1]"
    ],
    "correct": false,
    "top_five": {
      "0": "if isinstance(loss, Tuple): average_over += loss[1]",
      "1": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Any], typing",
      "2": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got type for 4th position only parameter to callback(loss, Tuple)",
      "3": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any]",
      "4": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got type",
      "5": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got type",
      "6": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any]",
      "7": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any], typing.Tuple[typing.Any]",
      "8": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Any]",
      "9": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any], typing.Tuple",
      "10": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Any],...]",
      "11": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any], typing",
      "12": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got type for 4th position only parameter to test(loss)",
      "13": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got type for 4th position only parameter to callback(loss)",
      "14": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[typing.Any][ typing.Type[ typing.Tuple[typing.Any]",
      "15": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[typing.Any]",
      "16": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[ typing.Type[",
      "17": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got type for 4th positionalone; }",
      "18": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but failed to get value for that parameter.Type(Tuple) {",
      "19": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got type for 3rd positional only parameter to call isinstance but got type for 3rd positional only parameter to call if (lossinstance(Tuple):",
      "20": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any], typing.Tuple[type]",
      "21": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[typing.Type[ typing.Tuple[typing.Any]",
      "22": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[ typing.Type[ typing.Any]",
      "23": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got type for 4th positionalone;",
      "24": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[typing.Any][ typing.Type[typing.Any]",
      "25": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Any],",
      "26": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[typing.Type[",
      "27": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any], typing.Tuple[ typing]",
      "28": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[type[",
      "29": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got type for 4th position only parameter to callback(loss) {",
      "30": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any][ typing.Type[typing.Tuple",
      "31": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[3]]",
      "32": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any], typing.Tuple[type",
      "33": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[type[different]",
      "34": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[3]",
      "35": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[ typing.Type]",
      "36": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[ typing.Any]",
      "37": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Type[ typing.Type[ typing.Tuple[typing.Any]",
      "38": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Type[ typing.Tuple[typing.Any]",
      "39": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got type for 4th position only parameter to callback(loss) }",
      "40": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got type for 3rd positional only parameter to call isinstance but got type for 3rd positional only parameter to call if (lossinstance(Tuple): average_over +=",
      "41": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got type for 3ror Normalized.Tuple(loss): average_over +=",
      "42": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Tuple[type]",
      "43": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[typing.Any],...]",
      "44": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Tuple[typing.Type[ typing.Any]",
      "45": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[typing.Any][ typing.Type[ typing.Tuple",
      "46": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Any],...]",
      "47": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[typing.Any][ typing.Type[typing.Tuple[typing.Any]",
      "48": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd positional only parameter to call isinstance but got typing._SpecialForm for 3rd positional only parameter to call isinstance but got Union[typing.Type[[typing.Any], typing",
      "49": "if isinstance(loss, Tuple): average_over += loss[1] but return Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any],...]] for 2nd position only parameter to call isinstance but got typing._SpecialForm for 3rd position only parameter to call isinstance but got Union[typing.Type[ typing.Type[typing.Any], Tuple["
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            deposit_transaction=data['deposit_transaction'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelNewBalance.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), deposit_transaction=data['deposit_transaction'],"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), deposit_transaction=data['deposit_transaction'],",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=data['channel_identifier'], deposit_transaction=data['deposit_transaction'],",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=data['channel_identifier'], deposit_transaction=data['deposit_transaction'],",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  idx.length; idx++) { deposit_transaction=data['deposit_transaction'],",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=data['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier'], deposit_transaction=data['deposit_transaction'],",
      "9": "token_netzwork_identifier=to_canonical_address(data['token_network_identifier']), deposit_transaction=data['deposit_transaction'],",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  idx.length; idx++) { deposit_transaction=data['deposit_transaction'],",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=token_network_identifier, deposit_transaction=data['deposit_transaction'],",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  1; idx++) { deposit_transaction=data['deposit_transaction'],",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), deposit_transaction=data['deposit_transaction'],",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx.length; idx++) { deposit_transaction=data['deposit_transaction'],",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  10? idx.length : idx + 1), deposit_transaction=data['deposit_transaction'],",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  1? idx.length : idx.length) { deposit_transaction=data['deposit_transaction'],",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  1? idx.length : idx++) { deposit_transaction=data['deposit_transaction'],",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  1? idx.length : idx + 1), deposit_transaction=data['deposit_transaction'],",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  10? idx.length : idx_length; idx++) { deposit_transaction=data['deposit_transaction'],",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  100? idx.length : idx.length) { deposit_transaction=data['deposit_transaction'],",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  10? idx.length : idx++) { deposit_transaction=data['deposit_transaction'],",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  1; idx++) { deposit_transaction=data['deposit_transaction'],",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  10? idx.length : idx.length) { deposit_transaction=data['deposit_transaction'],",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  5? idx.length : idx + 1), deposit_transaction=data['deposit_transaction'],",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  1? idx.length : idx + 1); deposit_transaction=data['deposit_transaction'],",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (data['receiveChannelNewBalance.__init__']) { deposit_transaction=data['deposit_transaction'],",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx.length; idx++) { deposit_transaction=data['deposit_transaction'],",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (data['receiveChannelNewBalance.__init__']) { deposit_transaction=data['deposit_transaction'],",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx? idx.length : 0) { deposit_transaction=data['deposit_transaction'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx? transaction_idx.length : data['transaction_idx'])); deposit_transaction=data['deposit_transaction'],",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  10? idx.length : idx + 1), deposit_transaction=data['deposit_transaction'],",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=token_network_identifier, deposit_transaction=data['deposit_transaction'],",
      "33": "token_network_identifier=to_canonical_address(data['token_netwerk_identifier']), deposit_transaction=data['deposit_transaction'],",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  100? idx.length : idx + 1), deposit_transaction=data['deposit_transaction'],",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx? transaction_idx.length : data['idx'])); deposit_transaction=data['deposit_transaction'],",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (data['receiveChannelNewBalance.__init__]) { deposit_transaction=data['deposit_transaction'],",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx? transaction_idx.length : data['idx'])); deposit_transaction=data['deposit_transaction'],",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (data['receiveChannelNewBalance.__init__]) { deposit_transaction=data['deposit_transaction'],",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx? transaction_idx.length : data['transaction_idx'])); deposit_transaction=data['deposit_transaction'],",
      "40": "token_netwerk_identifier=to_canonical_address(data['token_network_identifier']), deposit_transaction=data['deposit_transaction'],",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  10? idx.length : idx_length) { deposit_transaction=data['deposit_transaction'],",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (data['token_network_identifier']) { deposit_transaction=data['deposit_transaction'],",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx? null : idx) { deposit_transaction=data['deposit_transaction'],",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (1, idx? idx.length : 0) { deposit_transaction=data['deposit_transaction'],",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx = 0; idx  transaction_idx? transaction_idx.length : data['deposit_transaction'])",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier'], channel_identifier=int(data['channel_identifier']) while remaining (data['token_network_identifier']).length) { deposit_transaction=data['deposit_transaction'],",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (1, idx? idx : 0) { deposit_transaction=data['deposit_transaction'],",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (data['token_network_identifier']).length) { deposit_transaction=data['deposit_transaction'],",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=int(data['channel_identifier']) while remaining (data['receiveChannelNewBalance._init__']) { deposit_transaction=data['deposit_transaction'],"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
    "target_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
    "warning_line": "            label_probs.append(Label(idx, conf.item()))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "target_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402^",
    "target_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "predictions": [
      "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs"
    ],
    "correct": false,
    "top_five": {
      "0": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs",
      "1": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(Label(idx, conf.item()));",
      "2": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(Label(idx, conf.item()));",
      "3": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx, conf.item()));",
      "4": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx, conf.item()));",
      "5": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(Label(idx, conf.item())); }",
      "6": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(Label(idx, conf.item()))",
      "7": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf[0].item())) return label_probs",
      "8": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(Label(idx, conf.item())); }",
      "9": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx? idx[0] || idx[1]));",
      "10": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs",
      "11": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs;",
      "12": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx? idx[0] || idx[1]));",
      "13": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!== undefined)",
      "14": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!== undefined && idx!== conf.item()));",
      "15": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!= null? idx : 0));",
      "16": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx[0], idx[1]), idx[2]));",
      "17": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(label_idx || idx[0], idx[1]));",
      "18": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx[0], idx[1]));",
      "19": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!= null? idx : 0));",
      "20": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!== undefined && idx!== conf.item()));",
      "21": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx[0], idx[1]));",
      "22": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx, conf.item()))",
      "23": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!= null? idx : 0))",
      "24": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx || idx[0], idx[1]));",
      "25": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!= null? idx : idx));",
      "26": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(label_probs.get_idx));",
      "27": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(label_probs.get_idx));",
      "28": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!= null? idx : enumerate(softmax))",
      "29": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!= null? idx : idx)",
      "30": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!== undefined && idx!== conf.item()))",
      "31": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf[0], idx[1])) return label_probs.append(Label(idx, conf[2]));",
      "32": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!== undefined));",
      "33": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(label_probs.get_idx))",
      "34": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx? idx[0] || idx[1]))",
      "35": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx[0], idx[1]), idx[2])",
      "36": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx || idx[0], idx[1]));",
      "37": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!== undefined)",
      "38": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx? idx[0], idx[1]));",
      "39": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf[0], conf[1])) return label_probs.append(Label(idx, conf[2]));",
      "40": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!= null? idx : idx'));",
      "41": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx[0], idx[1]))",
      "42": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!= null? idx : 0)",
      "43": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx, conf.item()));",
      "44": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!== undefined && idx ));",
      "45": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx!= null? idx : idx));",
      "46": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx[0], idx[1] || idx[2]));",
      "47": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())); return label_probs.append(label_probs.get(idx!= null? idx : enumerate(softmax))",
      "48": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(label_probs.get('idx'))",
      "49": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(label_probs.get(idx? idx[0], idx[1]));"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=int(data['channel_identifier']),\n        )\n",
    "target_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n        )\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `RouteState.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 679,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), )"
    ],
    "correct": false,
    "top_five": {
      "0": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), )",
      "1": "node_address=to_canonical_address(data['node_address']), channel_identifier=int(data['channel_identifier']), )",
      "2": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), )",
      "3": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']) )",
      "4": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=int(data['route_id']),",
      "5": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_address=to_canonical_address(data['route_address']),",
      "6": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_address=to_canonical_address(data['route_address']),",
      "7": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']) )",
      "8": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_bytes(data['channel_identifier']), )",
      "9": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_identifier=int(data['route_identifier']), )",
      "10": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=int(data['route-id']),",
      "11": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_address=to_canonical_address(data['route-address']),",
      "12": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_name=node_address+'/'+channel_identifier,",
      "13": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_integer(data['channel_identifier']), )",
      "14": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_address + '/' + channel_identifier,",
      "15": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_to_call(RouteState.__init__, data['channel_identifier']),",
      "16": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), path=node_address+'/'+ channel_identifier,",
      "17": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_address=to_canonical_address(data['route-address']),",
      "18": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_name=data['route-name']",
      "19": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_identifier=int(data['channel_identifier']), )",
      "20": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_state= { route: RouteState.__init__ },",
      "21": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_id",
      "22": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_address+'.',",
      "23": "node_address=to_canonical_address(data['node_address']), channel_identifier=int(data['channel_identifier']), route_address=to_canonical_address(data['route_address']),",
      "24": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_address+'.route_id',",
      "25": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_bytecode(data['channel_identifier']), )",
      "26": "node_address=to_canonical_address(data['node_address']), channel_identifier=int(data['channel_identifier']) )",
      "27": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_name=node_address+'.'+channel_identifier,",
      "28": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_address + '.' + data['route_id']",
      "29": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_param=int(data['route_param']),",
      "30": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_address+'.' + data['route_id']",
      "31": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_name=node_address+'.' + data['route_name']",
      "32": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_id=int(data['route_id']),",
      "33": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_name=data['route-name']",
      "34": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=node_address + '/' + data['route_id']",
      "35": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_to_call(RouteState.__init__, data['channel_identifier']), )",
      "36": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), path=node_address+'/'+channel_identifier,",
      "37": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_addr=int(data['route_addr']),",
      "38": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_name=node_name,",
      "39": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_name=node_address+'.',",
      "40": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_id=node_address + '/' + channel_identifier,",
      "41": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_resolve=node_resolve,",
      "42": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=int(data['channel_identifier']),",
      "43": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_interopRequireDefault(data['channel_identifier']), )",
      "44": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_resolve=node_address,",
      "45": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_id=null;",
      "46": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_stringify(data['channel_identifier']), route_resolve=node_resolve,",
      "47": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_path=node_address+'/'+channel_identifier,",
      "48": "node_address=to_canonical_address(data['node_address']), channel_identifier=int(data['channel_identifier']), route_id=node_address + '/' + channel_identifier,",
      "49": "node_address=to_canonical_address(data['node_address']), channel_identifier=to_canonical_address(data['channel_identifier']), route_to_node_address(channel_identifier),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
    "target_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
    "warning_line": "                new_value = self._handle_Subscript(value)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Instagram/LibCST",
    "source_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "target_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8^",
    "target_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "predictions": [
      "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)"
    ],
    "correct": false,
    "top_five": {
      "0": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "1": "new_value = self._handle_NameOrAttribute(value) if isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "2": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined'): new_value = self._handle_Subscript(value)",
      "3": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, subscript): new_value = self._handle_Subscript(value)",
      "4": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.subscript): new_value = self._handle_Subscript(value)",
      "5": "new_value = self._handle_NameOrAttribute(value) if isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined') elif isinstance(base.value, typeof cst._nodes.expression.Subscript): new_value = self._handle_Subscript(value)",
      "6": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof new_value === 'function') {",
      "7": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = elif.isinstance(base.value, cst.Subscript)",
      "8": "new_value = self._handle_NameOrAttribute(value) if isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined') elif isinstance(base.value, typeof cst._nodes.expression.Subscript) : new_value = self._handle_Subscript(value)",
      "9": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof new_value!== 'undefined') {",
      "10": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, typeof cst._nodes.expression.Subscript!== undefined): new_value = self._handle_Subscript(value)",
      "11": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, typeof cst._nodes.expression.Subscript!== undefined'): new_value = self._handle_Subscript(value)",
      "12": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr = elif.isInstance(base.value, cst.Subscript)",
      "13": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) elif_isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "14": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof cst._nodes.expression.BaseExpression!== 'undefined') {",
      "15": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = el.getById(attr_name)",
      "16": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof cst._nodes.expression.TypeCollector!== 'undefined') {",
      "17": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, (cst._nodes.expression.Subscript)): new_value = self._handle_Subscript(value)",
      "18": "new_value = self._handle_NameOrAttribute(value) if isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined') elif isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined'): new_value = self._handle_Subscript(value)",
      "19": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, typeof cst.Nodes.expression.Subscript!== 'undefined'): new_value = self._handle_Subscript(value)",
      "20": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr = elif.isinstance(base.value, cst.Subscript)",
      "21": "new_value = yourself._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "22": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) elif (typeof cst._nodes.expression.BaseExpression!== 'undefined') {",
      "23": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.value.attr_name || value = elif.isinstance(base.value, cst.Subscript)",
      "24": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, typeof cst._nodes.expression.Subscript): new_value = self._handle_Subscript(value)",
      "25": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = elif (typeof attr_name ==='string')",
      "26": "new_value = self._handle_NameOrAttribute(value) if isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "27": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof cst._nodes.expression.TypeCollector!== undefined) {",
      "28": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = el.getById(attr_name);",
      "29": "new_value = self._handle_NameOrAttribute(value) if isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined') elif isinstance(base.value, typeof cst._nodes.expression.Subscript!== 'undefined')",
      "30": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof el === 'function') {",
      "31": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value =self._handle_Subscript(value)",
      "32": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.AttrBoolean(attr_name)",
      "33": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof new_value === 'object') {",
      "34": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof el!== 'undefined') {",
      "35": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof cst._nodes.expression.String(value)!== 'undefined') {",
      "36": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attrs = []",
      "37": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = elif (typeof attr_name === string)",
      "38": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof new_value === function) {",
      "39": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) elif (typeof cst._nodes.expression.TypeCollector!== 'undefined') {",
      "40": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof new_value!== undefined) {",
      "41": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = attr_name;",
      "42": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof cst._nodes.expression.TypeCollector === function) {",
      "43": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, node.Subscript): new_value = self._handle_Subscript(value)",
      "44": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof cst._nodes.expression.String!== 'undefined') {",
      "45": "new_value = self._handle_nameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "46": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = elif (attr_name === 'a')",
      "47": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) if (typeof el!== undefined) {",
      "48": "new_value = own._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "49": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value) var attr_name = cst._nodes.expression.attr_name || value = attr_name || value.replace(/ ^ s+/g, '')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.load(json_fp)\n            for jd in json_data:\n",
    "warning_line": "                json_data = json.loads(json_fp)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "target_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:"
    ],
    "correct": false,
    "top_five": {
      "0": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "1": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp); for jd in json_data:",
      "2": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if (typeof json_data!== 'undefined') { json_data = json.loads(json_fp) for jd in json_data:",
      "3": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-sig\") as json_fp: for jd in json_data:",
      "4": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with new(io.TextIOWrapper)() for jd in json_data:",
      "5": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(fp) for jd in json_data:",
      "6": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:",
      "7": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handlers(io.TextIOWrapper) for jd in json_data:",
      "8": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"l\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:",
      "9": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-px\") as json_fp: for jd in json_data:",
      "10": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if (typeof json!== 'undefined') { json_data = json.loads(json_fp) for jd in json_data:",
      "11": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_open(json_file, \"r\", encoding=\"utf-8-sig\")",
      "12": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"n\"), encoding=\"utf-8-sig\") as json_fp: for jd in json_data:",
      "13": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-bp\") as json_fp: for jd in json_data:",
      "14": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_response: function(response) {",
      "15": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with new(json_file, \"a\", encoding=\"utf-8-px\"): json_data = json.loads(json_fp) for jd in json_data:",
      "16": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-px\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "17": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if (json_fp!= null) { json_data = json.loads(json_fp) for jd in json_data:",
      "18": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "19": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "20": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_changes: true for jd in json_data:",
      "21": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: io.TextIOWrapper(json_fp) json_data = json.loads(json_fp) for jd in json_data:",
      "22": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-z\").fp: json_data = json.loads(json_fp) for jd in json_data:",
      "23": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json_loads(json_fp) for jd in json_data:",
      "24": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-csv\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "25": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-pr\") as json_fp: for jd in json_data:",
      "26": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:",
      "27": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"l\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "28": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with io.TextIOWrapper(json_fp) for jd in json_data:",
      "29": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-z\"); for jd in json_data:",
      "30": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-csv\") as json_fp: for jd in json_data:",
      "31": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"a\", encoding=\"utf-8-bp\") as json_fp: json_data = json.loads(json_fp) for jd in json_data:",
      "32": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if (json_fp.length) json_data = json.loads(json_fp) for jd in json_data:",
      "33": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with new(io.TextIOWrapper)(json_fp) for jd in json_data:",
      "34": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_open(json_file, \"utf-8-sig\")",
      "35": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_results(json_fp) for jd in json_data:",
      "36": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(io.TextIOWrapper) for jd in json_data:",
      "37": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handlers(io.TextIOWrapper, json_fp) for jd in json_data:",
      "38": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with input: io.TextIOWrapper for jd in json_data:",
      "39": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if (typeof json_data!== 'undefined') { for jd in json_data:",
      "40": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with new(io.TextIOWrapper) function parseJSON(json_fp, parseInt) { for jd in json_data:",
      "41": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-z\").fp: json_data for jd in json_data:",
      "42": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-bp\") as json_fp: for jd in json_data:",
      "43": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_changes: true",
      "44": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with new(json_file, \"a\", encoding=\"utf-8-bp\"): json_data = json.loads(json_fp) for jd in json_data:",
      "45": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_response: function(response, json_fp) { for jd in json_data:",
      "46": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-sig\") as json_fp: if (typeof json_data!== 'undefined') { for jd in json_data:",
      "47": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handlers(json_fp) for jd in json_data:",
      "48": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with handle_response: function handle_response() { for jd in json_data:",
      "49": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.loads(json_fp) with open(json_file, \"utf-8-pr\") as json_fp: for jd in json_data:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table\n\n",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                tables[name] = table\n\n",
    "warning_line": "                tables[table.name] = table",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "source_filename": "transformers4rec/torch/features/embedding.py",
    "target_filename": "transformers4rec/torch/features/embedding.py",
    "source_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7^",
    "target_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "predictions": [
      "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = table"
    ],
    "correct": false,
    "top_five": {
      "0": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = table",
      "1": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for positional only parameter to call dict.__setitem__ but got tables[table.name] = table.name",
      "2": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameter to call dict.__setitem__ buttons[table.name] = table.name",
      "3": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameters to call dict.__setitem__ buttons[table.name] = table.name",
      "4": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.dim }",
      "5": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables: tables[table.name] = table.name in tables[table.name] = table.dim }",
      "6": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features_dim[name] = table.dim }",
      "7": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.name",
      "8": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Notification.str tables[table.name] = table.names[table.name] = table.name",
      "9": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameters to call dict.__setitem__ tables[table.name] = table.name",
      "10": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features_dim[name] = table.dim }",
      "11": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for positional only parameter to call dict.__setitem__ but got Optional[str] but got Tables[str]; tables[table.name] = table: features_dim[name] = table.dim } if table.name",
      "12": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for positional only tables[table.name] = table.names[table.name] = table.name",
      "13": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameter to call dict.__setitem__ tables[table.name] = table.name",
      "14": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positionsal only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.dim }",
      "15": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features_dim[name] = table.dim } if table.name",
      "16": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Notification.str tables[table.name] = table.names[table.name] = table.name",
      "17": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for positional only parameter to call dict.__setitem__ but got Optional[str] but got Tables[str]; tables[table.name] = table: features_dim[name] = table.dim } if table.name not in tables[table.name]",
      "18": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.dim }",
      "19": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features_dim[name] = table.dim } if table.name",
      "20": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameter to call dict.__setitem__ buttons.name not in tables[table.name] = table.dim",
      "21": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.name",
      "22": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for positional only parameter to call dict.__setitem__ but got Optional[str] but got Tables[str]; tables[table.name] = table: features_dim[name] = table.dim }",
      "23": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for table.name in tables tables[table.name] = table.name in tables[table.name]",
      "24": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.dim",
      "25": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for positional only tables[table.name] = table",
      "26": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameters to call dict.__setitem__ buttons.name not in tables[table.name] = table.dim",
      "27": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name not in tables[table.name]",
      "28": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positionsal only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.name",
      "29": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Optional[str] in tables tables[table.name] = table.name = table.name",
      "30": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameter to call dict.__setitem__; tables[table.name] = table.name",
      "31": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features_dim[name] = table.dim",
      "32": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features_dim[name] = table.dim",
      "33": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameters to call dict.__setitem__; tables[table.name] = table.name",
      "34": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameter to call dict.__setitem__ buttons.name = table.name)",
      "35": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Str for 3 positional only parameters to call dict.__setitem__ buttons.name = table.name)",
      "36": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Tables[str] but got Tables[table.name] = table.name]",
      "37": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Optional[str]; tables[table.name] = table: features[table.name] = table.dim } if table.name",
      "38": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for positional only tables[table.name] = table.names[table.name] = table.dim }",
      "39": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for positional only tables[table.name] = table.name not in tables[table.name] = table.name",
      "40": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid tables[table.name] = table",
      "41": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for positional only tables[table.name] = table.name not in tables[table.name]",
      "42": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Not valid for table.name in tables tables[table.name] = table.name = table.name",
      "43": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables: tables[table.name] = table.name in tables[table.name] = table.dim",
      "44": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables: tables[table.name] = table",
      "45": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Notification.str tables[table.name] = table.name not in tables[table.name]",
      "46": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Optional[str] in tables: tables[table.name] = table",
      "47": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name not in tables[table.name] = table.name",
      "48": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str for 2 positional only parameter to call dict.__setitem__ but got Optional[str] but got Str in tables. tables[table.name] = table.name in tables[table.name] = table.name in tables[table.name]",
      "49": "features_dim[name] = table.dim Optional[str] for 1 positional only parameter to call dict.__setitem__ but got Optional[str for 2 positional only parameters to call dict.__setitem__ but got Optional[str] but got Optional[str] in tables: tables[table.name] = table"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )\n",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_line": "            current_htlc_signatures=[],",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 477,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "spesmilo/electrum",
    "source_filename": "electrum/lnpeer.py",
    "target_filename": "electrum/lnpeer.py",
    "source_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2^",
    "target_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "predictions": [
      "current_commitment_signature=None, current_htlc_signatures=[], )"
    ],
    "correct": false,
    "top_five": {
      "0": "current_commitment_signature=None, current_htlc_signatures=[], )",
      "1": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment_signature=None,",
      "2": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures)",
      "3": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[],: current_commitment_signature=None, )",
      "4": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], and current_htlc_signatures=[], )",
      "5": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment_signature=None,",
      "6": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], and current_htlc_signatures=[], )",
      "7": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[],: current_commitment_signature=None, )",
      "8": "current_commitment_signature=None, current_htlc_signatures=[],!current_htlc_signatures.length? bytes for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].bytes; }",
      "9": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment_signature=None, )",
      "10": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment_signature=None, )",
      "11": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__) but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures)",
      "12": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[],: current_htlc_signatures=[], )",
      "13": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], )",
      "14": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__) but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures).toArray(16th parameter current_htlc_signatures)",
      "15": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[],: current_htlc_signatures=[], )",
      "16": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment, )",
      "17": "current_commitment_signature=None, current_htlc_signatures=[],!current_htlc_signatures.length? bytes for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].bytes; }",
      "18": "current_commitment_signature=None, current_htlc_signatures=[], List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures, 16th parameter  but",
      "19": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes)",
      "20": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], expected_htlc_signatures=[], current_commitment_signature=None, )",
      "21": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], expected_htlc_signatures=[], current_commitment_signature=None, )",
      "22": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], )",
      "23": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures).toArray(16th parameter current_htlc_signatures)",
      "24": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment, )",
      "25": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__) but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures).toArray(16th parameter current_htlc_signatures); }",
      "26": "current_commitment_signature=None, current_htlc_signatures=[], List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures, 16th parameter",
      "27": "current_commitment_signature=None, current_htlc_signatures=[], List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures, 16th parameter, 16th parameter",
      "28": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], previous_htlc_signatures=None, )",
      "29": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures))",
      "30": "current_commitment_signature=None, current_htlc_signatures=[],!current_htlc_signatures.length? Bytes : 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].bytes; }",
      "31": "current_commitment_signature=None, current_htlc_signatures=[], List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures, 16th parameter ;",
      "32": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], expected_htlc_signatures=[], current_commitment_signature=None,",
      "33": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], current_htlc_signatures_signatures=[],",
      "34": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].replace(/ ^ htlc/g, '').replace(/ \\ htlc/g,'s.');",
      "35": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes)",
      "36": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=[], current_commitment_signature, )",
      "37": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], current_htlc_signatures_signatures=[], )",
      "38": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], expected_htlc_signatures=[], current_commitment_signature=None,",
      "39": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], current_htlc_signatures_signatures=[], )",
      "40": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=None, )",
      "41": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], local_htlc_signatures=None, )",
      "42": "current_commitment_signature=None, current_htlc_signatures=[], List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]]. ByteArray(bytes, 16th parameter current_htlc_signatures._signatures",
      "43": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], current_htlc_signatures_signatures=[],",
      "44": "current_commitment_signature=None, current_htlc_signatures=[],!current_htlc_signatures.length? bytes for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toString(); }",
      "45": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], past_htlc_signatures=None, )",
      "46": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].replace(/ ^ s*$/, ''); }",
      "47": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 15th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(bytes), current_htlc_signatures=[], past_htlc_signatures=None, )",
      "48": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].toArray(16th parameter current_htlc_signatures)); }",
      "49": "current_commitment_signature=None, current_htlc_signatures=[], ).toArray(bytes) for 16th parameter current_htlc_signatures to call LocalConfig.__init__ but got List[Variable[_T]].replace(/ \\ htlc/g, '').replace(/ \\ htlc/g,'s.');"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    with proc as nix_env:\n        return parse_packages_xml(nix_env.stdout)\n",
    "target_code": "    with proc as nix_env:\n        assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_line": "        return parse_packages_xml(nix_env.stdout)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 258,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Mic92/nixpkgs-review",
    "source_filename": "nixpkgs_review/review.py",
    "target_filename": "nixpkgs_review/review.py",
    "source_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a^",
    "target_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "predictions": [
      "with proc as nix_env: return parse_packages_xml(nix_env.stdout)"
    ],
    "correct": false,
    "top_five": {
      "0": "with proc as nix_env: return parse_packages_xml(nix_env.stdout)",
      "1": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]];",
      "2": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].",
      "3": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].prettyPrint(xml(nix_env.stdout)",
      "4": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]];",
      "5": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]]; }",
      "6": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]]",
      "7": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].stdout;",
      "8": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got IO[bytes] for 3rd positional only parameter to call IO[bytestdout)",
      "9": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes] for 3rd positional only parameter to callback(nix_env.stdout)",
      "10": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got IO[bytes] for 3rd positional only parameter to call parse_env.stdout)",
      "11": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].toString();",
      "12": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]]",
      "13": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]]; }",
      "14": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got Stdout[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]];",
      "15": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got IO[bytes] for 3rd positional only parameter to call parse_packages_xml",
      "16": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].parseXml(nix_env.stdout)",
      "17": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].prettyPrint(xml)",
      "18": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].stdout;",
      "19": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got Type[IO[typing.Any]]",
      "20": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got IO[bytes] for (stdout)",
      "21": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes] but got Optional[IO[typing.Any];",
      "22": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got Persistence[basic; }",
      "23": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got Type[IO[typing.Any]];",
      "24": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]];",
      "25": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got Stdout[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].stdout;",
      "26": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes]",
      "27": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got IO[bytes] for (tdout)",
      "28": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] with proc as well.parse_packages_xml(nix_env.stdout)",
      "29": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call IO[bytes] but got IO[bytes] for 3rd positional only parameter to call IO[bytes] but got bytese_env.stdout",
      "30": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got IO[bytes] but got stdout",
      "31": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got Persistence[IO[bytes]",
      "32": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got IO[bytes];",
      "33": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got IO[bytes] for 2nd positional only parameter to call IO[bytestdout)",
      "34": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got Stdout[IO[bytes] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]];",
      "35": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes] but got Optional[IO[typing.Any]",
      "36": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got IO[bytes]; }",
      "37": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes] but got Optional[IO[typing.Any];",
      "38": "with proc as nix_env: return IO[bytes] for 1st positional parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional parameter to call parse_packages_xml but got IO[bytes] for 3rd positional parameter to call IO[typing.Any];",
      "39": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].toString(); }",
      "40": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional parameter to call IO[bytes] but got Optional[IO[typing.Any]];",
      "41": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes] for 3rd positional only parameter to callback(nix_env.tdout)",
      "42": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]]",
      "43": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got IO[bytes] for 3rd positional only parameter to call IO[bytestdout;",
      "44": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]].prettyPrint(xml, bytestdout)",
      "45": "with proc as nix_env: return IO[bytes] for 1st positional parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional parameter to call parse_packages_xml but got IO[bytes] for 3rd positional parameter to call IO[bytese_env.stdout)",
      "46": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO[bytes] but got Optional[IO[typing.Any]] but got Persistence[IO[byteseselinux]",
      "47": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml(nix_env.stdout) but got Optional[IO[typing.Any]] for 2nd positional only parameter to call IO but got Optional[IO[typing.Any]].prettyPrint(xml)",
      "48": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got IO[bytes] for 2nd positional only parameter to call parse_packages_xml but got IO[bytes] for 3rd positional only parameter to call ;",
      "49": "with proc as nix_env: return IO[bytes] for 1st positional only parameter to call parse_packages_xml but got Optional[IO[typing.Any]] but got PlainObject[xml[parseInt()](nix_env.stdout);"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_line": "        player.init_names(self._name, title, self.description, self.short_description)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/charbuilder.py",
    "target_filename": "tale/charbuilder.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)"
    ],
    "correct": false,
    "top_five": {
      "0": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "1": "player.init_gender(self.gender) title = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "2": "player.init_gender(self.gender) title = None if (self.title) self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "3": "player.init_gender(self.gender) title = None if self.title == self._name else self.title juc\u0103tor.init_names(self._name, title, self.description, self.short_description)",
      "4": "player.init_gender(self.gender) title = None if (self.title === self._name) else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "5": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_gender(self.gender)",
      "6": "player.init_gender(self.gender) title = None if player.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "7": "player.init_gender(self.gender) title = None if self.title === self._name else self.title juc\u0103tor.init_names(self._name, title, self.description, self.short_description)",
      "8": "player.init_gender(self.gender) title = None if (self.title!== self._name) self.title = self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "9": "player.init_gender(self.gender) title = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_gender(self.gender)",
      "10": "player.init_gender(self.gender) title = None if (self.title == self._name) else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "11": "player.init_gender(self.gender) title = None if (self.title) self.title == self._name else self.title juc\u0103tor.init_names(self._name, title, self.description, self.short_description)",
      "12": "player.init_gender(self.gender) title = None if (self.title!== self._name) else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "13": "player.init_gender(self.gender) title = None if self.title ==self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "14": "player.init_gender(self.gender) title = None if (self.title) == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "15": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) return player.init_gender(self.gender)",
      "16": "player.init_gender(self.gender) title = None if (self.title) self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "17": "player.init_gender(self.gender) title = None if (self.title) player.init_names(self._name, title, self.description, self.short_description)",
      "18": "player.init_gender(self.gender) title = None player.init_names(self._name, title, self.description, self.short_description)",
      "19": "player.init_gender(self.gender) title = None if (self.title) this.title = self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "20": "player.init_gender(self.gender) title = None if (self.title!== undefined) self.title = self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "21": "player.init_gender(self.gender) title = None if (self.title) internal.title = self._name else internal.title player.init_names(self._name, title, self.description, self.short_description)",
      "22": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_short_description = player.gender(self.gender)",
      "23": "player.init_gender(self.gender) title = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description) return player.init_gender(self.gender)",
      "24": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_nicknames(self._name, title)",
      "25": "player.init_gender(self.gender) title = None if (self.title) self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_gender(self.gender)",
      "26": "player.init_gender(self.gender) title = None if (self.title!== self._name) player.init_names(self._name, title, self.description, self.short_description)",
      "27": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) title = null",
      "28": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_short_description player.init_gender(self.gender)",
      "29": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_nickname(self._name)",
      "30": "player.init_gender(self.gender) title = None if player.init_names(self._name, title, self.description, self.short_description)",
      "31": "player.init_gender(self.gender) title = None if (self.title) else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "32": "player.init_gender(self.gender) title = None if (self.title) self.title ==self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "33": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title)",
      "34": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_cache(player._name)",
      "35": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) return player",
      "36": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_nicknames(self._name, title, self.description)",
      "37": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_calls(self._name, title, self.description)",
      "38": "player.init_gender(self.gender) title = None if self.title == self._name else self.title juc\u0103tor.init_names(self._name, title, self.description, self.short_description) player.init_gender(self.gender)",
      "39": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_calls(self._name, title)",
      "40": "player.init_gender(self.gender) title = None if (self.title!== self._name) self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "41": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_short_description = player.gender[str]",
      "42": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_transition(self.transition)",
      "43": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.short_description = player.gender(self.gender)",
      "44": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) return player.init_names(self._name, title, self.description)",
      "45": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_second_gender(self.gender)",
      "46": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_css(self.gender, player.gender_gender)",
      "47": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_cookies(self.gender[title])",
      "48": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description)",
      "49": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) player.init_transition(self.transition.get_transition_key)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_line": "    op_node = compile_type_check_op(expr, ctx=ctx)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 91,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/expr.py",
    "target_filename": "edb/edgeql/compiler/expr.py",
    "source_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb^",
    "target_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "predictions": [
      "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)"
    ],
    "correct": false,
    "top_five": {
      "0": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "1": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.IsOp(expr, ctx=ctx)",
      "2": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set(expr, qlast.Base, op_node)",
      "3": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node.length) {",
      "4": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node) return;",
      "5": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: return op_node = compile_type_check_op(expr, ctx=ctx)",
      "6": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node) {",
      "7": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.IsOp(expr, ctx: context.ContextLevel, false)",
      "8": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: node = compile_type_check_op(expr, ctx=ctx)",
      "9": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node.type) {",
      "10": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) compile_type_check_op(expr, ctx=ctx)",
      "11": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.type ='string'",
      "12": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set(expr, ctx)",
      "13": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) var irast = op_node.get_type('irast')",
      "14": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Base = op_node.getOptuid(expr, ctx=ctx)",
      "15": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) var irast = this._irast(expr, ctx)",
      "16": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) return irast.Node(expr, ctx=ctx)",
      "17": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set(ip, ctx)",
      "18": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.Target = op_node.getOpts(expr, ctx=ctx)",
      "19": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node && op_node.length) {",
      "20": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.Type.Number === 6) {",
      "21": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Base = op_node.get_type(expr, ctx=ctx)",
      "22": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.IsOp(expr, ctx=ctx)",
      "23": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.Target = op_node.get_type(expr)",
      "24": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) var irast = op_node.getOpts(expr, ctx)",
      "25": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) return irast.Set.ISO8601G(expr, ctx)",
      "26": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.type!== 'undefined') {",
      "27": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) var irast = this._irast || { } ;",
      "28": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.Type.NeedsCompiling) {",
      "29": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Base = op_node.get_type(expr)",
      "30": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) for (var i=0; ilast.Base.length; i++) {",
      "31": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.IsOp(expr, ctx: context.ContextLevel, qlast.Base)",
      "32": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) var irast = require('./irast')",
      "33": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) />",
      "34": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) return irast.Set[0]",
      "35": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) return irast.Set.ISO8601(expr, ctx)",
      "36": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set(expr, ctx: context.ContextLevel, ip_node)",
      "37": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.Type.NodeType ==='string') {",
      "38": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.type === 'object') {",
      "39": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node) return irast.Set(expr, ctx)",
      "40": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.Function(ip, ctx)",
      "41": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.Target = op_node.get_type(expr, ctx=ctx)",
      "42": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (!op_node) return irast.Set.ISO8601(expr, ctx)",
      "43": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.Type.NodeType === 'function') {",
      "44": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.IsOp(expr, ctx: context.ContextLevel, ip_node)",
      "45": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) return irast.Node(expr)",
      "46": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) var irast = op_node.getOptuid(expr)",
      "47": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) if (irast.type!== 'function') {",
      "48": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Set.Target: op_node",
      "49": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx) irast.Base = op_node.getOpts(expr, ctx=ctx)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)\n",
    "target_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_line": "            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)"
    ],
    "correct": false,
    "top_five": {
      "0": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "1": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context) updates = component.pipeline_init(*args)",
      "2": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) update = component.pipeline_init(*args)",
      "3": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updated = component.pipeline_init(*args)",
      "4": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map(str, typing.Any) updates = component.pipeline_init(*args)",
      "5": "for component in self.pipeline: components.push(component.pipeline_init_args()) args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "6": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config); updates = component.pipeline_init(*args)",
      "7": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) Updates = component.pipeline_init(*args)",
      "8": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context.self.config) updates = component.pipeline_init(*args)",
      "9": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.piping_init(*args)",
      "10": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "11": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map(str, typing.Any]) updates = component.pipeline_init(*args)",
      "12": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map((str, typing.Any) => { updates = component.pipeline_init(*args)",
      "13": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config), updates = component.pipeline_init(*args)",
      "14": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) upgrades = component.pipeline_init(*args)",
      "15": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config, config_nlu_pipeline_init_args) updates = component.pipeline_init(*args)",
      "16": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args = args || { } ; updates = component.pipeline_init(*args)",
      "17": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updats = component.pipeline_init(*args)",
      "18": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "19": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config, config_id) updates = component.pipeline_init(*args)",
      "20": "for component in self.pipeline: args = sc\u0103par_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "21": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.) updates = component.pipeline_init(*args)",
      "22": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args()) updates = component.pipeline_init(*args)",
      "23": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(arg) updates = component.pipeline_init(*args)",
      "24": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updating = component.pipeline_init(*args)",
      "25": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)Updates = component.pipeline_init(*args)",
      "26": "for component in self.pipeline: args = rasa_nlu.compponents.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "27": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map(str, typing.Any)Updates = component.pipeline_init(*args)",
      "28": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) ups = component.pipeline_init(*args)",
      "29": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map(trim()) updates = component.pipeline_init(*args)",
      "30": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(arg) } updates = component.pipeline_init(*args)",
      "31": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(new Error(\"Actual args already exist\")) updates = component.pipeline_init(*args)",
      "32": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(component.pipeline_init_args()) updates = component.pipeline_init(*args)",
      "33": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config, add_component_to_pipeline) updates = component.pipeline_init(*args)",
      "34": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(new Error(\"Actual args already exist\")); updates = component.pipeline_init(*args)",
      "35": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map(ctx) updates = component.pipeline_init(*args)",
      "36": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "37": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(self.config.arg) updates = component.pipeline_init(*args)",
      "38": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config, config_next) updates = component.pipeline_init(*args)",
      "39": "for component in self.pipeline: args = nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "40": "for component in self.pipeline: args = rasa_nlu.components.fulfill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "41": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).map(str) updates = component.pipeline_init(*args)",
      "42": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config, config_nlu) updates = component.pipeline_init(*args)",
      "43": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push([component.pipeline]) } ) updates = component.pipeline_init(*args)",
      "44": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config]) updates = component.pipeline_init(*args)",
      "45": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context), self.config) updates = component.pipeline_init(*args)",
      "46": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(new Error('Component'+ arg) } ) updates = component.pipeline_init(*args)",
      "47": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push(new Error(\"Pointer not found!\"), arg) updates = component.pipeline_init(*args)",
      "48": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config).forEach(function(arg) { args.push((component.pipeline_init_args) => { updates = component.pipeline_init(*args)",
      "49": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updations = component.pipeline_init(*args)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                new = Or(new, key_argument != index_argument)\n\n",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_line": "                new = Or(new, key_argument != index_argument)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1374,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "new = Or(new, key_argument!= index_argument)"
    ],
    "correct": false,
    "top_five": {
      "0": "new = Or(new, key_argument!= index_argument)",
      "1": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(new, key_argument)",
      "2": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, key_argument)",
      "3": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(new, key_argument)",
      "4": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, key_argument)",
      "5": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 4th positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(new, key_argument)",
      "6": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool but got(new, key_argument)",
      "7": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool but got bool but got(new, key_argument)",
      "8": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool but got bool but got(new, key_argument)",
      "9": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new)",
      "10": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(index_argument)",
      "11": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, bool)",
      "12": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(new, bool)",
      "13": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but not for 3rd positional only parameter to call mythril.laser.smt.bool.bool but got(new, key_argument)",
      "14": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, key_argument)",
      "15": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got new bool but got mythril.bool",
      "16": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or BUTTONSmal(new, key_argument)",
      "17": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolbut got(new, key_argument)",
      "18": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(index_argument)",
      "19": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool but got bool but got(new, key_argument)",
      "20": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, key_argument)",
      "21": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(index_argument)",
      "22": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but failed to get(new, key_argument)",
      "23": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, bool)",
      "24": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got(index_argument)",
      "25": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(new, key_argument)",
      "26": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but gotBoooooooboooooool",
      "27": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got new bool but got(new, key_argument)",
      "28": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but gotBoooooooboooool",
      "29": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolbuttons.new, key_argument)",
      "30": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool but got(new, key_argument)",
      "31": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(index_argument)",
      "32": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but gotBooooooobooooool",
      "33": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got from bool but got(new, key_argument)",
      "34": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but not found: key_argument)",
      "35": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(index_argument)",
      "36": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, bool)",
      "37": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but gotchasel but got mythril.bool",
      "38": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got(new, key_argument",
      "39": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but gotBooooooobooooooo",
      "40": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but got (new, bool)",
      "41": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got(new, bool)",
      "42": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool but got(new, key_argument)",
      "43": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got(new, key_argument",
      "44": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool but not found.bool but return",
      "45": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool instead of false,",
      "46": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool.Or but got()",
      "47": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool instead of false",
      "48": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Bool for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got bool for 3rd positional only parameter to call mythril.laser.smt.bool but got(new, bool)",
      "49": "new = Or(new, key_argument!= index_argument) const bool = mythril.laser.smt.bool.Or for 2nd positional only parameter to call mythril.laser.smt.bool.Or but got boolean but not for 3rd positional only parameter to call mythril.laser.smt.bool but got(new)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_line": "    (\"read_map\", [T.File()], T.Map(None), _notimpl),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/StdLib.py",
    "target_filename": "WDL/StdLib.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),"
    ],
    "correct": false,
    "top_five": {
      "0": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "1": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Array(T.Any()), _notimpl),",
      "2": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), \"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "3": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_init\", [T.File()], T.Map(None), _notimpl),",
      "4": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], _notimpl),",
      "5": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_read\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "6": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_instance\", [T.File()], T.Array(T.Any()), _notimpl),",
      "7": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Map(None), _notimpl),",
      "8": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_intelligent_array\", [T.File()], T.Array(T.Any()), _notimpl),",
      "9": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_buffer\", [T.File()], T.Array(T.Any()), _notimpl),",
      "10": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_file\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "11": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_init\", [T.File()], T.Map(T.Any()), _notimpl),",
      "12": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_integer\", [T.File()], T.Array(T.Any()), _notimpl),",
      "13": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_set\", [T.File()], T.Map(None), _notimpl),",
      "14": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Map(T.Any()), _notimpl),",
      "15": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_integer\", [T.File()], T.Array(T.Any()), _notimpl),",
      "16": "(\u201cread_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "17": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_2, [T.File()], _notimpl),",
      "18": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_table\", [T.File()], T.Table(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "19": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_model\", [T.File()], T.Map(None), _notimpl),",
      "20": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_plot\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "21": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_init\", [T.File()], T.Map(T.Average), _notimpl),",
      "22": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.String(T.Any())),",
      "23": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "24": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_buffer\", [T.File()], _notimpl),",
      "25": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_parse\", [T.File()], T.Map(None), _notimpl),",
      "26": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_range\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "27": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_index\", [T.File()], _notimpl),",
      "28": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Map(T.Average), _notimpl),",
      "29": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_parse\", [T.File()], T.Array(T.Any()), _notimpl),",
      "30": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_wise\", [T.File()], T.Map(None), _notimpl),",
      "31": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_index\", [T.File()], T.Map(None), _notimpl),",
      "32": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_array\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "33": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_intelligent_array\", [T.File()], T.Array(T.Any()), _notimpl),",
      "34": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_perform\", [T.File()], T.Array(T.Any()), _notimpl),",
      "35": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_init\", [T.File()], T.Array(T.Any()), _notimpl),",
      "36": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_2, [T.File()], T.Map(None), _notimpl),",
      "37": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_offset\", [T.File()], T.Map(None), _notimpl),",
      "38": "(\u201eread_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "39": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_init__\", [T.File()], T.Map(None), _notimpl),",
      "40": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_line_array\", [T.File()], T.Array(T.Any()), _notimpl),",
      "41": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines_permutations\", [T.File()], T.Array(T.Any()), _notimpl),",
      "42": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_files\", [T.File()], T.Array(T.Any()), _notimpl),",
      "43": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_line_init\", [T.File()], T.Map(None), _notimpl),",
      "44": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_by_line\", [T.File()], _notimpl),",
      "45": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_index\", [T.File()], T.Map(Enumerable.Index), _notimpl),",
      "46": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "47": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Array(T.Some()), _notimpl),",
      "48": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Array(T.Async()], _notimpl),",
      "49": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \"read_line_array\", [T.File()], T.Array(T.All()), _notimpl),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_line": "            amount=int(data['amount']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 598,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier'], amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), initiator=to_canonical_address(data['initiator']),",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=string(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator')",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator')",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator')",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator')",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator')",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator'])",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator')",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator'])",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=data['amount']), initiator=to_canonical_address(data['initiator']),",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 5th parameter amount, initiator=to_canonical_address(data['initiator')",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 6th parameter amount to call EventPaymentReceivedSuccess.')",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator'])",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator'])",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toLowerCase().indexOf(data['initiator']), initiator=to_address(data['initiator']),",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int, initiator=to_canonical_address(data['initiator']),",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 5th parameter amount to call EventPaymentReceivedSuccess.')",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int, initiator=to_canonical_address(data['initiator']),",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toLowerCase().toString(), initiator=to_address(data['initiator')",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_address(data['initiator')",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toString(), initiator=to_canonical_address(data['initiator')",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toLowerCase().toLowerCamount=initiator=to_canonical_address(data['initiator']),",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator']),",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator')",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator')",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_address(data['initiator')",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=null(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 5th parameter amount to call EventPaymentReceivedSuccess.')",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 5th parameter amount, initiator=to_canonical_address(data['initiator']),",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 6th parameter amount to call EventPaymentReceivedSuccess.'m')",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toLowerCase().toString(), initiator=to_canonical_address(data['initiator']),",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 6th parameter amount to call EventPaymentReceivedSuccesss.')",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got int for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int for 6th parameter amount to call EventPaymentReceivedSuccedSuccess.')",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead., initiator=to_canonical_address(data['initiator')",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toLowerCase().toString(), initiator=to_canonical_address(data['initiator')",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 5th parameter amount to call EventPaymentReceivedSuccess.__init__ but got int.toString(), initiator=to_canonical_address(data['initiator')",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got tokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int instead. initiator=to_canonical_address(data['initiator']),",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier'], identifier=int(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=token_network_identifier(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "48": "token_netzwork_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=int(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']) but got TokenAmount for 3rd parameter amount to call EventPaymentReceivedSuccess.__init__ but got int int(data['amount']) and initiator=to_canonical_address(data['initiator')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "target_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "warning_line": "        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `frozenset[str]` for 5th parameter `step_metadata_keys` to call `BuilderConfig.__init__` but got `typing.Set[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 210,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/datasets",
    "source_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "target_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "source_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f^",
    "target_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f",
    "predictions": [
      "file_suffix='_medium_expert-v2', step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),"
    ],
    "correct": false,
    "top_five": {
      "0": "file_suffix='_medium_expert-v2', step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "1": "file_suffix='_medium_expert-v2', _step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "2": "file_suffix='_medium_expert-v2', keyset=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "3": "file_suffix='_medium_expert-v2', step_metadata_keys=set([QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "4": "file_suffix='_medium_expert-v2', set_step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "5": "file_suffix='_medium_expert-v2', set_params([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "6": "file_suffix='_medium_expert-v2', keylist=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "7": "file_suffix='_medium_expert-v2', step_metadata_keys=set([_POS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "8": "file_suffix='_medium_expert-v2', set_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "9": "file_suffix='_medium_expert-v2', step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "10": "file_suffix='_medium_expert-v2', all_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "11": "file_suffix='_medium_expert-v2', trove_of_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "12": "file_suffix='_medium_expert-v2', all_params=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "13": "file_suffix='_medium_expert-v2', set_params_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "14": "file_suffix='_medium_expert-v2', set_params_in_step([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "15": "file_suffix='_medium_expert-v2', args=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "16": "file_suffix='_medium_expert-v2', meanwhile_id='events', step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "17": "file_suffix='_medium_expert-v2', all_step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "18": "file_suffix='_medium_expert-v2', set_of_step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "19": "file_suffix='_medium_expert-v2', all_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "20": "file_suffix='_medium_expert-v2', sorted_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "21": "file_suffix='_medium_expert-v2', set_params=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "22": "file_suffix='_medium_expert-v2', all_data_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "23": "file_suffix='_medium_expert-v2', set_params_=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "24": "file_suffix='_medium_expert-v2', set_of_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "25": "file_suffix='_medium_expert-v2', keychain=[_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "26": "file_suffix='_medium_expert-v2', set_params_for_call(BuilderConfig.__init__, 6th parameter step_metadata_keys) ),",
      "27": "file_suffix='_medium_expert-v2', step_metadata_keys=set([_PARENT_QUEST, _QVEL, _ACTION_LOG_PROBS]), ),",
      "28": "file_suffix='_medium_expert-v2', _step_metadata_keys=set([QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "29": "file_suffix='_medium_expert-v2', missing_params=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "30": "file_suffix='_medium_expert-v2', set_params_keys([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "31": "file_suffix='_medium_expert-v2', step_metadata_keys=set([QUESTIONS, QUESTIONS_DEFAULT, _ACTION_LOG_PROBS]), ),",
      "32": "file_suffix='_medium_expert-v2', _metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "33": "file_suffix='_medium_expert-v2','step_metadata_keys'=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "34": "file_suffix='_medium_expert-v2', config_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "35": "file_suffix='_medium_expert-v2', step_metadata_keys=set([QUESTION_KEYS, _ACTION_LOG_PROBS]), ),",
      "36": "file_suffix='_medium_expert-v2', keyset=[_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "37": "file_suffix='_medium_expert-v2', step_metadata_keys=set([QUESTIONS, QUESTIONS_ARGUMENTS, _ACTION_LOG_PROBS]), ),",
      "38": "file_suffix='_medium_expert-v2', step_metadata_keys=set([_POST, _QVEL, _ACTION_LOG_PROBS]), ),",
      "39": "file_suffix='_medium_expert-v2', set_parameters=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "40": "file_suffix='_medium_expert-v2', _step_metadata_keys=set([_POS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "41": "file_suffix='_medium_expert-v2', all_handles=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "42": "file_suffix='_medium_expert-v2', all_important_params=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "43": "file_suffix='_medium_expert-v2', set_params_init=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "44": "file_suffix='_medium_expert-v2', co_init_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "45": "file_suffix='_medium_expert-v2', step_metadata_keys=set([QUESTIONS, QUESTIONS_ARRAY, _ACTION_LOG_PROBS]), ),",
      "46": "file_suffix='_medium_expert-v2', step_metadata_keys=set([PROGRESS_KEYS, _ACTION_LOG_PROBS]), ),",
      "47": "file_suffix='_medium_expert-v2', set_params_for_call(BuilderConfig.__init__, 6th parameter step_metadata_keys)), ),",
      "48": "file_suffix='_medium_expert-v2', part_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "49": "file_suffix='_medium_expert-v2', step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]) ),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ngroup_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n\n",
    "target_code": "\ngroup_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_line": "    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "intel/dffml",
    "source_filename": "dffml/operation/output.py",
    "target_filename": "dffml/operation/output.py",
    "source_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3^",
    "target_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "predictions": [
      "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec )"
    ],
    "correct": false,
    "top_five": {
      "0": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec )",
      "1": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=\"GroupBySpec\" )",
      "2": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\");",
      "3": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stupdate\", primitive=\"",
      "4": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Dict[str, any]",
      "5": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string {",
      "6": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || primitive=\"Any]\"), primitive=\"Dict[st[stuple]",
      "7": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any\");",
      "8": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=$ { primitive }, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Any] }",
      "9": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any]",
      "10": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_spec, primitive=\"Dict[str, any]",
      "11": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=$ { primitive }, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Dict[stuple\");",
      "12": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stupdate, any]",
      "13": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || primitive=\"Any]\"), primitive=\"Dict[st[stuple]\", primitive=\"",
      "14": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string\"",
      "15": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple\"",
      "16": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string } ",
      "17": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple] } ",
      "18": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\"), primitive=\"Dict[st[stuple]\", primitive=\"",
      "19": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || primitive=\"Any]\"), primitive=\"Dict[st[stu]",
      "20": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string, name=\"",
      "21": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, name=\"",
      "22": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple\"], primitive=\"",
      "23": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=$ { primitive }, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Dict[stuple\"",
      "24": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\"), primitive=\"Dict[st[stu]\", primitive=\"",
      "25": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string, primitive=\"",
      "26": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string }",
      "27": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\", primitive=\"Dict[stupdate, any]",
      "28": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=$ { primitive }, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec) }",
      "29": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\", primitive=\"Dict[stupdate\", primitive=\"",
      "30": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || primitive=\"Any]\"), primitive=\"Dict[st[stu]\", primitive=\"",
      "31": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple]",
      "32": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || primitive=\"Any]\"), primitive=\"Dict[st[stuple]\", primitive=\"",
      "33": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[str, any]",
      "34": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=$ { primitive }, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Dict[stuple] } ",
      "35": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any_string { ",
      "36": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || primitive=\"Any]\") )",
      "37": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || primitive=\"Dict[st[str, Any])",
      "38": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple] } )",
      "39": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple, any\"",
      "40": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple] { ",
      "41": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\");",
      "42": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\"), primitive=\"Dict[st[stuple\"], primitive=\"",
      "43": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\"), primitive=\"Dict[st[stuple\"]",
      "44": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\"",
      "45": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\"",
      "46": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Dict[str, any] }  }",
      "47": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || primitive=\"Any]\"), primitive=\"Dict[st[str, any]",
      "48": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec\" || name=\"group_by_spec, primitive=\"Dict[stuple] } ",
      "49": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Object.assign( { }, named_tuple=null, name=\"group_by_spec\" || named_tuple=null, name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string\" || name=\"group_by_string, primitive=\"Dict[stuple\");"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode(from_zip_code)\n        to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "target_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode.create(from_zip_code)\n        to_zip_code = ZipCode.create(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "warning_line": "        to_zip_code = ZipCode(to_zip_code)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `ZipCode.__init__` but got `Union[ZipCode, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 326,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "olist/correios",
    "source_filename": "correios/client.py",
    "target_filename": "correios/client.py",
    "source_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457^",
    "target_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457",
    "predictions": [
      "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\","
    ],
    "correct": false,
    "top_five": {
      "0": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "1": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", result)",
      "2": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", (result))",
      "3": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZIPCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "4": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", (i) => {",
      "5": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", valid_to_zip_code)",
      "6": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", zip_to_zip_code)",
      "7": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_escrito)",
      "8": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", node)",
      "9": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", null, to_zip_code)",
      "10": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_detallada)",
      "11": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_ipc)",
      "12": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", zip_code)",
      "13": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", error);",
      "14": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_espaa)",
      "15": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", str)",
      "16": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = zipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "17": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_url)",
      "18": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", del)",
      "19": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_escritora)",
      "20": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", () => {",
      "21": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", false)",
      "22": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", id: \"Servico\");",
      "23": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZIPCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "24": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", valid_zip_code)",
      "25": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", id: '',",
      "26": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", (result) => {",
      "27": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_emulada)",
      "28": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", str);",
      "29": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_familia)",
      "30": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", void 0);",
      "31": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", data)",
      "32": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_escrita)",
      "33": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", (e) => {",
      "34": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", id: 6999)",
      "35": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_trim\u00f3rica)",
      "36": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", error)",
      "37": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", (i, str))",
      "38": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_escrita);",
      "39": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", zip_text)",
      "40": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", to_zip_code)",
      "41": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", result);",
      "42": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_escrita),",
      "43": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", una_biblioteca_espaol)",
      "44": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", node, str)",
      "45": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = zipCode(from_zip_code) to_zip_code = zipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "46": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", (input, str))",
      "47": "to_zip_code: Union[ZipCode, str]) -> boolean: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "48": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", id: \"Servico\",",
      "49": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", Z)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
    "target_code": "        if not self.check_enable_mode():\n            new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_line": "            output += self.send_command_timing(",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 65,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ktbyers/netmiko",
    "source_filename": "netmiko/dell/dell_isilon_ssh.py",
    "target_filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8^",
    "target_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "predictions": [
      "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):"
    ],
    "correct": false,
    "top_five": {
      "0": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "1": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t[str, typing.Any], _t[typing.List[typing.Any], str] ) if re.search(pattern, output, flags=re_flags):",
      "2": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "3": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t[str, typing.Any], _t[typing.List[typing.Any], str] if re.search(pattern, output, flags=re_flags):",
      "4": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, string ) if re.search(pattern, output, flags=re_flags):",
      "5": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, ret[?:[str.__add__], strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "6": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t.strip_prompt=False, _t.strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "7": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _.stripPrompt=False, _.strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "8": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t[str.__add__], _t[str.__add__] ) if re.search(pattern, output, flags=re_flags):",
      "9": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += re_flags.split('/')",
      "10": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.params(\"str\"), strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "11": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.params('str') ) if re.search(pattern, output, flags=re_flags):",
      "12": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, ret ) if re.search(pattern, output, flags=re_flags):",
      "13": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _.strip(str, typing.Any), _.list[typing.Any], _.str]) if re.search(pattern, output, flags=re_flags):",
      "14": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, output, flags=flags )",
      "15": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req ) if re.search(pattern, output, flags=re_flags):",
      "16": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.options.strip_prompt=False, req.options.strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "17": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, res )",
      "18": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t[str, typing.Any], _t[typing.List[typing.Any], str] ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False )",
      "19": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, cb[typing.Dict[str, typing.Any], cb[typing.Any], str] ) if re.search(pattern, output, flags=re_flags):",
      "20": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.params.strip_prompt=False, req.params.str) if re.search(pattern, output, flags=re_flags):",
      "21": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.params[0], req.params[1] ) if re.search(pattern, output, flags=re_flags):",
      "22": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, prompt, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "23": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _.strip_prompt=False, _.strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "24": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t[str, typing.Any], _t[typing.Any], _t[typing.Any]] ) if re.search(pattern, output, flags=re_flags):",
      "25": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, input[0], output += self.send_command_timing( cmd, output, flags )",
      "26": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ); if re.search(pattern, output, flags=re_flags):",
      "27": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, output, flags=flags)",
      "28": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, cb[typing.Dict[str, typing.Any], cb[typing.Any], str] if re.search(pattern, output, flags=re_flags):",
      "29": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, output, flags=true, output_command=False )",
      "30": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += re_flags.split('-')",
      "31": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, output, flags=true, strip_command=False )",
      "32": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _t[str, typing.Any], _t[typing.List[typing.Any], str] ); if re.search(pattern, output, flags=re_flags):",
      "33": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, ret['str'], ret['any'] ) if re.search(pattern, output, flags=re_flags):",
      "34": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _.strip(str, typing.Any), _.list[typing.Any], _.str] ) if re.search(pattern, output, flags=re_flags):",
      "35": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += re_flags.split(',')",
      "36": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, cb[null, null, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "37": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, output || '' ) if re.search(pattern, output, flags=re_flags):",
      "38": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, prompt, options )",
      "39": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, output || '', strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "40": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, _.strip(str, typing.Any) ) if re.search(pattern, output, flags=re_flags):",
      "41": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, options )",
      "42": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, res ) if re.search(pattern, output, flags=re_flags):",
      "43": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, output, flags=true)",
      "44": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += re_flags;",
      "45": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd,",
      "46": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.params[0], req.params[1], str ) if re.search(pattern, output, flags=re_flags):",
      "47": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, output, flags=options.flags )",
      "48": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, _str.__add__",
      "49": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, req.params[0], req.params[1], res[2] ) if re.search(pattern, output, flags=re_flags):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_line": "                cached_trial.distributions[param_name] = dists",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "optuna/optuna",
    "source_filename": "optuna/storages/cached_storage.py",
    "target_filename": "optuna/storages/cached_storage.py",
    "source_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb^",
    "target_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "predictions": [
      "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal"
    ],
    "correct": false,
    "top_five": {
      "0": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "1": "dists[param_name] = distributions cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "2": "dists[param_name] = distribution cached_trial.distributions[param_name] = updates.params[param_name] = param_value_internal",
      "3": "dists[param_name] = distribution cached_trial.distributions[param_name] = distribution updates.params[param_name] = param_value_internal",
      "4": "dists[param_name] = distribution cached_trial.distributions[param_name] = update.params[param_name] = param_value_internal",
      "5": "dists[param_name] = distribution cached_trial.distributions[param_name] = distributions updates.params[param_name] = param_value_internal",
      "6": "dists[param_name] = distribution updates.params[param_name] = param_value_internal",
      "7": "dists[param_name] = distribution update.params[param_name] = param_value_internal",
      "8": "dists[param_name] = distribution cached_trial.disseminations[param_name] = dists updates.params[param_name] = param_value_internal",
      "9": "dists[param_name] = distribution cached_trial.distributions[param_name] = joinDict(distributions, param_value) updates.params[param_name] = param_value_internal",
      "10": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict(str, distributions.BaseDistribution) updates.params[param_name] = param_value_internal",
      "11": "dists[param_name] = distribution cached_trial.distributions[param_name] = distributes updates.params[param_name] = param_value_internal",
      "12": "dists[param_name] = distribution cached_trial.distributions[param_name] = outputs updates.params[param_name] = param_value_internal",
      "13": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists update.params[param_name] = param_value_internal",
      "14": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict(distributions.BaseDistribution, param_value) updates.params[param_name] = param_value_internal",
      "15": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "16": "dists[param_name] = distribution cached_trial.distributions[param_name] = update_params[param_name] = param_value_internal",
      "17": "dists[param_name] = distributions updates.params[param_name] = param_value_internal",
      "18": "dists[param_name] = distribution cached_trial.distributions[param_name] = replacers updates.params[param_name] = param_value_internal",
      "19": "dists[param_name] = distribution refreshed_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "20": "dists[param_name] = distribution updat_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "21": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updated.params[param_name] = param_value_internal",
      "22": "dists[param_name] = distribution cached_trial.distributions[param_name] = dits updates.params[param_name] = param_value_internal",
      "23": "dists[param_name] = distribution cached_trial.distributions[param_name] = dataset updates.params[param_name] = param_value_internal",
      "24": "dists[param_name] = distribution cached_trial.distributions[param_name] = datasets updates.params[param_name] = param_value_internal",
      "25": "dists[param_name] = distributions cached_trial.distributions[param_name] = distributions updates.params[param_name] = param_value_internal",
      "26": "dists[param_name] = distribution cached_trial.distributions[param_name] = distributers updates.params[param_name] = param_value_internal",
      "27": "dists[param_name] = distribution cached_trial.distributions[param_name] = dumps updates.params[param_name] = param_value_internal",
      "28": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict(distributions.BaseDistribution) updates.params[param_name] = param_value_internal",
      "29": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict(distributions.BaseDistribution, param_name) updates.params[param_name] = param_value_internal",
      "30": "dists[param_name] = distribution upstream.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "31": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict[str, distributions.BaseDistribution]() updates.params[param_name] = param_value_internal",
      "32": "dists[param_name] = distribution cached_trial.distributions[param_name] = warehouse updates.params[param_name] = param_value_internal",
      "33": "dists[param_name] = distribution cached_trial.distributions[param_name] = [] updates.params[param_name] = param_value_internal",
      "34": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict(distributions, param_value) updates.params[param_name] = param_value_internal",
      "35": "dists[param_name] = distribution cached_trial.distributions[param_name] = subdists updates.params[param_name] = param_value_internal",
      "36": "dists[param_name] = distribution cached_trial.distributions[param_name] = sandbox.getTargetDistribution() updates.params[param_name] = param_value_internal",
      "37": "dists[param_name] = distribution cached_trial.dissetributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "38": "dists[param_name] = distribution cached_trial.distributions[param_name] = context updates.params[param_name] = param_value_internal",
      "39": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict[str, distributions.BaseDistribution] = dists updates.params[param_name] = param_value_internal",
      "40": "dists[param_name] = distribution cached_trial.distributions[param_name] = aggregatedDistributions updates.params[param_name] = param_value_internal",
      "41": "dists[param_name] = distribution cached_trial.distributions[param_name] = aggregatedDicts updates.params[param_name] = param_value_internal",
      "42": "consts[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "43": "dists[param_name] = distribution cached_trial.distributions[param_name] = distributons updates.params[param_name] = param_value_internal",
      "44": "dists[param_name] = distributions upstream.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "45": "dists[param_name] = distribution cached_trial.distributions[param_name] = outset updates.params[param_name] = param_value_internal",
      "46": "dists[param_name] = distribution cached_trial.distributions[param_name] = contents updates.params[param_name] = param_value_internal",
      "47": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict[str, distributions.BaseDistribution] update.params[param_name] = param_value_internal",
      "48": "dists[param_name] = distribution cached_trial.distributions[param_name] = edits updates.params[param_name] = param_value_internal",
      "49": "dists[param_name] = distribution cached_trial.distributions[param_name] = computedDict[str, distributions.BaseDistribution] updates.params[param_name] = param_value_internal"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
    "target_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_line": "        ret = perform_krb181_workaround(principal)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 117,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/security/kerberos.py",
    "target_filename": "airflow/security/kerberos.py",
    "source_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0^",
    "target_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "predictions": [
      "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:"
    ],
    "correct": false,
    "top_five": {
      "0": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "1": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: return false }",
      "2": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, pseudo)",
      "3": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: time.sleep(1.5)",
      "4": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal)",
      "5": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: dismiss(Success!)",
      "6": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: dismiss(Success!$ { ret } )",
      "7": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Sort error: $ { ret } )",
      "8": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: exit_on_fail",
      "9": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Status beyond perform_krb181_workaround)",
      "10": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(Perform_krb181_workaround(principal)())",
      "11": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: dismiss(str)",
      "12": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: return perform_krb181_workaround(principal)",
      "13": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, non_stationary)",
      "14": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: throw new Error(Not implemented yet)",
      "15": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(perform_krb181_workaround(principal)>)",
      "16": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Not implemented yet)",
      "17": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: stop_now()",
      "18": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: cont = perform_krb181_workaround(principal)",
      "19": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(Perform_krb181_workaround(principal)$ { ret } )",
      "20": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, secundary)",
      "21": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(str)",
      "22": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, realistic_timeout)",
      "23": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: shutdown()",
      "24": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: shutdown(ret)",
      "25": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(perform_krb181_workaround(principal))",
      "26": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: ret = 0",
      "27": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: false",
      "28": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(perform_krb181_workaround(principal) >>)",
      "29": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: self.sleep(1.5)",
      "30": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(FAIL!$ { ret } )",
      "31": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: continue",
      "32": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: continue if exit_on_fail and ret!= 0:",
      "33": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(perform_krb181_workaround(principal)$ { ret } )",
      "34": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, temporary)",
      "35": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(perform_krb181_workaround(principal)())",
      "36": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(There is no module for  + ret.exec(krb181))",
      "37": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Status beyond threshold)",
      "38": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push(Execute krb181_workaround)",
      "39": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, feasible)",
      "40": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Status is not a function)",
      "41": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: throw new Error(Timeout: $ { ret } )",
      "42": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: perform_krb181_workaround(principal, realistic)",
      "43": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(new Error('There is no module for'+ ret))",
      "44": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: return ret",
      "45": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Nested conditions currently unsupported in Utils)",
      "46": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Status beyond 1)",
      "47": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Status beyond 0)",
      "48": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: push($ { ret } )",
      "49": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0: reject(Sort)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "target_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            return\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_line": "        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 111,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "paul-nameless/tg",
    "source_filename": "tg/controllers.py",
    "target_filename": "tg/controllers.py",
    "source_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744^",
    "target_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "predictions": [
      "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }"
    ],
    "correct": false,
    "top_five": {
      "0": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "1": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "2": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) {",
      "3": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgsself.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "4": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if (self.model.yanked_msgs) return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "5": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgsself.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "6": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if notself.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "7": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if (self.model.yanked_msgs) return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "8": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ideds) }",
      "9": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \\",
      "10": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) ^",
      "11": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not (self.model.yanked_msgs) return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "12": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if notself.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "13": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "14": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs }",
      "15": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "16": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ideds)",
      "17": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ideds = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "18": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ides) }",
      "19": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "20": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not (self.model.yanked_msgs) return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "21": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_identifiers) }",
      "22": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ides = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ides) }",
      "23": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ideds = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ideds) }",
      "24": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs Self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "25": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ides = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ides) }",
      "26": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs_tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "27": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs && self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "28": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ideds = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "29": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ides) }",
      "30": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) break",
      "31": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs Self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "32": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_dids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "33": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids =self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "34": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs own.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "35": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) return",
      "36": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs publicly available_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "37": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ides = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "38": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return typeof self.tg.forward_msgs ==='string'",
      "39": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "40": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return true",
      "41": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_IDs = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "42": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ideds = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ideds)",
      "43": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids =self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "44": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "45": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs && self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "46": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ides = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ides) }",
      "47": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ides = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "48": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs so self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) }",
      "49": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ides = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ideds) }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    company: ormar.String(max_length=200)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    company = ormar.String(max_length=200)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_unique_constraints.py",
    "target_filename": "tests/test_unique_constraints.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "1": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "2": "id: ormar.Integer(primary_key ==True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "3": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "4": "ormar.Integer(primary_key=True)",
      "5": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=100) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "6": "ormar.Integer(primary_key ==True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "7": "id: ormar.Integer(primary_key = True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "8": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=Primitive) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "9": "case 'Ormar.String(max_length=100)': ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "10": "case 'Ormar.Integer($parameter$primary_key = True)': id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "11": "id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "12": "ormar.Integer(primary_key = True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "13": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key ==True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "14": "id: ormar.Integer(primary_key=True) number: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "15": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key==True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "16": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=true) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "17": "id: ormar.Integer(primary_key ===True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "18": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "19": "id: ormar.Integer(primary_key == True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "20": "identity: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "21": "let id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "22": "name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "23": "id: ormar.Integer(primary_key=True) value: ormar.Integer(max_length=100) company: ormar.String(max_length=200)",
      "24": "id: ormar.Integer(primary_key==True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "25": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=100) name: ormar.String(max_length=200) company: ormar.String(max_length=200)",
      "26": "ormar.Integer(primary_key=True) id: ormar.Integer(max_length=100) company: ormar.String(max_length=200)",
      "27": "case 'Token': { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "28": "id: ormar.Integer(primary_key=True) max_length: 100 numele: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "29": "id: ormar.Integer(primary_key=True) max_length: 100 named: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "30": "ID: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "31": "ormar.Integer(primary_key ==True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "32": "(function() { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "33": "id: ormar.Integer(primary_key=True) number: ormar.Integer(max_length=100) company: ormar.String(max_length=200)",
      "34": "id: ormar.Integer(primary_key=True) term: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "35": "id: ormar.Integer(primary_key ==true) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "36": "let id = ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "37": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String(max_length=200) company: ormar.String(max_length=200)",
      "38": "ormar.Integer(primary_key=True) for: id ormar.Integer(max_length=100) company: ormar.String(max_length=200)",
      "39": "case 'Ormar.String(max_length=100)': ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=Primitive) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "40": "case 'Ormar.String(max_length=100)': ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) company: ormar.String(max_length=200)",
      "41": "id: ormar.Integer(primary_key=true) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "42": "ormar.Integer(primary_key=True) identity: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "43": "image_id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "44": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=100) company: ormar.String(max_length=200)",
      "45": "id: ormar.Integer(primary_key=True) company: ormar.String(max_length=200)",
      "46": "list_id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "47": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=200) company: ormar.String(max_length=200)",
      "48": "id: ormar.Integer(primary_key=True) value: ormar.String(max_length=100) company: ormar.String(max_length=200)",
      "49": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=200) company: ormar.String(max_length=200)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nclass BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n  \"\"\"Generic TFX example gen base executor.\n",
    "target_code": "\nclass BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  \"\"\"Generic TFX example gen base executor.\n",
    "warning_line": "    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "target_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx\";"
    ],
    "correct": false,
    "top_five": {
      "0": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx\";",
      "1": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\";",
      "2": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TfxExecutor\";",
      "3": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TfxGenExecutor\";",
      "4": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\";",
      "5": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\";",
      "6": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor\";",
      "7": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TfxGenExecutor\"",
      "8": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\"",
      "9": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TfxExecutor\"",
      "10": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX_EXECUTOR",
      "11": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFT class BaseExampleGenExecutor() {",
      "12": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx\"",
      "13": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor;",
      "14": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.SimpleTfxExecutor\";",
      "15": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)); }",
      "16": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TFX\";",
      "17": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.tfx.dsl.components.base_beam_executor.BaseBeamExecutor\";",
      "18": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor.TfxExecutor\";",
      "19": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX class BaseExampleGenExecutor() {",
      "20": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base_beam_executor.BaseBeamExecutor\";",
      "21": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxGenExecutor\";",
      "22": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor));",
      "23": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.beam_executor.BaseBeamExecutor\";",
      "24": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\");",
      "25": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX\";",
      "26": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX_EXECUTOR with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example ;",
      "27": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)\";",
      "28": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX_EXECUTOR with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)\";",
      "29": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.SimpleTfxExecutor\"",
      "30": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)\";",
      "31": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor));",
      "32": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxCommands.BaseBeamExecutor\";",
      "33": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX_EXECUTOR;",
      "34": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX_EXECUTOR with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example : \"base_beamExecutor\";",
      "35": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.tfx.dsl.components.base.beam_executor.BaseBeamExecutor\";",
      "36": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"\";",
      "37": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor));",
      "38": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxGeometry.BaseBeamExecutor\";",
      "39": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx2\";",
      "40": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\".TfxExecutor\";",
      "41": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor with metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)\";",
      "42": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TFX_EXECUTOR with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor));",
      "43": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.SimpleTFX\";",
      "44": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\";",
      "45": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor)); }",
      "46": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TfxExecutor;",
      "47": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.TfxExecutor.TfxGeneric\";",
      "48": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\");",
      "49": "class BaseExampleGenExecutor( with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\" with_metaclass(abc.ABCMeta, base_beam_executor)): \"\"\"\";"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nclass BaseHandler(with_metaclass(abc.ABCMeta, object)):\n  \"\"\"Base Handler for CLI.\n",
    "target_code": "\nclass BaseHandler(abc.ABC):\n  \"\"\"Base Handler for CLI.\n",
    "warning_line": "class BaseHandler(with_metaclass(abc.ABCMeta, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/tools/cli/handler/base_handler.py",
    "target_filename": "tfx/tools/cli/handler/base_handler.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.bind(this));"
    ],
    "correct": false,
    "top_five": {
      "0": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.bind(this));",
      "1": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, event, object));",
      "2": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, event, object);",
      "3": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, EventEmitter);",
      "4": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.ETC.Vector3();",
      "5": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.ETC.CONTEXT_MANAGEMENT;",
      "6": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this);",
      "7": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventSetase Handler for CLI.ABCMeta, object",
      "8": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, event, e)",
      "9": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.ABCMeta, object",
      "10": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventSetastinge Handler for CLI.ABCMeta, object",
      "11": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.ETC.CONTEXT_EVENTS.ETC.CONTEXT_EVENTS.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ABCMeta, object",
      "12": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Events.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ABCMeta, object",
      "13": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventHandler for CLI.EventEventSeta",
      "14": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, event, e));",
      "15": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.Emitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventSetase Handler for CLI.ABCMeta, object",
      "16": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.MemberExpressions.Events.MemberExpressions.Events.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.ABCMeta, object",
      "17": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Constructor.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitta.ABCMeta, object",
      "18": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.MemberExpressions.Events.MemberExpressions.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitta.ABCMeta, object",
      "19": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.Emitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventSetase Handler for CLI.ABCMeta, object",
      "20": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, EventEmitter).with_metaclass(abc.ABCMeta, object));",
      "21": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(defined, function(event, object) {",
      "22": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Constructor.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventSeta, object",
      "23": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.Emitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventSetastinge Handler for CLI.ABCMeta, object",
      "24": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.ETC.CONTEXT_MANIFEST.CONTAINER_EVENTS.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ABCMeta, object",
      "25": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Events.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.Events.Events.Events.Events.ABCMeta, object",
      "26": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, object);",
      "27": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.MemberExpressions.Events.MemberExpressions.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventSeta, object",
      "28": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventStanger.EventSetaclasseta, object",
      "29": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventStanger.EventEventSe Handler for CLI.ABCMeta, object",
      "30": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.MemberExpressions.Events.MemberExpressions.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitetaseta, object",
      "31": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPIC.Events.EPIC.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitta.ABCMeta, object",
      "32": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventHandler for CLI.EventEventEventSeta",
      "33": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventStanger.EventEventHandler for CLI.ABCMeta, object",
      "34": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Constructor.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventSetaclass(abc.ABCMeta, object",
      "35": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.Emitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventSetastinge Handler for CLI.ABCMeta, object",
      "36": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Constructor.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitetaseta, object",
      "37": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.Emitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventHandler for CLI.EventEventSeta",
      "38": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Constructor.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmit.ABCMeta, object",
      "39": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventHandler for CLI.EventSeta",
      "40": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventHandler for CLI.EventEventEventSeta, object",
      "41": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPIC.Events.EPIC.Events.EventEmitter.Emitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.ABCMeta, object",
      "42": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.ETC.CONTEXT_HANDLER",
      "43": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventSetaeta, object",
      "44": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, EventEmitter, object);",
      "45": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EPI.EPI.Events.EPI.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventHandler for CLI.EventEventSeta, object",
      "46": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Events.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.ETC.Events.Events.Events.Event.ABCMeta, object",
      "47": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.EventEmitter.call(this, event, event, metaclass));",
      "48": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.Constructor.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventEventSetaclasseta, object",
      "49": "class BaseHandler(with_metaclass(abc.ABCMeta, object)): \"\"\"Base Handler for CLI.Events.MemberExpressions.Events.MemberExpressions.Events.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEmitter.EventEventEventSetaclasseta, object"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        unconf_lith_id: int,\n        edges: Array[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
    "target_code": "        unconf_lith_id: int,\n        edges: np.ndarray,\n        centroids: Dict[int, np.ndarray]\n",
    "warning_line": "        edges: Array[int, ..., 2],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `nptyping.Array[(int, ..., 2)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 361,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cgre-aachen/gempy",
    "source_filename": "gempy/assets/topology.py",
    "target_filename": "gempy/assets/topology.py",
    "source_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098^",
    "target_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098",
    "predictions": [
      "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[int, np.ndarray]"
    ],
    "correct": false,
    "top_five": {
      "0": "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "1": "unconf_lith_id: int, edges: Array[int,..., 2], centoids: Dict[int, np.ndarray]",
      "2": "unconf_lith_id: int, edges: Array[[int,..., 2], centroids: Dict[int, np.ndarray]",
      "3": "unconf_lith_id: int, edges: Array[int,..., 2], centroids:Dict[int, np.ndarray]",
      "4": "unconf_lith_id: int, edges: Array[int,...., 2], centroids: Dict[int, np.ndarray]",
      "5": "unconf_lith_id: int, borders: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "6": "unconf_lith_id: int, edges: Array[int,..., 2], centeroids: Dict[int, np.ndarray]",
      "7": "unconf_lith_id: int, edges: Array[int,...... 2], centroids: Dict[int, np.ndarray]",
      "8": "unconf_lith_id: int, edges: Array[int,..., 2], centers: Dict[int, np.ndarray]",
      "9": "unconf_lith_id: int, edges: Array[nptyping.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "10": "unconf_lith_id: int, edges: Array[int.,..., 2], centroids: Dict[int, np.ndarray]",
      "11": "unconf_lith_id: int, sides: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "12": "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[nt, np.ndarray]",
      "13": "unconf_lith_id: int, corners: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "14": "unconf_lith_id: int, edges: Array[int,...2, 2], centroids: Dict[int, np.ndarray]",
      "15": "unconf_lith_id: int, edges: Array[int..., 2], centroids: Dict[int, np.ndarray]",
      "16": "unconf_lith_id: int, edges: Array.prototype.[int,..., 2], centroids: Dict[int, np.ndarray]",
      "17": "unconf_lith_id: int, centroids: Dict[int, np.ndarray]",
      "18": "unconf_lith_id: int, edges: Array[int,... 2, 2], centroids: Dict[int, np.ndarray]",
      "19": "unconf_lith_id: int, edges: Array[int,... 2], centroids: Dict[int, np.ndarray]",
      "20": "unconf_lith_id: int, edge_types: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "21": "unconf_lith_id: int, edges: Array[int,..., 2], centreoids: Dict[int, np.ndarray]",
      "22": "unconf_lith_id: int, edges: Array[int..., 2], centroids: Dict[int, np.ndarray]",
      "23": "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[int, npp.ndarray]",
      "24": "unconf_lith_id: int, edges: Array[[int,..., 2], centoids: Dict[int, np.ndarray]",
      "25": "unconf_lith_id: int, edges: Array[int,...,2], centroids: Dict[int, np.ndarray]",
      "26": "unconf_lith_id: int, edges: Array[..., 2], centroids: Dict[int, np.ndarray]",
      "27": "unconf_lith_id: int, boundaries: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "28": "unconf_lith_id: int, edges: Array[int[0],..., 2], centroids: Dict[int, np.ndarray]",
      "29": "unconf_lith_id: int, lines: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "30": "unconf_lith_id: int, perimeters: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "31": "unconf_lith_id: int, edges: Array[int,...\", 2], centroids: Dict[int, np.ndarray]",
      "32": "unconf_lith_id: int, edges: [int,..., 2], centroids: Dict[int, np.ndarray]",
      "33": "unconf_lith_id: int, edges: Array[int,..., 2], centruoids: Dict[int, np.ndarray]",
      "34": "unconf_lith_id: int, edges: Dict[int,..., 2], centroids: Dict[int, np.ndarray]",
      "35": "unconf_lith_id: int, edges: Array [int,..., 2], centroids: Dict[int, np.ndarray]",
      "36": "unconf_lith_id: int, edges: Array[int,..., 2], centres: Dict[int, np.ndarray]",
      "37": "unconf_lith_id: int, points: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "38": "unconf_lith_id: int, edges: Array[int,..., 2], centraloids: Dict[int, np.ndarray]",
      "39": "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[Int, np.ndarray]",
      "40": "unconf_lith_id: int, circles: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "41": "unconf_lith_id: int, edges: Array[int,..., 2)], centroids: Dict[int, np.ndarray]",
      "42": "unconf_lith_id: int, edges, centroids: Dict[int, np.ndarray]",
      "43": "unconf_lith_id: int, edges: Array[ int,..., 2], centroids: Dict[int, np.ndarray]",
      "44": "unconf_lith_id: int, edges: Array[Int,..., 2], centroids: Dict[int, np.ndarray]",
      "45": "unconf_lith_id: int, edges: Array[int,...], centroids: Dict[int, np.ndarray]",
      "46": "unconf_lith_id: int, edges: Array[int,...-2], centroids: Dict[int, np.ndarray]",
      "47": "unconf_lith_id: int, edges: Array[int][1, 2], centroids: Dict[int, np.ndarray]",
      "48": "unconf_lith_id: int, edges: Array[int,......, 2], centroids: Dict[int, np.ndarray]",
      "49": "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[int, np.notarray]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nRemoteMethod = namedtuple('RemoteMethod',\n                          'method config_section kwargs priority',\n                          verbose=False)\n\"\"\"RemotedMethod is used by other modules that want to register a method to\n",
    "target_code": "\nRemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'])\n\"\"\"RemotedMethod is used by other modules that want to register a method to\n",
    "warning_line": "                          verbose=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Final[False]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/mode_controller.py",
    "target_filename": "mpf/core/mode_controller.py",
    "source_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7^",
    "target_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7",
    "predictions": [
      "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be used in their modules."
    ],
    "correct": false,
    "top_five": {
      "0": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be used in their modules.",
      "1": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be used in their modules.",
      "2": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to interact with them.",
      "3": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to interact with them.",
      "4": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to work with them.",
      "5": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to use in their modules.",
      "6": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to work with them.",
      "7": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to use in their modules.",
      "8": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to register a method to register a method.",
      "9": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to register a method.",
      "10": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to communicate with each other.",
      "11": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called in their modules.",
      "12": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called from a module.Object('remote')",
      "13": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to register a method to register a method.",
      "14": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to register a method.",
      "15": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called.",
      "16": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to communicate with them.",
      "17": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be used with them.",
      "18": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to use with them.",
      "19": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to register it.",
      "20": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called by them.",
      "21": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be called from a module.Object('remote')",
      "22": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be registered with them.",
      "23": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be called in their modules.",
      "24": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to use in their own modules.",
      "25": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to the group.RemoteMethod()",
      "26": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be used in their own modules.",
      "27": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to run on their server.",
      "28": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be called.",
      "29": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to communicate with each other.",
      "30": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be used with them.",
      "31": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be registered with them.",
      "32": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to the group.RemoteMethod()",
      "33": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to the group.RemoteMethod(kwargs)",
      "34": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called from a module. Iterator('kwargs')",
      "35": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be used with their modules.",
      "36": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to use with them.",
      "37": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to communicate with them.",
      "38": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be called by them.",
      "39": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to run on their server.",
      "40": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called in their module. They can either call the method directly or indirectly (through config_section kwargs)",
      "41": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called from a module. Iterator('kwargs');",
      "42": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to their module. They must register a method before they can use it.",
      "43": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to register a method to register it.",
      "44": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be registered.",
      "45": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to the group.RemoteMethod(kwargs)",
      "46": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be used with other modules.",
      "47": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to run on their servers.",
      "48": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemoteMethod is used by other modules that want to register a method to be used with their modules.",
      "49": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to be called in their module. They must register a method before they can use it."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.Boolean(default=False)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    completed= ormar.Boolean(default=False)\n\n",
    "warning_line": "    completed: ormar.Boolean(default=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Boolean($parameter$default = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "1": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default=False)",
      "2": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean(default=False)",
      "3": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean($parameter$default=False)",
      "4": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Integer(primary_key=False)",
      "5": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "6": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) id: ormar.Integer(primary_key=True)",
      "7": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length = 500) completed: ormar.Boolean($parameter$default = False)",
      "8": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True)",
      "9": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id: ormar.Integer(primary_key=True)",
      "10": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean($parameter$default = False)",
      "11": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : id",
      "12": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default =False)",
      "13": "ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "14": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean(default=False)",
      "15": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Integer(primary_key=True)",
      "16": "error: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "17": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) if(id!== 'id') {",
      "18": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=400) completed: ormar.Boolean($parameter$default = False)",
      "19": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.String(max_length=700)",
      "20": "value: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "21": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) if(id && id.indexOf('A-Z')!== -1) {",
      "22": "left: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "23": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean(id)",
      "24": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.String(max_length=1000)",
      "25": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Integer(primary_key[1])",
      "26": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id!== ''",
      "27": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Integer(primary_key[0])",
      "28": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean(id$parameter$default=False)",
      "29": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id!== 'id'",
      "30": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : null",
      "31": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = false)",
      "32": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.String(max_length=400)",
      "33": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) if(id && id!=='false') {",
      "34": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) performed: ormar.Boolean($parameter$default = False)",
      "35": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean($parameter$default=True)",
      "36": "(function() { id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "37": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : id completed: ormar.Boolean(default=False)",
      "38": "key: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "39": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean(id$default=False)",
      "40": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(idKey[0]) : ormar.Boolean(idKey[1])",
      "41": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) complete: ormar.Boolean($parameter$default = False)",
      "42": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) default: ormar.Boolean($parameter$default=False)",
      "43": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(idKey[0]) : ormar.Integer(primary_key[1])",
      "44": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean(primary_key=False)",
      "45": "image: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False)",
      "46": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.Boolean(id$parameter$default = False)",
      "47": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) if(id && typeof id === 'number') {",
      "48": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.String(max_length=500)",
      "49": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed: ormar.Boolean($parameter$default = False) return id? ormar.Integer(primary_key=True) : ormar.String(max_length=1200)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):\n    \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\n",
    "target_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]:\n    \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\n",
    "warning_line": "      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(kubernetes.client.V1Job)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config();"
    ],
    "correct": false,
    "top_five": {
      "0": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config();",
      "1": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(beforeConfiguration) {",
      "2": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Each_task();",
      "3": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(before) {",
      "4": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(before(), after()) {",
      "5": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_read_only();",
      "6": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_cpu: k.DEFAULT_TPU_CURRENT, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(options) {",
      "7": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, k.DEFAULT_TPU_DRIVER);",
      "8": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu_driver);",
      "9": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu_driver).then(function () {",
      "10": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(beforeConfiguration, beforeConfiguration) {",
      "11": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, str);",
      "12": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(preemptible_tpu) {",
      "13": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Each_driver = str!== 0? str : k.DEFAULT_TPU_DRIVER;",
      "14": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. When (bool === false) {",
      "15": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Each_job();",
      "16": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config();",
      "17": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER, interface: true } ;",
      "18": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_cpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(tpu_driver) {",
      "19": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_cpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, str);",
      "20": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(tpu_driver) {",
      "21": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu_driver);",
      "22": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(beforeAndAfter) {",
      "23": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config();",
      "24": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(beforeConfiguration.start()) {",
      "25": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, kubernetes.client).AddPod(kubernetes.client).addPod(tpu)",
      "26": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, str);",
      "27": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_config: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, str);",
      "28": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.tpu_map;",
      "29": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(tpu_driver) {",
      "30": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_cpu: k.DEFAULT_TPU_CURRENT, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Each_job();",
      "31": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. If (bool === false) {",
      "32": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.autostart();",
      "33": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(before) {",
      "34": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, k.DEFAULT_TPU_DRIVER).WithOptional(V1Job): \"\"\"",
      "35": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.IO(tpu_interface).then(function () {",
      "36": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(beforeConfiguration = true) {",
      "37": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_interface();",
      "38": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, config: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Iterator(tpu, config);",
      "39": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(before, after) {",
      "40": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.IO(tpu_driver);",
      "41": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.IO(tpu_driver);",
      "42": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_config: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config();",
      "43": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. Then(tpu_driver) {",
      "44": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Normal(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. When (bool) {",
      "45": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.IO(tpu_interface);",
      "46": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_config: str = k.DEFAULT_TPU_DRIVER, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config();",
      "47": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER, options: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_interface();",
      "48": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_map: str = k.DEFAULT_TPU_MAP) -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.get_config().tpu_driver();",
      "49": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER, tpu_interface: str = k.DEFAULT_TPU_DRIVER -> Optional(V1Job): \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.autostart();"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):\n    \"\"\"Abstract class for all components.\n",
    "target_code": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=_Maker):\n    \"\"\"Abstract class for all components.\n",
    "warning_line": "class Component(with_metaclass(_Maker, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jwkvam/bowtie",
    "source_filename": "bowtie/_component.py",
    "target_filename": "bowtie/_component.py",
    "source_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1^",
    "target_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "predictions": [
      "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components."
    ],
    "correct": false,
    "top_five": {
      "0": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components.",
      "1": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components.",
      "2": "# pylint: disable=too-few-public-methods class Component(bowtie._component._Maker, object)): \"\"\"Abstract class for all components.",
      "3": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Bowtie._component._Maker;",
      "4": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Maker;",
      "5": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Maker;",
      "6": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component))._Maker;",
      "7": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(bowtie._component._Maker);",
      "8": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_______Maker, object)): \"\"\"Abstract class for all components.",
      "9": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPropertyNames(bowtie._component._Maker), object));",
      "10": "# pylint: disable=too-few-public-methods class Component(bowtie._component._Maker, object): \"\"\"Abstract class for all components.",
      "11": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component, object)): \"\"\"Abstract class for all components.",
      "12": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component._Maker), object));",
      "13": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = \"bowtie._component._Maker\";",
      "14": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = _Maker;",
      "15": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Component.with_metaclass(_Maker, object))",
      "16": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component._Maker));",
      "17": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getPrototypeOf(bowtie._component._Maker);",
      "18": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component));",
      "19": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getOwnPropertyNames(bowtie._component._Maker, object));",
      "20": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Bowtie._component._Maker;",
      "21": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Component.with_metaclass(_Maker, object))",
      "22": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component), object));",
      "23": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = \"bowtie._component._Maker\";",
      "24": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getOwnPropertyDescriptor(Object.getOwnPropertyDescriptor);",
      "25": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getPrototypeOf(bowtie._component._Maker)",
      "26": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component)._Maker;",
      "27": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component));",
      "28": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = bowtie._component._Maker;",
      "29": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Maker._component;",
      "30": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Maker;",
      "31": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component._Maker),",
      "32": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Component );",
      "33": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPropertyNames(bowtie._component._Maker, object));",
      "34": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Component );",
      "35": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component)).toLowerCase();",
      "36": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getOwnPropertyNames(bowtie._component._Maker), object));",
      "37": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPropertyNames(bowtie._component._Maker), object))",
      "38": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getOwnPropertyDescriptor(Object.getOwnPropertyDescriptor)._Maker;",
      "39": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getOwnPropertyDescriptor(Object.getOwnPropertyDescriptor(Object));",
      "40": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getOwnPropertyDescriptor(Object.getOwnPropertyDescriptor)",
      "41": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component, object));",
      "42": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component._Maker), including self.pylint)",
      "43": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker._component, object)): \"\"\"Abstract class for all components.",
      "44": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component._Maker), including _Maker)",
      "45": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPrototypeOf(bowtie._component)).toLowerCase()",
      "46": "# pylint: disable=too-few-public-methods class Component(with_metaclass(bowtie._component._Maker, object)): \"\"\"Abstract class for all components._Maker = Maker._component;",
      "47": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.getPrototypeOf(bowtie._component._Maker).toLowerCase()",
      "48": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Component._Maker);",
      "49": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components._Maker = Object.create(Object.getPropertyNames(bowtie._component._Maker), including self.pylint)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 35,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fastapi/docs001.py",
    "target_filename": "docs_src/fastapi/docs001.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "1": "id: ormar.Integer(primary_key ==True) name: ormar.String(max_length=100)",
      "2": "id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "3": "id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "4": "id: ormar.Integer(primary_key ===True) name: ormar.String(max_length=100)",
      "5": "id: ormar.Integer(primary_key==True) name: ormar.String(max_length=100)",
      "6": "ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "7": "id: ormar.Integer(primary_key == True) name: ormar.String(max_length=100)",
      "8": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "9": "id: ormar.Integer(primary_key = True) name: ormar.String(max_length=100)",
      "10": "id: ormar.Integer(primary_key === True) name: ormar.String(max_length=100)",
      "11": "ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "12": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) } name: ormar.String(max_length=100)",
      "13": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) } name: ormar.String(max_length=100)",
      "14": "type: ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "15": "ormar.Integer(primary_key = True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "16": "id: ormar.Integer(primary_key=True) number: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "17": "ormar.Integer(primary_key=True) identity: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "18": "ormar.Integer(primary_key=True) = ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "19": "id: ormar.Integer(primary_key ==true) name: ormar.String(max_length=100)",
      "20": "callback(ormar.error)) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "21": "ormar.Integer(primary_key=True) has: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "22": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) { name: ormar.String(max_length=100)",
      "23": "type: ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "24": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "25": "callback(ormar.error) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "26": "callback(ormar.error) } id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "27": "case 'Error': id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "28": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) { name: ormar.String(max_length=100)",
      "29": "ormar.Integer(primary_key = True) id: ormar.Integer(primary_key ==True) name: ormar.String(max_length=100)",
      "30": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) \\ name: ormar.String(max_length=100)",
      "31": "ormar.Integer(primary_key=True) identity: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "32": "id: ormar.Integer(primary_key=True) number: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "33": "callback(ormar.error) } id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "34": "ormar.Integer(primary_key=True) = ormar.Integer(primary_key) name: ormar.String(max_length=100)",
      "35": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key==True) name: ormar.String(max_length=100)",
      "36": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) \\ name: ormar.String(max_length=100)",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "38": "id: ormar.Integer(primary_key=true) name: ormar.String(max_length=100)",
      "39": "ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key ==True) name: ormar.String(max_length=100)",
      "40": "callback(ormar.error)) } id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "41": "name: ormar.String(max_length=100)",
      "42": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "43": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) ^ name: ormar.String(max_length=100)",
      "44": "id: ormar.Integer($parameter$primary_key =True) name: ormar.String(max_length=100)",
      "45": "id: ormar.Integer($parameter$primary_key ==True) name: ormar.String(max_length=100)",
      "46": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) ^ name: ormar.String(max_length=100)",
      "47": "callback(err) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "48": "ormar.Integer(primary_key=True) has: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "49": "id: ormar.Integer(primary_key=True): name: ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        \"\"\"\n",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        \"\"\"\n",
    "warning_line": "    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "golemfactory/clay",
    "source_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "target_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6^",
    "target_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "predictions": [
      "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "1": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined'): \"\"\"",
      "2": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined'? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "3": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool)!== 'undefined'? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "4": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined') -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "5": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match])? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "6": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], (typing.Optional[typing.Match]) => (typing.Optional[bool], (typing.Optional[typing.Match])): \"\"\"",
      "7": "awaited_messages: typing.Optional[list] = None ) -> (typeof ()!== 'undefined'? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "8": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' &&!typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "9": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined'): typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "10": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool)!== 'undefined' && typing.Optional[bool], typing.Optional[typing.Match])? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "11": "awaited_messages: typing.Optional[list] = None ) -> (typeof (typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined') -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "12": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined') => (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "13": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool)!== 'undefined'? typing.Optional[bool], typing.Optional[typing.Match] : \"\"\"",
      "14": "awaited_messages: typing.Optional[list] = None ) -> (typeof (keying.Optional)!== 'undefined' && typing.Optional[typing.Match])? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "15": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined'? (typeof()!== 'undefined'? (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "16": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional]!== 'undefined'? typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "17": "awaited_messages: typing.Optional[list] = None ) -> (type + \" \" + typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "18": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined'): awaited_messages: \"\"\"",
      "19": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' ): \"\"\"",
      "20": "awaited_messages: typing.Optional[list] = None ) -> (typeof (keying.Optional)!== 'undefined'? typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "21": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' && typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "22": "awaited_messages: typing.Optional[list] = None ) -> (typeof (typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined') => (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "23": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined') -> (\"\"\"",
      "24": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool)!== 'undefined' && typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "25": "awaited_messages: typing.Optional[list] = None ) -> (typeof (t[bool], t[typing.Match])!== 'undefined') -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "26": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== \"undefined\" &&!typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "27": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "28": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match]) && (typing.Optional[bool], typing.Optional[typing.Match])): \"\"\"",
      "29": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match])): \"\"\"",
      "30": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "31": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined'): \"\"\"",
      "32": "awaited_messages: typing.Optional[list] = None ) -> (type + \"\"? \"\" : \"\" ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "33": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' &&!typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "34": "awaited_messages: typing.Optional[list] = None ) -> (typeof (t[bool], t[typing.Match])!== 'undefined') => (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "35": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined'? (typeof [bool], typing.Optional[typing.Match]) : \"\"\"",
      "36": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], (typing.Optional[typing.Match]) => (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "37": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool)!== 'undefined' && typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "38": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined'): \"\"\"",
      "39": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool), typing.Optional[typing.Match])!== 'undefined'): \"\"\"",
      "40": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "41": "awaited_messages: typing.Optional[list] = None ) -> (typeof (typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined'): \"\"\"",
      "42": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool), typing.Optional[typing.Match]): \"\"\"",
      "43": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], (typing.Optional[typing.Match]) => (typing.Optional[bool], (typing.Optional[typing.Match]) ): \"\"\"",
      "44": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match]) && (typing.Optional[bool], typing.Optional[typing.Match]) ): \"\"\"",
      "45": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[typing.MATCH]): \"\"\"",
      "46": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "47": "awaited_messages: typing.Optional[list] = None ) -> (typeof (b)!== 'undefined'? (bool : typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "48": "awaited_messages: typing.Optional[list] = None ) -> (typeof (bool)!== 'undefined'? typing.Optional[bool], typing.Optional[typing.Match]) : \"\"\"",
      "49": "awaited_messages: typing.Optional[list] = None ) -> (typeof(typing.Optional[bool], typing.Optional[typing.Match])!== 'undefined' && (typing.Optional[bool], typing.Optional[typing.Match])? \"\"\" : awaited_messages;"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True, autoincrement=False)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True, autoincrement=False)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True, autoincrement=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True, $parameter$autoincrement = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 20,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_same_table_joins.py",
    "target_filename": "tests/test_more_same_table_joins.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "1": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "2": "id: ormar.Integer(primary_key = True, autoincrement=False) name: ormar.String(max_length=100)",
      "3": "id: ormar.Integer(primary_key = True) name: ormar.String(max_length=100)",
      "4": "id: ormar.Integer(primary_key =True, autoincrement=False) name: ormar.String(max_length=100)",
      "5": "id: ormar.Integer($parameter$primary_key = True, autoincrement=False) name: ormar.String(max_length=100)",
      "6": "ormar.Integer(primary_key=True, autoincrement=False) id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "7": "id: ormar.Integer(primary_key=True), autoincrement=False) name: ormar.String(max_length=100)",
      "8": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "9": "id: ormar.Integer(primary_key = True, autoincrement = False) name: ormar.String(max_length=100)",
      "10": "id: ormar.Integer($primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "11": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Multiplication(primary_key) id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "12": "id: ormar.Integer(prior_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "13": "id: ormar.Integer(primary_key = True), autoincrement=False) name: ormar.String(max_length=100)",
      "14": "id: ormar.Integer($parameter$primary_key = True, $parameter$autoincrement=False) name: ormar.String(max_length=100)",
      "15": "id: ormar.Integer($parameter$primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "16": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.MultiPolymer(primary_key) id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "17": "id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "18": "ormar.Integer(primary_key=True, autoincrement=False) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "19": "id: ormar.Integer(primary_key =True, autoincrement = False) name: ormar.String(max_length=100)",
      "20": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Integer(primary_key = True, autoincrement=False) name: ormar.String(max_length=100)",
      "21": "id: ormar.Integer($primary_key = True, autoincrement=False) name: ormar.String(max_length=100)",
      "22": "id: ormar.Integer(primary_key=True and autoincrement=False) name: ormar.String(max_length=100)",
      "23": "id: ormar.Integer(primary_key=True, autoincrement=False): name: ormar.String(max_length=100)",
      "24": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) id: ormar.Integer(primary_key=True, autoincrement=False)",
      "25": "id: ormar.Integer(primary_key=True, autoincrement=false) name: ormar.String(max_length=100)",
      "26": "id: ormar.Integer(primary_key=True, autoincrement=False) named: ormar.String(max_length=100)",
      "27": "id: ormar.Integer($parameter$primary_key =True, autoincrement=False) name: ormar.String(max_length=100)",
      "28": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Multiplication(primary_key) name: ormar.String(max_length=100)",
      "29": "id: ormar.Integer(primary_key=True, autoincrement=FALSE) name: ormar.String(max_length=100)",
      "30": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) id: ormar.Integer(max_key=True, autoincrement=False)",
      "31": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.MultiPolymer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "32": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) id: ormar.Integer(id, autoincrement=False)",
      "33": "id: ormar.Integer(primary_key =True) name: ormar.String(max_length=100)",
      "34": "id : ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100)",
      "35": "id: ormar.Integer($parameter$primary_key = True), autoincrement=False) name: ormar.String(max_length=100)",
      "36": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) base_id: ormar.Integer(primary_key=True, autoincrement=False)",
      "37": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String( max_length=100)",
      "38": "id: ormar.Integer(primary_key=True, autoincrement=False), name: ormar.String(max_length=100)",
      "39": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Triangle(primary_key) name: ormar.String(max_length=100)",
      "40": "id: ormar.Integer(primary_key=True, car_autoincrement=False) name: ormar.String(max_length=100)",
      "41": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Multiplication(primary_key) identity: ormar.String(max_length=100)",
      "42": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) id: ormar.Integer(min_key=0, max_key=True, autoincrement=False)",
      "43": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "44": "id: ormar.Integer(primary_key=True && autoincrement=False) name: ormar.String(max_length=100)",
      "45": "id: ormar.Integer(primary_key=True, autoincrement=False) number: ormar.Integer(primary_key=False) name: ormar.String(max_length=100)",
      "46": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) id: ormar.MultiPolygon(primary_key=True, autoincrement=False)",
      "47": "id: ormar.Integer(primary_key=True, autoincrement=False) term: ormar.String(max_length=100)",
      "48": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.String(max_length=100) id: ormar.Float(primary_key=True, autoincrement=False)",
      "49": "id: ormar.Integer(primary_key=True, autoincrement=False) name: ormar.STRING(max_length=100)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
    "target_code": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_line": "    def center(a: [\"Point2\"]) -> \"Point2\":",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[sc2.position.Point2]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BurnySc2/python-sc2",
    "source_filename": "sc2/position.py",
    "target_filename": "sc2/position.py",
    "source_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53^",
    "target_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "predictions": [
      "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "1": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Retours the central point for points in list \"\"\"",
      "2": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\" : \"\"\" Returns the central point for points in list \"\"\"",
      "3": "@staticmethod def center(a: [\"Point\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "4": "@staticmethod def center(a: [\"Point4\"]) -> \"Point4\": \"\"\" Returns the central point for points in list \"\"\"",
      "5": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the center point for points in list \"\"\"",
      "6": "@staticmethod def center(a: [\"Point2\"]) -> \"\": Returns the central point for points in list \"\"\"",
      "7": "@staticmethod def center(a: [\"Point2\"]) -> \"Point\": \"\"\" Returns the central point for points in list \"\"\"",
      "8": "@staticmethod def center(a: [\"Point2\"]) -> \"Point4\": \"\"\" Returns the central point for points in list \"\"\"",
      "9": "@staticmethod def center(a: [\"Point2\"]) -> \"Point3\": \"\"\" Returns the central point for points in list \"\"\"",
      "10": "@staticmethod def center(a: [\"Point3\"]) -> \"Point3\": \"\"\" Returns the central point for points in list \"\"\"",
      "11": "@staticmethod def center(a = [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "12": "@staticmethod def center(a: [\"Point2\"]) -> \"\"\" Returns the central point for points in list \"\"\"",
      "13": "@staticmethod def center(a: [\"Point3\"]) -> \"Point4\": \"\"\" Returns the central point for points in list \"\"\"",
      "14": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\", @t[\"id\"]: \"\"\" Returns the central point for points in list \"\"\"",
      "15": "@staticmethod def center(a: [\"Point2']) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "16": "@staticmethod def center(a: [\"Point2\"]) -> \"\": @staticmethod Returns the central point for points in list \"\"\"",
      "17": "@staticmethod def center(a: [\"Point1\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "18": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": [/\"] Returns the central point for points in list \"\"\"",
      "19": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": [\"\"] Returns the central point for points in list \"\"\"",
      "20": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" returns the central point for points in list \"\"\"",
      "21": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2: \"\"\" Returns the central point for points in list \"\"\"",
      "22": "@staticmethod Def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "23": "@staticmethod defendCenter(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "24": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\":![\"\"] Returns the central point for points in list \"\"\"",
      "25": "@staticmethod def center(a > [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "26": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\" \" Returns the central point for points in list \"\"\"",
      "27": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Brings the central point for points in list \"\"\"",
      "28": "@staticmethod def center(a, [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "29": "@staticmethod def center(a: [\"Point2\"]) -> \"Point1\": \"\"\" Returns the central point for points in list \"\"\"",
      "30": "@staticmethodDef center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "31": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"'\" Returns the central point for points in list \"\"\"",
      "32": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2 \": \"\"\" Returns the central point for points in list \"\"\"",
      "33": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\" : \"\"\" Retours the central point for points in list \"\"\"",
      "34": "@staticmethod def center(a: [\"Point2\"]) -> \"Zepto\": \"\"\" Returns the central point for points in list \"\"\"",
      "35": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point of points in list \"\"\"",
      "36": "@staticmethod Def Center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "37": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" Retrieves the central point for points in list \"\"\"",
      "38": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \" \"\" Returns the central point for points in list \"\"\"",
      "39": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\", statement: \"\" Returns the central point for points in list \"\"\"",
      "40": "@staticmethod def center(a: [\"Point2\"]) -> \"point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "41": "@staticmethod def center(a: [\"Point2\"]) -> \"\": \"\" Returns the central point for points in list \"\"\"",
      "42": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\" Returns the central point for points in list \"\"\"",
      "43": "@staticmethod def center(a: [\"Point2\") -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "44": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\", @renderMathHelper return the central point for points in list \"\"\"",
      "45": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": \"\"\" return the central point for points in list \"\"\"",
      "46": "@staticmethod def center(a: [\"Point2\"]) -> \"\" Returns the central point for points in list \"\"\"",
      "47": "@staticmethod def center(a: [\"Point2\"]) -> \"Point2\": ++ return the central point for points in list \"\"\"",
      "48": "@staticmethod def center(a -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "49": "@staticmethod def center(a) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "1": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "2": "id: ormar.Integer(primary_key=True) name: ormar.String( max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "3": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "4": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "5": "ormar.Integer(primary_key=True) id: ormar.String($parameter$max_length=100) name: ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "6": "ormar.Integer(primary_key=True) id: ormar.String(max_length=100) name: ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "7": "id: ormar.Integer(primary_key=True) name: ormar.String(parameter, max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "8": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "9": "id: ormar.Integer(primary_key=True) name: ormar.String(#parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "10": "id: ormar.Integer(primary_key=True) name: ormar.String(ormar.Integer(max_length=100)) category: ormar.ForeignKey(Category, nullable=True)",
      "11": "id: ormar.Integer(primary_key=True) name: ormar.String(parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "12": "id: ormar.Integer(primary_key=True) name: ormar.String(ormar.String(max_length=100)) category: ormar.ForeignKey(Category, nullable=True)",
      "13": "id: ormar.Integer(primary_key=True) name: ormar.String( max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "14": "id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "15": "id: ormar.Integer(primary_key=True) name: ormar.String(parseInt(max_length)) category: ormar.ForeignKey(Category, nullable=True)",
      "16": "id: ormar.Integer(primary_key=True) max_length: 100 } name: ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "17": "id: ormar.Integer(primary_key=True) number: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "18": "id: ormar.Integer(primary_key=True) name ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "19": "id: ormar.Integer(primary_key=True) name: ormar.StringMax(ormar.String(max_length=100)) category: ormar.ForeignKey(Category, nullable=True)",
      "20": "id: ormar.Integer(primary_key=True) term: ormar.String($parameter$max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "21": "id: ormar.Integer(primary_key=True) name: ormar.String(max_let_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "22": "id: ormar.Integer(primary_key=True) name: ormar.String(parameter$max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "23": "id: ormar.Integer(primary_key=True) name: (ormar.String($parameter$max_length=100)) category: ormar.ForeignKey(Category, nullable=True)",
      "24": "id: ormar.Integer(primary_key=True) name: ormar.String((max_length=100)) category: ormar.ForeignKey(Category, nullable=True)",
      "25": "id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "26": "id: ormar.Integer(primary_key=True) name: ormar.String(_max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "27": "id: ormar.Integer(primary_key=True) name: ormar.String.(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "28": "id: ormar.Integer(primary_key=True) name: ormar.String(#parameter$max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "29": "id: ormar.Integer(primary_key=True) name: ormar.String(100) category: ormar.ForeignKey(Category, nullable=True)",
      "30": "id: ormar.Integer(primary_key=True) name: ormar.String$null(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "31": "id: ormar.Integer(primary_key=True) name: ormar.String((max_length = 100)) category: ormar.ForeignKey(Category, nullable=True)",
      "32": "id: ormar.Integer(primary_key=True) name: ormar.String(int(max_length)) category: ormar.ForeignKey(Category, nullable=True)",
      "33": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "34": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100), category: ormar.ForeignKey(Category, nullable=True)",
      "35": "id: ormar.Integer(primary_key=True) name: ormar.String(default_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "36": "id: ormar.Integer(primary_key=True) type: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Categorie, nullable=True)",
      "38": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "39": "id: ormar.Integer(primary_key=True) name: ormar.String(min_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "40": "id: ormar.Integer(primary_key=True) name: ormar.String$(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "41": "id: ormar.Integer(primary_key=True) name: ormar.String(max_letlength=100) category: ormar.ForeignKey(Category, nullable=True)",
      "42": "id: ormar.Integer(primary_key=True) name: ormar.STRING(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "43": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=>100) category: ormar.ForeignKey(Category, nullable=True)",
      "44": "id: ormar.Integer(primary_key=True) name: ormar.StringMax(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "45": "id: ormar.Integer(primary_key=True) word: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "46": "ormar.Integer(primary_key=True) id: ormar.String($parameter$max_length=100) name: ormar.String($parameter$max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "47": "id: ormar.Integer(primary_key=True) name: ormar.String(#max_length) category: ormar.ForeignKey(Category, nullable=True)",
      "48": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length) category: ormar.ForeignKey(Category, nullable=True)",
      "49": "id: ormar.Integer(primary_key=True) name: ormar.String() category: ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fields/docs003.py",
    "target_filename": "docs_src/fields/docs003.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100)",
      "1": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 100)",
      "2": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "3": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "4": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100)",
      "5": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) id: ormar.Integer(primary_key=False)",
      "6": "id: ormar.Integer(primary_key=True) max_length: 100 } id: ormar.String($parameter$max_length=100) name: ormar.String(max_length=100)",
      "7": "ormar.Integer(primary_key=True) id: ormar.String($parameter$max_length=100) name: ormar.String($parameter$max_length=100)",
      "8": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 100)",
      "9": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) id: ormar.Integer(primary_key=True)",
      "10": "id: ormar.Integer(primary_key=True) expression: 'isNaN(ormar.String($parameter$max_length=100)') name: ormar.String(max_length=100)",
      "11": "id: ormar.Integer(primary_key=True) expression: 'isNaN(ormar.String($parameter$max_length = 100)') name: ormar.String(max_length=100)",
      "12": "id: ormar.Integer(primary_key=True) type: integer(ormar.String($parameter$max_length = 100)) name: ormar.String(max_length=100)",
      "13": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 100) id: ormar.Integer(primary_key=False)",
      "14": "id: ormar.Integer(primary_key=True) type: integer(ormar.String($parameter$max_length=100)) name: ormar.String(max_length=100)",
      "15": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(max_length=100))",
      "16": "id: ormar.Integer(primary_key=True) name: ormar.String(#int_order(ormar.String(max_length=100))",
      "17": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(primary_key=100))",
      "18": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) id: integer(id)",
      "19": "id: ormar.Integer(primary_key=True) expression: 'isNaN(ormar.String($parameter$max_length=100))' name: ormar.String(max_length=100)",
      "20": "oumar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "21": "id: ormar.Integer(primary_key=True) expression = ormar.String($parameter$max_length=100) name: ormar.String(max_length=100)",
      "22": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) id: ormar.Integer(primary_key=False)",
      "23": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) query_id: ormar.Integer(primary_key=True)",
      "24": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) query_id: ormar.Integer(primary_key=False)",
      "25": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) id: ormar.Integer(primary_key=Number)",
      "26": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(max_length=100))",
      "27": "id: ormar.Integer(primary_key=True) expression: 'isNaN(ormar.String($parameter$max_length = 100))' name: ormar.String(max_length=100)",
      "28": "id: ormar.Integer(primary_key=True) name: isString(ormar.String($parameter$max_length = 100))",
      "29": "id: ormar.Integer(primary_key=True) name: ormar.String( max_length=100)",
      "30": "id: ormar.Integer(primary_key=True) string: ormar.String($parameter$max_length=100)",
      "31": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.Integer(primary_key=100))",
      "32": "id: ormar.Integer(primary_key=True) name: isBinary(ormar.String($parameter$max_length=100))",
      "33": "id: ormar.Integer(primary_key=True) name: isNaN(ormar.String($parameter$max_length=100))",
      "34": "id: ormar.Integer(primary_key=True) name: ormar.String(#int_order(ormar.Integer(max_length=100))",
      "35": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) encode_values(id, value) }",
      "36": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('type', ormar.String(primary_key=100))",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(primary_key=150))",
      "38": "id: ormar.Integer(primary_key=True) name: isString(ormar.String($parameter$max_length=100))",
      "39": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(primary_key=100))",
      "40": "ormar.Integer(primary_key=True) id: ormar.String($parameter$max_length=100) name: ormar.String(max_length=100)",
      "41": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) typeOf: typeOf(ormar.String($parameter$max_length=100))",
      "42": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(primary_key=120))",
      "43": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty(ormar.String($parameter$max_length=100))",
      "44": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(parameter$max_length=100)",
      "45": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) typeOf: typeOf(ormar.String($parameter$max_length=100)) }",
      "46": "id: ormar.Integer(primary_key=True) name: ormar.String(#int32(ormar.String($parameter$max_length=100))",
      "47": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) hasOwnProperty('length', ormar.String(primary_key=110))",
      "48": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=100) id: integer(primary_key=False)",
      "49": "id: ormar.Integer(primary_key=True) name: isNaN(ormar.String($parameter$max_length = 100))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray():\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        if np.max(X) <= 2:\n",
    "target_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        if np.max(X) <= 2:\n",
    "warning_line": "    def predict(self, X: np.ndarray) -> np.ndarray():",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `np.ndarray()` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 116,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scikit-learn-contrib/MAPIE",
    "source_filename": "mapie/tests/test_classification.py",
    "target_filename": "mapie/tests/test_classification.py",
    "source_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f^",
    "target_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "predictions": [
      "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:"
    ],
    "correct": false,
    "top_five": {
      "0": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "1": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(); if np.max(X) = 2:",
      "2": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray() if np.max(X) = 2:",
      "3": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray()() if np.max(X) = 2:",
      "4": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray()(): if np.max(X) = 2:",
      "5": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X.length) }",
      "6": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: np.ndarray)",
      "7": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "8": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X.length);",
      "9": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray()(); if np.max(X) = 2:",
      "10": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, X: np.ndarray()): np.ndarray()",
      "11": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y) return np.array([3, 4])",
      "12": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.block(X)",
      "13": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]); def predict_proba(self, X: np.ndarray) -> np.ndarray(); if np.max(X) = 2:",
      "14": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X) }",
      "15": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray() || { } ; if np.max(X) = 2:",
      "16": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(self, Y: np.yarray)",
      "17": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: return np.array([3, 4])",
      "18": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, Y: y) }",
      "19": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray)",
      "20": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X.length),",
      "21": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: i++;",
      "22": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X.height) }",
      "23": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict(proba, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "24": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: np.yarray)",
      "25": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(self, Y: ndarray, X: np.ndarray()): np.ndarray()",
      "26": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(self, Y: ndarray, X: np.ndarray()) {",
      "27": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X).length;",
      "28": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, X: np.ndarray()) {",
      "29": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, X: np.ndarray())",
      "30": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(Y) }",
      "31": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray) }",
      "32": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: np.max(X.length)",
      "33": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray() = true if np.max(X) = 2:",
      "34": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y) return np.array([2, 3])",
      "35": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: return np.array([1, 2, 1])",
      "36": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y) return np.array([1, 2, 1])",
      "37": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(); if np.max(X) = 2: np.max(X.length);",
      "38": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: self.ndarray!== undefined? np.max(X) : ndarray(): np.ndarray()",
      "39": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: np.ndarray);",
      "40": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y)",
      "41": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y) }",
      "42": "def predict(self, X: np.ndarray) -> np.ndarray(): def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "43": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, X2: np.ndarray())",
      "44": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: try {",
      "45": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, np.ndarray()): np.ndarray()",
      "46": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y: ndarray, z: 0) }",
      "47": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: return np.array([2, 3])",
      "48": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.pluck(X.length, 0) }",
      "49": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2: def.predict(X, Y) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
    "target_code": "\ndef __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
    "warning_line": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(str, str, str)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 19,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "ciphers/trafid_cipher.py",
    "target_filename": "ciphers/trafid_cipher.py",
    "source_changeid": "60895366c0f50844af2737130ed98c2510e90060^",
    "target_changeid": "60895366c0f50844af2737130ed98c2510e90060",
    "predictions": [
      "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): tmp, thisPart = \"\", \"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "1": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "2": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeOf(str, str, str)) : tmp, thisPart = \"\", \"\"",
      "3": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str) : tmp, thisPart = \"\", \"\"",
      "4": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __parse(messagePart, str, str)): tmp, thisPart = \"\", \"\"",
      "5": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeOf(str, str, str)): tmp, thisPart = \"\", \"\"",
      "6": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __parse(messagePart)): tmp, thisPart = \"\", \"\"",
      "7": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, number)) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "8": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __decryptPart(messagePart, str, character2Number: dict) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "9": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def __parseInt(messagePart, str, str)) : tmp, thisPart = \"\", \"\"",
      "10": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): tmp, thisPart = \"\", \"\";",
      "11": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, messagePart: character1Number)) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "12": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __parse(messagePart, str)): tmp, thisPart = \"\", \"\"",
      "13": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, messagePart: character2Number)) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "14": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeof(str, str, str)) : tmp, thisPart = \"\", \"\"",
      "15": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, undefined)) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "16": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict) return: tmp, thisPart = \"\", \"\"",
      "17": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, defTypeOf(str, str, str)) : tmp, thisPart = \"\", \"\"",
      "18": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, defRef) : tmp, thisPart = \"\", \"\"",
      "19": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, defRef) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "20": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeOf(str, str, str)) : tmp, thisPart = \"\", \"\";",
      "21": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, messagePart: character2Number)) -> (str, str, str): tmp, thisPart = \"\", \"\";",
      "22": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, number)) -> (str, str, str): tmp, thisPart = \"\", \"\";",
      "23": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __parse(messagePart, str, str)): tmp, thisPart = \"\", \"\";",
      "24": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, undefined) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "25": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def __parseInt(messagePart, str, str)): tmp, thisPart = \"\", \"\"",
      "26": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, messagePart: character1Number)) -> (str, str, str): tmp, thisPart = \"\", \"\";",
      "27": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): return tmp, thisPart = \"\", \"\"",
      "28": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeOf(str, str, str))!== undefined? (str, str, str) : tmp, thisPart = \"\", \"\"",
      "29": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defValue__): tmp, thisPart = \"\", \"\"",
      "30": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def __parseInt(messagePart, str, str)) tmp, thisPart = \"\", \"\"",
      "31": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, length: str)) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "32": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def.__parseInt(messagePart, str, str)) : tmp, thisPart = \"\", \"\"",
      "33": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def __parseInt(messagePart)) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "34": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def __parseInt(messagePart, str, str)) : tmp, thisPart = \"\", \"\";",
      "35": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defValue): tmp, thisPart = \"\", \"\"",
      "36": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defRef) -> (str, str, str): tmp, thisPart = \"\", \"\"",
      "37": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, def __parseInt(messagePart)) : tmp, thisPart = \"\", \"\"",
      "38": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict) }",
      "39": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeof(str, str, str))!== undefined? (str, str, str) : tmp, thisPart = \"\", \"\"",
      "40": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, str): tmp, thisPart = \"\", \"\"",
      "41": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defRef) : tmp, thisPart = \"\", \"\"",
      "42": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str): tmp, thisPart = \"\", \"\"",
      "43": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, undefined) : tmp, thisPart = \"\", \"\"",
      "44": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, str): tmp, thisPart = \"\", \"\"",
      "45": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, defTypeof(str, str, str)) : tmp, thisPart = \"\", \"\";",
      "46": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, defTypeOf(str, str, str)) : tmp, thisPart = \"\", \"\";",
      "47": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, val) } tmp, thisPart = \"\", \"\"",
      "48": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parseInt(messagePart, str, character2Number: dict, defValue__) : tmp, thisPart = \"\", \"\"",
      "49": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): def __parse(messagePart, str, character2Number: dict, def __decryptPart(messagePart: str, character2Number: dict)) -> (str, str, str): tmp, thisPart = \"\", \"\";"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 58,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "1": "ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "2": "(function() { id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "3": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) }",
      "4": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=400) }",
      "5": "value: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "6": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) Category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "7": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) {",
      "8": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=700) }",
      "9": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=4000)",
      "10": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500)",
      "11": "let id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "12": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=1200)",
      "13": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=400) {",
      "14": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=400)",
      "15": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=600) }",
      "16": "import { value: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "17": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=800) }",
      "18": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=1000) }",
      "19": "id: ormar.Integer(primary_key=True) text: text(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "20": "test(ormar.String(max_length=500)) { id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "21": "error: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "22": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=1,000) }",
      "23": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) } ;",
      "24": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) max_length: ormar.String(max_length=1200)",
      "25": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) if (ormar.ForeignKey(Category)) {",
      "26": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) if (! ormar.String(max_length=1000)) {",
      "27": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length === 500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "28": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=1200) }",
      "29": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) \\",
      "30": "value: $(ormar.Integer(primary_key=True)) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "31": "function id() { id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "32": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) if (ormar.String(max_length=1000)) {",
      "33": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=700) {",
      "34": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=750) }",
      "35": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=750)",
      "36": "import { id, value } from './index' id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "37": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) ^",
      "38": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=400) \\",
      "39": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) if (ormar.String(max_length=1200)) {",
      "40": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=450)",
      "41": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=3000)",
      "42": "import { id, max_length } from '@ctx-core/number/min_length' import { id, max_length } from '@ctx-core/number/min_length' category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "43": "function id_match(primary_key) { id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "44": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) if (!ormar.String(max_length=1000)) {",
      "45": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=700)",
      "46": "error: false } id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category)",
      "47": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=400) } ;",
      "48": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) if (! ormar.String(max_length=1,000)) {",
      "49": "id: ormar.Integer(primary_key=True) text: ormar.String(max_length=500) category: ormar.ForeignKey(tests.test_queryset_level_methods.Category) id: ormar.Integer(primary_key=True) text: ormar.String(max_length=680)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category, nullable=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_fastapi_usage.py",
    "target_filename": "tests/test_fastapi_usage.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "1": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "2": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, nullable=True)",
      "3": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)",
      "4": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(category, nullable=True)",
      "5": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "6": "id: ormar.Integer(primary_key=True) max_length: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "7": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "8": "id: ormar.Integer(primary_key=True) max_length: 100 Expression.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "9": "value: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "10": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(category, nullable=True)",
      "11": "value: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "12": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) if (ormar.String(max_length=100)) {",
      "13": "id: ormar.Integer(primary_key=True) max_length: 100 expression: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "14": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "15": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "16": "ormar.String(max_length=100) name: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) category: ormar.ForeignKey(Category, nullable=True)",
      "17": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(testeds.test_fastapi_usage.Category, $parameter$nullable=True)",
      "18": "if (ormar.String(max_length=100)) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "19": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) Category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "20": "identity: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "21": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, $parameter$nullable=True)",
      "22": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) if(ormar.String(max_length=100)) {",
      "23": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage, $parameter$nullable=True)",
      "24": "id: ormar.Integer(primary_key=True) max_length: 100 Expression.prototype.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "25": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "26": "(function() { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "27": "id: ormar.Integer(primary_key=True) max_length: 100 Expression.push( { id: ormar.Integer(primary_key=True) category: ormar.ForeignKey(Category, nullable=True)",
      "28": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) if (! ormar.String(max_length=100)) {",
      "29": "id: ormar.Integer(primary_key=True) max_length: 100 Expression.prototype.stringify( { name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "30": "let id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "31": "value: ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, nullable=True)",
      "32": "(function() { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "33": "case 'Error': id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "34": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) if (!ormar.String(max_length=100)) {",
      "35": "id: ormar.Integer(primary_key=True) max_length: 100 return name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "36": "id: ormar.Integer(primary_key=True) max_length: 100 Expression.prototype.slice.call(ormar.String(max_length=100)) category: ormar.ForeignKey(Category, nullable=True)",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, __nullable=True)",
      "38": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) if( ormar.String(max_length=100) ) {",
      "39": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True), id: ormar.Integer(primary_key=False) }",
      "40": "id: ormar.Integer(primary_key=True) max_length: 100 Expression.prototype.strict = ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "41": "identity: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True)",
      "42": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True) if (!ormar.String(max_length=100)) {",
      "43": "if (ormar.String(max_length=100)) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable=True) }",
      "44": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, id, nullable=True)",
      "45": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, nullable=True)",
      "46": "id: ormar.Integer(primary_key=True) number: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "47": "id: ormar.Integer(primary_key=True) max_length: 100 expression = ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "48": "ormar.Integer(primary_key=True) max_length: 100 Expression.prototype.strict = ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "49": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True) if (ormar.String(max_length=100)) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.String(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n\n",
    "target_code": "\n    id = ormar.String(primary_key=True, default=key, max_length=8)\n    name = ormar.String(max_length=32)\n\n",
    "warning_line": "    id: ormar.String(primary_key=True, default=key, max_length=8)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_non_integer_pkey.py",
    "target_filename": "tests/test_non_integer_pkey.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "1": "ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "2": "id: ormar.String(primary_key = True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "3": "ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8) name: ormar.String(max_length=32)",
      "4": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "5": "id: ormar.String(primary_key=True, default=key, max_length=8) number: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "6": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$max_length } id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "7": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id = ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8) name: ormar.String(max_length=32)",
      "8": "ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) name: ormar.String(max_length=32)",
      "9": "id: ormar.String(primary_key=True, default=key, max_length=8) facet: ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "10": "case \"id\": ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "11": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id += ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) name: ormar.String(max_length=32)",
      "12": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id = ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "13": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "14": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id += ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8) name: ormar.String(max_length=32)",
      "15": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id = ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) name: ormar.String(max_length=32)",
      "16": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True.substring(ormar.String(primary_key=True, default=key, max_length=8)) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "17": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id += ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "18": "id: ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "19": "id: ormar.String(primary_key=True, default=key, max_length=8) value: ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "20": "error: ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "21": "let id = ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "22": "max_length: ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "23": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=True, default=key, max_length=8) ) { id: ormar.String(primary_key=True, default=key, max_length=8)",
      "24": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if(ormar.String(primary_key=True, default=key, max_length=8)) { name: ormar.String(max_length=32)",
      "25": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; expression.is_id(ormar.String(primary_key=True, default=key, max_length=8)) } name: ormar.String(max_length=32)",
      "26": "id: ormar.String(primary_key=True, default=key, max_length=8) node: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "27": "oumar.String(primary_key=True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "28": "id: ormar.String(primary_key=True, default=key, max_length=8) string = ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "29": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True.substring(ormar.String(primary_key=True, default=key, max_length=8)) name: ormar.String(max_length=32)",
      "30": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=true, default=key, max_length=8) ) { id: ormar.String(primary_key=True, default=key, max_length=8)",
      "31": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; expression.is_undefined(ormar.String(primary_key=True, default=key, max_length=8)) } name: ormar.String(max_length=32)",
      "32": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=True, default=key, max_length=8) ) { id: ormar.String(primary_key=True, default=key, max_length=8) }",
      "33": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=True, default=key, max_length=8) ) { name: ormar.String(max_length=32)",
      "34": "id: ormar.String(primary_key=True, default=key, max_length=8) case 'exception': id += ormar.String(primary_key=False, default=key, max_length=8) name: ormar.String(max_length=32)",
      "35": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True.substring(ormar.String(primary_key=True, default=key, max_length=8)) id: ormar.String(max_length=32)",
      "36": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=True, default=key, max_length=8) && ormar.String(max_length=32) && ormar.String(primary_key=true, default=key, max_length=8)) {",
      "37": "id: ormar.String(primary_key=True, default=key, max_length=8) value: ormar.String(primary_key=True, default=key, max_length=8) id: ormar.String(max_length=32)",
      "38": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if(ormar.String(primary_key=True, default=key, max_length=8)) { id: ormar.String(primary_key=True, default=key, max_length=8)",
      "39": "ormar.String(primary_key = True, default=key, max_length=8) id: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "40": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=true, default=key, max_length=8) && ormar.String(max_length=32) && ormar.String(primary_key=true, default=key, max_length=8)) {",
      "41": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True.toArray(ormar.String(primary_key=True, default=key, max_length=8)) id: ormar.String(max_length=32)",
      "42": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=true, default=key, max_length=8) ) { name: ormar.String(max_length=32)",
      "43": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True.toArray(ormar.String(primary_key=True, default=key, max_length=8)) name: ormar.String(max_length=32)",
      "44": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if(ormar.String(primary_key=true, default=key, max_length=8)) { name: ormar.String(max_length=32)",
      "45": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; default=key: tests.test_non_integer_pkey.key; name: ormar.String(max_length=32)",
      "46": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=True, default=key, max_length=8) && ormar.String(primary_key=default=tests.test_non_integer_pkey.key, $parameter$max_length=8) ) {",
      "47": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=true, default=key, max_length=8) && ormar.String(primary_key=false, default=key, max_length=8) ) {",
      "48": "id: ormar.String(primary_key=True, default=key, max_length=8) term: ormar.String(primary_key=True, default=key, max_length=8) name: ormar.String(max_length=32)",
      "49": "id: ormar.String(primary_key=True, default=key, max_length=8) max_length: $parameter$primary_key = True; if( ormar.String(primary_key=true, default=key, max_length=8) ) { id: ormar.String(primary_key=True, default=key, max_length=8) }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,\n",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_line": "      command: Optional(List[str]) = None,",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "1": "experiments: Iterable[conf.Expperiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "2": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = Nothing, args: Optional[List[str]] = None,",
      "3": "experiments: Theyerable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "4": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = Nothing,",
      "5": "experiment: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "6": "experiments: Iterable[conf.Experiment], order: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "7": "experiments: Theyrable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "8": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = none,",
      "9": "experiments: Iterable[conf.Experiment], command: Optional(List[str]), args: Optional[List[str]] = None,",
      "10": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = none, args: Optional[List[str]] = None,",
      "11": "experiments: Iterable[conf.Experiment], command: Options(List[str]) = None, args: Optional[List[str]] = None,",
      "12": "experiments: Iterable[conf.Experiment], command: Optional(list[str]) = None, args: Optional[List[str]] = None,",
      "13": "experiments: Iterable[conf.Experiment], commands: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "14": "experiments: Iterable[conf.Experiment), command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "15": "experiments: Iterable[conf.Experment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "16": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = All, args: Optional[List[str]] = None,",
      "17": "experiments: Theremin.Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "18": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = Never, args: Optional[List[str]] = None,",
      "19": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = NotFound, args: Optional[List[str]] = None,",
      "20": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = Never,",
      "21": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = No,",
      "22": "experiments: iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "23": "experiments: Iterable[conf.Experiment], command: Optional(List[str]).options = None, args: Optional[List[str]] = None,",
      "24": "experiments: Iterable[conf.Experiment], request: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "25": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "26": "experiments: Theyre.Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "27": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = No, args: Optional[List[str]] = None,",
      "28": "experiments: Theylve[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "29": "experiments: Iterable[conf.Experiment], command: Optional( List[str]) = None, args: Optional[List[str]] = None,",
      "30": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None; args: Optional[List[str]] = None,",
      "31": "experiments: Theyremix[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "32": "experiments: Iterable[conf.Experiment], command: Optional (List[str]) = None, args: Optional[List[str]] = None,",
      "33": "experiments: They[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "34": "experiments: Iterable[conf.Experiment], call: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "35": "experiments: Some[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "36": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = Non, args: Optional[List[str]] = None,",
      "37": "experiments: Iterable[conf.Experiment], command: Optional(list[str]) = None, args: Optional[list[str]] = None,",
      "38": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None and args: Optional[List[str]] = None,",
      "39": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Options[List[str]] = None,",
      "40": "experiments: Iterable[conf.Experiment], command: Optional(List[tr]) = None, args: Optional[List[str]] = None,",
      "41": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[Str]] = None,",
      "42": "experiments: Iterative[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "43": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "44": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = NotFound,",
      "45": "experiments: Iterable[conf.Experiment], command: Optional[List[str]) = None, args: Optional[List[str]] = None,",
      "46": "experiments: Iterable [conf.Experiment], command: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "47": "experiments: Iterable[conf.Experiment], option: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "48": "experiments: Iterable[conf.Experiment], commande: Optional(List[str]) = None, args: Optional[List[str]] = None,",
      "49": "experiments: Iterable[conf.Experiment], command: Optional(List[str]) = None, arguments: Optional[List[str]] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": true,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata\n",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
    "warning_line": "    def setMetaData(self, metadata: Dict[str: Any]) -> None:",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/PluginObject.py",
    "target_filename": "UM/PluginObject.py",
    "source_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9^",
    "target_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "predictions": [
      "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata"
    ],
    "correct": false,
    "top_five": {
      "0": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "1": "# The metadata of the plugin is set at the moment it is loaded at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "2": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> none: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "3": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self, metadata) -> Dict[str: Any]: return self._metadata",
      "4": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata; def getMetaData(self) -> Dict[str: Any]: return self._metadata;",
      "5": "# The metadata of the plugin is set at the moment it is loaded at param time. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "6": "# The metadata of the plugin is set at the moment it is loaded.def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "7": "# The metadata of the plugin is set at the moment it is loaded and ready to use. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "8": "# The metadata of the plugin is set at the moment it is loaded at which point it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "9": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "10": "# The metadata of the plugin is set at the moment it is loaded. Def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "11": "# The metadata of the plugin is set at the moment it is loaded at the time it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "12": "# The metadata of the plugin is set at the moment it is loaded at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> none: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "13": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata; def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "14": "# The metadata of the plugin is set at the moment it is loaded at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self, metadata) -> Dict[str: Any]: return self._metadata",
      "15": "# The metadata of the plugin is set at the moment it is loaded at params.exec(theme, metadata) def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "16": "# The metadata of the plugin is set at the moment it is loaded at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata; def getMetaData(self) -> Dict[str: Any]: return self._metadata;",
      "17": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) () -> Dict[str: Any]: return self._metadata",
      "18": "# The metadata of the plugin is set at the moment it is loaded by default. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "19": "# The metadata of the plugin is set at the moment it is loaded with metadata.def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "20": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) => None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "21": "# The metadata of the plugin is set at the moment it is loaded at least once per second. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "22": "@ The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "23": "def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "24": "# The metadata of the plugin is set at the moment it is loaded at parseTime().def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "25": "# The metadata of the plugin is set at the moment it is loaded; def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "26": "# The metadata of the plugin is set at the moment it is loaded at param level. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "27": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) - Dict[str: Any]: return self._metadata",
      "28": "# The metadata of the plugin is set at the moment it is loaded at params.time.end().def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "29": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) || { } -> Dict[str: Any]: return self._metadata",
      "30": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> null: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "31": "# The metadata of the plugin is set at the moment it is loaded; def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata; def getMetaData(self) -> Dict[str: Any]: return self._metadata;",
      "32": "# The metadata of the plugin is set at the moment it is loaded at params.exec(str); def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata; def getMetaData(self) -> Dict[str: Any]: return self._metadata;",
      "33": "# The metadata of the plugin is set at the moment it is loaded at no extra cost. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "34": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self)() -> Dict[str: Any]: return self._metadata",
      "35": "# The metadata of the plugin is set at the moment it is loaded and stored. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "36": "# The metadata of the plugin is set at the moment it is loaded at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata; def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "37": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def metaData(self) -> Dict[str: Any]: return self._metadata",
      "38": "# The metadata of the plugin is set at the moment it is loaded at paramtime.def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "39": "# The metadata of the plugin is set at the moment it is loaded at param time. def setMetaData(self, metadata: Dict[str: Any]) -> none: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "40": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Anything]: return self._metadata",
      "41": "# The metadata of the plugin is set at the moment it is loaded. def setMetadata(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "42": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self.metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "43": "# The metadata of the plugin is set at the moment it is loaded: def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "44": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> (): self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "45": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> Null: self._metadata = metadata def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "46": "# The metadata of the plugin is set at the moment it is loaded at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: def getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "47": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: def getMetaData(self, metadata) -> Dict[str: Any]: return self._metadata",
      "48": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: self._metadata = metadata const getMetaData(self) -> Dict[str: Any]: return self._metadata",
      "49": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str: Any]) -> None: const getMetaData(self) -> Dict[str: Any]: return self._metadata"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_line": "        plane: [str, Plane],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[str, vedo.Plane]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 336,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "brainglobe/brainrender",
    "source_filename": "brainrender/scene.py",
    "target_filename": "brainrender/scene.py",
    "source_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6^",
    "target_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "predictions": [
      "self, plane: [str, Plane], actors=None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, plane: [str, Plane], actors=None,",
      "1": "self, plane: [str, vedo.Plane], actors=None,",
      "2": "self, plane: [str, Vedo.Plane], actors=None,",
      "3": "self, plane: [str, vol.Plane], actors=None,",
      "4": "self, plane: [str, vole.Plane], actors=None,",
      "5": "self, plane: [str, volcano.Plane], actors=None,",
      "6": "self, plane: [str, VedoPlane], actors=None,",
      "7": "self, plane: [str, volde.Plane], actors=None,",
      "8": "self, plane: [str, proj, vedo.Plane], actors=None,",
      "9": "self, plane: [str, plane], actors=None,",
      "10": "self, plane: [str, undefined, vedo.Plane], actors=None,",
      "11": "self, plane: [str, del, vedo.Plane], actors=None,",
      "12": "self, plane: [str, vertex.Plane], actors=None,",
      "13": "self, plane: [str, plan.Plane], actors=None,",
      "14": "self, plane: [str, plan.Panel], actors=None,",
      "15": "self, plane: [str, volen.Plane], actors=None,",
      "16": "self, plane: [str, Particle], actors=None,",
      "17": "self, plane: [str, VerticalPlane], actors=None,",
      "18": "self, plane: [str, vold.Plane], actors=None,",
      "19": "self, plane: [str, Vedo.Plane], actors=None,",
      "20": "self, plane: [str, plan.Draw], actors=None,",
      "21": "self, plane: [str, Vert.Plane], actors=None,",
      "22": "self, plane: [str, plan.Map], actors=None,",
      "23": "self, plane: [str, vie.Plane], actors=None,",
      "24": "self, plane: [str, Schema.Plane], actors=None,",
      "25": "self, plane: [str, vert.Plane], actors=None,",
      "26": "self, plane: [str, control.Plane], actors=None,",
      "27": "self, plane: [str, plan.Vector], actors=None,",
      "28": "self, plane: [str, parsed.Plane], actors=None,",
      "29": "self, plane: [str, plan.Pane], actors=None,",
      "30": "self, plane: [str, normalize.Plane], actors=None,",
      "31": "self, plane: [str, dojo.Plane], actors=None,",
      "32": "self, plane: [str, Proto.Plane], actors=None,",
      "33": "self, plane: [str, plane.name], actors=None,",
      "34": "self, plane: [null, null, Plane], actors=None,",
      "35": "self, plane: [str, dot, Plane], actors=None,",
      "36": "self, plane: [str, Vec4], actors=None,",
      "37": "self, plane: [str, pare.Plane], actors=None,",
      "38": "self, plane: [str, P], actors=None,",
      "39": "self, plane: [str, plano], actors=None,",
      "40": "self, plane: [str, vertex], actors=None,",
      "41": "self, plane: [str, plane], actors=None,",
      "42": "self, plane: [str, Schema], actors=None,",
      "43": "self, plane: [str, Plot], actors=None,",
      "44": "self, plane: [str, plan], actors=None,",
      "45": "self, plane: [str, plot], actors=None,",
      "46": "self, plane: [str, plane, actors=None,",
      "47": "self, plane: null, actors=None,",
      "48": "self, plane: [str, point], actors=None,",
      "49": "self, plane: [], actors=None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 48,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "1": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "2": "id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "3": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length>100) category: ormar.ForeignKey(Category, nullable=True)",
      "4": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length === 100) category: ormar.ForeignKey(Category, nullable=True)",
      "5": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "6": "id: ormar.Integer(primary_key=True) max_length: 100 identity: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "7": "case 'Integer': ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "8": "id: ormar.Integer(primary_key = True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "9": "id: ormar.Integer(primary_key=True) max_length: 100 return name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "10": "id: ormar.Integer(primary_key=True) max_length: 100 category: ormar.ForeignKey(Category, nullable=True)",
      "11": "let id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "12": "id: ormar.Integer(primary_key=True) number: ormar.Integer(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "13": "case 'Integer': id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "14": "id: ormar.Integer(primary_key=True) max_length: 100 type: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "15": "id: ormar.Integer(primary_key =True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "16": "ormar.Integer(primary_key=True) max_length: 100 id: ormar.Integer(primary_key=True) category: ormar.ForeignKey(Category, nullable=True)",
      "17": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length, 100) category: ormar.ForeignKey(Category, nullable=True)",
      "18": "case \"Integer\": id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "19": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length+10) category: ormar.ForeignKey(Category, nullable=True)",
      "20": "id: ormar.Integer(primary_key=True) max_length: 100 numele: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "21": "id: ormar.Integer(primary_key=True) max_length: 100 enregistr\u00e9_id: ormar.Integer(primary_key=True) category: ormar.ForeignKey(Category, nullable=True)",
      "22": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length > 100) category: ormar.ForeignKey(Category, nullable=True)",
      "23": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length100) category: ormar.ForeignKey(Category, nullable=True)",
      "24": "id: ormar.Integer(primary_key=True) number: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "25": "id: ormar.Integer(primary_key=True) term: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "26": "id: ormar.Integer(primary_key=True) max_length: 100 named: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "27": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length = 100) category: ormar.ForeignKey(Category, nullable=True)",
      "28": "identity: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "29": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length++) category: ormar.ForeignKey(Category, nullable=True)",
      "30": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) max_length: 100 category: ormar.ForeignKey(Category, nullable=True)",
      "31": "id: ormar.Integer(primary_key=True) value: ormar.Integer(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "32": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length+1) category: ormar.ForeignKey(Category, nullable=True)",
      "33": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length) category: ormar.ForeignKey(Category, nullable=True)",
      "34": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=>100) category: ormar.ForeignKey(Category, nullable=True)",
      "35": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length_=100) category: ormar.ForeignKey(Category, nullable=True)",
      "36": "type: ormar.Integer(primary_key=True) max_length: 100 identity: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length10) category: ormar.ForeignKey(Category, nullable=True)",
      "38": "ID: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "39": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100), category: ormar.ForeignKey(Category, nullable=True)",
      "40": "id: ormar.Integer(primary_key=True) max_length: 100 name: ormar.String(max_length) category: ormar.ForeignKey(Category, nullable=True)",
      "41": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=101) category: ormar.ForeignKey(Category, nullable=True)",
      "42": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=1000) category: ormar.ForeignKey(Category, nullable=True)",
      "43": "ormar.Integer(primary_key=True) max_length: 100 identity: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "44": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length), category: ormar.ForeignKey(Category, nullable=True)",
      "45": "image_id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "46": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length+'') category: ormar.ForeignKey(Category, nullable=True)",
      "47": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=10) category: ormar.ForeignKey(Category, nullable=True)",
      "48": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=110) category: ormar.ForeignKey(Category, nullable=True)",
      "49": "id: ormar.Integer(primary_key=True), name: ormar.String(max_length=100), category: ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        text: Optional[Text],\n        sender_id: [Optional[Text]],\n        metadata: Optional[Dict],\n",
    "target_code": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
    "warning_line": "        sender_id: [Optional[Text]],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[typing.Optional[typing.Text]]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/core/channels/webexteams.py",
    "target_filename": "rasa/core/channels/webexteams.py",
    "source_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2^",
    "target_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2",
    "predictions": [
      "text: Optional[Text], sender_id: [Optional[Text]], metadata: Optional[Dict],"
    ],
    "correct": false,
    "top_five": {
      "0": "text: Optional[Text], sender_id: [Optional[Text]], metadata: Optional[Dict],",
      "1": "text: Optional[Text], sender_id: [Optional[Text], metadata: Optional[Dict],",
      "2": "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],",
      "3": "text: Optional[Text], senter_id: [Optional[Text]], metadata: Optional[Dict],",
      "4": "text: Optional[Text], email: [Optional[Text], sender_id: [Optional[Text]], metadata: Optional[Dict],",
      "5": "text: Optional[Text], email: [Optional[Text]], sender_id: [Optional[Text]], metadata: Optional[Dict],",
      "6": "text: Optional[Text], sandbox_id: [Optional[Text]], metadata: Optional[Dict],",
      "7": "text: Optional[Text], subscriber_id: [Optional[Text]], metadata: Optional[Dict],",
      "8": "text: Optional[Text], user_id: [Optional[Text]], metadata: Optional[Dict],",
      "9": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text]]), metadata: Optional[Dict],",
      "10": "text: Optional[Text], anonymous: Optional[Text], sender_id: [Optional[Text]], metadata: Optional[Dict],",
      "11": "text: Optional[Text], sender_id: [Optional[Typ.Text]], metadata: Optional[Dict],",
      "12": "text: Optional[Text], email_id: [Optional[Text]], metadata: Optional[Dict],",
      "13": "text: Optional[Text], sender_id: [Optional[Json.stringify(Text)], metadata: Optional[Dict],",
      "14": "text: Optional[Text], sender_id: [Optional[Type]], metadata: Optional[Dict],",
      "15": "text: Optional[Text], sender_id: Optional[Optional[Text]], metadata: Optional[Dict],",
      "16": "text: Optional[Text], sm_id: [Optional[Text]], metadata: Optional[Dict],",
      "17": "text: Optional[Text], recipient_id: [Optional[Text]], metadata: Optional[Dict],",
      "18": "text: Optional[Text], sender_id: [Optional[Editor.Text]], metadata: Optional[Dict],",
      "19": "text: Optional[Text], parser_id: [Optional[Text]], metadata: Optional[Dict],",
      "20": "text: Optional[Text], sender_id: [Optional[Value.Text]], metadata: Optional[Dict],",
      "21": "text: Optional[Text], sender_id: [Optional.[Text]], metadata: Optional[Dict],",
      "22": "text: Optional[Text], message_id: [Optional[Text]], metadata: Optional[Dict],",
      "23": "text: Optional[Text], sender_id: Optional[Text]], metadata: Optional[Dict],",
      "24": "text: Optional[Text], sender_id: \"Alias.ValueJobExpression\", metadata: Optional[Dict],",
      "25": "text: Optional[Text], sender_id: \"Alias.BestValueJson\", metadata: Optional[Dict],",
      "26": "text: Optional[Text], mail_id: [Optional[Text]], metadata: Optional[Dict],",
      "27": "text: Optional[Text], sender_id: [Optional[Type.Text]], metadata: Optional[Dict],",
      "28": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text]], metadata: Optional[Dict],",
      "29": "text: Optional[Text], sender_id: [Option[Text]], metadata: Optional[Dict],",
      "30": "text: Optional[Text], email: [Optional[Text]], metadata: Optional[Dict],",
      "31": "text: Optional[Text], sep_id: [Optional[Text]], metadata: Optional[Dict],",
      "32": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text] || Typing.Optional[Text]]), metadata: Optional[Dict],",
      "33": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text]|Optional[Dict]\")\", metadata: Optional[Dict],",
      "34": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text]]\")\", metadata: Optional[Dict],",
      "35": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text] || Typing.Optional[Text]\")\", metadata: Optional[Dict],",
      "36": "text: Optional[Text], sending_id: [Optional[Text]], metadata: Optional[Dict],",
      "37": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text] || \"Optional[Text]\")\", metadata: Optional[Dict],",
      "38": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text]|Type.Optional[Dict]\")\", metadata: Optional[Dict],",
      "39": "text: Optional[Text], vendor_id: [Optional[Text]], metadata: Optional[Dict],",
      "40": "text: Optional[Text], sender_id: [Optional[Dict], metadata: Optional[Dict],",
      "41": "text: Optional[Text], submit_id: [Optional[Text]], metadata: Optional[Dict],",
      "42": "text: Optional[Text], client_id: [Optional[Text]], metadata: Optional[Dict],",
      "43": "text: Optional[Text], sema_id: [Optional[Text]], metadata: Optional[Dict],",
      "44": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text]|[Optional[Dict]\")\", metadata: Optional[Dict],",
      "45": "text: Optional[Text], app_id: [Optional[Text]], metadata: Optional[Dict],",
      "46": "text: Optional[Text], sender_id: \"Alias.BestValue([Optional[Text] || \"Optional[Dict]\")\", metadata: Optional[Dict],",
      "47": "text: Optional[Text], receiver_id: [Optional[Text]], metadata: Optional[Dict],",
      "48": "text: Optional[Text], sh_id: [Optional[Text]], metadata: Optional[Dict],",
      "49": "text: Optional[Text], token_id: [Optional[Text]], metadata: Optional[Dict],"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    magic = pi * sqrt(2) / smoothing\n",
    "target_code": "\ndef ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    magic = pi * sqrt(2) / smoothing\n",
    "warning_line": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `type(pandas.Series)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "freqtrade/indicator_helpers.py",
    "target_filename": "freqtrade/indicator_helpers.py",
    "source_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c^",
    "target_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "predictions": [
      "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(pandas.Series) : magic = pi * sqrt(2) / smoothing"
    ],
    "correct": false,
    "top_five": {
      "0": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "1": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series): magic = pi * sqrt(2) / smoothing",
      "2": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(pandas.Series): magic = pi * sqrt(2) / smoothing",
      "3": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "4": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(series): magic = pi * sqrt(2) / smoothing",
      "5": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series: Series, smoothing: float = 6) -> type(Series): magic = pi * sqrt(2) / smoothing",
      "6": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series, smoothing: float = 6) -> type(Series): magic = pi * sqrt(2) / smoothing",
      "7": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> defType(Series): magic = pi * sqrt(2) / smoothing",
      "8": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type(pandas.Series): magic = pi * sqrt(2) / smoothing",
      "9": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> defType(series): magic = pi * sqrt(2) / smoothing",
      "10": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(SerializedSeries): magic = pi * sqrt(2) / smoothing",
      "11": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type_(pandas.Series): magic = pi * sqrt(2) / smoothing",
      "12": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type_(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "13": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Stations): magic = pi * sqrt(2) / smoothing",
      "14": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother(series: Series, smoothing: float = 6) -> type(Series): magic = pi * sqrt(2) / smoothing",
      "15": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series) def ehlers_super_smoother(series: Series, smoothing: float = 6) magic = pi * sqrt(2) / smoothing",
      "16": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series) : magic = pi * sqrt(2) / smoothing",
      "17": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> types(Series): magic = pi * sqrt(2) / smoothing",
      "18": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother_type(Series): magic = pi * sqrt(2) / smoothing",
      "19": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series: Series, smoothing: float = 6) -> magic = pi * sqrt(2) / smoothing",
      "20": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother_type(series): magic = pi * sqrt(2) / smoothing",
      "21": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Structure, Series): magic = pi * sqrt(2) / smoothing",
      "22": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type(series): magic = pi * sqrt(2) / smoothing",
      "23": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother(series, smoothing: float = 6) -> type(Series): magic = pi * sqrt(2) / smoothing",
      "24": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type_(series): magic = pi * sqrt(2) / smoothing",
      "25": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type( Series ): magic = pi * sqrt(2) / smoothing",
      "26": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "27": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_type(Series): magic = pi * sqrt(2) / smoothing",
      "28": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series, smoothing: float = 6) -> type(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "29": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(pandas.Series) -> magic = pi * sqrt(2) / smoothing",
      "30": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother(series: Series, smoothing: float = 6) -> magic = pi * sqrt(2) / smoothing",
      "31": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_kaihi(series, smoothing): magic = pi * sqrt(2) / smoothing",
      "32": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series: Series, smoothing: float = 6) -> type(series): magic = pi * sqrt(2) / smoothing",
      "33": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series: Series, smoothing: float = 6) -> type(Series) : magic = pi * sqrt(2) / smoothing",
      "34": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series, smoothing: float = 6) -> magic = pi * sqrt(2) / smoothing",
      "35": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_BaseType(series): magic = pi * sqrt(2) / smoothing",
      "36": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "37": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_BaseType(Series): magic = pi * sqrt(2) / smoothing",
      "38": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> defType(pandas.Series): magic = pi * sqrt(2) / smoothing",
      "39": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother(series: Series, smoothing: float = 6) : magic = pi * sqrt(2) / smoothing",
      "40": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_basket_type(series): magic = pi * sqrt(2) / smoothing",
      "41": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_basket_type(series) : magic = pi * sqrt(2) / smoothing",
      "42": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_basket_type(Series): magic = pi * sqrt(2) / smoothing",
      "43": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(pandas.Series) -> type(Series): magic = pi * sqrt(2) / smoothing",
      "44": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_super_smoother(series, smoothing: float = 6) -> type(series): magic = pi * sqrt(2) / smoothing",
      "45": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def.Type(Series): magic = pi * sqrt(2) / smoothing",
      "46": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def_smoother_type(pandas.Series) : magic = pi * sqrt(2) / smoothing",
      "47": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(SigmaSeries): magic = pi * sqrt(2) / smoothing",
      "48": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(series) : magic = pi * sqrt(2) / smoothing",
      "49": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> def.type(pandas.Series) : magic = pi * sqrt(2) / smoothing"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    album = ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 41,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_foreign_keys.py",
    "target_filename": "tests/test_foreign_keys.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "1": "id: ormar.Integer(primary_key ==True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "2": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "3": "id: ormar.Integer(primary_key = True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "4": "id: ormar.Integer(primary_key==True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "5": "id: ormar.Integer(primary_key == True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "6": "id: ormar.Integer(primary_key=true) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "7": "id: ormar.Integer(primary_key ===True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "8": "id: ormar.Integer(primary_key=True), album: ormar.ForeignKey(Album, related_name=\"cover_pictures\"), title: ormar.String(max_length=100)",
      "9": "id: ormar.Integer(primary_key=True) band: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "10": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=cover_pictures\") title: ormar.String(max_length=100)",
      "11": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") titles: ormar.String(max_length=100)",
      "12": "id: ormar.Integer(primary_key ==true) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "13": "id: integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "14": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\"); title: ormar.String(max_length=100)",
      "15": "id: ormar.Integer(primary_key=True) cover_pictures: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "16": "id: ormar.Integer(primary_key=True) song: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "17": "id: ormar.Integer(primary_key=True) albums: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "18": "id: ormar.Integer(primary_key=TRUTH) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "19": "id: ormar.Integer(primary_key=True) collection: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "20": "id: ordinal(ormar.Integer(primary_key=True)) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "21": "id: ormar.Integer(primary_key=True) app: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "22": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"album_pictures\") title: ormar.String(max_length=100)",
      "23": "id: ormar.Integer(primary_key=True) in_album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "24": "id: ormar.Integer(primary_key=\"true\") album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "25": "id: ormar.Integer(primary_key=True)album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "26": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String( max_length=100)",
      "27": "id : ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "28": "id: ormar.Integer(primary_key=True) album: ormar.Key(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "29": "id: ormar.Integer(primary_key=True) book: ormar.ForeignKey(Book, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "30": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"album_cover_pictures\") title: ormar.String(max_length=100)",
      "31": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"album_title\") title: ormar.String(max_length=100)",
      "32": "id: normar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "33": "id: ormar.Integer(primary_key=True) song: ormar.String(album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "34": "id: ormar.Integer(primary_key=\"True\") album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "35": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") titre: ormar.String(max_length=100)",
      "36": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "37": "ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "38": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100) gig_id: ormar.Integer(primary_key=100)",
      "39": "id: ormar.Integer(primary_key=True) album: ormar.Integer(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "40": "id: ormar.Integer(primary_key === True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "41": "id: ormar.Integer(primary_key=True) category: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "42": "id: normar.Integer(primary_key=True) album: normar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "43": "id: ormar.Integer(primary_key=True): album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "44": "id: ormar.Integer(primary_key=True) song: ormar.String(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "45": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: oumar.String(max_length=100)",
      "46": "let id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "47": "id: ormar.Integer(primary_key=True) album: ormar.ForeignKey(Album, similar_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "48": "id: ormar.Integer(primary_key=True) book: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)",
      "49": "id: ormar.Integer(primary_key=True) playlist: ormar.ForeignKey(Album, related_name=\"cover_pictures\") title: ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "1": "id: ormar.Integer(primary_key ==True) name: ormar.String(max_length=100)",
      "2": "id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "3": "id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "4": "id: ormar.Integer(primary_key ===True) name: ormar.String(max_length=100)",
      "5": "id: ormar.Integer(primary_key==True) name: ormar.String(max_length=100)",
      "6": "ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "7": "id: ormar.Integer(primary_key == True) name: ormar.String(max_length=100)",
      "8": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "9": "id: ormar.Integer(primary_key = True) name: ormar.String(max_length=100)",
      "10": "id: ormar.Integer(primary_key === True) name: ormar.String(max_length=100)",
      "11": "ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "12": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) } name: ormar.String(max_length=100)",
      "13": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) } name: ormar.String(max_length=100)",
      "14": "type: ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "15": "ormar.Integer(primary_key = True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "16": "id: ormar.Integer(primary_key=True) number: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "17": "ormar.Integer(primary_key=True) identity: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "18": "ormar.Integer(primary_key=True) = ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "19": "id: ormar.Integer(primary_key ==true) name: ormar.String(max_length=100)",
      "20": "callback(ormar.error)) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "21": "ormar.Integer(primary_key=True) has: ormar.Integer($parameter$primary_key = True) name: ormar.String(max_length=100)",
      "22": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) { name: ormar.String(max_length=100)",
      "23": "type: ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "24": "ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "25": "callback(ormar.error) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "26": "callback(ormar.error) } id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "27": "case 'Error': id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "28": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) { name: ormar.String(max_length=100)",
      "29": "ormar.Integer(primary_key = True) id: ormar.Integer(primary_key ==True) name: ormar.String(max_length=100)",
      "30": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) \\ name: ormar.String(max_length=100)",
      "31": "ormar.Integer(primary_key=True) identity: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "32": "id: ormar.Integer(primary_key=True) number: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "33": "callback(ormar.error) } id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "34": "ormar.Integer(primary_key=True) = ormar.Integer(primary_key) name: ormar.String(max_length=100)",
      "35": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key==True) name: ormar.String(max_length=100)",
      "36": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) \\ name: ormar.String(max_length=100)",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "38": "id: ormar.Integer(primary_key=true) name: ormar.String(max_length=100)",
      "39": "ormar.Integer(primary_key=True) id: ormar.Integer($parameter$primary_key ==True) name: ormar.String(max_length=100)",
      "40": "callback(ormar.error)) } id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "41": "name: ormar.String(max_length=100)",
      "42": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "43": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key=True) ^ name: ormar.String(max_length=100)",
      "44": "id: ormar.Integer($parameter$primary_key =True) name: ormar.String(max_length=100)",
      "45": "id: ormar.Integer($parameter$primary_key ==True) name: ormar.String(max_length=100)",
      "46": "callback(ormar.Integer(primary_key=True)) } id: ormar.Integer($parameter$primary_key = True) ^ name: ormar.String(max_length=100)",
      "47": "callback(err) { id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "48": "ormar.Integer(primary_key=True) has: ormar.Integer($parameter$primary_key=True) name: ormar.String(max_length=100)",
      "49": "id: ormar.Integer(primary_key=True): name: ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "target_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_line": "    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 43,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Flax-Network/flax-blockchain",
    "source_filename": "src/util/Conditions.py",
    "target_filename": "src/util/Conditions.py",
    "source_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f^",
    "target_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "predictions": [
      "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: ["
    ],
    "correct": false,
    "top_five": {
      "0": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: [",
      "1": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions:",
      "2": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([ConditionVarPair] || [])) {",
      "3": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: ['conditions'],",
      "4": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (conditions.slice(src.types.condition_opcodes.ConditionVarPair.ConditionVarPair]) {",
      "5": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: Dict[ConditionOpcode] = null;",
      "6": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[Syn.ConditionVarPair]) {",
      "7": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: true",
      "8": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair], None) {",
      "9": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: Dict[ConditionOpcode] = (conditions.src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair]) {",
      "10": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: ['conditions'] }",
      "11": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: conditions.push([",
      "12": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (conditions.slice(src.types.condition_opcodes.ConditionOpcode.ConditionVarPair]) {",
      "13": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (!list[ConditionVarPair].hasOwnProperty('condition')) {",
      "14": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.ConditionVarPair]) {",
      "15": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, none)) {",
      "16": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair], None)) {",
      "17": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: [],",
      "18": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair]) {",
      "19": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([ConditionVarPair] || none)) {",
      "20": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push(...conditions.list[ConditionVarPair])) {",
      "21": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: Dict[ConditionOpcode] {",
      "22": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: Dict[ConditionOpcode] } ;",
      "23": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: [",
      "24": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: Dict[ConditionOpcode] = (conditions.src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair], None) {",
      "25": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair], None) { ;",
      "26": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.opcode === 'conditions')? conditions[0] : null;",
      "27": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: Dict[ConditionOpcode] = (conditions.src.types.condition_opcodes.ConditionOpcode, Listing[ConditionVarPair]) {",
      "28": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([ConditionVarPair].conditions)) {",
      "29": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([",
      "30": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (!list[ConditionVarPair] &&!list[ConditionVarPair][0]) {",
      "31": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions:",
      "32": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([ConditionVarPair] || null)) {",
      "33": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push(...conditions.Dict[ConditionVarPair])) {",
      "34": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (conditions.slice(src.types.condition_opcodes.ConditionOpcode, none)) {",
      "35": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([ConditionVarPair] ||!list[ConditionVarPair])) {",
      "36": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair], None)]) {",
      "37": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: 'conditions' }",
      "38": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push(...d)) {",
      "39": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.opcode === 'conditions')) {",
      "40": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[ConditionVarPair], None)) { ;",
      "41": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: [conditions.push([ConditionVarPair]], null]);",
      "42": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (!list[ConditionVarPair] &&!list[ConditionVarPair].hasOwnProperty) {",
      "43": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.push([ConditionVarPair] + ']')) {",
      "44": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (conditions.slice(src.types.condition_opcodes.ConditionVarPair.ConditionVarPairPair]) {",
      "45": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.slice(src.types.condition_opcodes.ConditionOpcode, typing.List[Src.ConditionVarPair]) {",
      "46": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: (conditions.opcode === 'conditions.opcode')? conditions[0] : null;",
      "47": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: conditions[0] }",
      "48": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: if (conditions.slice(src.types.condition_opcodes.ConditionVarPair.ConditionVarPair) {",
      "49": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions: ['conditions'] } ;"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            else:\n                extra_info = [] # type: [str]\n                if subtype_label is not None:\n",
    "target_code": "            else:\n                extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_line": "                extra_info = [] # type: [str]",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `\"[str]\"` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checker.py",
    "target_filename": "mypy/checker.py",
    "source_changeid": "021283f03639d185c3a0985684a94307c9fcc15b^",
    "target_changeid": "021283f03639d185c3a0985684a94307c9fcc15b",
    "predictions": [
      "else: extra_info = [] # type: [str] if subtype_label is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "else: extra_info = [] # type: [str] if subtype_label is not None:",
      "1": "else: extra_info = [] # type: [str] if subtype_label is Not None:",
      "2": "else: extra_info = [] # type: [str] if subtype_label is Not:",
      "3": "else: extra_info = [] type: [str] if subtype_label is not None:",
      "4": "else: extra_info = [] # type : [str] if subtype_label is not None:",
      "5": "else: extra_info = [null,null] # type: [str] if subtype_label is not None:",
      "6": "else: extra_info = [type] # type: [str] if subtype_label is not None:",
      "7": "else: extra_info = [str] if subtype_label is not None:",
      "8": "else: extra_info = [[] # type: [str] if subtype_label is not None:",
      "9": "else: extra_info = [null,null] type: [str] if subtype_label is not None:",
      "10": "else: extra_info = [] # type: [str] if subtype_label is NOT None:",
      "11": "else: extra_info = [] * type_label: [str] if subtype_label is not None:",
      "12": "else: extra_info = [] # type = [str] if subtype_label is not None:",
      "13": "else: extra_info = [] # type: [str], if subtype_label is not None:",
      "14": "else: extra_info = [_type] # type: [str] if subtype_label is not None:",
      "15": "else: extra_info = [] tag type: [str] if subtype_label is not None:",
      "16": "else: extra_info = [\"[str]\"] if subtype_label is not None:",
      "17": "else: extra_info = [] # type: [str] if subtype_label = not None:",
      "18": "else: extra_info = [] + [str] if subtype_label is not None:",
      "19": "else: extra_info = [] # type || [str] if subtype_label is not None:",
      "20": "else: extra_info = []# type: [str] if subtype_label is not None:",
      "21": "else: extra_info = [] # type || \"string\" if subtype_label is not None:",
      "22": "else: extra_info = [* # type: [str] if subtype_label is not None:",
      "23": "else: extra_info = [''] # type: [str] if subtype_label is not None:",
      "24": "else: extra_info = [] * type = [str] if subtype_label is not None:",
      "25": "else: extra_info = [info] # type: [str] if subtype_label is not None:",
      "26": "else: extra_info = [] string_type: [str] if subtype_label is not None:",
      "27": "else: extra_info = [], # type: [str] if subtype_label is not None:",
      "28": "else: extra_info = null || [str] if subtype_label is not None:",
      "29": "else: extra_info = [*] # type: [str] if subtype_label is not None:",
      "30": "else: extra_info = [] # type: [str]; if subtype_label is not None:",
      "31": "else: extra_info = [r] # type: [str] if subtype_label is not None:",
      "32": "else: extra_info = [] * type : [str] if subtype_label is not None:",
      "33": "else: extra_info = [] number: [str] if subtype_label is not None:",
      "34": "else: extra_info = [] [str] if subtype_label is not None:",
      "35": "else: extra_info = [] * type: [str] if subtype_label is not None:",
      "36": "else: extra_info = [] code: [str] if subtype_label is not None:",
      "37": "else: extra_info = [] # description: [str] if subtype_label is not None:",
      "38": "else: extra_info = [# type: [str] if subtype_label is not None:",
      "39": "else: extra_info = [] # type || \"\" if subtype_label is not None:",
      "40": "else: extra_info = []: type = [str] if subtype_label is not None:",
      "41": "else: extra_info = [] # kind: [str] if subtype_label is not None:",
      "42": "else: extra_info = [] # name: [str] if subtype_label is not None:",
      "43": "else: extra_info = [] # style: [str] if subtype_label is not None:",
      "44": "else: extra_info =[] # type: [str] if subtype_label is not None:",
      "45": "else: extra_info = [] line type: [str] if subtype_label is not None:",
      "46": "else: extra_info = [\u00bb type: [str] if subtype_label is not None:",
      "47": "else: extra_info = [] (str) if subtype_label is not None:",
      "48": "else: extra_info = [] Type: [str] if subtype_label is not None:",
      "49": "else: extra_info = [] # type: [str] if subtype_label is None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=40)\n\n",
    "warning_line": "    name: ormar.String(max_length=40)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 40)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_many_to_many.py",
    "target_filename": "tests/test_many_to_many.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40)",
      "1": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=40)",
      "2": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 40)",
      "3": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=40)",
      "4": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: ormar.Integer(primary_key=False)",
      "5": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40)",
      "6": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: ormar.Integer(primary_key=True)",
      "7": "id: ormar.Integer(primary_key=True) name: ormar.String( max_length=40)",
      "8": "id: ormar.Integer(primary_key=True) max_length: 40 } id: ormar.String($parameter$max_length=40) name: ormar.String(max_length=40)",
      "9": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: 40",
      "10": "ormar.Integer(primary_key=True) id: ormar.String($parameter$max_length=40) name: ormar.String($parameter$max_length=40)",
      "11": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) query_id: ormar.Integer(primary_key=True)",
      "12": "id: ormar.Integer(primary_key=True) name: ormar.String(primary_key=40)",
      "13": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(primary_key=True)",
      "14": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 40) id: ormar.Integer(primary_key=False)",
      "15": "id: ormar.Integer(primary_key=True) name: ormar.String(primary_key$max_length=40)",
      "16": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(primary_key=False)",
      "17": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(primary_key=Value)",
      "18": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) query_id: ormar.Integer(primary_key=False)",
      "19": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty(id>$ { max_length } )",
      "20": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 40) id: ormar.Integer(primary_key=True)",
      "21": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(id)",
      "22": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length = 40)",
      "23": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty(quality=ormar.String(primary_key=40))",
      "24": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: 32",
      "25": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=40) id: ormar.Integer(primary_key=False)",
      "26": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty('length', 40)",
      "27": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty('token', ormar.Integer(primary_key=40))",
      "28": "id: ormar.Integer(primary_key=True) name: ormar.String(primary_key[0])",
      "29": "ormar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: ormar.Integer(primary_key=False)",
      "30": "oumar.Integer(primary_key=True) id: ormar.Integer(primary_key=True) name: ormar.String(max_length=40)",
      "31": "ormar.Integer(primary_key=True) id: ormar.String($parameter$max_length=40) name: ormar.String(max_length=40)",
      "32": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) schema: ormar.Integer(primary_key=True)",
      "33": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) return id: ormar.Integer(primary_key=False)",
      "34": "id: ormar.Integer(primary_key=True) string=ormar.String($parameter$max_length=40) name: ormar.String(max_length=40)",
      "35": "id: ormar.Integer(primary_key=True) type: integer(ormar.String($parameter$max_length=40)) name: ormar.String(max_length=40)",
      "36": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) datatype: integer(ormar.Integer(primary_key=40))",
      "37": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(ormar.Integer(primary_key=True)",
      "38": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty('token', ormar.String(primary_key=40))",
      "39": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty(id> ormar.String(primary_key=40))",
      "40": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(primary_key=Eleven)",
      "41": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: ormar.Integer(primary_key=Eleven)",
      "42": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty(name>$ { max_length } )",
      "43": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) statement_id: ormar.Integer(primary_key=True)",
      "44": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(primary_key=20)",
      "45": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) share_key: ormar.Integer(primary_key=True)",
      "46": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length = 40)",
      "47": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty($ { max_length }, ormar.Integer(primary_key=True))",
      "48": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) hasOwnProperty(id_match=primary_key[id]|primary_key[id]>)",
      "49": "id: ormar.Integer(primary_key=True) name: ormar.String($parameter$max_length=40) id: integer(primary_key=40)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
    "target_code": "\n    def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_line": "    def add(self, predicted: List[str], labels: List[str]) -> None:",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "asyml/texar-pytorch",
    "source_filename": "texar/torch/run/metric/generation.py",
    "target_filename": "texar/torch/run/metric/generation.py",
    "source_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3^",
    "target_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "predictions": [
      "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):"
    ],
    "correct": false,
    "top_five": {
      "0": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "1": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + hypothesis;",
      "2": "def add(self, predicted: List[str], labels: List[str]) -> none: for (reference, hypothesis) in zip(labels, predicted):",
      "3": "def add(self, predicted: List[str], labels: List[str]) -> None: by default add(self, predicted: List[str], labels: List[str]) } for (reference, hypothesis) in zip(labels, predicted):",
      "4": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):!texar.torch.run.metric.generation.BLEU.add(self, predicted)",
      "5": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"@\" + hypothesis;",
      "6": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\",",
      "7": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): reference = List[str];",
      "8": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): return!!texar.torch.run.metric.generation.BLEU.add(self, predicted)",
      "9": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): hypothesis = true;",
      "10": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): return!!texar.torch.run.metric.generation.BLEU.add(self, predicted, labels)",
      "11": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"batch\";",
      "12": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + self.labels + \",\";",
      "13": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\";",
      "14": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):!texar.torch.run.metric.generation.BLEU.add(self, predicted, labels)",
      "15": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + predicted;",
      "16": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):!texar.torch.run.metric.generation.BLEU.add(self, predicted);",
      "17": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): (typeof predicted === 'function')",
      "18": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"yes\";",
      "19": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): return!!texar.torch.run.metric.generation.BLEU.add(self, predicted); }",
      "20": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + hypothesis + \"\";",
      "21": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):!texar.torch.run.metric.generation.BLEU.add(self, predicted) }",
      "22": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): reference = List[str].replace(/ \\ \\ s+/g, '')",
      "23": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): [",
      "24": "def add(self, predicted: List[str], labels: List[str]) -> None for (reference, hypothesis) in zip(labels, predicted):",
      "25": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"y\"",
      "26": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):!texar.torch.run.metric.generation.BLEU.add(self, predicted),",
      "27": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):!texar.torch.run.metric.generation.BLEU.add(self, predicted, labels));",
      "28": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): hypothesis = true",
      "29": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, expected):",
      "30": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \",\" + hypothesis;",
      "31": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): return!!texar.torch.run.metric.generation.BLEU.add(self, predicted) }",
      "32": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + self + \",\";",
      "33": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"null\";",
      "34": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): reference = List[str].replace(/ ^ \\ s+/g, '')",
      "35": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"boolean\";",
      "36": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"y\";",
      "37": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + self.references[1]);",
      "38": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"@\" + reference + \",\";",
      "39": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"hello, world!\";",
      "40": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"false\";",
      "41": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): (hypothesis === true)",
      "42": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + self.reference('List[str]')",
      "43": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): (hypothesis === false)",
      "44": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"\" + predicted; }",
      "45": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"false\"",
      "46": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"yield\";",
      "47": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"@\" + self.labels + \",\";",
      "48": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): \"y\" + hypothesis;",
      "49": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): return!!texar.torch.run.metric.generation.BLEU.add(self, predicted);"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
    "target_code": "\n    def fit(self, ts):\n        super().fit(ts)\n        # Check univariate time series\n",
    "warning_line": "    def fit(self, ts, component_index: Optional[int] = None):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 218,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "darts/models/theta.py",
    "target_filename": "darts/models/theta.py",
    "source_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3^",
    "target_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "predictions": [
      "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series"
    ],
    "correct": false,
    "top_five": {
      "0": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series",
      "1": "def fit(self, ts, component_index: Optional[int] = None) super().fit(ts, component_index) # Check univariate time series",
      "2": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series)",
      "3": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, t)",
      "4": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, time_series)",
      "5": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index)",
      "6": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check time series",
      "7": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "8": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length; i  n; i++) {",
      "9": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "10": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, r = theta.length - 1; r >= 0; r--) {",
      "11": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "12": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, ts)",
      "13": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = ts.length; i  n; i++) {",
      "14": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, function () {",
      "15": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series).fit(self, ts, component_index)",
      "16": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = theta.length; i  n; i++) {",
      "17": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = ts.length; i  n; i++) {",
      "18": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, trend)",
      "19": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index)# Check univariate time series",
      "20": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, interval)",
      "21": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, r = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "22": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length, r = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "23": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = theta.length, r = theta.length - 1; r >= 0; r--) {",
      "24": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, r = theta.length, n = theta.length - 1; r >= 0; r--) {",
      "25": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, r = theta.length - 1; r  n; r++)",
      "26": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length; i  n; i++)",
      "27": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length, r = theta.length - 1; r >= 0; r--) {",
      "28": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length, r = theta.length, n = theta.length - 1; r >= 0; r--) {",
      "29": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series).fit(ts, component_index)",
      "30": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length; i  n; i++)",
      "31": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, ordinal)",
      "32": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, p = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "33": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, r = theta.length - 1; r  n; r++) {",
      "34": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = theta.length - 1; i >= 0; i--) {",
      "35": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = theta.length; i  n; i++)",
      "36": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series values for (i = 0, n = theta.length, r = theta.length, n = theta.length - 1; n >= 0; n--) {",
      "37": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, trend, x, y)",
      "38": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length - 1; i  n; i++) {",
      "39": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, n = theta.length - 1; n  n; n++) {",
      "40": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length - 1; i >= 0; i--) {",
      "41": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.lengths.length - 1; i >= 0; i--) {",
      "42": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length, n - 1; n >= 0; n--) {",
      "43": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length; i  n; i++) {",
      "44": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, n - 1; n >= 0; n--) {",
      "45": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = theta.length, r = theta.length, n = theta.length - 1; r  n; r++) {",
      "46": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series results for (i = 0, n = ts.length; i  n; i++)",
      "47": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series (series, ts, component_index)",
      "48": "def fit(self, ts, component_index: Optional[int] = None) super().fit(ts, component_index) # Check univariate time series (series)",
      "49": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series for (i = 0, n = theta.length, r = theta.length - 1; r  n; r++)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":\n        \"\"\"Create a xor expression.\n",
    "target_code": "        \"\"\"\n        if not isinstance(other, BitVec):\n            other = BitVec(z3.BitVecVal(other, self.size()))\n        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \"\"\"Create a xor expression.\n",
    "warning_line": "    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 145,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/smt/bitvecfunc.py",
    "target_filename": "mythril/laser/smt/bitvecfunc.py",
    "source_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9^",
    "target_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "predictions": [
      "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function (xor) {"
    ],
    "correct": false,
    "top_five": {
      "0": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function (xor) {",
      "1": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc;",
      "2": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function (x, y, z) {",
      "3": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.BitVecFunc = _arithmetic_helper(self, other, operator.or_)",
      "4": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc\";",
      "5": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.BitVecFunc(self, other, operator.or_)",
      "6": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc: function (x, y, z) {",
      "7": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc: function (xor) {",
      "8": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.bitvecfunc.BitVecFunc\": \"\"\"",
      "9": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"BitVecFunc\");",
      "10": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, other, operator.or_)",
      "11": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, o)",
      "12": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, xor, operator.offset)",
      "13": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc\"",
      "14": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"BitVecFunc\", function () {",
      "15": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc: \"\"\"",
      "16": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc(self, other, operator.or_) }",
      "17": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch()",
      "18": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function (x) {",
      "19": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"BitVec\", function (x, y, z) {",
      "20": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"BitVecFunc\", function (x, y, z) {",
      "21": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc\": \"\"\"",
      "22": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.slice.call(self, other, operator.or_)",
      "23": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc()",
      "24": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc(self, other, operator.or_)",
      "25": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, _arithmetic_helper, operator.or_)",
      "26": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"BitVecFunc\", function (xor) {",
      "27": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(this, \"BitVecFunc\", function () {",
      "28": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"batch\");",
      "29": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function () {",
      "30": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function(xor) {",
      "31": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.b;",
      "32": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.BitVecFunc = function (value) {",
      "33": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(value, 0)",
      "34": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(this, \"BitVecFunc\", function (x, y, z) {",
      "35": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(function (x) {",
      "36": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.bitvecfunc.BitVecFunc\": \"\"\"",
      "37": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.Vector = _arithmetic_helper(self, other, operator.or_)",
      "38": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"bitvec\", function (x, y, z) {",
      "39": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, o, 0)",
      "40": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.BitVecFunc(self, other, operator.or_) }",
      "41": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.BitVecFunc = _arithmetic_helper(self, other)",
      "42": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, 0),",
      "43": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.bitVecFunc;",
      "44": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(this, \"BitVecFunc\", function (xor) {",
      "45": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.BitVecFunc(self, 0)",
      "46": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.call(self, xor, operator.or_)",
      "47": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.bitvecfunc.call(self, other, operator.or_)",
      "48": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.execute(xor, yor, xor.min, yor.max) }",
      "49": "return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\": \"\"\"Create a xor expression.prototype.batch(xor, \"\");"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
    "target_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_line": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "target_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28^",
    "target_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "predictions": [
      "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)"
    ],
    "correct": false,
    "top_five": {
      "0": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "1": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: undefined): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "2": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "3": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "4": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: undefined\"): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "5": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: undefined, data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "6": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: _int(temperature)): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "7": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "8": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int\"): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "9": "def setTargetBedTemperature(self, printer: \"PrinterOutputController\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "10": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: _int(temperature)) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "11": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, on_finished=self._onPutBedTemperatureCompleted)",
      "12": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, temperature)",
      "13": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantType.int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "14": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: data.int(temperature)) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "15": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantInt(thermocouple)) data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "16": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "17": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) printer.setTargetBedTemperature(self, data, on_finished=self._onPutBedTemperatureCompleted)",
      "18": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)()",
      "19": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, on_finished = self._onPutBedTemperatureCompleted)",
      "20": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) printer.setTargetBedTemperature(self, temperature) }",
      "21": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantFunctions.int\"): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "22": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: data.length - 1); data = str(temperature); self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "23": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) printer.setTargetBedTemperature(self, temperature)",
      "24": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int(temperature)) data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "25": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: data.length - 1;\"); data = str(temperature); self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "26": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int(temperature)): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "27": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) PrinterOutputController.setTargetBedTemperature(self, printer, data, on_finished=self._onPutBedTemperature)",
      "28": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: null, data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "29": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: INT(temperature)): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "30": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, temperature)",
      "31": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: data.length - 1); self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "32": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, on_started=self._onPutBedTemperature)",
      "33": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: _int(temperature)) data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "34": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantInt(thermocouple)): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "35": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantInt(temperature)): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "36": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int\"); data = str(temperature); self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "37": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, on_finished);",
      "38": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, temperature) }",
      "39": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) printOutputController.setTargetBedTemperature(self, temperature) }",
      "40": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) PrinterOutputController.setTargetBedTemperature(self, temperature)",
      "41": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantStatus): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "42": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) printer.setTargetBedTemperature(self, temperature)",
      "43": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantInt(temperature)) data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "44": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constantFixed\"): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "45": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: data.length - 1): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "46": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) Printer.setTargetBedTemperature(self, data, on_finished+self._onPutBedTemperatureCompleted)",
      "47": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float(int)): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "48": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: data.length - 1); data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "49": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int\" data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_line": "    def pop(self, index: int = -1) -> NoReturn: ...",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 52,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pallets/werkzeug",
    "source_filename": "src/werkzeug/datastructures.pyi",
    "target_filename": "src/werkzeug/datastructures.pyi",
    "source_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3^",
    "target_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "predictions": [
      "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:..."
    ],
    "correct": false,
    "top_five": {
      "0": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "1": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "2": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def _pop(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "3": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: integer, value: V) -> NoReturn:... def pop(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "4": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: integer, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "5": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index = int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "6": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "7": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def _pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "8": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def mutate(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "9": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def mutate(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "10": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def perform(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "11": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def op -> NoReturn:... def reverse(self) -> NoReturn:...",
      "12": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def doIndex(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "13": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index, int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "14": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "15": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def push(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "16": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def splice(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "17": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: indexInt = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "18": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def flip(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "19": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def mixin(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "20": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def op(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "21": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def int(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "22": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def bind(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "23": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def splice(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "24": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def get(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "25": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def mixin(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "26": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def zip(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "27": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index = -1 ) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "28": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def doIndex(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "29": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index, length = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "30": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def throw int(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "31": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def open(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "32": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def index = int -> 1 -> NoReturn:... def reverse(self) -> NoReturn:...",
      "33": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop (self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "34": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def impose(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "35": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def populate(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "36": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def index = int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "37": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def bind(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "38": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop (self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "39": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... reverse(self) -> NoReturn:...",
      "40": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def impose(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "41": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def drop(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "42": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def apply(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "43": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index = -1 -> NoReturn:... def reverse(self) -> NoReturn:...",
      "44": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def apply(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "45": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def convert(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "46": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def inverse(self) -> NoReturn:...",
      "47": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def merge(self, index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "48": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def index = index -> NoReturn:... def reverse(self) -> NoReturn:...",
      "49": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def index -> NoReturn:... def reverse(self) -> NoReturn:..."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        return cls(\n",
    "warning_line": "    def from_dict(",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1769,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/messages.py",
    "target_filename": "raiden/messages.py",
    "source_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd^",
    "target_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "predictions": [
      "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls("
    ],
    "correct": false,
    "top_five": {
      "0": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "1": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Message!== 'undefined') -> typing.T_UpdatePFS: return cls(",
      "2": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> ( typeof Message!== 'undefined' ) -> typing.T_UpdatePFS: return cls(",
      "3": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> Typing.T_UpdatePFS: return cls(",
      "4": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) ) -> typing.T_UpdatePFS: return cls(",
      "5": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> ( this.T_UpdatePFS!== undefined ) -> typing.T_UpdatePFS: return cls(",
      "6": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object, Message)) { return cls(",
      "7": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Message!== 'undefined' && cls: typing.Type[typing.T_UpdatePFS (bound to UpdatePFS)]) -> typing.T_UpdatePFS: return cls(",
      "8": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object)) { return cls(",
      "9": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls( Data);",
      "10": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> math.params.UpdatePFS ) -> typing.T_UpdatePFS: return cls(",
      "11": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (Message.T_UpdatePFS) -> typing.T_UpdatePFS: return cls(",
      "12": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls(data)",
      "13": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object)) -> typing.T_UpdatePFS: return cls(",
      "14": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> ( this.T_UpdatePFS!== null ) -> typing.T_UpdatePFS: return cls(",
      "15": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> ( this.T_UpdatePFS!= null ) -> typing.T_UpdatePFS: return cls(",
      "16": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object, Message)) -> typing.T_UpdatePFS: return cls(",
      "17": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object.getOwnPropertyDescriptor)).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) ) -> typing.T_UpdatePFSEP",
      "18": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Message!== 'undefined') -> typing.T_UpdatePFS: return cls(",
      "19": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls( Data.T_UpdatePFS, bound to UpdatePFS",
      "20": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls( data)",
      "21": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (Object.prototype.hasOwnProperty.call(raiden.messages.UpdatePFS.from_dict)) -> typing.T_UpdatePFS: return cls(",
      "22": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls( data);",
      "23": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls( Data.T_UpdatePFS, )",
      "24": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls(",
      "25": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> Message.param( cls, fn ) -> typing.T_UpdatePFS: return cls(",
      "26": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object.getOwnPropertyDescriptor)).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "27": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Message!== 'undefined' && cls: typing.Type[typing.T_UpdatePFS (bound to UpdatePFS)]] ) -> typing.T_UpdatePFS: return cls(",
      "28": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().indexOf()!)",
      "29": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object && Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.T_UpdatePFS, bound to UpdatePFS: return cls(",
      "30": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls(",
      "31": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) => typing.T_UpdatePFS: return cls(data)",
      "32": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) ) -> typing.T_UpdatePFS",
      "33": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object.getOwnPropertyDescriptor)).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) ) -> typing.T_UpdatePFS: return cls(",
      "34": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())",
      "35": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object && Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.T_UpdatePFS, bound to UpdatePFS",
      "36": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof cls ==='string') -> typing.T_UpdatePFS: return cls(",
      "37": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls(Data);",
      "38": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> Message.parameterize( cls, fn ) -> typing.T_UpdatePFS: return cls(",
      "39": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object && Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.T_UpdatePFS, bound to UpdatePFS) ) : return cls(",
      "40": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls( data)",
      "41": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (",
      "42": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> Message.param( cls ) -> typing.T_UpdatePFS: return cls(",
      "43": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) => typing.T_UpdatePFS: return cls( Data.T_UpdatePFS, bound to UpdatePFS",
      "44": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object && Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.T_UpdatePFS, bound to UpdatePFS) )",
      "45": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(Object))).from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) ) => {",
      "46": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (Object.prototype.hasOwnProperty.call(raiden.messages.UpdatePFS)) -> typing.T_UpdatePFS: return cls(",
      "47": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()) -> typing.T_UpdatePFS: return cls(data)",
      "48": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()) => typing.T_UpdatePFS: return cls( data)",
      "49": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> (typeof Object!== 'object' && Object.prototype.toLowerCase().toLowerCase().toLowerCase().toLowerCase()) => typing.T_UpdatePFS: return cls( Data);"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_line": "    team: Optional[Team] = ormar.ForeignKey(Team)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "1": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "2": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "3": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(team) email: str = ormar.String(max_length=100)",
      "4": "id: int = ormar.Integer(primary_key=True) team: int = ormar.fields.foreign_key.ForeignKeyField[id]) email: str = ormar.String(max_length=100)",
      "5": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) id: int = ormar.Integer(primary_key=True) email: str = ormar.String(max_length=100)",
      "6": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField) team_id: int = ormar.Integer(primary_key=True) email: str = ormar.String(max_length=100)",
      "7": "id: int = ormar.Integer(primary_key=True) team: optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "8": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(TEAM) email: str = ormar.String(max_length=100)",
      "9": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "10": "id: int = ormar.Integer(primary_key=True) team: namespace.optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "11": "id: int = ormar.Integer(primary_key=True) team: Ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "12": "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.fields.foreign_key.ForeignKeyField] email: str = ormar.String(max_length=100)",
      "13": "id: int = ormar.Integer(primary_key=True) team: int[optional_team_id] = ormar.ForeignKey(optional_team_id, team_id) email: str = ormar.String(max_length=100)",
      "14": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField) teamName: int = ormar.Integer(primary_key=True) email: str = ormar.String(max_length=100)",
      "15": "id: int = ormar.Integer(primary_key=True) team: namespace.Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "16": "id: int = ormar.Integer(primary_key=True) team: int[optional_team_id] = ormar.ForeignKey(optional_team_id) email: str = ormar.String(max_length=100)",
      "17": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) id: int = ormar.Integer(primary_key=True) team: email: str = ormar.String(max_length=100)",
      "18": "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.foreign_key.ForeignKeyField] email: str = ormar.String(max_length=100)",
      "19": "id: int = ormar.Integer(primary_key=True) team: int[optional_team_name] = ormar.ForeignKey(optional_team_name) email: str = ormar.String(max_length=100)",
      "20": "id: int = ormar.Integer(primary_key=True) team: Optional[team] = ormar.ForeignKey(team) email: str = ormar.String(max_length=100)",
      "21": "id: int = ormar.Integer(primary_key=True) team: int = ormar.fields.foreign_key.ForeignKeyField.Optional[Team]) email: str = ormar.String(max_length=100)",
      "22": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField) email: str = ormar.String(max_length=100)",
      "23": "id: int = ormar.Integer(primary_key=True) team: int = ormar.fields.foreign_key.ForeignKeyField[optional_team]) email: str = ormar.String(max_length=100)",
      "24": "id: int = ormar.Integer(primary_key=True) team: int = ormar.Fields.foreignKey(Team) email: str = ormar.String(max_length=100)",
      "25": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(TEAM) email: str = ormar.String(max_length=100)",
      "26": "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.Fields.foreignKey(Team) email: str = ormar.String(max_length=100)",
      "27": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "28": "id: int = ormar.Integer(primary_key=True) team: Optional[TeamName] = ormar.ForeignKey(TeamName) email: str = ormar.String(max_length=100)",
      "29": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField) id: int = ormar.Integer(primary_key=True) email: str = ormar.String(max_length=100)",
      "30": "id: int = ormar.Integer(primary_key=True) team: int = ormar.Fields.foreign_key.ForeignKeyField[id]) email: str = ormar.String(max_length=100)",
      "31": "id: int = ormar.Integer(primary_key=True) team: int = ormar.fields.foreign_key.ForeignKeyField[optional_name]) email: str = ormar.String(max_length=100)",
      "32": "id: int = ormar.Integer(primary_key=True) team: int[optional] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "33": "id: int = ormar.Integer(primary_key=True) team: isNaN(optional[team]) email: str = ormar.String(max_length=100)",
      "34": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField) team: email: str = ormar.String(max_length=100)",
      "35": "id: int = ormar.Integer(primary_key=True) team: namespace.team = Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "36": "id: int = ormar.Integer(primary_key=True) team: ormar.foreign_key.ForeignKeyField[Team]) email: str = ormar.String(max_length=100)",
      "37": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField[id]) email: str = ormar.String(max_length=100)",
      "38": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField).Optional[Team]) email: str = ormar.String(max_length=100)",
      "39": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField) id: int = ormar.Integer(primary_key=True) email: str = ormar.String(max_length=100)",
      "40": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) id: int = ormar.Integer(primary_key=True) team: int = Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "41": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField).Optional[Team]) email: str = ormar.String(max_length=100)",
      "42": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) id: email: str = ormar.String(max_length=100)",
      "43": "id: int = ormar.Integer(primary_key=True) team: Options[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "44": "id: int = ormar.Integer(primary_key=True) team name: Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "45": "id: int = ormar.Integer(primary_key=True) team: ormar.foreign_key.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "46": "id: int = ormar.Integer(primary_key=True) team: int = ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField.TEAM) email: str = ormar.String(max_length=100)",
      "47": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField.TEAM) email: str = ormar.String(max_length=100)",
      "48": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) id: int = ormar.Integer(primary_key=True) team: optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "49": "id: int = ormar.Integer(primary_key=True) team: ormar.ForeignKey(ormar.fields.foreign_key.ForeignKeyField).Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None\n\n",
    "target_code": "    id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_line": "    charging_profile: Dict = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 96,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "charging_profile: Dict = None id_tag: str connector_id: int } )"
    ],
    "correct": false,
    "top_five": {
      "0": "charging_profile: Dict = None id_tag: str connector_id: int } )",
      "1": "charging_profile: Dict = None id_tag: str connector_id: int } ;",
      "2": "charging_profile: Dict = None: id_tag: str connector_id: int } ;",
      "3": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict } id_tag: str",
      "4": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict } id_tag: str }",
      "5": "charging_profile: Dict = None: id_tag: str connector_id: int } )",
      "6": "charging_profile: Dict = None id_tag: str connector_id: int }?charging_profile: Dict } : None",
      "7": "charging_profile: Dict = None id_tag: str connector_id: int } charging_profile: Dict } id_tag: str",
      "8": "charging_profile: Dict = None id_tag: str connector_id: int } charging_profile: Dict = None }",
      "9": "charging_profile: Dict = None id_tag: str connector_id: int }",
      "10": "charging_profile: Dict = None id_tag: str connector_id: int },",
      "11": "charging_profile: Dict = None id_tag: str connector_id: int \\ charging_profile: Dict } id_tag: str",
      "12": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }",
      "13": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict } = None",
      "14": "charger_profile: Dict = None id_tag: str connector_id: int } )",
      "15": "charging_profile: Dict = None id_tag: str connector_id: int \\ )",
      "16": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None",
      "17": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }?charging_profile: Dict } : Dict[typing.Any, typing.Any] }",
      "18": "charging_profile: Dict = None: id_tag: str connector_id: int { charging_profile: Dict } id_tag: str }",
      "19": "charging_profile: Dict = None: id_tag: str connector_id: int { charging_profile: Dict } id_tag: str",
      "20": "charging_profile: Dict = None id_tag: str connector_id: int } :",
      "21": "charging_profile: Dict = None id_tag: str connector_id: int \\ charging_profile: Dict } id_tag: str }",
      "22": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict }",
      "23": "charging_profile: Dict = None id_tag: str connector_id: int } charging_profile: Dict }",
      "24": "charging_profile: Dict = None id_tag: str connector_id: int } ).charging_profile: Dict } id_tag: str",
      "25": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict \\ id_tag: str }",
      "26": "charging_profile: Dict || None id_tag: str connector_id: int } )",
      "27": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict \\ id_tag: str",
      "28": "charging_profile: Dict = None id_tag: str connector_id: int } : None charging_profile: Dict } id_tag: str",
      "29": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict = None }",
      "30": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict } : None",
      "31": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }? charging_profile: Dict } : id_tag: str",
      "32": "charging_profile: Dict = None id_tag: str connector_id: int } charging_profile: Dict } id_tag: str }",
      "33": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None } :",
      "34": "charging_profile: Dict = None id_tag: str connector_id: int } );",
      "35": "charging_profile: Dict = None id_tag: str connector_id: int } _charging_profile: Dict[typing.Any, typing.Any] }",
      "36": "charging_profile: Dict = None id_tag: str connector_id: int } charging_profile: Dict \\ id_tag: str",
      "37": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict { id_tag: str }",
      "38": "charging_profile: Dict = None id_tag: str connector_id: int } _charging_profile: Dict } id_tag: str",
      "39": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }?charging_profile: Dict } : id_tag: str",
      "40": "charging_profile: Dict = None id_tag: str connector_id: int { _charging_profile: Dict } id_tag: str }",
      "41": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }? charging_profile: Dict } : Dict[typing.Any, typing.Any] }",
      "42": "charging_profile: Dict = None id_tag: str connector_id: int } ) charging_profile: Dict = None",
      "43": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }? charging_profile: Dict[typing.Any, typing.Any] }",
      "44": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }?charging_profile: Dict[typing.Any, typing.Any] }",
      "45": "charging_profile: Dict = None id_tag: str connector_id: int { charging_profile: Dict { id_tag: str",
      "46": "charging_profile: Dict = None id_tag: str connector_id: int } : null",
      "47": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None }?charging_profile: Dict } : Dict",
      "48": "charging_profile: Dict = None id_tag: str connector_id: int } charging_profile: Dict { id_tag: str",
      "49": "charging_profile: Dict = None id_tag: str connector_id: int }? charging_profile: Dict = None } : id_tag: str"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    body: List[Union[Comment, Statement]] = field(default=list)\n",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_line": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 139,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/dotenv-linter",
    "source_filename": "dotenv_linter/grammar/fst.py",
    "target_filename": "dotenv_linter/grammar/fst.py",
    "source_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6^",
    "target_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "predictions": [
      "body: List[Union[Comment, Statement]] = field(default=list)"
    ],
    "correct": false,
    "top_five": {
      "0": "body: List[Union[Comment, Statement]] = field(default=list)",
      "1": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body''''''''''''''''''''''''''')",
      "2": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''''''''''')",
      "3": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase'''''''''''''''''''''''''''')",
      "4": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''''''''''') '",
      "5": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase'body'''''''''''''''''''''''''')",
      "6": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase', 'body''''''''''''''''''''''')",
      "7": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase(''body'''''''''''''''''''''''')",
      "8": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''''''''''') ''",
      "9": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('se'body'''''''''''''''''''''''')",
      "10": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCse('body'''''''''''''''''''''''''')",
      "11": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body''''''''''''''''''''''''''') '",
      "12": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body''''''''''''''''''''''''''') ''",
      "13": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') || (typeof document!== ', 'body''''''''''''''''''''''''''')",
      "14": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body''''''''''''''''''''''''''') &",
      "15": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCall('se'body'''''''''''''''''''''''')",
      "16": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCse''''''''''''''''''''''''''''')",
      "17": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase'''''''''''''''''''body'''''''')",
      "18": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt(''body'''''''''''''''''''''''''')",
      "19": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body'''''''''''''''''''''''''''",
      "20": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase'''''''''''''''''''''''''''') ''",
      "21": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase'''''''''''''''''''''''''''') '",
      "22": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') || (typeof document!== ', 'body''''''''''''''''''''''''''') ''",
      "23": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase(''body'''''''''''''''''''''''') '",
      "24": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body'''''''''''''''''')",
      "25": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body'''''''''''''''''''')",
      "26": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body'''''''''''''''''''''''''",
      "27": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCsese''''''''''''''''''''''''''')",
      "28": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase', 'body''''''''''''''''''''''') '",
      "29": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase(''body'''''''''''''''''''''''') ''",
      "30": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''')",
      "31": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCtor('body'''''''''''''''''''''''''')",
      "32": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('se'body'''''''''''''''''''''''') '",
      "33": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') || (typeof document!== '', 'body'''''''''''''''''''''''''')",
      "34": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase'', 'body'''''''''''''''''''''')",
      "35": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('se'body'''''''''''''''''''''''') ''",
      "36": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt'''''''''''''''''''''''''''''')",
      "37": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCall: ('body'''''''''''''''''''''''''')",
      "38": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerClaincludese', 'body''''''''''''''''''''')",
      "39": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') && document.body.toLowerCase()!== '0') {",
      "40": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCse('body'''''''''''''''''''''''''') ''",
      "41": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''''')",
      "42": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') || (typeof document!== ', 'body''''''''''''''''''''''''''') '",
      "43": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''''''')",
      "44": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body''''''''''''''''''')",
      "45": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCse('body'''''''''''''''''''''''''') '",
      "46": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCase('body''''''''''''''''''''''''') &",
      "47": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerClaincludese', ''''''''''''''''''''''')",
      "48": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCt('body', '''''''''''''''''''''''')",
      "49": "body: List[Union[Comment, Statement]] = field(default=list) while ((typeof document!== 'undefined' && document.bodyTitle!== 'undefined') || (typeof document!== 'undefined') && document.body.toLowerCase() || (typeof document!== 'undefined') && document.body.toLowerCaseType[se'''''''''''''''''''''''')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = None\n    barrier: Optional[Barrier] = None\n",
    "target_code": "    pub_port: Optional[int] = None\n    server: Optional[SuiteRuntimeServer] = None\n    publisher: Optional[WorkflowPublisher] = None\n    barrier: Optional[Barrier] = None\n",
    "warning_line": "    publisher: WorkflowPublisher = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `publisher` declared in class `Scheduler` has type `WorkflowPublisher` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "pub_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "pub_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "1": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "2": "publishingMethod: WorkflowPublisher = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "3": "pub_port: Optional[int] = None journal_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "4": "publishingMethod: None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "5": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "6": "pub_port: Optional[int] = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "7": "publishingMethod: Function(options) { pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "8": "brewery: Optional[int] = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "9": "journal_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "10": "publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "11": "app: None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "12": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None Publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "13": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "14": "publishingMethod: Function(options) { pub_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "15": "journal_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "16": "pub_port: Optional[int] = None seller: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "17": "pub_port: Optional[int] = None window: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "18": "pub_port: Optional[int] = None host: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "19": "publishingMethod: Function(optional) { pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "20": "pub_port: Optional[int] = None service: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "21": "app: Flex || { } pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "22": "brewery: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "23": "publishingMethod: Function(optional) { pub_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "24": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publishingMethod: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "25": "pub_port: Optional[int] = None server: suiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "26": "pub_port: Optional[int] = None publisher: None barrier: Optional[Barrier] = None",
      "27": "pub_port: Optional[int] = None publishingMethod: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "28": "library: Optional[Int] = None pub_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "29": "public_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "30": "pub_port: Optional[int] = None journal: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "31": "pub_port: Optional[int] = None publishingMethod: 'PubSub' } ; publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "32": "app: Flex || { } pub_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "33": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: None barrier: Optional[Barrier] = None",
      "34": "port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "35": "server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "36": "publishingMethod: WorkflowPublisher = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publishingMethod: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "37": "pub_port: Optional[int] = None server: SuiteRuntimeServer = Nothing publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "38": "pub_port: Optional[int] = None option: Optional[Barrier] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "39": "pub_port: Optional[int] = None publishingMethod: 'PubSub' publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "40": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publishers: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "41": "pub_port: Optional[int] = None broker: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "42": "publishingMethod: WorkflowPublisher = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "43": "publishingMethod: WorkflowPublisher = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None Publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "44": "public_port: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "45": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: WorkflowPublisher = none barrier: Optional[Barrier] = None",
      "46": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publishingMethod: 'WorkflowPublisher' } barrier: Optional[Barrier] = None",
      "47": "brewery: Optional[int] = None publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "48": "pub_port: Optional[int] = None publishingMethod: 'PubSub' } publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "49": "pub_port: Optional[int] = None pub_port: Optional[int] = None server: SuiteRuntimeServer = None Publisher: WorkflowPublisher = None barrier: Optional[Barrier] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: int = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None\n\n",
    "target_code": "class ClearChargingProfilePayload:\n    id: Optional[int] = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `ClearChargingProfilePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 61,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None"
    ],
    "correct": false,
    "top_five": {
      "0": "class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "1": "var id = int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "2": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof",
      "3": "var id = int = None; connector_id: int = None; charging_profile_purpose: Optional[ChargingProfilePurposeType] = None; stack_level: int = None;",
      "4": "var id = int = None class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "5": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"symbol\" : typeof",
      "6": "var id = int = None; class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None; stack_level: int = None",
      "7": "charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "8": "var id = int = None; class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "9": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? : None",
      "10": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? JSON : None",
      "11": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"symbol\" : None",
      "12": "id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "13": "var _id = int = None class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "14": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.chargingProfilesymbol = None",
      "15": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol? \"symbol\" : typeof",
      "16": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : int",
      "17": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type?'symbol' : typeof",
      "18": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type?'symbol' : None",
      "19": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol? \"symbol\" : typeof",
      "20": "var id = int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "21": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.chargingProfilesymbol = None",
      "22": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"symbol\" : int",
      "23": "var _connector_id = int = None class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "24": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.chargingProfilesymbol = None? \"symbol\" : typeof",
      "25": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"symbol\" :",
      "26": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? JSON : typeof",
      "27": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"symbol\" : none",
      "28": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : int = None",
      "29": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolisobj >? : typeof",
      "30": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.purpose? \"symbol\" : typeof",
      "31": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolic? \"symbol\" : typeof",
      "32": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis(? \"symbol\" : typeof",
      "33": "class ClearChargingProfilePayload: class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "34": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== SymbolisMensymbol = None",
      "35": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolisobj >? \"symbol\" : typeof",
      "36": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol(? \"symbol\" : typeof",
      "37": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? JSON : int",
      "38": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolisobj : typeof",
      "39": "var id = int = None; class ClearChargingProfilePayload: id: int = None; connector_id: int = None; charging_profile_purpose: Optional[ChargingProfilePurposeType] = None; stack_level: int = None;",
      "40": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis: None? JSON : typeof",
      "41": "class ClearChargingProfilePayload: class ClearChargingProfilePayload: class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "42": "var _id = int = None; class ClearChargingProfilePayload: id: int = None connector_id: int = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None; stack_level: int = None",
      "43": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== SymbolisMenjoint = None",
      "44": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"symbol\" : null",
      "45": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol.chargingProfilesymbol = None : typeof",
      "46": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== SymbolisMenzymbol = None",
      "47": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis_type? \"chargingProfilesymbol\" : typeof",
      "48": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbolis(? \"chargingProfilesymbol\" : typeof",
      "49": "var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj!== Symbol(? \"chargingProfilesymbol\" : typeof"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n\n",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_line": "    msg = None  # type: MessageBuilder",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checkstrformat.py",
    "target_filename": "mypy/checkstrformat.py",
    "source_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe^",
    "target_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "predictions": [
      "msg = None # type: mypy.checkexpr.ExpressionChecker"
    ],
    "correct": false,
    "top_five": {
      "0": "msg = None # type: mypy.checkexpr.ExpressionChecker",
      "1": "msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "2": "msg = None # type: mypy.checkexpr.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "3": "msg = None # type: mypy.checkexpr.TypeChecker",
      "4": "if (!mypy.checker.TypeChecker) { msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "5": "msg = None # type: mypy.checkexpr.TypeChecker # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "6": "chk = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "7": "chk = None # type: mypy.checkexpr.ExpressionChecker",
      "8": "msg = None # type: mypy.checkexpr.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "9": "msg = None # type: mypy.checker.TypeChecker # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "10": "msg = None # type: mypy.checkexpr.ExpressionChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "11": "msg = None # type: 'MessageBuilder' # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "12": "if (!myPy.Checker.TypeChecker) { msg = None # type: myPy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "13": "msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "14": "if (!myPy.checker.TypeChecker) { msg = None # type: myPy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "15": "msg = None # type: mypy.checkexpr.ExpressionChecker # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "16": "chk = None # type: mypy.checkexpr.ExpressionChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "17": "msg = None # type: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "18": "chk = None # type: mypy.checkexpr.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "19": "if (!mypy.test.TypeChecker) { msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "20": "if (!mypy.checker.TypeChecker) { msg = None # type: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "21": "if (!myPy.checker.TypeChecker) { msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "22": "msg = None # type: mypy.checkexpr.TypeChecker # some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "23": "chk = None # type: mypy.checkexpr.ExpressionChecker # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "24": "if (!mypy.checker.TypeChecker) { msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "25": "msg = None # type: mypy.checker.TypeChecker # some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "26": "msg = None # type: mypy.checker.TypeChecker # Some services are provided by an ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "27": "msg = None # type: mypy.checkexpr.TypeChecker # Some services are provided by an ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "28": "const msg = None # type: mypy.checkexpr.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "29": "ttl = mypy.checker.Ttl # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "30": "if (!myPy.Checker.TypeChecker) { msg = None # type: myPy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "31": "msg = None # type: TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "32": "if (!myPy.Checker.TypeChecker) { msg = None # type: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "33": "ttl = mypy.checkexpr.Ttl # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "34": "if (!myPy.checker.TypeChecker) { msg = None # type: myPy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "35": "msg = None # type: ExpressionChecker # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "36": "const msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "37": "if (!mypy.test.TypeChecker) { msg = None # type: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "38": "msg = None # type: ExpressionChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "39": "msg = None # type: mypy.checker.TypeChecker # This is shared with TypeChecker. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "40": "msg = None # type: Mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "41": "msg = None # kind: mypy.checkexpr.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "42": "var msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "43": "msg = None # type: MessageChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "44": "msg = None # type: 'MessageBuilder' # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "45": "if (!myPy.checker.TypeChecker) { msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "46": "msg = None # type: mypy.checkexpr.TypeChecker # Some services are provided by a TypeChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "47": "if (!mypy.test.TypeChecker) { msg = None # type: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker #",
      "48": "msg = None # type: 'MessageBuilder' # some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker",
      "49": "msg = None # kind: mypy.checker.TypeChecker # Some services are provided by a ExpressionChecker instance. exprchk = None # type: mypy.checkexpr.ExpressionChecker"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "target_code": "\n    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "warning_line": "    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 353,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "angr/angr",
    "source_filename": "angr/calling_conventions.py",
    "target_filename": "angr/calling_conventions.py",
    "source_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f^",
    "target_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "predictions": [
      "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of sequence"
    ],
    "correct": false,
    "top_five": {
      "0": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of sequence",
      "1": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence.",
      "2": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each[step]",
      "3": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of each sequence",
      "4": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each_str => {",
      "5": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence",
      "6": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of each step.",
      "7": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each new Sequence()",
      "8": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence STACKARG_SP_BUFF = 0 # A number of registers.",
      "9": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A number of registers.",
      "10": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence STACKARG_SP_BUFF = 0 # A list of all",
      "11": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of each module.exec(registers)",
      "12": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all",
      "13": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all the FP",
      "14": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each_step()",
      "15": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. BufferList[str]",
      "16": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence.addRegExp(str)",
      "17": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of each new sequence. Each new sequence.step()",
      "18": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each[step]()",
      "19": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of each sequence.",
      "20": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0",
      "21": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. BlockBuffer()",
      "22": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each_line = 0",
      "23": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. STACKARG_SP_BUFF = 0 # A list of all",
      "24": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all the specified bytes",
      "25": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence.addRegExp(str, 1)",
      "26": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all the current.",
      "27": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of a sequence",
      "28": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of sequence (str)",
      "29": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. Each_str => {",
      "30": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. STACKARG_SP_BUFF = 0 # A list of all",
      "31": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all the current",
      "32": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence.SP_BUFF()",
      "33": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each row = 0",
      "34": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each[byte] = 0",
      "35": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. Each_str => {",
      "36": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each_str()",
      "37": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next saved return address. STACKARG_SP_BUFF: 0 # A list of all the next()",
      "38": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Fills[0]",
      "39": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each successive step must be called after each step",
      "40": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Skip()",
      "41": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A number of registers;",
      "42": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each step of the sequence.addRegExp(character)",
      "43": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all the FP_ARG_SP_SP_BUFF",
      "44": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence STACKARG_SP_BUFF = 0 # A list of all the current",
      "45": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. Each_str = 0",
      "46": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each[str] = 0 # ARG_SP_SP_BUFF = OFFSET_SP_BUFF",
      "47": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence STACKARG_SP_BUFF = 0",
      "48": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. Each[step] = 0",
      "49": "ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the start of the sequence. STACKARG_SP_BUFF: 0 # A list of all the first"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # suite params\n    stop_mode: StopMode = None\n    stop_task: Optional[str] = None\n",
    "target_code": "    # suite params\n    stop_mode: Optional[StopMode] = None\n    stop_task: Optional[str] = None\n",
    "warning_line": "    stop_mode: StopMode = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `stop_mode` declared in class `Scheduler` has type `StopMode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 181,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "# suite params stop_mode: None stop_task: Optional[str] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "# suite params stop_mode: None stop_task: Optional[str] = None",
      "1": "# suite params stop_mode: 'StopMode' = None stop_task: Optional[str] = None",
      "2": "# suite params stop_scheduler: ClassScheduler { stop_mode: StopMode = None stop_task: Optional[str] = None",
      "3": "# suite params stop_scheduler_define(\"stop_mode\"); # suite.stop_task; stop_mode: StopMode = None; stop_task: Optional[str] = None;",
      "4": "# suite params stop_task: Optional[str] = None",
      "5": "# suite params stop_token: () => { } ; stop_mode: StopMode = None stop_task: Optional[str] = None",
      "6": "# suite params stop_mode: Node.StopMode = None stop_task: Optional[str] = None",
      "7": "# suite params stop_token: ['*', '*', '*'] } ; stop_mode: StopMode = None stop_task: Optional[str] = None",
      "8": "# suite params stop_scheduler_define(\"stop_mode\"); # suite.stop_task || { } ; stop_mode: StopMode = None; stop_task: Optional[str] = None;",
      "9": "# suite params stop_mode: StopMode = None stop_task: Optional[str] = None",
      "10": "# suite params stop_mode: 'Stop' stop_task: Optional[str] = None",
      "11": "# suite params stop_mode: Nonexistent = None stop_task: Optional[str] = None",
      "12": "# suite params stop_schedule: AllModes stop_task: Optional[str] = None",
      "13": "# suite params stop_mode: AllModes stop_task: Optional[str] = None",
      "14": "# suite params stop_scheduler_define(\"stop_mode\"); # suite.stop_task || { } ; stop_mode: StopMode = None; stop_task: Optional[str] = None",
      "15": "# suite params stop_mode: Nonexistant stop_task: Optional[str] = None",
      "16": "# stop_mode: None stop_task: Optional[str] = None",
      "17": "# suite params stop_token: setScheduler[str], # stop_mode: StopMode = None stop_task: Optional[str] = None",
      "18": "# suite params stop_scheduler_define(\"stop_mode\"); # suite.stop_task; stop_mode: StopMode = None; stop_task: Optional[str] = None",
      "19": "# suite params stop_token: ['*', '*', '*'] } ) stop_mode: StopMode = None stop_task: Optional[str] = None",
      "20": "# suite params stop_token: setSchedulerAttribute('stop', null) stop_task: Optional[str] = None",
      "21": "# suite params stop_token: setSchedulerAttribute('stop', null, None) stop_task: Optional[str] = None",
      "22": "# suite params stop_mode: NotFound = None stop_task: Optional[str] = None",
      "23": "# suite params stop_mode: None",
      "24": "# suite params stop_token: setSchedulerAttribute('stop', true) stop_task: Optional[str] = None",
      "25": "# suite params stop_scheduler_define(\"stop_mode\"); # suite.stop_task || { } ; stop_mode: StopMode = None stop_task: Optional[str] = None",
      "26": "# suite params stop_mode: AlwaysStopMode = None stop_task: Optional[str] = None",
      "27": "# suite params stop_scheduler_define('stop_mode', None) stop_task: Optional[str] = None",
      "28": "# suite params stop_token: setSchedulerAttribute('stop_token', null, None) stop_task: Optional[str] = None",
      "29": "# suite params stop_define(str, 'optional', { default: [] } ) stop_task: Optional[str] = None",
      "30": "# suite params stop_token: setSchedulerAttribute('stop', ['true', 'false']) stop_task: Optional[str] = None",
      "31": "# suite params stop_schedule: None stop_task: Optional[str] = None",
      "32": "# suite params stop_scheduler_define(\"stop_mode\"); # suite.stop_mode = StopMode = None stop_task: Optional[str] = None",
      "33": "# suite params stop_token: setSchedulerAttribute('stop_token', ['stop_mode', 'StopMode'] } ) stop_task: Optional[str] = None",
      "34": "# suite params stop_token: setSchedulerAttribute('stop', 16) stop_task: Optional[str] = None",
      "35": "# suite params stop_schedule: Scheduling.Scheduler.default stop_task: Optional[str] = None",
      "36": "# suite params stop_token: setSchedulerAttribute('stop', 16) stop_mode: StopMode = None stop_task: Optional[str] = None",
      "37": "# suite params stop_token: setSchedulerAttribute('stop_token', true) stop_task: Optional[str] = None",
      "38": "# suite params stop_mode: NonExistingButtons = None stop_task: Optional[str] = None",
      "39": "# suite params stop_token: setTimeout(() => { } ) stop_task: Optional[str] = None",
      "40": "# suite params stop_scheduler_define(\"stop_mode\"); stop_task: Optional[str] = None",
      "41": "# suite params stop_mode: AutomaticStopMode = None stop_task: Optional[str] = None",
      "42": "# suite params stop_token: setSchedulerAttribute('stop') stop_task: Optional[str] = None",
      "43": "# suite params stop_mode: 'Stop' = None stop_task: Optional[str] = None",
      "44": "# suite params stop_token: setSchedulerAttribute('stop_token', ['stop_mode', 'none']) stop_task: Optional[str] = None",
      "45": "# suite params stop_token: setSchedulerAttribute('stop_token', null, []) stop_task: Optional[str] = None",
      "46": "# suite params stop_mode: NodeType = None stop_task: Optional[str] = None",
      "47": "# suite params stop_mode: NotFoundError = None stop_task: Optional[str] = None",
      "48": "# suite params stop_mode: Nonexistant = None stop_task: Optional[str] = None",
      "49": "# suite params stop_scheduler_define('stop_mode', StopMode) # suite params.stop_task: Optional[str] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
    "target_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_line": "    single: List[OrthVariantsSingle] = {}",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 26,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/training/augment.py",
    "target_filename": "spacy/training/augment.py",
    "source_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be^",
    "target_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "predictions": [
      "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }"
    ],
    "correct": false,
    "top_five": {
      "0": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "1": "class OrthoVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "2": "class OrthVariants (BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "3": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsDict[_KT], Variable[_VT]] = { }",
      "4": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsTwo] = { }",
      "5": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } triple: List[OrthVariantsTwo] = { } single: List[OrthVariantsSingle] = { }",
      "6": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { ^ single: List[OrthVariantsSingle] = { }",
      "7": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } solo: List[OrthVariantsSingle] = { }",
      "8": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { ^",
      "9": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: OrthVariantsPaired, unit: OrthVariantsPaired } ) }",
      "10": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsTwo] = { } single: List[OrthVariantsSingle] = { }",
      "11": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: _.isSingle } ) }",
      "12": "class OrthVariants(BaseModel): grouped: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "13": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsDict[KT], Variable[_VT]] = { }",
      "14": "class OrthVariants(BaseModel): shared: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "15": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } double: List[OrthVariantsTwo] = { }",
      "16": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] === 'undefined')? List[OrthVariantsPaired] : { }",
      "17": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsSingle] = { }",
      "18": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } double: List[OrthVariantsDict[_KT], Variable[_VT]] = { }",
      "19": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, single) }",
      "20": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): single: List[OrthVariantsSingle] = { }",
      "21": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } single: List[OrthVariantsSingle] = { }",
      "22": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] === 'object')? List[OrthVariantsPaired] : { }",
      "23": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: OrthVariantsPaired",
      "24": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] === 'undefined')? List[OrthVariantsPaired] = { }",
      "25": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { { single: List[OrthVariantsSingle] = { }",
      "26": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: OrthVariantsPaired, type: OrthVariantsPaired } ) }",
      "27": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } parentClass: OrthVariantsPath(Single) }",
      "28": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "29": "class OrthVariants(BaseModel): open: true, paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "30": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] === 'function') {",
      "31": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = []; single: List[OrthVariantsSingle] = { }",
      "32": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] === 'function') { single: List[OrthVariantsSingle] = { }",
      "33": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] === 'undefined') }",
      "34": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] ==='single') }",
      "35": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: OrthVariantsPaired, unit: OrthVariantsSingle } ) }",
      "36": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } double: List[OrthVariantsTetra[_KT], Variable[_VT]] = { }",
      "37": "class OrthVariants(BaseModel): return paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { }",
      "38": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] ==='single')? List[OrthVariantsPaired] : { }",
      "39": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { {",
      "40": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: OrthVariantsPaired, type: OrthVariantsSingle } ) }",
      "41": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } single: List[Variable[_KT], Variable[_VT]] = { }",
      "42": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = \\ }",
      "43": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = true; single: List[OrthVariantsSingle] = { }",
      "44": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] ==='string')? List[OrthVariantsSingle] = { }",
      "45": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { \\ single: List[OrthVariantsSingle] = { }",
      "46": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } double: List[OrthVariantsSingle] = { } single: List[OrthVariantsSingle] = { }",
      "47": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } class OrthVariants(BaseModel): paired = (typeof List[OrthVariantsPaired] ==='string')? List[OrthVariantsPaired] : { }",
      "48": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: OrthVariantsPaired, parent: OrthVariantsPaired } ) }",
      "49": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = { } single: List[OrthVariantsSingle] = { } unit: _.isSingle(OrthVariantsPaired, unit: _.isSingle, unit: _.isSingle } ) }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str\n\n",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_line": "        self.tmp_meson_version = None # type: str",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 461,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mesonbuild/meson",
    "source_filename": "mesonbuild/interpreterbase.py",
    "target_filename": "mesonbuild/interpreterbase.py",
    "source_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74^",
    "target_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "predictions": [
      "self.tmp_meson_version = None # type: str"
    ],
    "correct": false,
    "top_five": {
      "0": "self.tmp_meson_version = None # type: str",
      "1": "self.tmp_meson_version = null # type: str",
      "2": "self.tmp_meson_version = Boolean(str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = None # type: str",
      "3": "self.tmp_meson_version = Boolean(str) # type: str: # current meson version target within that if-block. self.tmp_meson_version = None # type: str",
      "4": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None)",
      "5": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ) # type: str",
      "6": "self.tmp_meson_version = _(type: str || '') # current meson version target within that if-block. self.tmp_meson_version = _(type) # type: str",
      "7": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.create( { tmp_meson_version: null } )",
      "8": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version # type: str",
      "9": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } )",
      "10": "self.tmp_meson_version = _(type: str || '') # current meson version target within that if-block.self.tmp_meson_version = _(type) # type: str",
      "11": "self.tmp_meson_version = parseInt(str,'version') # type: str: # current meson version target within that if-block.self.interpreterBase.tmp_meson_version = None # type: str",
      "12": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version_id: # current meson version target within that if-block.self.tmp_meson_version = Object.create( {",
      "13": "self.tmp_meson_version = parseInt(str, '') # type: str: # current meson version target within that if-block.self.interpreterBase.tmp_meson_version = None # type: str",
      "14": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Function $ { tmp_meson_version } )",
      "15": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Object.assign( { }, self.tmp_meson_version)",
      "16": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version_id: # current meson version target within that if-block.self.interpreterBase.tmp_meson_version",
      "17": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { },",
      "18": "self.tmp_meson_version = parseInt(str,'version') # type: str: # current meson version target within that if-block.self.tmp_meson_version = None # type: str",
      "19": "self.tmp_meson_version = _(type: str || '') # current meson version target within that if-block. self.tmp_meson_version = _(type)",
      "20": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Object.assign( { }, self.tmp_meson_version || Object.create( { } )))",
      "21": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.assign( { }, self.tmp_meson_version_params || { } )",
      "22": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.create( { }, tmp_meson_version)",
      "23": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.create( { tmp_meson_version } )",
      "24": "self.tmp_meson_version = parseInt(str, '') # type: str: # current meson version target within that if-block.self.tmp_meson_version = None # type: str",
      "25": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.assign( { }, self.tmp_meson_version_params: [] } )",
      "26": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Object.assign( { }, self.tmp_meson_version || Object.create( { } ))",
      "27": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, InterpreterBase) # type: str",
      "28": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block.self.tmp_meson_version = null",
      "29": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = null",
      "30": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { tmp_meson_version } )",
      "31": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ) self.tmp_meson_version_number = 10 }",
      "32": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.assign( { }, self.tmp_meson_version_params,",
      "33": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { tmp_meson_version } )",
      "34": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Function ($ { tmp_meson_version } ) # type: str",
      "35": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.create( { }, str)",
      "36": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version_id: # current meson version target within that if-block.self.tmp_meson_version = null",
      "37": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.create( { tmp_meson_version } )",
      "38": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block. self.tmp_meson_version = Object.assign( { },",
      "39": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ), not: # current meson version target within that if-block.self.interpreterBase.tmp_meson_version }",
      "40": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block.self.interpreterBase.self.tmp_meson_version = null",
      "41": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Object.assign( { }, self.tmp_meson_version))",
      "42": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block. self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, Object.assign( { }, self.tmp_meson_version || Object.create( { } ))",
      "43": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # data: # current meson version target within that if-block. self.tmp_meson_version = null",
      "44": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # this.tmp_meson_version = Object.assign( { }, self.tmp_meson_version_id: null } )",
      "45": "self.tmp_meson_version = _(type: str || '') # current meson version target within that if-block.self.tmp_meson_version = _(type)",
      "46": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version || Object.create( { } ).tmp_meson_version # type: str",
      "47": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.create( { } ).tmp_meson_version = Object.create( { }, InterpreterBase) # type: str",
      "48": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # context.tmp_meson_version = Object.assign( { }, self.tmp_meson_version_params || { } )",
      "49": "self.tmp_meson_version = Object.assign( { }, str) # type: str: # current meson version target within that if-block.self.tmp_meson_version = Object.assign( { }, None) # context.tmp_meson_version = Object.create( { tmp_meson_version } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    APP_DIR: str = None\n    STUDIES: str = None\n\n",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_line": "    STUDIES: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAILabel",
    "source_filename": "monailabel/config.py",
    "target_filename": "monailabel/config.py",
    "source_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0^",
    "target_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "predictions": [
      "APP_DIR: str = None"
    ],
    "correct": false,
    "top_five": {
      "0": "APP_DIR: str = None",
      "1": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "2": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$ {",
      "3": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "4": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "5": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$",
      "6": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "7": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "8": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$ {",
      "9": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$ {",
      "10": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "11": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "12": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$",
      "13": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$",
      "14": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$",
      "15": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "16": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/data.$/$/$/$/$/$ {",
      "17": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ \\",
      "18": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/",
      "19": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$",
      "20": "APP_DIR: str = None APP_PATH: str = Cache.getPath($ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str } /$ { str = None",
      "21": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ }",
      "22": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$",
      "23": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "24": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "25": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/data.$/$/$/$/$/$ {",
      "26": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "27": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$ \\",
      "28": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$",
      "29": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/Data.$/$/$/$/$/$ {",
      "30": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$ }",
      "31": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/",
      "32": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$",
      "33": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$ \\",
      "34": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$",
      "35": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$ }",
      "36": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ }",
      "37": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ \\",
      "38": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "39": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/data.$/$/$/$/$/$ {",
      "40": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$",
      "41": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$",
      "42": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$",
      "43": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ \\ str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "44": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/",
      "45": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ {",
      "46": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$ {",
      "47": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$",
      "48": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/",
      "49": "APP_DIR: str = None APP_PATH: str = '/data/$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { %$ { str } /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$ { /$/$/$/$/$/$/$/$/$/$/$/$/$/$ {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_line": "        self.image: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      ") self.image: str = None self.append_file = ''.join([self.image_name, '.append'])"
    ],
    "correct": false,
    "top_five": {
      "0": ") self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "1": ") self.image: str = '' self.append_file = ''.join([self.image_name, '.append'])",
      "2": ") self.image: str = null self.append_file = ''.join([self.image_name, '.append'])",
      "3": ") self.image = str = None self.append_file = ''.join([self.image_name, '.append'])",
      "4": ") self.append_file = ''.join([self.image_name, '.append'])",
      "5": ") self.image: str = Null self.append_file = ''.join([self.image_name, '.append'])",
      "6": ") self.image_: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "7": ") self.image: str = none self.append_file = ''.join([self.image_name, '.append'])",
      "8": ") self.image: str = NONE self.append_file = ''.join([self.image_name, '.append'])",
      "9": ") self.image: str = ''; self.append_file = ''.join([self.image_name, '.append'])",
      "10": ") self.image: str = '' or 'None' self.append_file = ''.join([self.image_name, '.append'])",
      "11": ") self.image: str = '' internally { ) self.append_file = ''.join([self.image_name, '.append'])",
      "12": ") self.image: str = ''self.append_file = ''.join([self.image_name, '.append'])",
      "13": ") self.image: str = 0 self.append_file = ''.join([self.image_name, '.append'])",
      "14": ") self.image: str = Nothing self.append_file = ''.join([self.image_name, '.append'])",
      "15": ") self.image: str = '' internal.image_path = '/' self.append_file = ''.join([self.image_name, '.append'])",
      "16": ") self.image: str = nonexistant self.append_file = ''.join([self.image_name, '.append'])",
      "17": "); self.image: str = None; self.append_file = ''.join([self.image_name, '.append'])",
      "18": ").bind(this)) self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "19": ") self.image: str = undefined self.append_file = ''.join([self.image_name, '.append'])",
      "20": ") self.image : str = None self.append_file = ''.join([self.image_name, '.append'])",
      "21": ") self.image: str = Noneself.append_file = ''.join([self.image_name, '.append'])",
      "22": ") self.image: str = '' internally } ) self.append_file = ''.join([self.image_name, '.append'])",
      "23": ") self.image: str = None () self.append_file = ''.join([self.image_name, '.append'])",
      "24": ") self.image: str = '' yourself.append_file = ''.join([self.image_name, '.append'])",
      "25": ") self.image_ = str = None self.append_file = ''.join([self.image_name, '.append'])",
      "26": ") self.image: str = None own.append_file = ''.join([self.image_name, '.append'])",
      "27": ") self.image: str = '' const append_file = ''.join([self.image_name, '.append'])",
      "28": ") self.image: str = = None self.append_file = ''.join([self.image_name, '.append'])",
      "29": ") self.image: str = nonexistent self.append_file = ''.join([self.image_name, '.append'])",
      "30": ") self.image: str = '' itself self.append_file = ''.join([self.image_name, '.append'])",
      "31": ") self.image: str == None self.append_file = ''.join([self.image_name, '.append'])",
      "32": ") self.image: str = = '' self.append_file = ''.join([self.image_name, '.append'])",
      "33": ") self.image: str = '' internal.image_path = '/../' self.append_file = ''.join([self.image_name, '.append'])",
      "34": ")) self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "35": ") self.image: str = '' append_file = ''.join([self.image_name, '.append'])",
      "36": "self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "37": ") self.image: str = '') self.append_file = ''.join([self.image_name, '.append'])",
      "38": ") self.image: str = '': none self.append_file = ''.join([self.image_name, '.append'])",
      "39": ")self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "40": ") self.image: str = Nonexistant self.append_file = ''.join([self.image_name, '.append'])",
      "41": ") self.images: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "42": ") self.image_ = null self.append_file = ''.join([self.image_name, '.append'])",
      "43": "!) self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "44": ") self.image: str = None home.append_file = ''.join([self.image_name, '.append'])",
      "45": "); self.image: str = None self.append_file = ''.join([self.image_name, '.append'])",
      "46": ") self.image: str = None; self.append_file = ''.join([self.image_name, '.append'])",
      "47": ") self.image: str = '' internal.image_file = ''.join([self.image_name, '.append'])",
      "48": ") self.imaged = None self.append_file = ''.join([self.image_name, '.append'])",
      "49": ") self.image: str = None internal.image = ''.join([self.image_name, '.append'])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_line": "        self.event = None   # type: asyncio.Event",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 794,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/events.py",
    "target_filename": "mpf/core/events.py",
    "source_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278^",
    "target_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "predictions": [
      "self.waiter = False self.event = None # type: asyncio.Event: self.waiter = False"
    ],
    "correct": false,
    "top_five": {
      "0": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter = False",
      "1": "self.waiter = False self.event = None # type: asyncio.Event",
      "2": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter = false",
      "3": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter",
      "4": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter Asyncio.Event",
      "5": "self.waiter = False",
      "6": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter asyncio.Event",
      "7": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter;",
      "8": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter || '' self.event = None # type: asyncio.Event: self.waiter = False",
      "9": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter + ''",
      "10": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT #",
      "11": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter const result = Result.result # type: asyncio.Event: self.waiter = False",
      "12": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter return false }",
      "13": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter = NaN type: asyncio.Event",
      "14": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter || '' self.event = None # type: asyncio.Event: self.waiter",
      "15": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter = NaN #",
      "16": "self.waiter = False self.event = None # type: asyncio.Event? asyncio.Event : 'waiting'",
      "17": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter const result = Result.result # type: asyncio.Event: self.waiter = Null",
      "18": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter || '' self.event = null",
      "19": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter = NaN",
      "20": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter type: asyncio.Event",
      "21": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter event_id = null",
      "22": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter || '' self.event = None # type: asyncio.Event: self.waiter + ''",
      "23": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter isFalse",
      "24": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter android._events[0]",
      "25": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter +'waiting for a table' type: asyncio.Event",
      "26": "self.waiter = False # type: asyncio.Event this.event = None # type: asyncio.Event this.scope = 'Asyncio.ScheduleDateChanged'",
      "27": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT",
      "28": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter variable: asyncio.Object.Value assign(self, 'event', null)",
      "29": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter data: null }",
      "30": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter IsFalse",
      "31": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGY_EVENT type: asyncio.Event: self.waiter ASYNCIOLOGY_EVENT",
      "32": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter + '';",
      "33": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGY_EVENT #",
      "34": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter || '' self.event = None # type: asyncio.Event: self.waiter = false",
      "35": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter instance._ScheduleEvent(self, 'queuedEvent')",
      "36": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT",
      "37": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT type: asyncio.Event: self.waiter",
      "38": "self.waiter = False # type: asyncio.Event this.event = None # type: asyncio.Event this.scope = 'Asyncio.ScheduleEvents'",
      "39": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter event = null",
      "40": "self.waiter = False # type: asyncio.Event self.event = None # type: asyncio.Event",
      "41": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter || '' self.event = NotFound# type: asyncio.Event: self.waiter",
      "42": "self.waiter = False # type: asyncio.Event this.event = None # type: asyncio.Event this.scope = 'Asyncio.SchedulingEvent'",
      "43": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter const result = Result.result # type: asyncio.Event: self.waiter = Result.result }",
      "44": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter case 0: Asyncio.Event",
      "45": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT type: asyncio.Event: self.waiter = False",
      "46": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter return true",
      "47": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGICAL_EVENT type: asyncio.Event: self.waiter = false",
      "48": "self.waiter = False # type: asyncio.Event this.event = None # type: asyncio.Event this.scope = 'Asyncio.ScheduledEvent'",
      "49": "self.waiter = False self.event = None # type: asyncio.Event: self.waiter ASYNCIOLOGY_EVENT type: asyncio.Event: self.waiter = false"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_line": "    id: int = ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])"
    ],
    "correct": false,
    "top_five": {
      "0": "id: int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "1": "id: integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "2": "id: id = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "3": "id: idInt = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "4": "id: id_id int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "5": "id: id = int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "6": "id: id int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "7": "id: id, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "8": "id: Int(ormar.Integer(primary_key=True)) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "9": "id: notNull(ormar.fields.model_fields.Integer(primary_key=True)) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "10": "id: integerormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "11": "id: idns = ormar.fields.model_fields.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "12": "id: typeof int === 'number' && typeof ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "13": "id: id_id = int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "14": "id: id, total: ormar.fields.model_fields.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "15": "id: id || 8, value: ormar.fields.model_fields.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "16": "id: ii = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "17": "id: id || 16, value: ormar.fields.model_fields.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "18": "id: id, valid_id: ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "19": "id : int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "20": "id: id_id = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "21": "id: integer.is(ormar.fields.model_fields.Integer(primary_key=True)) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "22": "id: integer: ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "23": "id: id Int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "24": "id: ordinal(ormar.Integer(primary_key=True)) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "25": "id: id || 16, value: ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "26": "id: id = integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "27": "id: id || 31, length: ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "28": "id: id.int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "29": "id: integer: int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "30": "id: id || 31, ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "31": "id: id, number: ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "32": "id: int = ormar.Integer(primary_key=True) async: false } ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "33": "id: id || 32, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "34": "id: id, str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "35": "id: integer, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "36": "id: typeof int === 'number' id: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "37": "id: null ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "38": "id: id || 31, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "39": "id: int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME LTD\", \"Other ltd\"])",
      "40": "id: id || 16, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "41": "id: int = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Limited\", \"Other ltd\"])",
      "42": "id: id || null ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "43": "id: id buttons: [] ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "44": "id: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "45": "id: id || 36, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "46": "id: notNull, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "47": "id: integer[0] || 1; ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "48": "id: id || 38, ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "49": "id: id || 32; ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False\n",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_line": "    query_subtype: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "target_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "ioc: str ioc_type: str result: bool = False"
    ],
    "correct": false,
    "top_five": {
      "0": "ioc: str ioc_type: str result: bool = False",
      "1": "ioc: str ioc_type: str query_subtype: str = None result: bool = False",
      "2": "ioc: str ioc_type: str return null } query_subtype: str = None result: bool = False",
      "3": "ioc: str ioc_type: str } ; query_subtype: str = None result: bool = False",
      "4": "ioc: str ioc_type: str rezultat: bool = False",
      "5": "ioc: str ioc_type: str expectedInput.val() query_subtype: str = None result: bool = False",
      "6": "ioc: str ioc_type: str rezulte: None result: bool = False",
      "7": "ioc: str ioc_type: str r\u00e9sult: bool = False",
      "8": "ioc: str ioc_type: str expectedInput(ioc) query_subtype: str = None result: bool = False",
      "9": "ioc: str ioc_type: str rezulte: null result: bool = False",
      "10": "return false } ioc: str } ioc_type: str } query_subtype: str = None result: bool = False",
      "11": "ioc: str ioc_type: str expectedInput(ioc) result: bool = False",
      "12": "ioc: str ioc_type: str break query_subtype: str = None result: bool = False",
      "13": "ioc: str ioc_type: strQuery_subtype: str = None result: bool = False",
      "14": "ioc: str ioc_type: strResult: bool = False",
      "15": "ioc: str ioc_type: str results: bool = False",
      "16": "ioc: str ioc_type: str query_subtype: null result: bool = False",
      "17": "ioc: str ioc_type: str query_subtype: ioc result: bool = False",
      "18": "ioc: str ioc_type: str rezulte query_subtype: str = None result: bool = False",
      "19": "ioc: str ioc_type: str search_subtype: str = None result: bool = False",
      "20": "ioc: str ioc_type: str query_subtype: _.isNone result: bool = False",
      "21": "ioc: str ioc_type: str rezulte = null result: bool = False",
      "22": "ioc: str ioc_type: str async query_subtype: str = None result: bool = False",
      "23": "ioc: str ioc_type: str urm\u0103r_subtype: str = None result: bool = False",
      "24": "ioc: str ioc_type: str query_subtype: _.isNoneResult result: bool = False",
      "25": "ioc: str ioc_type: str query_subtype: _.none result: bool = False",
      "26": "ioc: str ioc_type: str expected_result = null result: bool = False",
      "27": "ioc: str ioc_type: str query_subtype: _ = None result: bool = False",
      "28": "ioc: str ioc_type: str rezulte: bool = False",
      "29": "ioc: str ioc_type: str expected_result = None result: bool = False",
      "30": "ioc: str ioc_type: str r\u00e9sultat: bool = False",
      "31": "ioc: str ioc_type: str rezult = null result: bool = False",
      "32": "ioc: str ioc_type: str rezultatele: bool = False",
      "33": "ioc: str ioc_type: str outcome: bool = False",
      "34": "ioc: str ioc_type: str query_subtype: _.isNone(str) result: bool = False",
      "35": "ioc: str ioc_type: str answer_subtype: str = None result: bool = False",
      "36": "ioc: str ioc_type: str question_subtype: str = None result: bool = False",
      "37": "ioc: str ioc_type: strergebnis: bool = False",
      "38": "ioc: str ioc_type: str output: ioc result: bool = False",
      "39": "ioc: str ioc_type: str answer: null result: bool = False",
      "40": "ioc: str ioc_type: str expected_result = null return null } query_subtype: str = None result: bool = False",
      "41": "ioc: str ioc_type: str rezulte: none result: bool = False",
      "42": "ioc: str ioc_type: str expectedInstance: null result: bool = False",
      "43": "ioc: str ioc_type: str query_subtype: _.isNoneResult query_subtype: str = None result: bool = False",
      "44": "return false } ioc: str } query_subtype: str = None result: bool = False",
      "45": "ioc: str ioc_type: str rezulte = None result: bool = False",
      "46": "ioc: str ioc_type: str output: null result: bool = False",
      "47": "ioc: str ioc_type: str rezult = None result: bool = False",
      "48": "ioc: str ioc_type: str rezultatul: bool = False",
      "49": "ioc: str ioc_type: str expected_result = null } query_subtype: str = None result: bool = False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class Cli:\n    description: str = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "target_code": "class Cli:\n    description: Optional[str] = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "warning_line": "    description: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `description` declared in class `Cli` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 15,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Andarius/piou",
    "source_filename": "piou/cli.py",
    "target_filename": "piou/cli.py",
    "source_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2^",
    "target_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2",
    "predictions": [
      "class Cli: { description: str = None formatter: Formatter = field(default_factory=RichFormatter)"
    ],
    "correct": false,
    "top_five": {
      "0": "class Cli: { description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "1": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter",
      "2": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "3": "class Cli: } description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "4": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== None formatter: Formatter = field(default_factory=RichFormatter",
      "5": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? object : class Cli: { description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "6": "class Cli: \\ description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "7": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object') formatter: Formatter = field(default_factory=RichFormatter)",
      "8": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object') formatter: Formatter = field(default_factory=RichFormatter)",
      "9": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : None formatter: Formatter = field(default_factory=RichFormatter",
      "10": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "11": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "12": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : none formatter: field(default_factory=RichFormatter",
      "13": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : none formatter: Formatter = field(default_factory=RichFormatter",
      "14": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter",
      "15": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : None formatter: field(default_factory=RichFormatter",
      "16": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : none Formatter = field(default_factory=RichFormatter",
      "17": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object') formatter: Formatter = field(default_factory=RichFormatter)",
      "18": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? ret : null formatter: field(default_factory=RichFormatter",
      "19": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "20": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object') } description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "21": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret === 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "22": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object' description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "23": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? object : ret; description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "24": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== None format: Formatter = field(default_factory=RichFormatter",
      "25": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: return typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter",
      "26": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object'? object : ret; description: str = None formatter: Formatter = field(default_factory=RichFormatter",
      "27": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : none formatter = field(default_factory=RichFormatter",
      "28": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== None",
      "29": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? ret : null formatter: Formatter = field(default_factory=RichFormatter)",
      "30": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object'? object : class Cli: { description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "31": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: return typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "32": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? self : null formatter: Formatter = field(default_factory=RichFormatter",
      "33": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : None formatter = field(default_factory=RichFormatter",
      "34": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : none formatter: Formatter",
      "35": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object' && ret || typeof ret === 'object' && ret!== 'object') formatter: field(default_factory=RichFormatter",
      "36": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object') } description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "37": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? ret : null formatter: Formatter = field(default_factory=RichFormatter",
      "38": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret; } class Cli: { description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "39": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "40": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object') } description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "41": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object'? object : ret; class Cli: { description: str = None formatter: Formatter = field(default_factory=RichFormatter)",
      "42": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== None &&&& &&ret || typeof",
      "43": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : None formatter: Field",
      "44": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: return typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret : null formatter: Formatter = field(default_factory=RichFormatter)",
      "45": "return typeof ret === 'object' && typeof ret === 'object'? object : class Cli: typeof ret === 'object' && object : ret || typeof ret === 'object' formatter: Formatter = field(default_factory=RichFormatter)",
      "46": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof : none",
      "47": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object'? ret : null formatter: Formatter = field(default_factory=RichFormatter",
      "48": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== 'object'? object : null formatter: Formatter = field(default_factory=RichFormatter",
      "49": "return typeof ret === 'object' && typeof ret === 'object' && typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret || typeof ret === 'object' && ret!== None formatter: Formatter = field(default_factory=RichFormat"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    requested_message: MessageTrigger\n    connector_id: int = None\n\n",
    "target_code": "    requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "requested_message: MessageTrigger connector_id: int = None"
    ],
    "correct": false,
    "top_five": {
      "0": "requested_message: MessageTrigger connector_id: int = None",
      "1": "requested_message: MessageTrigger; connector_id: int = None;",
      "2": "requested_message: MessageTrigger, connector_id: int = None }",
      "3": "requested_message: MessageTrigger, connector_id: int = None } ;",
      "4": "requested_message: MessageTrigger, connector_id: int = None",
      "5": "requested_message: MessageTrigger connector_id: int = None } ;",
      "6": "requested_message: MessageTrigger connector_id: int = None }",
      "7": "requested_message: MessageTrigger connector_id: null",
      "8": "requested_message: MessageTrigger connector_id: string(0, 10, $ { connector_id } )",
      "9": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTriggerMessagePayload connector_id: string } : $ { connector_id } ",
      "10": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : null } ",
      "11": "requested_message: MessageTrigger connector_id: string(0, 10, $ { connector_id } ) }",
      "12": "requested_message: MessageTrigger connector_id: int = None || MessageTrigger.isTrigger(selected_message: $ { connector_id } )",
      "13": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger? connector_id: string } : $ { connector_id } ",
      "14": "requested_message: MessageTrigger connector_id: string === MessageTrigger? connector_id : int = None",
      "15": "requested_message: MessageTrigger connector_id: string(0, Object.keys(connectors).join(',')) }",
      "16": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger.connector_id $ { connector_id } : MessageTriggerMessagePayload } ",
      "17": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id: MessageTrigger? connector_id: string } : $ { connector_id } ",
      "18": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : connector_id } /$ { connector_id } ",
      "19": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger connector_id: string } : $ { connector_id } ",
      "20": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id: $ { connector_id } : MessageTriggerMessagePayload } ",
      "21": "requested_message: MessageTrigger || MessageTrigger connector_id: int = None",
      "22": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : int = None }? $ { connector_id } : int = None }? $ { connector_id } : MessageTriggerMessagePayload } ",
      "23": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } = None",
      "24": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : $ { connector_id } ast? connector_id $ { connector_id } : $ { connector_id } ",
      "25": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : connector_id } /$ { connector_id } : $ { connector_id } ",
      "26": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id: MessageTrigger.connector_id } /$ { connector_id } ",
      "27": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : int = None }?connector_id : MessageTrigger? connector_id: string } : $ { connector_id } ",
      "28": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger.connector_id $ { connector_id } : MessageTriggerMessagePayload } ",
      "29": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : $ { connector_id } ast? connector_id } : None",
      "30": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id: MessageTrigger connector_id: string } : $ { connector_id } ",
      "31": "requested_message: MessageTrigger connector_id: int = None || $ { connector_id } ",
      "32": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger.connector_id$ { _id$ { selected_message: MessageTrigger } ",
      "33": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id: $ { connector_id } : MessageTriggerMessagePayload } ",
      "34": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : int = None }?connector_id : MessageTrigger connector_id: string } : $ { connector_id } ",
      "35": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger.connector_id $ { connector_id } : $ { connector_id } ",
      "36": "requested_message: MessageTrigger connector_id: messageTrigger.int = None",
      "37": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : int = None }? $ { connector_id } : int = None }? $ { connector_id } : int = MessageTriggerMessagePayload } ",
      "38": "requested_message: MessageTrigger connector_id: MessageTrigger.int() connector_id: MessageTrigger.int()",
      "39": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger.connector_id$ { _isMessageTrigger(connector,'message') } : null }",
      "40": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTriggerMessagePayload connector_id: string } : $ { connector_id } as MessageTriggerMessagePayload } ",
      "41": "requested_message: MessageTrigger connector_id: int = None || MessageTrigger.isMessageTrigger(selected_message: $ { connector_id } )",
      "42": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : $ { connector_id } ast? connector_id : None } ",
      "43": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : MessageTrigger connector_id: string } : $ { connector_id } ",
      "44": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTrigger.connector_id$ { _isMessageTrigger(connector_id) } /$ { connector_id$ } ",
      "45": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id : MessageTriggerMessagePayload connector_id: string } : $ { connector_id } ;",
      "46": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id: int = None }?connector_id: MessageTrigger, connector_label: MessageTrigger } ",
      "47": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : int = None }?connector_id : MessageTriggerMessagePayload } ",
      "48": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : connector_id } /$ { connector_id } ",
      "49": "requested_message: MessageTrigger connector_id: string === MessageTrigger? $ { connector_id } : None }?connector_id : connector_id } /$ { connector_id: $ { connector_id } "
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }\n",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_line": "            self._agent_net_config = {",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "instadeepai/Mava",
    "source_filename": "mava/systems/tf/mappo/system.py",
    "target_filename": "mava/systems/tf/mappo/system.py",
    "source_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7^",
    "target_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "predictions": [
      "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }"
    ],
    "correct": false,
    "top_five": {
      "0": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "1": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (share_weights) { else agents for a_i, agent in enumerate(agents) }",
      "2": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (str) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "3": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (shared_weights) { else agents for a_i, agent in enumerate(agents) }",
      "4": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === Dict[str, str]) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "5": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!agent_group) {",
      "6": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!symbol) { shared_weights else agents for a_i, agent in enumerate(agents) }",
      "7": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (str) share_weights else agents for a_i, agent in enumerate(agents) }",
      "8": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') {",
      "9": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (agents.length) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "10": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (self._agent_net_config) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "11": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (share_weights) { else agents for a_i, agent in enumerate(agents) }",
      "12": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!agent_list) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "13": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!enumerate(agents)) {",
      "14": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof shared_weights === 'dict') { shared_weights = agents.split(\"_\")[0] } else agents for a_i, agent in enumerate(agents) }",
      "15": "self._agent_net_config = { agent: agent.split(\"_\")[0] if common.weights === 0 } else agents for a_i, agent in enumerate(agents) }",
      "16": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (shared_weights) { else agents for a_i, agent in enumerate(agents) }",
      "17": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (self._agent_weights) { else agents for a_i, agent in enumerate(agents) }",
      "18": "self._agent_net_config = { agent: agent.split(\"_\")[0] if common.share_weights else agents for a_i, agent in enumerate(agents) }",
      "19": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof shared_weights === 'dict') { shared_weights = 0 } else agents for a_i, agent in enumerate(agents) }",
      "20": "self._agent_net_config = { agent: agent.split(\"_\")[0] if grouped_weights else agents for a_i, agent in enumerate(agents) }",
      "21": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (str!== undefined) { shared_weights = agents.split(\"_\")[0] } else agents for a_i, agent in enumerate(agents) }",
      "22": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (self._agent_net_config) { shared_weights else agents for a_i, agent in enumerate(agents) }",
      "23": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof shared_weights === 'Dict') { shared_weights = agents.split(\"_\")[0] } else agents for a_i, agent in enumerate(agents) }",
      "24": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!agent.__weights) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "25": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (set_weights) { shared_weights = agents for a_i, agent in enumerate(agents) }",
      "26": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (str!== undefined) { shared_weights = shared_weights } else agents for a_i, agent in enumerate(agents) }",
      "27": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (self._agent_net_config) share_weights else agents for a_i, agent in enumerate(agents) }",
      "28": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (true) { shared_weights = agents for a_i, agent in enumerate(agents) }",
      "29": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (str!== undefined) { shared_weights = 0 } else agents for a_i, agent in enumerate(agents) }",
      "30": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === Dict[str, str]) share_weights else agents for a_i, agent in enumerate(agents) }",
      "31": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (str!== undefined) { shared_weights = agents for a_i, agent in enumerate(agents) }",
      "32": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof shared_weights === 'Dict') { shared_weights = 0 } else agents for a_i, agent in enumerate(agents) }",
      "33": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!self._agent_net_config) {",
      "34": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (self._agent_net_config) { else agents for a_i, agent in enumerate(agents) }",
      "35": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!share_weights) { shared_weights =!a_i; } else agents for a_i, agent in enumerate(agents) }",
      "36": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!shared_weights) { shared_weights = agents.split(\"_\")[0] } else agents for a_i, agent in enumerate(agents) }",
      "37": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerable(agents) }",
      "38": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (str) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "39": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!symbol) { shared_weights = shared_weights } else agents for a_i, agent in enumerate(agents) }",
      "40": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (weighed!== 0) { shared_weights = shared_weights } else agents for a_i, agent in enumerate(agents) }",
      "41": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === Dict[str, str]) { shared_weights else agents for a_i, agent in enumerate(agents) }",
      "42": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config === 'function') { agent: agent.split(\"_\")[0] if (self._agent_weights) shared_weights else agents for a_i, agent in enumerate(agents) }",
      "43": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!shared_weights) { shared_weights = agents.split(\"_\")[1] } else agents for a_i, agent in enumerate(agents) }",
      "44": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof self._agent_net_config ==='string') { shared_weights = agents for a_i, agent in enumerate(agents) }",
      "45": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!agent_slice.call(agents, 0)) {",
      "46": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!share_weights) { shared_weights = agents.split(\"_\")[0] } else agents for a_i, agent in enumerate(agents) }",
      "47": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (typeof shared_weights === 'dict') { shared_weights = enumerate(agents) }",
      "48": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!shared_weights) { shared_weights = agents.shared_weights || shared_weights; } else agents for a_i, agent in enumerate(agents) }",
      "49": "self._agent_net_config = { agent: agent.split(\"_\")[0] if (!agent_node_enumerate(agents)) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: str = ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `name` declared in class `Album` has type `str` but is used as type `ormar.fields.model_fields.String`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 22,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id: int = ormar.Integer(primary_key=True) name: str = ormar.String(max_length=100)"
    ],
    "correct": false,
    "top_five": {
      "0": "id: int = ormar.Integer(primary_key=True) name: str = ormar.String(max_length=100)",
      "1": "id: int = ormar.Integer(primary_key=True) str = ormar.String(max_length=100)",
      "2": "id: int = ormar.Integer(primary_key=True) class Album { name: str = ormar.String(max_length=100)",
      "3": "id: int = ormar.Integer(primary_key=True) id: str = ormar.String(max_length=100)",
      "4": "id: int = ormar.Integer(primary_key=True) string: str(max_length=100)",
      "5": "id: int = ormar.Integer(primary_key=True) string: str = ormar.String(max_length=100)",
      "6": "id: int = ormar.Integer(primary_key=True)",
      "7": "id: int = ormar.Integer(primary_key=True) stored_id: int = ormar.Integer(primary_key=True) name: str = ormar.String(max_length=100)",
      "8": "id: int = ormar.Integer(primary_key=True) number: str = ormar.String(max_length=100)",
      "9": "id: int = ormar.Integer(primary_key=True) name: str = (ormar.fields.model_fields.String(max_length=100))",
      "10": "id: int = ormar.Integer(primary_key=True) stored_id: int(ormar.Integer(primary_key=True)) name: str = ormar.String(max_length=100)",
      "11": "id: int = ormar.Integer(primary_key=True) description(ormar.fields.model_fields.String)",
      "12": "id: int = ormar.Integer(primary_key=True) hasOwnProperty(name) declared in class Album hasOwnProperty(ormar.fields.model_fields.String) name: str = ormar.String(max_length=100)",
      "13": "id: int = ormar.Integer(primary_key=True) named: str = ormar.String(max_length=100)",
      "14": "id: int = ormar.Integer(primary_key=True) hasOwnProperty(name) declare in class Album hasOwnProperty(ormar.fields.model_fields.String) name: str = ormar.String(max_length=100)",
      "15": "id: int = ormar.Integer(primary_key=True) value: str = ormar.String(max_length=100)",
      "16": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class Model has type string but is used as type ormar.fields.model_fields.String",
      "17": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields.String name: str = ormar.String(max_length=100)",
      "18": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class Model has type string",
      "19": "id: int = ormar.Integer(primary_key=True) data: str = ormar.String(max_length=100)",
      "20": "id: int = ormar.Integer(primary_key=True) stored_key = unique_key } name: str = ormar.String(max_length=100)",
      "21": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class Model has type string but is declared in class Model has type type but is used as type ormar.fields.model_fields.String",
      "22": "id: int = ormar.Integer(primary_key=True) int: str = ormar.String(max_length=100)",
      "23": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is used as type ormar.fields.model_fields.String",
      "24": "id: int = ormar.Integer(primary_key=True) stored_id: intValue(ormar.Integer(primary_key=True)) name: str = ormar.String(max_length=100)",
      "25": "id: int = ormar.Integer(primary_key=True) stored_keys.push( { name: str = ormar.String(max_length=100)",
      "26": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields.String str = ormar.String(max_length=100)",
      "27": "id: int = ormar.Integer(primary_key=True) stored_id: int(ormar.Integer(primary_key=True) name: str = ormar.String(max_length=100)",
      "28": "id: int = ormar.Integer(primary_key=True) stored_id: int(ormar.Fields.Model_Fields.Album) name: str = ormar.String(max_length=100)",
      "29": "id: int = ormar.Integer(primary_key=True) used as a substitute for id in class Album has type str but is declared as type ormar.fields.model_fields.String",
      "30": "id: int = ormar.Integer(primary_key=True) data: null }",
      "31": "id: int = ormar.Integer(primary_key=True) stored_id: int, name: str = ormar.String(max_length=100)",
      "32": "id: int = ormar.Integer(primary_key=True) name: str = (ormar.fields.model_fields.String(max_length=100)) id: str = ormar.String(max_length=100)",
      "33": "id: int = ormar.Integer(primary_key=True) stored_id: int(ormar.String(max_length=100)) name: str = ormar.String(max_length=100)",
      "34": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared as type ormar.fields.model_fields.String",
      "35": "id: int = ormar.Integer(primary_key=True) hasOwnProperty(name, ormar.fields.model_fields.String)",
      "36": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class Model has type str but is used as type ormar.fields.model_fields.String",
      "37": "id: int = ormar.Integer(primary_key=True) stored_id: intValue(ormar.Fields.Model_Fields.Integer(primary_key=True)) name: str = ormar.String(max_length=100)",
      "38": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields as type ormar.fields.model_fields.String",
      "39": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class Model has type string but is declared in class Model has type str but is used as type ormar.fields.model_fields.String",
      "40": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields as type ormar.fields.model_fields.String id: str = ormar.String(max_length=100)",
      "41": "id: int = ormar.Integer(primary_key=True) hasOwnProperty(name) declared in class Album hasOwnProperty(str)(max_length=100) name: str = ormar.String(max_length=100)",
      "42": "id: int = ormar.Integer(primary_key=True) stored_id: intValue(ormar.Fields.Model_Fields.Album) name: str = ormar.String(max_length=100)",
      "43": "id: int = ormar.Integer(primary_key=True) description: str = ormar.String(max_length=100)",
      "44": "id: int = ormar.Integer(primary_key=True) name: str = (ormar.fields.model_fields.String(max_length=100)) id: int = ormar.Integer(primary_key=True)",
      "45": "id: int = ormar.Integer(primary_key=True) used as a substitute for id in class Album has type str but is declared in class Model has type string but is used as a substitute for id in class Model",
      "46": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields as type ormar.fields.model_fields.String str = ormar.String(max_length=100)",
      "47": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields.Model_fields.String name: str = ormar.String(max_length=100)",
      "48": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields.String named: str = ormar.String(max_length=100)",
      "49": "id: int = ormar.Integer(primary_key=True) declared in class Album has type str but is declared in class model_fields.Model_fields.String str = ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    self.env_good = True\n                    self.failure_list = None\n\n",
    "target_code": "                    self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_line": "                    self.failure_list = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 707,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "emissary-ingress/emissary",
    "source_filename": "ambassador/ambassador_diag/diagd.py",
    "target_filename": "ambassador/ambassador_diag/diagd.py",
    "source_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38^",
    "target_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "predictions": [
      "self.env_good = True"
    ],
    "correct": false,
    "top_five": {
      "0": "self.env_good = True",
      "1": "self.env_good = True self.failure_list = None",
      "2": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > self.failure_list = None",
      "3": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list = None",
      "4": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for   :self.env_good > self.failure_list > Self.env_bad > self.failure_list = None",
      "5": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.entry_good > self.failure_list",
      "6": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for   :self.env_good > self.failure_list > self.env_bad > self.failure_list = None",
      "7": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._entity.find('/ambassador_event_watcher/' + traitName +'' + each_detail.reporter_id +'' + each_detail.reporter_id)",
      "8": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > self.failure_list || None",
      "9": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list = None",
      "10": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_good > self.failure_list > self.entry_list",
      "11": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_bad > self.failure_list = None",
      "12": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list || None",
      "13": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.env_good > self.failure_list",
      "14": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > self.failure_list +?self.failure_list",
      "15": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list || None",
      "16": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list = None",
      "17": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list +?self.failure_list",
      "18": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_bad > Self.failure_list > Self.env_good >",
      "19": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.failure_list = None",
      "20": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.resolve_bad > self.env_good > self.failure_list = None",
      "21": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_good > self.failure_list > self.entrievector_list",
      "22": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_bad > Self.failure_list = None",
      "23": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._entity.find('/ambassador_event_watcher/' + traitName +'' + each_detail.reporter_id +'' + each_detail.reporter_id) }",
      "24": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list > Self.env_good > self.failure_list = None",
      "25": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > self.failure_list > Self.env_good > self.failure_list = None",
      "26": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list || false",
      "27": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.env_good > self.failure_list = None",
      "28": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list",
      "29": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_bad > Self.failure_list || None",
      "30": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for   :self.env_good > self.failure_list > Self.env_bad > self.failure_list || None",
      "31": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.entry_good > self.failure_list = None",
      "32": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list > self.env_good || false",
      "33": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.entry_list = self.entry_list",
      "34": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for   :self.env_good > self.failure_list > Self.env_good? self.failure_list = None",
      "35": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_good > self.failure_list = None",
      "36": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list > Self.env_good +?self.failure_list",
      "37": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.env_bad > self.failure_list +?self.failure_list || $ { self.",
      "38": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > self.failure_list > Self.env_good +?self.failure_list",
      "39": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > self.failure_list",
      "40": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_good || None",
      "41": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > self.entry_good > self.failure_list > self.entry_bad > self.entry_list = None",
      "42": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_bad > Self.failure_list",
      "43": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > null",
      "44": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for   :self.env_good > self.failure_list > Self.env_bad > Self.failure_list || None",
      "45": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list > Self.env_good > Self.failure_list > Self.env_list",
      "46": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list > Self.env_good > Self.failure_list || None",
      "47": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_bad > Self.failure_list > Self.env_good > Self.failure_list = None",
      "48": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for   :self.env_good > self.failure_list > Self.env_bad > Self.failure_list = None",
      "49": "self.env_good = True self.failure_list = None const AmbassadorEventWatcher = this._event_target? Build an Event List : Build an Event List for  :self.env_good > self.failure_list > Self.env_good? self.failure_list > Self.env_good || False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    topo: Mesh = None\n    element: Element = None\n\n",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_line": "    element: Element = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 171,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "kinnala/scikit-fem",
    "source_filename": "skfem/assembly/dofs.py",
    "target_filename": "skfem/assembly/dofs.py",
    "source_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7^",
    "target_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "predictions": [
      "topo: Mesh = None element: None"
    ],
    "correct": false,
    "top_five": {
      "0": "topo: Mesh = None element: None",
      "1": "topo: Mesh = None element: Element = None",
      "2": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used as type None",
      "3": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used as type None",
      "4": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type None",
      "5": "topo: Mesh = None element: element declared in class Dofs has type skfem.element.element.Element but is used as type None",
      "6": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Nodes",
      "7": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.element: Element = None",
      "8": "topo: Mesh = None element: Skfem.element.element.Element = None",
      "9": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type none",
      "10": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type None",
      "11": "topo: Mesh = None element: 'element' declared in class Dofs has type skfem.element.element.Element but is used as type None",
      "12": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs.",
      "13": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself. Element: None",
      "14": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well.element",
      "15": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Nodes",
      "16": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.element: Element = None",
      "17": "topo: Mesh = None element: skfem.element.element.Element declare in class Dofs has type skfem.element.element.Element but is used as type None",
      "18": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.element",
      "19": "topo: Mesh = None element: element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type None",
      "20": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type skfem.element.element.Element",
      "21": "topo: Mesh = None element: Element declared in class Dofs but is used as type None",
      "22": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type Element",
      "23": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself. Element: None",
      "24": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Skfem.element.element.Element",
      "25": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.Element",
      "26": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type none",
      "27": "topo: Mesh = None element: 'element' declare in class Dofs has type skfem.element.element.Element but is used as type None",
      "28": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs.",
      "29": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs because it has type skfem.element.element.Element",
      "30": "topo: Mesh = None element: element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Nodes",
      "31": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.",
      "32": "topo: Mesh = None element: element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.element: Element = None",
      "33": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself. Element: Element = None",
      "34": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself",
      "35": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well.element",
      "36": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as type skfem.element.element.Element",
      "37": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs.html",
      "38": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class None",
      "39": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as a base element",
      "40": "topo: Mesh = None element: Element declared in class Dofs declares as type skfem.element.element.Element but is used as type None",
      "41": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.element: None",
      "42": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.",
      "43": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as being null",
      "44": "topo: Mesh = None element: Node.Element declare in class Dofs has type skfem.element.element.Element but is used as type None",
      "45": "topo: Mesh = None element: Element declare in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs itself.element",
      "46": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs. element: Element = None",
      "47": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as a subtype of element",
      "48": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Dofs.templates",
      "49": "topo: Mesh = None element: Element declared in class Dofs has type skfem.element.element.Element but is used in class Dofs as well as in class Skfem"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    num_classes: int = None\n    names: List[str] = None\n    names_file: str = None\n    id: Optional[str] = None\n",
    "target_code": "\n    num_classes: Optional[int] = None\n    names: Optional[List[str]] = None\n    names_file: Optional[str] = None\n    id: Optional[str] = None\n",
    "warning_line": "    names_file: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `names_file` declared in class `ClassLabel` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 552,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "huggingface/datasets",
    "source_filename": "src/datasets/features.py",
    "target_filename": "src/datasets/features.py",
    "source_changeid": "49e517a3d21392291d771872204594f43cd09532^",
    "target_changeid": "49e517a3d21392291d771872204594f43cd09532",
    "predictions": [
      "num_classes: int = None names_file: str = None id: Optional[str] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "num_classes: int = None names_file: str = None id: Optional[str] = None",
      "1": "num_classes: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "2": "numbers_file: str = None id: Optional[str] = None",
      "3": "numbers_classes: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "4": "names_file: str = None id: Optional[str] = None",
      "5": "int = None names_file: str = None id: Optional[str] = None",
      "6": "numbers: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "7": "number_classes: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "8": "numbers_file: str = None num_classes: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "9": "int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "10": "numbers_classes: int = None names_file: str = None id: Optional[str] = None",
      "11": "numbers_file: str = None names_file: str = None id: Optional[str] = None",
      "12": "num_classes: int = None names: List[str] = None name_file: str = None id: Optional[str] = None",
      "13": "numbers_file: str = None names: List[str] = None id: Optional[str] = None",
      "14": "numbers_file: str = None name_file: str = None id: Optional[str] = None",
      "15": "num_classes: int = None name_file: str = None id: Optional[str] = None",
      "16": "int: None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "17": "num_classes: int = None names: List[str] = None id: Optional[str] = None",
      "18": "number_classes: int = None names_file: str = None id: Optional[str] = None",
      "19": "numbers_classes: int = None names: List[str] = None name_file: str = None id: Optional[str] = None",
      "20": "numbers: int = None names_file: str = None id: Optional[str] = None",
      "21": "int = None names: List[str] = None id: Optional[str] = None",
      "22": "numbers_int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "23": "int: None names_file: str = None id: Optional[str] = None",
      "24": "numbers_file: str = None num_classes: int = None names_file: str = None id: Optional[str] = None",
      "25": "num_classes: int = None num_files: List[str] = None names_file: str = None id: Optional[str] = None",
      "26": "numbers_columns: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "27": "num_classes: int = None names: List[str] = None names_file: str = Nothing id: Optional[str] = None",
      "28": "numbers_file: str = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "29": "numbers_file: str = None num_classes: int = None names: List[str] = None name_file: str = None id: Optional[str] = None",
      "30": "nom_classes: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "31": "num_classes: int = None num_files: List[str] = None id: Optional[str] = None",
      "32": "number_classes: int = None names: List[str] = None name_file: str = None id: Optional[str] = None",
      "33": "int = None num_classes: int = None names_file: str = None id: Optional[str] = None",
      "34": "numbers: int = None names: List[str] = None name_file: str = None id: Optional[str] = None",
      "35": "classes: int = None names: List[str] = None names_file: str = None id: Optional[str] = None",
      "36": "num_classes: int = None names: List[str] = None names_file: str = none id: Optional[str] = None",
      "37": "int = None names: List[str] = None name_file: str = None id: Optional[str] = None",
      "38": "numbers_file: str = None num_classes: int = None names: List[str] = None id: Optional[str] = None",
      "39": "int: None names: List[str] = None id: Optional[str] = None",
      "40": "num_classes: int = None num_files: List[str] = None name_file: str = None id: Optional[str] = None",
      "41": "num_classes: int = None names: List[str] = None names_file_: str = None id: Optional[str] = None",
      "42": "numbers_classes: int = None names: List[str] = None names_file: str = Nothing id: Optional[str] = None",
      "43": "num_classes: int = None names: List[str] = None names_file: str = Null id: Optional[str] = None",
      "44": "numbers_file: str = None num_classes: int = None names: List[str] = None names_file: str = Nothing id: Optional[str] = None",
      "45": "num_classes: int = None names: List[str] = None names_file: str = 0 id: Optional[str] = None",
      "46": "numbers_file: str = None name: List[str] = None id: Optional[str] = None",
      "47": "num_classes: int = None names_file: str = None name_file_id: Optional[str] = None",
      "48": "name_file: str = None id: Optional[str] = None",
      "49": "number_classes: int = None name_file: str = None id: Optional[str] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        self.returncode = code\n",
    "warning_line": "        self.returncode = code",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "actionless/pikaur",
    "source_filename": "pikaur_test/helpers.py",
    "target_filename": "pikaur_test/helpers.py",
    "source_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc^",
    "target_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "predictions": [
      "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code"
    ],
    "correct": false,
    "top_five": {
      "0": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "1": "returncode: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "2": "returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "3": "self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "4": "returncode: code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "5": "module.exports = { returncode: code, value: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "6": "def _fake_exit(self, code: Optional[int] = 0, 0) -> NoReturn: self.returncode = code",
      "7": "module.exports = { returncode: code, def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "8": "returncode: def _fake_exit(self, code: Optional[int] = 0, length: Optional[int] } ) -> NoReturn: self.returncode = code",
      "9": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code)",
      "10": "module.exports = { returncode: code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "11": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> (Decimal(self, code)); }",
      "12": "returncode: def _fake_exit(self, code: Optional[int] = 0, _id: def _fake_exit(self, code) -> NoReturn: self.returncode = code",
      "13": "returncode: def _fake_exit(self, code: Optional[int] = 0, 10) -> NoReturn: self.returncode = code",
      "14": "returncode = code: def _fake_exit(self, code: Optional[int] = 0, length: Optional[int] } ) -> NoReturn: self.returncode = code",
      "15": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> ParseInt(self, code)",
      "16": "def _fake_exit(self, code: Optional[int] = 0,1) -> NoReturn: self.returncode = code",
      "17": "case 'failed': self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "18": "returncode: def _fake_exit(self, code: Optional[int] = 0,1) -> NoReturn: self.returncode = code",
      "19": "code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "20": "returncode: def _fake_exit(self, code: Optional[int] = 0, 0) -> NoReturn: self.returncode = code",
      "21": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: code._id",
      "22": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code || Optional[int]",
      "23": "returncode = code: def _fake_exit(self, code: Optional[int] = 0, 10) -> NoReturn: self.returncode = code",
      "24": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code;",
      "25": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> () => { }",
      "26": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn;",
      "27": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: code,",
      "28": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> (Decimal(self, code))",
      "29": "(function() { self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "30": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> Return(int)",
      "31": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: def _id",
      "32": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: def _id || '',",
      "33": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0)",
      "34": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> Abs: def _fake_exit(self, code)",
      "35": "returncode: def _fake_exit(self, code: Optional[int] = 0, length: int } ) -> NoReturn: self.returncode = code",
      "36": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn || def _fake_exit(self, code)",
      "37": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> (Def.isNaN(code))",
      "38": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn; }",
      "39": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: code",
      "40": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: codeButtons._id } )",
      "41": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: code._id } )",
      "42": "var returncode = def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "43": "case 'fake': def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "44": "returncode = code: def _fake_exit(self, code: Optional[int] = 0, length: int } ) -> NoReturn: self.returncode = code",
      "45": "case 'failed': def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "46": "module.exports = { returncode: code: def _fake_exit(self, code: Optional[int] = 0, length: Optional[int] } ) -> NoReturn: self.returncode = code",
      "47": "self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, 10) -> NoReturn: self.returncode = code",
      "48": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code: Optional[int] = 0, _id: codeButtons.id } )",
      "49": "returncode: def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code: def _fake_exit(self, code)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: InferenceAPI = []\n\n",
    "target_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n\n",
    "warning_line": "    _inference_apis: InferenceAPI = []",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_inference_apis` declared in class `BentoService` has type `InferenceAPI` but is used as type `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 588,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bentoml/BentoML",
    "source_filename": "bentoml/service.py",
    "target_filename": "bentoml/service.py",
    "source_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd^",
    "target_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd",
    "predictions": [
      "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = []"
    ],
    "correct": false,
    "top_five": {
      "0": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = []",
      "1": "# List of inference APIs that this BentoService provides",
      "2": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [];",
      "3": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService extends ()",
      "4": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService extends. InferenceAPI = []",
      "5": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of Objects that this BentoService extends ()",
      "6": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_L]] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_L]]",
      "7": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis || Object.keys(List[Variable[_T]])",
      "8": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis || ( typeof InferenceAPI == 'undefined'? List[Variable[_T]] = ', 'BentoService'",
      "9": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_L]] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_L]]",
      "10": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of inference APIs that this BentoService extends. InferenceAPI = []",
      "11": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService provides",
      "12": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T]",
      "13": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI || List[Variable[_T]]",
      "14": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: List[Variable[_T]]",
      "15": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis || Object.keys(List[Variable[_T]], _inference_apis: _inferenceAPI",
      "16": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T] but is not included in this BentoService",
      "17": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]",
      "18": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: _inferenceAPI || Object.keys(List[Variable[_T]]",
      "19": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: InferenceAPI + _inference_apis: _inference_apis || Object.keys(List[Variable[_T]",
      "20": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T] =",
      "21": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of inference APIs that this BentoService provides",
      "22": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService gives _inference_apis: InferenceAPIList[Variable[_T]]",
      "23": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_T]], _inference_apis: _inference_apis: _inferenceAPI || _inference_apis: _inference_apis",
      "24": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_L]] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_L]] || Object.keys(BentoService)",
      "25": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: _inferenceAPI + _inference_apis || Object.keys(List[Variable[_T]]",
      "26": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]], _inference_apis: _inference_apis: _inference_apis || _inference_apis: _inferenceAPI || _inference_apis: _inference_API",
      "27": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis: _inferenceAPI || Object.keys(List[Variable[_T]])",
      "28": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_T]], _inference_apis: _inference_apis: _inferenceAPI || _inference_apis: _inference_apis || Object[",
      "29": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis || ( typeof InferenceAPI == 'undefined'? List[Variable[_T]] : List[T]",
      "30": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: HierarchyList[Variable[_T]] # List of _inference_apis: HierarchyList[Variable[_T]]",
      "31": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_T]], _inference_apis: _inference_apis: _inferenceAPI || _inference_apis: _inference_apis,",
      "32": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: _inferenceAPI || Object.keys(List[Variable[_T]",
      "33": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: _inferenceAPI || List[Variable[_T]]",
      "34": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T] but is not yet",
      "35": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T] but is not supported by default",
      "36": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis || ( typeof InferenceAPI == 'undefined'? List[Variable[_T]] : List[Variable[_T]",
      "37": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] + _inference_apis: _inference_apis || ( typeof InferenceAPI == 'undefined'? List[Variable[_T]] = ': 'InferenceAPI'",
      "38": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: HierarchyList[Variable[_T]] # List of _inference_apis: HierarchyList[Variable[_T]] # Table of inference apis: HierarchyList[Variable[_T]]",
      "39": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: _inferenceAPI + _inference_apis || Object.keys(List[Variable[_T]] = InferenceAPI",
      "40": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T] = InferenceAPI",
      "41": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inferenceAPI || List[Variable[_T]]",
      "42": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: HierarchyList[Variable[_T]] # List of _inference_apis: HierarchyList[Variable[_T]] # List of _inference_apis: HierarchyList[Variable[_T]]",
      "43": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || Object.keys(List[Variable[_T]",
      "44": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: BentoService.InferenceAPI || Object.assign( { }, InferenceAPI)",
      "45": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of Objects that this BentoService extends. InferenceAPI = []",
      "46": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]: List[Variable[_L]] # List of _inference_apis that this BentoService uses to make inferences List[Variable[_T]]",
      "47": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of Objects that this BentoService defines as List[Variable[_T]]",
      "48": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: _inferenceAPI || Object.keys(List[Variable[_T]]",
      "49": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = [] # List of _inference_apis: BentoService.InferenceAPI + _inference_apis: List[Variable[_T]] # List of _inference_apis: _inference_apis: InferenceAPI + _inference_apis || _inference_apis: _inference_api = InferenceAPI"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object\n",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_line": "            m.chat = self.chat_manager.get_chat(channel, uid)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 271,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/efb-telegram-master",
    "source_filename": "efb_telegram_master/master_message.py",
    "target_filename": "efb_telegram_master/master_message.py",
    "source_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6^",
    "target_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "predictions": [
      "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object"
    ],
    "correct": false,
    "top_five": {
      "0": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "1": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCShat)",
      "2": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMChat)",
      "3": "m.author = self.chat_manager.self if not m.chat: # Chat not found anyway, build a fake object",
      "4": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCSg)",
      "5": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCS)",
      "6": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCSchat)",
      "7": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMBChat)",
      "8": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat( channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "9": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat)",
      "10": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCS),",
      "11": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, create a fake object",
      "12": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object on m.chat if not m.chat: # Chat not found anyway,",
      "13": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.fakeObject)",
      "14": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.fakeobject)",
      "15": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (self.chat_manager, channel, uid)",
      "16": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCShat)",
      "17": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "18": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.ETMChat)",
      "19": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCSg)",
      "20": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (set of Object.keys(self.chat_manager, channel, uid))",
      "21": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCSchat)",
      "22": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCS)",
      "23": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (self.chat_manager, channel, uid)",
      "24": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMChat)",
      "25": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (set of Object.getOwnProperty(self.chat_manager, channel, uid))",
      "26": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCSask)",
      "27": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (metadata)",
      "28": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (set of Object(self.chat_manager, channel, uid))",
      "29": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (self.chat_manager, channel, uid) }",
      "30": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.fakeObject)",
      "31": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMBChat)",
      "32": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (obj, channel, uid)",
      "33": "m.author = self.chat_manager.self n.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "34": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (self.chat_author, channel, uid)",
      "35": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCSGAther)",
      "36": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.fakeobject)",
      "37": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.EMCS_ROOM)",
      "38": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (set of Object.getOwnProperty(self, channel, uid))",
      "39": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object in self.chat_manager.get_object(self.chat_manager, channel, uid)",
      "40": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.IMAGE_SIZES, channel, uid)",
      "41": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object with a fake name",
      "42": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (self.chat_manager, channel, uid) }",
      "43": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, construct a fake object (efb_telegram_master.chat.EMCShat)",
      "44": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object for efb_telegram_master.chat.ETMChat (channel, uid) }",
      "45": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "46": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (m.chat)",
      "47": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (chat)",
      "48": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.efb_telegram_master.chat)",
      "49": "m.author = self.chat_manager.self efb_telegram_master.chat.ETMChat: type = efb_telegram_master.chat.ETMChat m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (efb_telegram_master.chat.MAGNET)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)\n",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_line": "        self.kernel_filename: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 90,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_filename: str = None self.result = Result(xml_state)"
    ],
    "correct": false,
    "top_five": {
      "0": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_filename: str = None self.result = Result(xml_state)",
      "1": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str self.hypervisor_filename: str self.result = Result(xml_state)",
      "2": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str self.hypervisor_filename: str self.result = Result(xml_state)",
      "3": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_filename = str = None self.result = Result(xml_state)",
      "4": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.md5']) self.result = Result(xml_state)",
      "5": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str = None self.hypervisor_filename: str = None self.result = Result(xml_state)",
      "6": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_filename: str = Nothing self.result = Result(xml_state)",
      "7": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_filename: str = None self.result = Result(xml_state)",
      "8": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str = None self.hypervisor_filename = str = None self.result = Result(xml_state)",
      "9": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.kernel_file']) self.result = Result(xml_state)",
      "10": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.g4']) self.result = Result(xml_state)",
      "11": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str || None self.hypervisor_filename: str || None self.result = Result(xml_state)",
      "12": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.d5']) self.result = Result(xml_state)",
      "13": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.p4']) self.result = Result(xml_state)",
      "14": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.g3']) self.result = Result(xml_state)",
      "15": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.json']) self.result = Result(xml_state)",
      "16": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.p2js']) self.result = Result(xml_state)",
      "17": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.md4']) self.result = Result(xml_state)",
      "18": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: '.str' self.hypervisor_filename: '.str' self.result = Result(xml_state)",
      "19": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str equals None self.hypervisor_filename: str equals None self.result = Result(xml_state)",
      "20": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.js']) self.result = Result(xml_state)",
      "21": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.jsx']) self.result = Result(xml_state)",
      "22": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.d4']) self.result = Result(xml_state)",
      "23": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str async filename = None self.hypervisor_filename: str async filename = None self.result = Result(xml_state)",
      "24": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str self.hypervisor_filename = str self.result = Result(xml_state)",
      "25": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.kernel_filename']) self.result = Result(xml_state)",
      "26": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.bd5']) self.result = Result(xml_state)",
      "27": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.str self.hypervisor_filename: str.str self.result = Result(xml_state)",
      "28": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str || None self.hypervisor_filename: str || None self.result = Result(xml_state)",
      "29": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.pk']) self.result = Result(xml_state)",
      "30": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.glp']) self.result = Result(xml_state)",
      "31": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.bd0']) self.result = Result(xml_state)",
      "32": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.rmd5']) self.result = Result(xml_state)",
      "33": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.md6']) self.result = Result(xml_state)",
      "34": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.g1']) self.result = Result(xml_state)",
      "35": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str = None self.result = Result(xml_state)",
      "36": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str self.hypervisor_filename = None self.result = Result(xml_state)",
      "37": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename : str self.hypervisor_filename : str self.result = Result(xml_state)",
      "38": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.p2d']) self.result = Result(xml_state)",
      "39": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.g2']) self.result = Result(xml_state)",
      "40": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.prettyPrint']) self.result = Result(xml_state)",
      "41": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.gl1']) self.result = Result(xml_state)",
      "42": "self.checksum_name = ''.join([self.image_name, '.md5'])self.kernel_filename: str = None self.hypervisor_filename: str = None self.result = Result(xml_state)",
      "43": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.toString() self.hypervisor_filename: str.toString() self.result = Result(xml_state)",
      "44": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str.join([self.image_name, '.md5']) self.hypervisor_filename: str.join([self.image_name, '.p4k']) self.result = Result(xml_state)",
      "45": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str null self.hypervisor_filename: str null self.result = Result(xml_state)",
      "46": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_name: str = None self.result = Result(xml_state)",
      "47": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hijack_filename: str = None self.result = Result(xml_state)",
      "48": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str Self.hypervisor_filename: str self.result = Result(xml_state)",
      "49": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = None self.hypervisor_filename: str = Non self.result = Result(xml_state)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = camelCaseify(trait)\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 275,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "1": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "2": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) {",
      "3": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) },",
      "4": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "5": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key === 'function') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "6": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator.is_authenticator( trait, 'auth.cilogon.' + cfg_key)) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "7": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \\",
      "8": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key == 'undefined') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "9": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== trait && trait.name === 'auth.cilogon.') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "10": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && trait.name === 'auth.cilogon.') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "11": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator == trait && trait.name === 'auth.cilogon.') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "12": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator === trait && trait.name === 'auth.cilogon.') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "13": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator.is_authenticator(trait, 'auth.cilogon.' + cfg_key)) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "14": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator == trait && trait.name == 'auth.cilogon.') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "15": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== trait) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "16": "for trait, cfg_key in common_oauth_traits: if(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "17": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && trait.cfg_key) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "18": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) ^",
      "19": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "20": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== trait && trait.name) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "21": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key == 'function') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "22": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== undefined) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "23": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator == trait 'auth.cilogon.' + cfg_key) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "24": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== undefined && typeof cfg_key!== 'undefined') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "25": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== trait || trait === cfg_key) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "26": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key ==='string') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "27": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key!== 'undefined') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "28": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if_cfg_key === undefined || trait === 'auth.cilogon.' + cfg_key) {",
      "29": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (cfg_key) {",
      "30": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if_cfg_key === undefined || trait === 'auth.cilogon.' && trait.cfg_key === 'auth.cilogon.' + cfg_key) {",
      "31": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key === 'undefined') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "32": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if_config_is_valid_error_set_config_error_set_config_error_set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) {",
      "33": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if_config_is_valid_error_set_config_error_set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) {",
      "34": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator!== trait && trait.cfg_key) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "35": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator || trait.is_authenticator() || trait.is_authenticator()) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "36": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if (typeof cfg_key === 'undefined') {",
      "37": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key =='string') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "38": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if_cfg_key === undefined || trait === 'auth.cilogon.' + cfg_key) }",
      "39": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && trait.is_authenticator()) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "40": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) for trait, cfg_key in common_oauth_traits: if (cfg_key) {",
      "41": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key): for trait, cfg_key in common_oauth_traits:",
      "42": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key === 'function') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) } for (var i = 0; i  traits.length; ++ilogon.' + cfg_key) {",
      "43": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator || trait.is_authenticator()) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "44": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key === 'function') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) } for (var i = 0; i  typing.Optional[i]; ++) {",
      "45": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && trait.is_an_authenticator()) { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) }",
      "46": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) { if_cfg_key === undefined || trait === 'auth.cilogon.' && trait.cfg_key;",
      "47": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (typeof cfg_key === 'undefined') {",
      "48": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (cfg_key === 'auth.cilogon.') {",
      "49": "for trait, cfg_key in common_oauth_traits: if (c.CILogonOAuthenticator && typeof cfg_key === 'function') { set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) } for (var i = 0; i  traits.length; ++ilogon.' + cfg_key);"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n\tnumber = int(number)\n\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])\n\n",
    "target_code": "\n\tvalue = int(number)\n\treturn \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_line": "\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 720,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/formatting.py",
    "target_filename": "se/formatting.py",
    "source_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3^",
    "target_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "predictions": [
      "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) }"
    ],
    "correct": false,
    "top_five": {
      "0": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) }",
      "1": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } number = int(number)",
      "2": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } ;",
      "3": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::4]) }",
      "4": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::: 4]) }",
      "5": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::::4]) }",
      "6": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::4]) }",
      "7": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::4]) }",
      "8": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } else {",
      "9": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::4]) }",
      "10": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::4]) }",
      "11": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10  4) * number % 10::::::::::4]) }",
      "12": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::4) }",
      "13": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::::::4]) }",
      "14": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::::: 4]) }",
      "15": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::: 4]) }",
      "16": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::::4]) }",
      "17": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::::::4) }",
      "18": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::::4]) }",
      "19": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::::: 4]) }",
      "20": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::::: 4]) }",
      "21": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::: 4]) }",
      "22": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10  4) * number % 10:::::::::::4]) }",
      "23": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::::: 4]) }",
      "24": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::::4]) }",
      "25": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::::::4]) }",
      "26": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::::4) }",
      "27": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::: 4]) }",
      "28": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::4]) }",
      "29": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::: 4]) }",
      "30": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::: 4]) }",
      "31": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10  4) * number % 10:::::::::4]) }",
      "32": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::::4) }",
      "33": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::::: ) }",
      "34": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10  4) * number % 10:::::::::::4) }",
      "35": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::: 4]) }",
      "36": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::4) }",
      "37": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::4) }",
      "38": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::4) }",
      "39": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10  4) * number % 10::::::::::4) }",
      "40": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::::4) }",
      "41": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } number = int(number, \"rhsnrhtdd\");",
      "42": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::::: ) }",
      "43": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 ::::::::::::4) }",
      "44": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::4]) }",
      "45": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::: 4]) }",
      "46": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10::::::::::::::4]) }",
      "47": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 :::::::::::4) }",
      "48": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10 % 10:::::::::::::: 4]) }",
      "49": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) } return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10  4) * number % 10:::::::::::::4]) }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        else:\n            raise ValueError(\"unknown topic: \" + topicname)\n\n",
    "target_code": "        else:\n            raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_line": "            raise ValueError(\"unknown topic: \" + topicname)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1052,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997^",
    "target_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "predictions": [
      "else: raise ValueError(\"unknown topic: \" + topicname)"
    ],
    "correct": false,
    "top_five": {
      "0": "else: raise ValueError(\"unknown topic: \" + topicname)",
      "1": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]) raise ValueError(\"unknown topic: \" + topicname)",
      "2": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type(); raise ValueError(\"unknown topic: \" + topicname)",
      "3": "else: liftItemAt(operand.indexOf(operand)), supported operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]) raise ValueError(\"unknown topic: \" + topicname)",
      "4": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]) } else: raise ValueError(\"unknown topic: \" + topicname)",
      "5": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type()) raise ValueError(\"unknown topic: \" + topicname)",
      "6": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type()); raise ValueError(\"unknown topic: \" + topicname)",
      "7": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type(); liftValueError(\"unknown topic: \" + topicname)",
      "8": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]) }",
      "9": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type();",
      "10": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push(operand).valueError(\"unknown topic: \" + topicname)",
      "11": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]])raise ValueError(\"unknown topic: \" + topicname)",
      "12": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]) { else: raise ValueError(\"unknown topic: \" + topicname)",
      "13": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]: raise ValueError(\"unknown topic: \" + topicname)",
      "14": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type().toString(); raise ValueError(\"unknown topic: \" + topicname)",
      "15": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]._) raise ValueError(\"unknown topic: \" + topicname)",
      "16": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand id +, null operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].punctuationError(operand id, \"unknown topic: \" + topicname)",
      "17": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand id +, null operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].punctuationError(operand id +)",
      "18": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand id +, null operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]])",
      "19": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type(operand): raise ValueError(\"unknown topic: \" + topicname)",
      "20": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + { is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] { ) raise ValueError(\"unknown topic: \" + topicname)",
      "21": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type; raise ValueError(\"unknown topic: \" + topicname)",
      "22": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand idx, '+ is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]])",
      "23": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand id +, null operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].punctuationError(\"unknown topic: \" + topicname)",
      "24": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]])",
      "25": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + { is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] } ) raise ValueError(\"unknown topic: \" + topicname)",
      "26": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]) { raise ValueError(\"unknown topic: \" + topicname) }",
      "27": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] } ) raise ValueError(\"unknown topic: \" + topicname)",
      "28": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] ast: raise ValueError(\"unknown topic: \" + topicname)",
      "29": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]._id; raise ValueError(\"unknown topic: \" + topicname)",
      "30": "else: liftItemAt(operand.indexOf(operand)) { operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type(); raise ValueError(\"unknown topic: \" + topicname)",
      "31": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push( { topic: \" + topicname, type: \", value: \"+operand[id] } ) }",
      "32": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push(operand) } else: raise ValueError(\"unknown topic: \" + topicname)",
      "33": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].raise ValueError(\"unknown topic: \" + topicname)",
      "34": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push(operand.type) } else: raise ValueError(\"unknown topic: \" + topicname)",
      "35": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]).toString() } else: raise ValueError(\"unknown topic: \" + topicname)",
      "36": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]; raise ValueError(\"unknown topic: \" + topicname)",
      "37": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] { ) raise ValueError(\"unknown topic: \" + topicname)",
      "38": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].type().replace(/ \\ s+/g, '')) } else: raise ValueError(\"unknown topic: \" + topicname)",
      "39": "else: liftItemAt(operand.indexOf(operand)), function(err, res) { if (str && Union[str, typing.Tuple[typing.Any,...]]) { raise ValueError(\"unknown topic: \" + topicname)",
      "40": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push(operand) }",
      "41": "else: liftItemAt(operand.indexOf(operand)), operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].(); raise ValueError(\"unknown topic: \" + topicname)",
      "42": "else: liftItemAt(operand.indexOf(operand)), supported operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]])raise ValueError(\"unknown topic: \" + topicname)",
      "43": "else: liftItemAt(operand.indexOf(operand)), function(err, res) { if (str && Union[str, typing.Tuple[typing.Any,...]]) { raise ValueError(\"unknown topic: \" + topicname) }",
      "44": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push( { topic: \" + topicname, value: \" } ) }",
      "45": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + { is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] \\ ) raise ValueError(\"unknown topic: \" + topicname)",
      "46": "else: liftItemAt(operand.indexOf(operand)) { operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]]: raise ValueError(\"unknown topic: \" + topicname)",
      "47": "else: liftState( { topic: \"unknown topic: \" + topicname, id: \"__topLevel\", value: \"100%\", operand [58] + { is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]] } )",
      "48": "else: raise ValueError(\"unknown topic: \" + topicname).punctuationError(operand id +, null operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].punctuationError(operand id, '')",
      "49": "else: liftItemAt(operand.indexOf(operand)) { operand [58] + is not supported for operand types str and Union[str, typing.Tuple[typing.Any,...]].types.push(operand).valueError(\"unknown topic: \" + topicname)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) < self._library_max_private_projects)\n",
    "target_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    callback(len(response) < self._library_max_private_projects)\n",
    "warning_line": "                    callback(len(response) < self._library_max_private_projects)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 95,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "target_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af^",
    "target_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "predictions": [
      "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)"
    ],
    "correct": false,
    "top_five": {
      "0": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "1": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "2": "callback(len(response)  self._library_max_private_projects)",
      "3": "callback(len(response)  self._library_max_private_projects): callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "4": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (obj)",
      "5": "len(response)  self._library_max_private_projects) callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "6": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response)) {",
      "7": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (data)",
      "8": "len(response)  self._library_max_private_projects): callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "9": "len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "10": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (!isinstance(response) {",
      "11": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (sel)",
      "12": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) {",
      "13": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (el == null)",
      "14": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response) || DigitalFactoryProjectRese)",
      "15": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response)) }",
      "16": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (el!== null)",
      "17": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (!isinstance)",
      "18": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (list[response])",
      "19": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list)",
      "20": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (!isinstance(response)) {",
      "21": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response) ||options) {",
      "22": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects));",
      "23": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(r)",
      "24": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (el || isinstance(response)) {",
      "25": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (el!== null) {",
      "26": "callback(true) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "27": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(rese)",
      "28": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response, list)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) {",
      "29": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif [hasOwnProperty(rese)]) {",
      "30": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance)",
      "31": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(s)",
      "32": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "33": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isnotEmpty(response)))",
      "34": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isnotEmpty(response))",
      "35": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance[response]) {",
      "36": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(r, list))",
      "37": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(se)",
      "38": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response)) \\",
      "39": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isnotinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) {",
      "40": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isnotinstance(response, list) and all(response)",
      "41": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response) ||DigitalFactoryProjectRese)",
      "42": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isinstance(response))",
      "43": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response) self._library_max_private_projects)",
      "44": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(res)",
      "45": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (options)",
      "46": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isotope, list)",
      "47": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (el) {",
      "48": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (isnotEmpty(response))) {",
      "49": "callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif (!isinstance(response) { ) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if other_line is not None:\n            buffer.append(\" \" + other_line)\n\n",
    "target_code": "        if other_line is not None:\n            buffer.append(\" \" + str(other_line))\n\n",
    "warning_line": "            buffer.append(\" \" + other_line)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 249,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python-poetry/poetry",
    "source_filename": "poetry/mixology/incompatibility.py",
    "target_filename": "poetry/mixology/incompatibility.py",
    "source_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728^",
    "target_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "predictions": [
      "if other_line is not None: buffer.append(\" \" + other_line)"
    ],
    "correct": false,
    "top_five": {
      "0": "if other_line is not None: buffer.append(\" \" + other_line)",
      "1": "if other_line is Not None: buffer.append(\" \" + other_line)",
      "2": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, ')",
      "3": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, ')",
      "4": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(/g, ')",
      "5": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(/g, ');",
      "6": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\");",
      "7": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\");",
      "8": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, ');",
      "9": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), '+')",
      "10": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(/(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, ');",
      "11": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(/(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, ')",
      "12": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\");",
      "13": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, ');",
      "14": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, ')",
      "15": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), '+');",
      "16": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,')",
      "17": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' 'g,')",
      "18": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' 'g, ')",
      "19": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' 'g, ');",
      "20": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, ')",
      "21": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\" + )",
      "22": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '), '+')",
      "23": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' ';');",
      "24": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '\").replace(//g, '\");",
      "25": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '), '+');",
      "26": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '\").replace(//g, '\").replace(/g, ');",
      "27": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(/g, '), '+';",
      "28": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), '+', ');",
      "29": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(/(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, ');",
      "30": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '\").replace(//g, '$/g, ')",
      "31": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' )",
      "32": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), ';)",
      "33": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, ')",
      "34": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\");",
      "35": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' ';')",
      "36": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), ')",
      "37": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '\").replace(//g, '\").replace(/g, ')",
      "38": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), ');",
      "39": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(/(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, ')",
      "40": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '\");",
      "41": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '\");",
      "42": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, '), '+', ')",
      "43": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//g, ');",
      "44": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(/(//g, '$/')).replace(/(//g, '$/')).replace(//g, '$/')).replace(//g, ');",
      "45": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '').replace(//g, '$/g, '\").replace(//g, ')",
      "46": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(//g, '$/g, '\").replace(/g, '+');",
      "47": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,')",
      "48": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(//g, '/g,' ).replace(//g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' /g,' id, ');",
      "49": "if other_line is not None: buffer.append(\" \" + other_line) const ret = new Int32Array(int32).replace(/(//g, '$/g, '\").replace(/(//g, '$/g, '\").replace(//g, '\").replace(//g, '$/g, '\").replace(//, ')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = camelCaseify(trait)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 279,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "1": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "2": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) },",
      "3": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) {",
      "4": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) { set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "5": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator) { set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "6": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator && trait.name === 'auth.gitlab.') { set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "7": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (cfg_key) {",
      "8": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits: if (cfg_key) {",
      "9": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \\",
      "10": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) ^",
      "11": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator && trait.nodeType === 'auth.gitlab.') { set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "12": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "13": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (cfg_key === 'auth.gitlab.') {",
      "14": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits: if (cfg_key === 'auth.gitlab.') {",
      "15": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits: this._auth_traits[cfg_key] = {",
      "16": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) } if_config_is_ok(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) {",
      "17": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: cfg_key = trait, 'auth.gitlab.' + cfg_key;",
      "18": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(C.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "19": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator || trait === 'auth.gitlab.') { set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "20": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) pursuant to Object.keys(common_oauth_traits).process(cfg_key)",
      "21": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator && trait.is_open) { set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) }",
      "22": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits:",
      "23": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) } if_config_is_ok(cfg_key, trait, 'auth.gitlab.' + cfg_key) {",
      "24": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) {",
      "25": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: cfg_key = trait, 'auth.gitlab.';",
      "26": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) || trait === 'auth.gitlab.';",
      "27": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)_config_is_ok(cfg_key, trait, 'auth.gitlab.' + cfg_key) }",
      "28": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits: }",
      "29": "for trait, cfg_key in common_oauth_traits: require('auth_gitlab').with_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "30": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: this._auth_traits[cfg_key] = {",
      "31": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits: cfg_key = trait, 'auth.gitlab.';",
      "32": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) || trait('auth.gitlab.' + cfg_key)",
      "33": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) pursuant to Object.keys(common_oauth_traits).execute(cfg_key, trait, 'auth.gitlab.' + cfg_key)",
      "34": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) pursuant to Object.keys(common_oauth_traits).process(cfg_key, typeof cfg_key === 'function') {",
      "35": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (cfg_key!== null) {",
      "36": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) invoke(cfg_key, trait, 'auth.gitlab.' + cfg_key)",
      "37": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits:",
      "38": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)();",
      "39": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) { if_config_is_ok(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) {",
      "40": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: if (typeof cfg_key === 'undefined') {",
      "41": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) { if_config_is_ok(cfg_key, trait, 'auth.gitlab.' + cfg_key) {",
      "42": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) for trait, cfg_key in common_oauth_traits: if (typeof cfg_key === 'undefined') {",
      "43": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) pursuant to Object.keys(common_oauth_traits).map(cfg_key)",
      "44": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) pursuant to Object.keys(common_oauth_traits).process(cfg_key, typeof cfg_key === 'function')",
      "45": "for trait, cfg_key in common_oauth_traits: if (c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) {",
      "46": "for trait, cfg_key in common_ofauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "47": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): trait, cfg_key in common_oauth_traits: if (cfg_key) {",
      "48": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key): for trait, cfg_key in common_oauth_traits: if(cfg_key) {",
      "49": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) } ;"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return 32, True\n\n        return int(self.size / 8), False\n",
    "target_code": "            return 32, True\n        if self.size is None:\n            return 32, True\n        return int(self.size / 8), False\n",
    "warning_line": "        return int(self.size / 8), False",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crytic/slither",
    "source_filename": "slither/core/solidity_types/elementary_type.py",
    "target_filename": "slither/core/solidity_types/elementary_type.py",
    "source_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b^",
    "target_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "predictions": [
      "return 32, True return int(self.size / 8), False"
    ],
    "correct": false,
    "top_five": {
      "0": "return 32, True return int(self.size / 8), False",
      "1": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32, False,",
      "2": "return 32, True return _.isNaN(32, True)? _.isNaN(self.size / 8) : _.isNaN(self.size / 8), False",
      "3": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32, False",
      "4": "return 32, True return _.isNaN(self.size / 8), False",
      "5": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32, True",
      "6": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32, False: return int(size / 8,",
      "7": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False",
      "8": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32, False: return",
      "9": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 64, False,",
      "10": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32, False: return int(size / 8),",
      "11": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False: return int(size",
      "12": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _size : 32,",
      "13": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size)",
      "14": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False: return",
      "15": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _size : 32, False",
      "16": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isN(size : 32, False",
      "17": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False",
      "18": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False: return int(size",
      "19": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 64, False",
      "20": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isN(size : 32,",
      "21": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size / 8), False",
      "22": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)",
      "23": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False:",
      "24": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN, False",
      "25": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)",
      "26": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : size ||size : 32,",
      "27": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN, False",
      "28": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False: return",
      "29": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _se, False,",
      "30": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _size / 8), False",
      "31": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size : 32, False",
      "32": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : 32, False",
      "33": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _size : 32, False,",
      "34": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 32,",
      "35": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _size : 32, False:",
      "36": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : false,",
      "37": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _size : 32, False: return int(size / 8",
      "38": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size : 32,",
      "39": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isN(size : 32, False",
      "40": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size : 32, False",
      "41": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size : 32,",
      "42": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : size || size: 32,",
      "43": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)? _.isNaN(size) : _.isNaN(size) : _.isNaN(size) : 32, False",
      "44": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : 64, False: return int(size / 8,",
      "45": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False,",
      "46": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNumbr(size : 32, False",
      "47": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _size / 8), False",
      "48": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? size : 32, False,",
      "49": "return 32, True return _.isNaN(size)? _.isNaN(size) : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)?size : _.isNaN(size)? size : 32, False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_line": "          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `range` and `range`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 848,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rizar/attention-lvcsr",
    "source_filename": "theano/tensor/tests/test_basic.py",
    "target_filename": "theano/tensor/tests/test_basic.py",
    "source_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047^",
    "target_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "predictions": [
      "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],"
    ],
    "correct": false,
    "top_five": {
      "0": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "1": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1])],",
      "2": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1]),",
      "3": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1])]",
      "4": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [254, 1]),",
      "5": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "6": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[0, uint8];",
      "7": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])),",
      "8": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1])]);",
      "9": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(numpy.arange(-127, 0) + range(1, 128), dtype='int8'), [255, 1])),",
      "10": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], int8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1])],",
      "11": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(numpy.arange(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "12": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[null, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "13": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1]),",
      "14": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], int8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1]),",
      "15": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])",
      "16": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], i18n: numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])",
      "17": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.array(numpy.arange(-127, 128), dtype='int8'), [255, 1])],",
      "18": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1]);",
      "19": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(numpy.arange(-127, 0) + range(1, 128), dtype='int8'), [255, 1]),",
      "20": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[1], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "21": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-125, 128), dtype='int8'), [255, 1])],",
      "22": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [254, 1])],",
      "23": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[ numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "24": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1]",
      "25": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(numpy.arange(-127, 0) + range(1, 128), dtype='int8'), [255, 1])",
      "26": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1])])],",
      "27": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 128), dtype='int8'), [255, 1])]),",
      "28": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[null, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1]),",
      "29": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-124, 128), dtype='int8'), [255, 1])],",
      "30": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 138), dtype='int8'), [255, 1])],",
      "31": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "32": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], i, n, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])",
      "33": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1]",
      "34": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 13) + range(1, 128), dtype='int8'), [255, 1])],",
      "35": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[t[0]], uint8=[numpy.tile(numpy(-127, uint8'), [255, 1]),",
      "36": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-125, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "37": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-125, 128), dtype='int8'), [255, 1]),",
      "38": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(numpy.arange(-125, 0) + range(1, 128), dtype='int8'), [255, 1])),",
      "39": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "40": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], i18n: numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
      "41": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], numpy.tile(numpy.array(numpy.arange(-125, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "42": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[1], numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1]),",
      "43": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.array(numpy.arange(-127, 128), dtype='int8'), [255, 1]),",
      "44": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[null, numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "45": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.array(numpy.arange(-127, 128), dtype='int8'), [255, 1])]",
      "46": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-124, 128), dtype='int8'), [255, 1]),",
      "47": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], i18n: numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1]",
      "48": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "49": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), [255, 1])], uint8=[numpy.tile(numpy.arange(-127, 138), dtype='int8'), [255, 1]),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return [global_state]\n\n        if size > 0:\n",
    "target_code": "            return [global_state]\n        size = cast(int, size)\n        if size > 0:\n",
    "warning_line": "        if size > 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 748,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f^",
    "target_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "predictions": [
      "return [global_state] if size > 0:"
    ],
    "correct": false,
    "top_five": {
      "0": "return [global_state] if size > 0:",
      "1": "if size > 0: return [global_state]",
      "2": "return [global_state] if size > 0: throw new Error(Unsupported operand type [58] > is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "3": "return [global_state] if size > 0: return [global_state]",
      "4": "return [global_state]",
      "5": "return [global_state] if size > 0: throw new Error('Unsupported global operand [58] > is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "6": "return [global_state] if size > 0: throw new Error('Unsupported operand type [58] > is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "7": "return [global_state] if size > 0: throw new Error('Unsupported operand type Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "8": "return [global_state] if size > 0: throw new Error(Unsupported operand [58] > is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "9": "return [global_state] if size > 0: throw new Error('Unsupported global expression type'+ size +'is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "10": "return [global_state] if size > 0: throw new Error('Unsupported size type \"' + size + '\" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "11": "return [global_state] if size > 0: throw new Error('Unsupported operand [58] > is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "12": "return [global_state] if size > 0: throw new Error('Unsupported global size type \"' + size + '\" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "13": "return [global_state] if size > 0: throw new Error('Unsupported global state operand [58] > is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "14": "return [global_state] if size > 0: throw new Error(\"Boundary type \" + size + \" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] ).Error(\"Boundary type \" + size + \" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "15": "return [global_state] if size > 0: throw new Error('Unsupported operand type Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "16": "return [global_state] if size > 0: throw new Error('Unsupported operand type Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] int)",
      "17": "return [global_state] if size > 0: throw new Error('Unsupported operand type Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int);",
      "18": "return [global_state] if size > 0: throw new Error('Unsupported operand type Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression])",
      "19": "return [global_state] if size > 0: throw new Error('Unsupported global expression type \"' + size + '\" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "20": "return [global_state] if size > 0: throw new Error(My global_state is no longer supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt)",
      "21": "return [global_state] if size > 0: throw new Error('Unsupported global expression type'+ size + ':' + size +'is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "22": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.ESV === 'object' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'object';",
      "23": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && && &&&",
      "24": "return [global_state] if size > 0: throw new Error(My global_state is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "25": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.ESV === 'object' && env.NODE_ENV!== 'object' && env.NODE_ENV!== 'function')",
      "26": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && &&&&",
      "27": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && &&& &&",
      "28": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV === 'product' &&& &&&",
      "29": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && & &&& &&&",
      "30": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'undefined'? env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && && &&&",
      "31": "return [global_state] if size > 0: throw new Error(My global_state is no longer supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int);",
      "32": "return [global_state] if size > 0: throw new Error(\"Boolean size > 0 is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "33": "return [global_state] if size > 0: throw new Error(My global_state is no longer supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "34": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'undefined'? env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && &&&&",
      "35": "return [global_state] if size > 0: throw new Error('Tolerant global size of'+ size +'is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int)",
      "36": "return [global_state] if size > 0: throw new Error('Unsupported operand type Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and  int)",
      "37": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'undefined'? env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && &&&",
      "38": "return [global_state] if size > 0: throw new Error(\"Boundary type \" + size + \" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] ).Error(\"Boundary type \" + size + \" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int\" );",
      "39": "return [global_state] if size > 0: throw new Error(\"Boundary type \" + size + \" is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] and int);",
      "40": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && &&&",
      "41": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.ESV === 'object' && env.NODE_ENV === 'function' && env.NODE_ENV === 'object' && env.lases.exp.n':",
      "42": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.ESV === 'object' && env.NODE_ENV === 'function' && env.NODE_ENV === 'object' && env.lases.exp &&&",
      "43": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && && &&&&",
      "44": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && &&& &&&",
      "45": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'undefined'? env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && & &&& &&&",
      "46": "return [global_state] if size > 0: throw new Error(My global_state is no longer supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt.expression.Expression] is not supported for operand types Union[int, mythril.laser.smt int)",
      "47": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.LOCAL_STATUS === 'undefined'? env.NODE_ENV === 'function' && env.NODE_ENV!== 'function' && && &&&",
      "48": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.LOCAL_STATUS === 'function' && env.NODE_ENV === 'function' && env.NODE_ENV!== 'object' && env.NODE_ENV!== 'object';",
      "49": "return [global_state] if size > 0: process.env.NODE_ENV === 'test' && typeof env.NODE_ENV === 'function' && typeof env.ESV === 'object' && env.NODE_ENV === 'function' && env.NODE_ENV === 'object' && env.lases.exp &&&&&"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_line": "                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 159,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/http_base.py",
    "target_filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )"
    ],
    "correct": false,
    "top_five": {
      "0": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "1": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ;",
      "2": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) );",
      "3": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).join(\" \\ n\")",
      "4": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).string(err)",
      "5": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec(result);",
      "6": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  err_result.length; i++) {",
      "7": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  str.length; i++) {",
      "8": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec(err);",
      "9": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) : err_result;",
      "10": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  err_result.length; i++) { if (err_result[i]) {",
      "11": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec(str);",
      "12": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  traceback.length; i++) {",
      "13": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).string(err);",
      "14": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) str;",
      "15": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  str[i]; i++) {",
      "16": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if (type(err) === \"function\" && err_result.length > 0) {",
      "17": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).str(err)",
      "18": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).then(function (result) {",
      "19": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) )",
      "20": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec(err)",
      "21": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).substring(5, err_result.length)",
      "22": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  str.length; i++) { var result = err_result[i];",
      "23": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ).substring(5, err_result.length)",
      "24": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).stringify(err)",
      "25": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).str(err);",
      "26": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec(null, string)",
      "27": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).toString(); }",
      "28": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  str.length; i++) { if (err === null) {",
      "29": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ).join(\" \\ n\")",
      "30": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).which = res.data;",
      "31": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) + \"\";",
      "32": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).stringify(operands[58])",
      "33": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).match(/ \\ s+/g, \"\");",
      "34": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  str_length; i++) {",
      "35": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).string(err) ;",
      "36": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec('result', null, err_result);",
      "37": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).stringify(operands.str, err)",
      "38": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).is_undefined(err)",
      "39": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).toString(err)",
      "40": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) ; for (var i = 0; i  str.length; i++) { if (err === null ) {",
      "41": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).toString(); return;",
      "42": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).stringify(result);",
      "43": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).stringify(err);",
      "44": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).double(err);",
      "45": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if ( type(err) === \"string\") {",
      "46": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).then(function(result) {",
      "47": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) + \":\";",
      "48": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ).exec('result', null, err_result); }",
      "49": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if ( type(err) ==='string') {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n\n",
    "target_code": "\n        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_line": "        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1015,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "target_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c^",
    "target_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "predictions": [
      "model_dir = Path(model_dir) tf_model_file = model_dir / f\" { file_name }.tf_model\""
    ],
    "correct": false,
    "top_five": {
      "0": "model_dir = Path(model_dir) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "1": "model_dir = Path(model_dir) tf_model_file = model_dir / (f\" { file_name }.tf_model\")",
      "2": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) f\" { file_name }.tf_model\"",
      "3": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) }.tf\"",
      "4": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "5": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "6": "model_dir = Path(model_dir) tf_model_file = model_dir / () f\" { file_name }.tf_model\"",
      "7": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "8": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "9": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "10": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "11": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "12": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) {.tf\"",
      "13": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "14": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ )",
      "15": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]) f\" { file_name }.tf_model\"",
      "16": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] { ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "17": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) f\" { file_name }.tf_model\"",
      "18": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } )",
      "19": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "20": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] { ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "21": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) \\.tf\"",
      "22": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] { ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "23": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "24": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] { ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "25": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) f\" { file_name }.tf_model\";",
      "26": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] }.tf\");",
      "27": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] { )",
      "28": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] \\ ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) }.tf\"",
      "29": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] }.tf_model\");",
      "30": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) tf_model_file = \"tf_model\";",
      "31": "model_dir = Path(model_dir) tf_model_file = model_dir / (tf_model_file) / (tf_model_file) f\" { file_name }.tf_model\"",
      "32": "model_dir = Path(model_dir) tf_model_file = model_dir / () => { }.tf_model\"",
      "33": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) }.tf\";",
      "34": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]) tf_model_file = \"tf_model\";",
      "35": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ )",
      "36": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]) f\" { file_name }.tf_model\"",
      "37": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } )",
      "38": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ )",
      "39": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) }.tf",
      "40": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } )",
      "41": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] \\ ) tf_model_file = model_dir / (faithfulFiles[filename] \\ )",
      "42": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] \\ ) tf_model_file = model_dir / (f\" { file_name }.tf_model\");",
      "43": "model_dir = Path(model_dir) const tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "44": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename]) tf_model_file = \"tf_model\";",
      "45": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename])",
      "46": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename] } ) tf_model_file = model_dir / (faithfulFiles[filename] }.tf\");",
      "47": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename])",
      "48": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]) }.tf_model\"",
      "49": "model_dir = Path(model_dir) tf_model_file = model_dir / (faithfulFiles[filename]) / (faithfulFiles[filename]] } ) tf_model_file = model_dir / (faithfulFiles[filename]] \\ ) tf_model_file = model_dir / (faithfulFiles[filename] } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists + self.sets + self.dict_keys + self.dict_values\n\n",
    "target_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values\n\n",
    "warning_line": "        assert not self.lists + self.sets + self.dict_keys + self.dict_values",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.List[UserList]` and `typing.List[UserSet]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 464,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: #"
    ],
    "correct": false,
    "top_five": {
      "0": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: #",
      "1": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, something went terribly wrong",
      "2": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it must be a valid list! }",
      "3": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it means that something went wrong.",
      "4": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, there is an error.",
      "5": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is undefined, there is an error.",
      "6": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, there is something wrong.",
      "7": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, there was something wrong.",
      "8": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it must be a valid list.",
      "9": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, there is no error.",
      "10": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, there must be an error.",
      "11": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is time to make changes.",
      "12": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it's time to change it.",
      "13": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it's time to make changes.",
      "14": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is possible to correct it.",
      "15": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it is possible to add an item to a list.",
      "16": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is time to change it.",
      "17": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is time to update it.",
      "18": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is because something went terribly wrong.",
      "19": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it's time to update it.",
      "20": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it is possible to add an item to a list;",
      "21": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it has to be a valid list.",
      "22": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, there is an error.",
      "23": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it has to be a valid list.",
      "24": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it means that something went wrong.",
      "25": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is not empty, something went terribly wrong",
      "26": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it has to be a valid list! }",
      "27": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is time to update the list.",
      "28": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is undefined, there is something wrong.",
      "29": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it means that something went terribly wrong.",
      "30": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, there was an error.",
      "31": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it will happen again.",
      "32": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, there is something wrong.",
      "33": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it means that there is an error.",
      "34": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it's time to update it.",
      "35": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it means that there was an error.",
      "36": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it must be a valid list.",
      "37": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is time to update it. }",
      "38": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is undefined, there was an error.",
      "39": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, there was an error.",
      "40": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is undefined, it is possible to add an item to a list;",
      "41": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is undefined, it is possible to add an item.",
      "42": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is undefined, there must be an error.",
      "43": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is possible to add more than one item.",
      "44": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it is possible to add an item.",
      "45": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is valid, it is possible to add more than one item to a list;",
      "46": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list contains error_message> {",
      "47": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it is possible to add an item to a list.",
      "48": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is empty, there must be a reason.",
      "49": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values: # So if any list is correct, it's time to fix it."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def _check_params(self) -> None:\n        if self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "target_code": "    def _check_params(self) -> None:\n        if self.step is not None and self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_line": "        if self.eps <= 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 148,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "target_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37^",
    "target_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "predictions": [
      "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")"
    ],
    "correct": false,
    "top_five": {
      "0": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "1": "if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "2": "def _check_params(self) => None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "3": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "4": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\"); if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "5": "def _check_params(self) -> None: if self.step = 0 : raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 : raise ValueError(\"Value of eps must be strictly positive.\")",
      "6": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "7": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "8": "def _check_params(self) -> None: step = Operation.prototype.step; if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "9": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "10": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\")",
      "11": "def _check_params(self) -> None: step = []; if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "12": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "13": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps >= 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "14": "def _check_params(self) -> None: if self.step = 0 && self.step.size = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "15": "def _check_params(self) -> None: If self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "16": "def _check_params(self) -> None: if self.step = 0 && self.step.length = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "17": "def _check_params(self) -> None: var self = { } ; if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "18": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") If self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "19": "def _check_params(self) -> None: if self.step = 0 && self.step.length = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "20": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps.length > 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "21": "def _check_params(self) -> None: if self.step = 0: elevate ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "22": "def _check_params(self) -> none: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "23": "def _check_params(self) -> None: if self.step == 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "24": "def _check_params(self) -> None: if self.step = 0 && self.step.size = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "25": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps.length > 0): raise ValueError(\"Value of eps must be strictly positive.\")",
      "26": "def _check_params(self) -> None: steps = []; if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "27": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps > 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "28": "def _check_params(self) -> None: if self.step = 0 && self.step.length = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps.length = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "29": "def _check_params(self) -> None: if self.step = 0 : raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "30": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps >= 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "31": "def _check_params(self) -> None: if self.step >= 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "32": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "33": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\");",
      "34": "def _check_params(self) -> None: if _self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if _self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "35": "def _check_params(self) -> None: if (self.step = 0): raise ValueError(\"Step size must be strictly positive.\") if (self.eps = 0): raise ValueError(\"Value of eps must be strictly positive.\")",
      "36": "def _check_params(self) -> None: if self.step = 0 && self.step.size = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps.length = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "37": "def _check_params(self) -> None: case 'eps': if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "38": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") raise ValueError(\"Value of eps must be strictly positive.\")",
      "39": "def _check_params(self) -> None: if self.step = 1: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "40": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size should be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "41": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps.length > 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "42": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") raised if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "43": "def _check_params(self) -> None:if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "44": "def _check_params(self) -> None: if self.step = 0 || raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "45": "def _check_params(self) -> None: const self.step = Object.assign( { }, self.eps) if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "46": "def _check_params(self) -> None: const self.step = []; if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "47": "def _check_params(self) -> None: if self.step = 0 && self.step.length = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps >= 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "48": "def _check_params(self) -> None: self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "49": "def _check_params(self) -> None: if self.step = 0 && self.step.length > 0): raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0 && self.eps.length > 0) raise ValueError(\"Value of eps must be strictly positive.\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream())\n",
    "target_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream)\n",
    "warning_line": "        return aiter(self._stream())",
    "linter_report": {
      "rule_id": "Call error [29]",
      "message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1123,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "faust-streaming/faust",
    "source_filename": "faust/agents/agent.py",
    "target_filename": "faust/agents/agent.py",
    "source_changeid": "51de861ada304a1763a4872811274818a8ee0851^",
    "target_changeid": "51de861ada304a1763a4872811274818a8ee0851",
    "predictions": [
      "def __aiter__(self) -> AsyncIterator: return aiter(self._stream())"
    ],
    "correct": false,
    "top_five": {
      "0": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream())",
      "1": "def __aiter__(self) -> AsyncIterator: return aiter(stream)",
      "2": "def __aiter__(self) -> AsyncIterator: return aiter(self.stream())",
      "3": "def __aiter__(self) -> asyncIterator: return aiter(self._stream())",
      "4": "def __aiter__(self) -> AsyncIterator: return aiter(self)",
      "5": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream());",
      "6": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter__(self))",
      "7": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter__(self));",
      "8": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def.__aiter__(self))",
      "9": "def __aiter__(self) -> AsyncIterator: return def._aiter(self._stream())",
      "10": "def __aiter__(self) -> AsyncIterator: return impex.aiter(self._stream())",
      "11": "def __aiter__(self) -> AsyncIterator: return asyncIterator(self)",
      "12": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self, args, args.replace(/ \\ s+/g, ''))",
      "13": "def __aiter__(self) -> AsyncIterator: return aiter(self)._stream()",
      "14": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def.__aiter__(self));",
      "15": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self, args)",
      "16": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).pipe(function(idx, cb) {",
      "17": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter())",
      "18": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(function(a) {",
      "19": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self._streamWithAttribute('id', 'id'))",
      "20": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter__(self._stream()));",
      "21": "def __aiter__(self) -> AsyncIterator: return \"__stream2\" + aiter(self._stream())",
      "22": "def __aiter__(self) -> AsyncIterator: return _aiter(self._stream())",
      "23": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(function () {",
      "24": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).subscribe(self._stream())",
      "25": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(function() {",
      "26": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).addAiter(self._stream())",
      "27": "def __aiter__(self) -> AsyncIterator: return aniter(self._stream())",
      "28": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter(self._stream()));",
      "29": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).concat(Def.prototype._slice.call(self, 'css'))",
      "30": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self._streamWithIterator)",
      "31": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).stream()",
      "32": "def __aiter__(self) -> AsyncIterator: const _self = this; return aiter(self._stream())",
      "33": "def __aiter__(self) -> AsyncIterator: return aiter(self, stream)",
      "34": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter.length)",
      "35": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self._streamWithAttribute('id'))",
      "36": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).concat(Def.prototype._slice.call(self,'regenerator'))",
      "37": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def._aiter__())",
      "38": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self, args, args.replace(/ ^ s+/g, ''))",
      "39": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self._streamValue, self._streamValue)",
      "40": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()) || def.__aiter(self._stream())",
      "41": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream(), def._aiter(self._stream()))",
      "42": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream(), def.__aiter(self._stream()))",
      "43": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self._streamValue)",
      "44": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).pipe(function() {",
      "45": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self._streamProps, def.__aiter__(self))",
      "46": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).mixin(self.options, 'id')",
      "47": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).concat(Def.prototype._slice.call(self,'regenerate'))",
      "48": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()).substr(0, def.__alias__(self))",
      "49": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream()),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  }
]