[
  {
    "source_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_line": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `constrained` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 3041,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/format/afp.py",
    "target_filename": "bemani/format/afp.py",
    "source_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da^",
    "target_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "predictions": [
      "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if str == 0 else ('no' if str == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:"
    ],
    "correct": false,
    "top_five": {
      "0": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if str == 0 else ('no' if str == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "1": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is not None else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "2": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint == 0 else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "3": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if isinstance(constrained, 0) else ('no' if isinstance(constrained, 0) else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "4": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is None else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_line": "    results = mean_squared_error(y_test, model.predict(X_test))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `y_test` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 42,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "target_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2^",
    "target_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "predictions": [
      "# Run some test predictions if not y_test: results = mean_squared_error(y_test, model.predict(X_test))"
    ],
    "correct": false,
    "top_five": {
      "0": "# Run some test predictions if not y_test: results = mean_squared_error(y_test, model.predict(X_test))",
      "1": "# Run some test predictions if not y_test: results = mean_squared_error(x_test, model.predict(X_test))",
      "2": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(X_test))",
      "3": "# Run some test predictions _y_test_error = mean_squared_error(_y_test, model.predict(_y_test))",
      "4": "# Run some test predictions _y_test_error = mean_squared_error(_y_test, model.predict(_X_test))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')\n\n",
    "target_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_line": "    server_type = _('Object')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `_` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/swift",
    "source_filename": "swift/proxy/controllers/obj.py",
    "target_filename": "swift/proxy/controllers/obj.py",
    "source_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21^",
    "target_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "predictions": [
      "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'Object'"
    ],
    "correct": true,
    "top_five": {
      "0": "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'Object'",
      "1": "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'object'",
      "2": "\"\"\"WSGI controller for object requests.\"\"\" server_type = \"Object\"",
      "3": "\"\"\"WSGI controller for object requests.\"\"\" server_type = type('Object')",
      "4": "\"\"\"WSGI controller for object requests.\"\"\" server_type = ('Object')"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "target_code": "\n    @pyqtSlot(bool)  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "warning_line": "    @pyqtSignature('bool')  # prevents actions being handled twice",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "target_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):"
    ],
    "correct": true,
    "top_five": {
      "0": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "1": "@pyqtSlot() # prevents actions being handled twice def help_toggled(self, flag):",
      "2": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag) -> None:",
      "3": "@pyqtSlot(bool) # prevents actions being handled twice. def help_toggled(self, flag):",
      "4": "@pyqtSlot() def help_toggled(self, flag):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": admin, \"thread_fbid\": self.id}\n\n",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_line": "        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `admin` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fbchat-dev/fbchat",
    "source_filename": "fbchat/_group.py",
    "target_filename": "fbchat/_group.py",
    "source_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372^",
    "target_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "predictions": [
      "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }"
    ],
    "correct": false,
    "top_five": {
      "0": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "1": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "2": "user_id = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "3": "user_id = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "4": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\nkey1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)\n\n",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_line": "key1 = [rands(10) for _ in xrange(N)]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 10,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pandas-dev/pandas",
    "source_filename": "scripts/bench_join_multi.py",
    "target_filename": "scripts/bench_join_multi.py",
    "source_changeid": "6c304c78d6a0559525abe16f03465d275c516455^",
    "target_changeid": "6c304c78d6a0559525abe16f03465d275c516455",
    "predictions": [
      "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)"
    ],
    "correct": false,
    "top_five": {
      "0": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "1": "key1 = [rands(10) for _ in scope(N)] key2 = [rands(10) for _ in scope(N)] zipped = izip(key1, key2)",
      "2": "key1 = [rands(10) for _ in this.range(N)] key2 = [rands(10) for _ in this.range(N)] zipped = izip(key1, key2)",
      "3": "key1 = [rands(10) for _ in Range(N)] key2 = [rands(10) for _ in Range(N)] zipped = izip(key1, key2)",
      "4": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range[N]] zipped = izip(key1, key2)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):\n",
    "target_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_line": "    @wsme_pecan.wsexpose(NodePowerState, unicode)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/ironic",
    "source_filename": "ironic/api/controllers/v1/node.py",
    "target_filename": "ironic/api/controllers/v1/node.py",
    "source_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18^",
    "target_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "predictions": [
      "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, w) def get(self, node_id):"
    ],
    "correct": false,
    "top_five": {
      "0": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, w) def get(self, node_id):",
      "1": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wpc) def get(self, node_id):",
      "2": "# GET nodes/uuid>/state/power def get(self, node_id):",
      "3": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan_icode) def get(self, node_id):",
      "4": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.code) def get(self, node_id):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
    "target_code": "\n    @pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_line": "    @pyqtSignature('')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 570,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/batch/batch_dialog.py",
    "target_filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "@SignatureDescriptor('') def run_selected_clicked(self):"
    ],
    "correct": false,
    "top_five": {
      "0": "@SignatureDescriptor('') def run_selected_clicked(self):",
      "1": "@Signature.create('') def run_selected_clicked(self):",
      "2": "def run_selected_clicked(self):",
      "3": "@SignatureDef('') def run_selected_clicked(self):",
      "4": "@Signature.create('') def run_selected_clicked(self) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    raw_input('finished')\n",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/convection/exponential2D/mesh2D.py",
    "target_filename": "examples/convection/exponential2D/mesh2D.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "input('finished')"
    ],
    "correct": true,
    "top_five": {
      "0": "input('finished')",
      "1": "input('finished').replace('/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/',",
      "2": "input('finished').replace('/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/')",
      "3": "input('finished').replace('/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', ',",
      "4": "input('finished').replace('/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '',"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    viewer.plot()\n    raw_input('finished')\n",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/distanceFunction/square.py",
    "target_filename": "examples/levelSet/distanceFunction/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "viewer.plot() input('finished')"
    ],
    "correct": true,
    "top_five": {
      "0": "viewer.plot() input('finished')",
      "1": "viewer.plot() input('finished') if input('unfinished') input('unfinished')",
      "2": "viewer.plot() input('finished') if input('none') input('none')",
      "3": "viewer.plot() input('finished') if input('unfinished')",
      "4": "viewer.plot() input('finished') if input('none')"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
    "target_code": "        if not r.ok:\n            return PaymentStatus(None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_line": "        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `payment_hash` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/wallets/clightning.py",
    "target_filename": "lnbits/wallets/clightning.py",
    "source_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484^",
    "target_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "predictions": [
      "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None"
    ],
    "correct": false,
    "top_five": {
      "0": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "1": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "2": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "3": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "4": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \"\"\"\n",
    "warning_line": "class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `viewsets` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 7,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cyverse/atmosphere",
    "source_filename": "api/v2/views/platform_type.py",
    "target_filename": "api/v2/views/platform_type.py",
    "source_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470^",
    "target_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "predictions": [
      "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthViewSet): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthViewSet): \"\"\"",
      "1": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "2": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "3": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.serializers class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "4": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        return self is other or (\n            isintance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "target_code": "        return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "warning_line": "            isintance(other, GraphQLScalarTypeExtension)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `isintance` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 166,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tartiflette/tartiflette",
    "source_filename": "tartiflette/types/scalar.py",
    "target_filename": "tartiflette/types/scalar.py",
    "source_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc^",
    "target_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc",
    "predictions": [
      "return self is other or ( isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives"
    ],
    "correct": true,
    "top_five": {
      "0": "return self is other or ( isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "1": "return self is other or ( _isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "2": "return self is other or ( else.instance(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "3": "return self is other or ( GraphQLScalarTypeExtension.isInstance(other) and other.directives == self.directives",
      "4": "return self is other or ( other.instance(GraphQLScalarTypeExtension) and other.directives == self.directives"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_line": "    _valid_ingestibles = set(xrange(10, 14))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 384,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "target_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14)))"
    ],
    "correct": false,
    "top_five": {
      "0": "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14)))",
      "1": "_example_code = u'F' _valid_ingestibles = set(list(xrange(10, 14)))",
      "2": "_example_code = u'F' _valid_ingestibles = set(sql.xrange(10, 14))",
      "3": "_example_code = u'F' _valid_ingestibles = set(six.range(10, 14))",
      "4": "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14, )))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "target_code": "                else:\n                    def joiner(left: MatrixTable):\n                        return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_line": "                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1637,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "hail/python/hail/table.py",
    "target_filename": "hail/python/hail/table.py",
    "source_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629^",
    "target_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "predictions": [
      "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),"
    ],
    "correct": false,
    "top_five": {
      "0": "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "1": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "2": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, left._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "3": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid )) ast = Join(GetField(TopLevelReference('va'), uid),",
      "4": "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( left._mir, right._tir, uid) ) ast = Join(GetField(TopLevelReference('va'), uid),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n\nelse:\n    raise Error(\"Unknown platform\")\n\n",
    "target_code": "elif platform_system == \"Windows\":\n    raise NotImplementedError(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")\n\n",
    "warning_line": "    raise Error(\"Windows not supported\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Error` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 68,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "streamlit/streamlit",
    "source_filename": "examples/run_on_save.py",
    "target_filename": "examples/run_on_save.py",
    "source_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15^",
    "target_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "predictions": [
      "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")"
    ],
    "correct": false,
    "top_five": {
      "0": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "1": "elif platform_system == \"Windows\": raise new Error(\"Windows not supported\") else: raise new Error(\"Unknown platform\")",
      "2": "elif platform_system == \"Windows\": raise _Error(\"Windows not supported\") else: raise _Error(\"Unknown platform\")",
      "3": "elif platform_system == \"Windows\": raise err(\"Windows not supported\") else: raise err(\"Unknown platform\")",
      "4": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") or \"Unknown platform\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)\n",
    "target_code": "\n@typecheck(structs=oneof(expr_array),\n           identifier=str)\n",
    "warning_line": "@typecheck(structs=oneof(expr_array, listof(Struct)),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `listof` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 649,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "python/hail/expr/functions.py",
    "target_filename": "python/hail/expr/functions.py",
    "source_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5^",
    "target_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5",
    "predictions": [
      "@typecheck(structs=oneof(expr_array), identifier=str)"
    ],
    "correct": true,
    "top_five": {
      "0": "@typecheck(structs=oneof(expr_array), identifier=str)",
      "1": "@typecheck(structs=str, identifier=str)",
      "2": "@typecheck(structs=expr_array, args=args, identifier=str)",
      "3": "@typecheck(structs=expr_array, args=Struct), identifier=str)",
      "4": "@typecheck(expr_array, str), identifier=str)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')\n",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 88,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/surfactant/square.py",
    "target_filename": "examples/levelSet/surfactant/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "surfactantViewer.plot() print surfactantVariable input('finished')"
    ],
    "correct": false,
    "top_five": {
      "0": "surfactantViewer.plot() print surfactantVariable input('finished')",
      "1": "surfactantViewer.plot() input('finished')",
      "2": "surfactantViewer.plot() press surfactantVariable input('finished')",
      "3": "surfactantViewer.plot() output('finished')",
      "4": "surfactantViewer.plot() return input('finished')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = xrange(8)\n\n",
    "target_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = range(8)\n\n",
    "warning_line": "_UPDATE = xrange(8)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 296,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/basher/frames.py",
    "target_filename": "Mopy/bash/basher/frames.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = range(8)"
    ],
    "correct": false,
    "top_five": {
      "0": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = range(8)",
      "1": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange(8))",
      "2": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange8)",
      "3": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange)",
      "4": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = 8"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def get_label(cls) -> str:\n        return self.__name__  #\u00a0default label is the class name\n\n",
    "target_code": "    def get_label(cls) -> str:\n        return cls.__name__  # default label is the class name\n\n",
    "warning_line": "        return self.__name__  #\u00a0default label is the class name",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algoo/preview-generator",
    "source_filename": "preview_generator/preview/generic_preview.py",
    "target_filename": "preview_generator/preview/generic_preview.py",
    "source_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2^",
    "target_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "predictions": [
      "def get_label(cls) -> str: return self.__name__ # default label is the class name"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_label(cls) -> str: return self.__name__ # default label is the class name",
      "1": "def get_label(cls) -> str: self.__name__ = self.__name__ # default label is the class name",
      "2": "def get_label(cls) -> str: assert self.__name__ is not None # default label is the class name",
      "3": "def get_label(cls) -> str: self.__name__ is not None # default label is the class name",
      "4": "def get_label(cls) -> str: self.__name__ = self.__name__ default label is the class name"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    raw_input(\"finished\")\n",
    "target_code": "\n    input(\"finished\")\n",
    "warning_line": "    raw_input(\"finished\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 136,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "target_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "input(\"finished\")"
    ],
    "correct": true,
    "top_five": {
      "0": "input(\"finished\")",
      "1": "input(\"finished\") if input(\"required\"): input(\"required\")",
      "2": "input(\"finished\") if input(\"required\") return input(\"required\")",
      "3": "input(\"finished\") if input(\"required\") return input(\"required\");",
      "4": "input(\"finished\") if input(\"required\") return input(\"required\""
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \n\tself.conf = Config()\n\n",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_line": "\tself.conf = Config()",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "naparuba/shinken",
    "source_filename": "shinken/scheduler.py",
    "target_filename": "shinken/scheduler.py",
    "source_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54^",
    "target_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "predictions": [
      "self.conf = Config()"
    ],
    "correct": true,
    "top_five": {
      "0": "self.conf = Config()",
      "1": "exports.conf = Config()",
      "2": "config = Config()",
      "3": "conf = Config()",
      "4": "self.config = Config()"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,\n",
    "target_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_line": "                                  obs: Union[Tensor, Cens],",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Cens` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 172,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "strongio/torch-kalman",
    "source_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "target_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca^",
    "target_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "predictions": [
      "def _log_prob_with_subsetting(self, obs: Union[Tensor], group_idx: Selector,"
    ],
    "correct": false,
    "top_five": {
      "0": "def _log_prob_with_subsetting(self, obs: Union[Tensor], group_idx: Selector,",
      "1": "def _log_prob_with_subsetting(self, obs: Union[Censor], group_idx: Selector,",
      "2": "def _log_prob_with_subsetting(self, obs: Optional[Union[Tensor], Cens], group_idx: Selector,",
      "3": "def _log_prob_with_subsetting(self, obs: Union[Tensor, List[Cens]], group_idx: Selector,",
      "4": "def _log_prob_with_subsetting(self, obs, group_idx: Selector,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )\n",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_line": "        ('product', unicode),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mozilla-services/socorro",
    "source_filename": "webapp-django/crashstats/crashstats/models.py",
    "target_filename": "webapp-django/crashstats/crashstats/models.py",
    "source_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084^",
    "target_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "predictions": [
      "required_params = ( ('product', lib, ('version', lib), )"
    ],
    "correct": false,
    "top_five": {
      "0": "required_params = ( ('product', lib, ('version', lib), )",
      "1": "required_params = ( ('product', lib_unicode), ('version', lib_unicode), )",
      "2": "required_params = ( ('product', type, ('version', type), )",
      "3": "required_params = ( ('product', cb, ('version', cb), )",
      "4": "required_params = ( ('product', lib, ('version', lib, ), )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)\n\n",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_line": "        return StarType(type, line)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `line` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/parsetype.py",
    "target_filename": "mypy/parsetype.py",
    "source_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7^",
    "target_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "predictions": [
      "type = self.parse_type() return StarType(type, str)"
    ],
    "correct": false,
    "top_five": {
      "0": "type = self.parse_type() return StarType(type, str)",
      "1": "type = self.parse_type() return startype(type, str)",
      "2": "type = self.parse_type() return StarType(type, type[0], line[1])",
      "3": "type = self.parse_type() return self.type(type, str)",
      "4": "type = self.parse_type() return StarType(type, type.length)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_line": "    F5_DEVICE_TYPE: {",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "networktocode/pyntc",
    "source_filename": "pyntc/devices/__init__.py",
    "target_filename": "pyntc/devices/__init__.py",
    "source_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9^",
    "target_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "predictions": [
      "}, F5_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,"
    ],
    "correct": false,
    "top_five": {
      "0": "}, F5_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "1": "}, DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "2": "}, F5_DEVICE_TYPE: [] DEVICE_CLASS_KEY: F5Device,",
      "3": "}, DIVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "4": "}, DESCRIPTION_TYPE: { DEVICE_CLASS_KEY: F5Device,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DisnakeDev/disnake",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "__slots__ = BaseUser.__slots__ + ('__weakref__',)"
    ],
    "correct": true,
    "top_five": {
      "0": "__slots__ = BaseUser.__slots__ + ('__weakref__',)",
      "1": "\"\"\" __slots__ = BaseUser.__slots__ + { ('__weakref__',)",
      "2": "BaseUser.__slots__ = BaseUser.__slots__ + ('__weakref__',)",
      "3": "\"\"\" __slots__ = BaseUser.__slots__ + } ('__weakref__',)",
      "4": "'__weakref__' = BaseUser.__slots__ + { ('__weakref__',)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def get_node_type(self) -> Optional[str]:\n        return 'IpAddress'\n",
    "target_code": "\n    def get_node_type(self) -> str:\n        return 'IpAddress'\n",
    "warning_line": "    def get_node_type(self) -> Optional[str]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `grapl_analyzerlib.nodes.ip_address_node.IpAddressView.get_node_type` overrides method defined in `DynamicNodeView` inconsistently. Returned type `typing.Optional[str]` is not a subtype of the overridden return `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 125,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "grapl-security/grapl",
    "source_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "target_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "source_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551^",
    "target_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551",
    "predictions": [
      "def get_node_type(self) -> str: return 'IpAddress'"
    ],
    "correct": true,
    "top_five": {
      "0": "def get_node_type(self) -> str: return 'IpAddress'",
      "1": "def get_node_type(self, ip_address_node.IpAddress) -> str: return 'IpAddress'",
      "2": "def get_node_type(self, ip_address_node.IpAddressView) -> str: return 'IpAddress'",
      "3": "def get_node_type(self) -> ip_address: return 'IpAddress'",
      "4": "def get_node_type(self): return 'IpAddress'"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n\n",
    "target_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        return None\n\n",
    "warning_line": "    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 105,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ciphey/Ciphey",
    "source_filename": "ciphey/basemods/Crackers/hash.py",
    "target_filename": "ciphey/basemods/Crackers/hash.py",
    "source_changeid": "5544e945c591d063a2541fd40991c1f81b729575^",
    "target_changeid": "5544e945c591d063a2541fd40991c1f81b729575",
    "predictions": [
      "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass()"
    ],
    "correct": false,
    "top_five": {
      "0": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass()",
      "1": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() -> Optional[Dict[str, Dict[str, Any]]]",
      "2": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "3": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "4": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return true"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nextcord/nextcord",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "__slots__ = BaseUser.__slots__ + ('__weakref__',)"
    ],
    "correct": true,
    "top_five": {
      "0": "__slots__ = BaseUser.__slots__ + ('__weakref__',)",
      "1": "\"\"\" __slots__ = BaseUser.__slots__ + { ('__weakref__',)",
      "2": "BaseUser.__slots__ = BaseUser.__slots__ + ('__weakref__',)",
      "3": "\"\"\" __slots__ = BaseUser.__slots__ + } ('__weakref__',)",
      "4": "'__weakref__' = BaseUser.__slots__ + { ('__weakref__',)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock}\n",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_line": "    subscription_msg_types = {commands.NewBlock}",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 6,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/trinity",
    "source_filename": "trinity/protocol/eth/monitors.py",
    "target_filename": "trinity/protocol/eth/monitors.py",
    "source_changeid": "ad61361109f7df88eb807a543191d491e76eed0c^",
    "target_changeid": "ad61361109f7df88eb807a543191d491e76eed0c",
    "predictions": [
      "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set( { commands.NewBlock } )"
    ],
    "correct": false,
    "top_five": {
      "0": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set( { commands.NewBlock } )",
      "1": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock }",
      "2": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set()",
      "3": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.Set }",
      "4": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = Set( { commands.NewBlock } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
    "target_code": "\n    def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        if not self.parallel:\n",
    "warning_line": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allenact",
    "source_filename": "rl_habitat/habitat_preprocessors.py",
    "target_filename": "rl_habitat/habitat_preprocessors.py",
    "source_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c^",
    "target_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "predictions": [
      "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:"
    ],
    "correct": false,
    "top_five": {
      "0": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "1": "def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]: if not self.parallel:",
      "2": "def to(self, device: torch.device) -> ResnetPreProcessorThor: if not self.parallel:",
      "3": "def to(self, device: torch.device) -> 'ResnetPreProcessorThor': if not self.parallel:",
      "4": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\": if not self.parallel:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: str = None,\n    ):\n",
    "target_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):\n",
    "warning_line": "        method_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " method_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 605,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):"
    ],
    "correct": true,
    "top_five": {
      "0": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "1": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ) -> None:",
      "2": "capture_error: Optional[Union[bool, str]]: Optional[str] = None, method_name: Optional[str] = None, ):",
      "3": "captured_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "4": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[Str] = None, ):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        usertags: list = [],\n        configure_timeout: str = 10,\n    ) -> dict:\n",
    "target_code": "        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:\n",
    "warning_line": "        configure_timeout: str = 10,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " configure_timeout is declared to have type `str` but is used as type `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "adw0rd/instagrapi",
    "source_filename": "instagrapi/igtv.py",
    "target_filename": "instagrapi/igtv.py",
    "source_changeid": "0344324a593097604ea701186dc17afb977245f0^",
    "target_changeid": "0344324a593097604ea701186dc17afb977245f0",
    "predictions": [
      "usertags: list = [], configure_timeout: int = 10, ) -> dict:"
    ],
    "correct": true,
    "top_five": {
      "0": "usertags: list = [], configure_timeout: int = 10, ) -> dict:",
      "1": "usertags: list = [], configure_timeout: typing.Optional[str] = 10, ) -> dict:",
      "2": "usertags: list = [], configure_timeout: option[str] = 10, ) -> dict:",
      "3": "usertags: list = [], configure_timeout: int = 10 ) -> dict:",
      "4": "usertags: list = [], configure_timeout: str = 10, ) -> dict:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = None,\n    ) -> None:\n",
    "target_code": "        should_archive: bool = True,\n        extra_data: Optional[Dict] = None,\n        dispatch_to: Optional[List[str]] = None,\n    ) -> None:\n",
    "warning_line": "        dispatch_to: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dispatch_to is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 30,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PUNCH-Cyber/stoq",
    "source_filename": "stoq/data_classes.py",
    "target_filename": "stoq/data_classes.py",
    "source_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c^",
    "target_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c",
    "predictions": [
      "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:"
    ],
    "correct": true,
    "top_five": {
      "0": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "1": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ), ) -> None:",
      "2": "should_archive: bool = True, extra_data = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "3": "should_archive: bool = True, extra_data: Dict, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "4": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None,...) -> None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n    \"\"\"Initiates Flask web service with Alexa skill.\n\n",
    "target_code": "                     https: bool = False,\n                     ssl_key: Optional[str] = None,\n                     ssl_cert: Optional[str] = None) -> None:\n    \"\"\"Initiates FastAPI web service with Alexa skill.\n\n",
    "warning_line": "                     ssl_cert: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " ssl_cert is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 89,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/utils/alexa/server.py",
    "target_filename": "deeppavlov/utils/alexa/server.py",
    "source_changeid": "0f32759c67ea961737a6538fd37426f564bae925^",
    "target_changeid": "0f32759c67ea961737a6538fd37426f564bae925",
    "predictions": [
      "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Flask web service with Alexa skill."
    ],
    "correct": false,
    "top_five": {
      "0": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.",
      "1": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates web service with Alexa skill.",
      "2": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates WebService with Alexa skill.",
      "3": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the web service with Alexa skill.",
      "4": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates a web service with Alexa skill."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def message(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 332,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "1": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "2": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)=",
      "3": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "4": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
    "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
    "warning_line": "        labels: typing.Iterable[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 476,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):"
    ],
    "correct": true,
    "top_five": {
      "0": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "1": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, ):",
      "2": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ) -> None:",
      "3": "choices: typing.Iterable, labels: typing.Optional[ typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "4": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: str = None ):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "target_code": "\ndef message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_line": "def notice(target: str, message: str, tags: dict=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':"
    ],
    "correct": true,
    "top_five": {
      "0": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "1": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "2": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine':",
      "3": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= } } ) -> 'utils.irc.IRCParsedLine':",
      "4": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine':"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_line": "                                       immutable_features: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 677,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SeldonIO/alibi",
    "source_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "target_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60^",
    "target_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "predictions": [
      "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:"
    ],
    "correct": true,
    "top_five": {
      "0": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "1": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, divers=False) -> List[np.ndarray]:",
      "2": "category_map: Dict[int, List[str]], immutable_features: List[str] = [], diverse=False) -> List[np.ndarray]:",
      "3": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversity=False) -> List[np.ndarray]:",
      "4": "category_map: Dict[int, List[str]], immutable_features: List[str] = (), diverse=False) -> List[np.ndarray]:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value\n\n",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_line": "            value = str(value)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 211,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/job/query.py",
    "target_filename": "google/cloud/bigquery/job/query.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value"
    ],
    "correct": false,
    "top_five": {
      "0": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "1": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "2": "def statement_byte_budget(self, value: Union[int, None]): if value is None: str(value) self._properties[\"statementByteBudget\"] = value",
      "3": "def statement_byte_budget(self, value: Union[int, None]): value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "4": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_bytes = str(value) self._properties[\"statementByteBudget\"] = value"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def filter(self, predicate: Predicate = None) -> t.List[T]:\n        \"\"\"\n",
    "target_code": "\n    def filter(self, predicate: Predicate) -> t.List[T]:\n        \"\"\"\n",
    "warning_line": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pcah/python-clean-architecture",
    "source_filename": "dharma/domain/repos/in_memory.py",
    "target_filename": "dharma/domain/repos/in_memory.py",
    "source_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e^",
    "target_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "predictions": [
      "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \"\"\"",
      "1": "def filter(self, predicate: Predicate) -> t.List[T]: \"\"\"",
      "2": "def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \"\"\"",
      "3": "def filter( self, predicate: Optional[Predicate] = None ) -> t.List[T]: \"\"\"",
      "4": "def filter(self, predicate: Optional[PrettyPrint] = None) -> t.List[T]: \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2315,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\","
    ],
    "correct": true,
    "top_five": {
      "0": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "1": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "2": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "3": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "4": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\","
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
    "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
    "warning_line": "                tmpdir_lock=None  # type: threading.Lock",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/command_line_tool.py",
    "target_filename": "cwltool/command_line_tool.py",
    "source_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c^",
    "target_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "predictions": [
      "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None"
    ],
    "correct": true,
    "top_five": {
      "0": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "1": "runtimeContext, # type: RuntimeContext, tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "2": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ) -> None",
      "3": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[Threading.Lock] ): # type: (...) -> None",
      "4": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Alternative[threading.Lock] ): # type: (...) -> None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )\n",
    "target_code": "        \"\"\"\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_line": "        string = _fmt(string)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " string is declared to have type `str` but is used as type `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 312,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libtcod/python-tcod",
    "source_filename": "tcod/console.py",
    "target_filename": "tcod/console.py",
    "source_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9^",
    "target_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "predictions": [
      "\"\"\" bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "1": "\"\"\" string_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string_bytes )",
      "2": "\"\"\" str = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, str )",
      "3": "\"\"\" string_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "4": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
    "target_code": "    if type_type == SCALAR:\n        result_type = sub_type\n    elif type_type == ARRAY:\n        result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
    "warning_line": "        type_ = query.ArrayQueryParameterType(sub_type, name=name)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "target_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:"
    ],
    "correct": false,
    "top_five": {
      "0": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "1": "if type_type == SCALAR: _type_ = sub_type elif type_type == ARRAY: _type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "2": "if type_type == SCALAR: elif type_type == ARRAY: elif type_type == STRUCT:",
      "3": "if type_type == SCALAR: elif type_type == ARRAY: query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "4": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query[query.ArrayQueryParameterType(sub_type, name=name)] elif type_type == STRUCT:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_line": "            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 342,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "gitpython-developers/GitPython",
    "source_filename": "git/objects/submodule/base.py",
    "target_filename": "git/objects/submodule/base.py",
    "source_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f^",
    "target_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "predictions": [
      "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':"
    ],
    "correct": false,
    "top_five": {
      "0": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "1": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "2": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "3": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "4": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true
    }
  },
  {
    "source_code": "        key: str = \"\",\n        algorithms: List[str] = None,\n        options: Dict = None,\n        **kwargs,\n",
    "target_code": "        key: str = \"\",\n        algorithms: Optional[List[str]] = None,\n        options: Optional[Dict] = None,\n        **kwargs,\n",
    "warning_line": "        algorithms: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " algorithms is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 135,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jpadilla/pyjwt",
    "source_filename": "jwt/api_jws.py",
    "target_filename": "jwt/api_jws.py",
    "source_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235^",
    "target_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235",
    "predictions": [
      "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,"
    ],
    "correct": true,
    "top_five": {
      "0": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "1": "key: str = '', algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "2": "key: str = \"\", algorithm: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "3": "key: str = \"\", algorithms: Optional[list[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "4": "key: str = \"\", algorithms: Optional[List[str], Optional[Dict]] = None, **kwargs,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, comparable, *, error: str = None):\n        self.comparable = comparable\n",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        self.comparable = comparable\n",
    "warning_line": "    def __init__(self, comparable, *, error: str = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 339,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "def __init__(self, comparable, *, error: typing.Optional[str] = None): self.comparable = comparable"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, comparable, *, error: typing.Optional[str] = None): self.comparable = comparable",
      "1": "def __init__(self, comparable: Optional[str] = None, *, error: Optional[str] = None): self.comparable = comparable",
      "2": "def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: self.comparable = comparable",
      "3": "def __init__(self, comparable: str, *: error: Optional[str] = None): self.comparable = comparable",
      "4": "def __init__(self, comparable: str ): self.comparable = comparable"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        self.db_user = db_user\n",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        self.db_user = db_user\n",
    "warning_line": "    def __init__(self, db_user, instance=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tribe29/checkmk",
    "source_filename": "agents/plugins/mk_postgres.py",
    "target_filename": "agents/plugins/mk_postgres.py",
    "source_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1^",
    "target_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "predictions": [
      "def __init__(self, db_user, instance=None): # type: (str, Optional[Dict]) -> None self.db_user = db_user"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, db_user, instance=None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "1": "def __init__(self, db_user, instance=None): # type: (str, Dict) -> None self.db_user = db_user",
      "2": "def __init__(self, db_user): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "3": "def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "4": "def __init__(self, db_user, instance=None): # type: Optional[str, Dict] -> None self.db_user = db_user"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        loop = loop or asyncio.get_event_loop()\n",
    "target_code": "\n    def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
    "warning_line": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 137,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fscdev/vkwave",
    "source_filename": "vkwave/bots/easy/easy_bot.py",
    "target_filename": "vkwave/bots/easy/easy_bot.py",
    "source_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc^",
    "target_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "predictions": [
      "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()"
    ],
    "correct": false,
    "top_five": {
      "0": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()",
      "1": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: loop = loop or asyncio.get_event_loop()",
      "2": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop(): loop = loop or asyncio.get_event_loop()",
      "3": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop() loop = loop or asyncio.get_event_loop()",
      "4": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop() loop = loop or asyncio.get_event_loop()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:\n",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_line": "        timestamp: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 207,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "open-telemetry/opentelemetry-python",
    "source_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "target_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226^",
    "target_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "predictions": [
      "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ) -> None:",
      "1": "attributes: types.Attributes = None, timestamp: Optional[int] = None, ) -> None:",
      "2": "attributes: types[Attributes] = None, timestamp: typing.Optional[int] = None, ) -> None:",
      "3": "attributes: types.Attributes = None, timestamps: typing.Optional[int] = None, ) -> None:",
      "4": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, () -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]\n\n",
    "target_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_line": "  supported_featurizers = ['ElementPropertyFingerprint'",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 161,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepchem/deepchem",
    "source_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "target_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b^",
    "target_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "predictions": [
      "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str]"
    ],
    "correct": true,
    "top_five": {
      "0": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str]",
      "1": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[str]",
      "2": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "3": "# First type of supported featurizers supported_featurizers_list = ['ElementPropertyFingerprint' ] # type: List[str]",
      "4": "# First type of supported featurizers supported_featurizers_ = ['ElementPropertyFingerprint' ] # type: List[str]"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            if self is Bot:\n                Bot = new\n",
    "target_code": "            if self is Bot:\n                assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_line": "                Bot = new",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " Bot is declared to have type `BotUser` but is used as type `User`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "if self is Bot: new_Bot = new_Bot()"
    ],
    "correct": false,
    "top_five": {
      "0": "if self is Bot: new_Bot = new_Bot()",
      "1": "if self is Bot: new_Bot = new_Bot",
      "2": "if self is Bot: BotUser = new",
      "3": "if self is Bot: BotUser = new Type()",
      "4": "if self is Bot: User = new Bot()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_line": "        error: Exception = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `Exception` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 658,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86^",
    "target_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "predictions": [
      "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "1": "self, method_name: str, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "2": "self, method_name: str = None, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "3": "self, method_name: str = None, error: Optional[Exception] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "4": "self, method_name: str, error: Optional[Exception] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n        details = details.split(\", \")\n\n",
    "target_code": "\n        split_details = details.split(\", \")\n\n",
    "warning_line": "        details = details.split(\", \")",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " details is declared to have type `str` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 229,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hsahovic/poke-env",
    "source_filename": "src/poke_env/environment/pokemon.py",
    "target_filename": "src/poke_env/environment/pokemon.py",
    "source_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7^",
    "target_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "predictions": [
      "details = lists.split(\", \")"
    ],
    "correct": false,
    "top_five": {
      "0": "details = lists.split(\", \")",
      "1": "details = details.split(\", \")",
      "2": "details = details.split((\", \"))",
      "3": "details = details.split(\"\")",
      "4": "details = details.split(\", \"\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,  # type: int\n    max_size=None,  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,  # type: None\n    max_size=None,  # type: int\n",
    "warning_line": "    average_size=None,  # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 705,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int average_size=None, # type: None max_size=None, # type: int"
    ],
    "correct": true,
    "top_five": {
      "0": "min_size=0, # type: int average_size=None, # type: None max_size=None, # type: int",
      "1": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None, # type: int",
      "2": "min_size=0, # type: None average_size=None, # type: None max_size=None, # type: int",
      "3": "min_size=0, # type: Optional[int] average_size=None, # type: Optional[int] max_size=None, # type: int",
      "4": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None, # type: int"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: str = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
    "target_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
    "warning_line": "        datefmt: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " datefmt is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 63,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/logging/formatter.py",
    "target_filename": "aws_lambda_powertools/logging/formatter.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,"
    ],
    "correct": true,
    "top_five": {
      "0": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "1": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_order: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "2": "json_default: Optional[Callable[[Any], Any]] = None, datefmt = Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "3": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str], None] = None, utc: bool = False,",
      "4": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
    "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
    "warning_line": "        channel_index: int = Deprecated,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 72,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/estimators/classification/keras.py",
    "target_filename": "art/estimators/classification/keras.py",
    "source_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c^",
    "target_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "predictions": [
      "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,"
    ],
    "correct": true,
    "top_five": {
      "0": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "1": "use_logits: bool = False, channel_indices: Art.utils._Deprecated, channels_first: bool = False,",
      "2": "use_logits: bool = False, channel_indices: Deprecated, channels_first: bool = False,",
      "3": "use_logits: bool = False, channel_index = Deprecated, channels_first: bool = False,",
      "4": "use_logits: bool = False, channel_first: bool = False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def rjust(self, width, fillchar=None):\n        # type: (int, Text) -> FmtStr\n        \"\"\"S.rjust(width[, fillchar]) -> string\n",
    "target_code": "\n    def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr:\n        \"\"\"S.rjust(width[, fillchar]) -> string\n",
    "warning_line": "    def rjust(self, width, fillchar=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fillchar is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 513,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bpython/curtsies",
    "source_filename": "curtsies/formatstring.py",
    "target_filename": "curtsies/formatstring.py",
    "source_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413^",
    "target_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413",
    "predictions": [
      "def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string"
    ],
    "correct": true,
    "top_five": {
      "0": "def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "1": "def rjust(self, width, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "2": "def rjust(self, width: int, fillchar: Optional[str]=None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "3": "def rjust(self, width: int, fillchar: Optional[str]=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "4": "def rjust(self, width, fillchar=None): # type: (int, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None\n) -> str:\n",
    "target_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
    "warning_line": "    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exclude is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 108,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/cli/info.py",
    "target_filename": "spacy/cli/info.py",
    "source_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979^",
    "target_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979",
    "predictions": [
      "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:"
    ],
    "correct": true,
    "top_five": {
      "0": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "1": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "2": "def get_markdown( data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "3": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[list[str]] = None ) -> str:",
      "4": "def get_markdown( data: Dict[str, Any], title: Optional[str] = \"\", exclude: Optional[str] = \"\") -> str:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "target_code": "\ndef batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_line": "def batch_start(identifier: str, batch_type: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 84,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],"
    ],
    "correct": false,
    "top_five": {
      "0": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "1": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "2": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "3": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "4": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)\n",
    "target_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
    "warning_line": "    def add(self, verb: str, func: Callable, privilege: str=None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " privilege is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "1": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "2": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "3": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "4": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef unpack_model(model_file: Text, working_directory: Text = None,\n                 subdirectories: bool = False\n",
    "target_code": "\ndef unpack_model(model_file: Text, working_directory: Optional[Text] = None,\n                 subdirectories: bool = False\n",
    "warning_line": "def unpack_model(model_file: Text, working_directory: Text = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " working_directory is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/model.py",
    "target_filename": "rasa/model.py",
    "source_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7^",
    "target_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7",
    "predictions": [
      "def unpack_model(model_file: Text, working_directory: Optional[Text] = None, subdirectories: bool = False"
    ],
    "correct": true,
    "top_five": {
      "0": "def unpack_model(model_file: Text, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "1": "def unpack_model(model_file: Text, working_directory: Text, subdirectories: bool = False",
      "2": "def unpack_model(model_file: Text, working_directory: Union[Text, None] = None, subdirectories: bool = False",
      "3": "def unpack_model(model_file: Text, working_directory: Options.Text = None, subdirectories: bool = False",
      "4": "def unpack_model(model_file: Text, working_directory: Options[Text] = None, subdirectories: bool = False"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef translateAlgebra(query_algebra: Query = None):\n    \"\"\"\n",
    "target_code": "\ndef translateAlgebra(query_algebra: Query):\n    \"\"\"\n",
    "warning_line": "def translateAlgebra(query_algebra: Query = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " query_algebra is declared to have type `Query` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 804,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RDFLib/rdflib",
    "source_filename": "rdflib/plugins/sparql/algebra.py",
    "target_filename": "rdflib/plugins/sparql/algebra.py",
    "source_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c^",
    "target_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "predictions": [
      "def translateAlgebra(query_algebra: Optional[Query] = None): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def translateAlgebra(query_algebra: Optional[Query] = None): \"\"\"",
      "1": "def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \"\"\"",
      "2": "def translateAlgebra(query_algebra): \"\"\"",
      "3": "def translateAlgebra(query_algebra: Optional[Query_algebra] = None): \"\"\"",
      "4": "def translateAlgebra(query_algebra, Optional[Query] = None): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_line": "        checkpointer: Lazy[Checkpointer] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/training/trainer.py",
    "target_filename": "allennlp/training/trainer.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] ="
    ],
    "correct": false,
    "top_five": {
      "0": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "1": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "2": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback",
      "3": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCall",
      "4": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callback: List[BatchCallback] ="
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,\n",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_line": "        extras: bool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " extras is declared to have type `bool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 46,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trailofbits/pip-audit",
    "source_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "target_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c^",
    "target_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "predictions": [
      "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,"
    ],
    "correct": false,
    "top_five": {
      "0": "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "1": "version: Version, url: Optional[str] = None extras: Optional[bool] = None, is_wheel: bool = True,",
      "2": "version: Version, url: Optional[str] = None, extras: bool = False, is_wheel: bool = True,",
      "3": "version: Version, url: Optional[str], extras: Optional[bool] = None, is_wheel: bool = True,",
      "4": "version: Version, url: Optional[str] = None, extras, is_wheel: bool = True,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
    "target_code": "    count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_line": "    seconds %= amount",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " seconds is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 416,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count"
    ],
    "correct": false,
    "top_five": {
      "0": "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "1": "count = int(seconds/amount) seconds %= amount time_comp[label.strip()] = count",
      "2": "count = float(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "3": "count = int(seconds / amount) seconds %= amount time_comp[label[strip()]] = count",
      "4": "count = int(seconds / amount) seconds %= amount time_comp[label[.strip()]] = count"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/api.py",
    "target_filename": "nio/api.py",
    "source_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0^",
    "target_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "predictions": [
      "homeserver = urlparse(homeserver) if urllib.parse.ParseResult else None"
    ],
    "correct": false,
    "top_five": {
      "0": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult else None",
      "1": "homeserver = urlparse(homeserver) if homeserver else None",
      "2": "self = urlparse(homeserver) if self else None",
      "3": "homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None",
      "4": "homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
    "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 93,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ReactiveX/RxPY",
    "source_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "target_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "source_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90^",
    "target_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "predictions": [
      "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, time)"
    ],
    "correct": false,
    "top_five": {
      "0": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, time)",
      "1": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "2": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime())",
      "3": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "4": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, time)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,\n",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_line": "    other_indices: dict = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAI",
    "source_filename": "monai/visualize/img2tensorboard.py",
    "target_filename": "monai/visualize/img2tensorboard.py",
    "source_changeid": "718d11abb2310ab74321256032a264488a7883b4^",
    "target_changeid": "718d11abb2310ab74321256032a264488a7883b4",
    "predictions": [
      "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,"
    ],
    "correct": false,
    "top_five": {
      "0": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "1": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "2": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Dict[str, str] = None, scale_factor: float = 1,",
      "3": "image_axes: Sequence[int] = (1, 2), other_indices: dict, scale_factor: float = 1,",
      "4": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[dict] = None, scale_factor: float = 1,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2221,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\","
    ],
    "correct": true,
    "top_five": {
      "0": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "1": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "2": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "3": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "4": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\","
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    \"\"\"\n    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):\n        \"\"\"\n",
    "target_code": "    \"\"\"\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        \"\"\"\n",
    "warning_line": "                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rec_len is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "osmocom/pysim",
    "source_filename": "pySim/filesystem.py",
    "target_filename": "pySim/filesystem.py",
    "source_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5^",
    "target_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "predictions": [
      "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "1": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "2": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ): \"\"\"",
      "3": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ): \"\"\"",
      "4": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 659,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/channel.py",
    "target_filename": "aiormq/channel.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, destination: str = '', source: str = '', routing_key: str = '', *,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "1": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "2": "self, destination: str = \"\", source: str = \"\", routing_key: str = \"\", *,",
      "3": "self, destination: str = '', source: str = '', routing_key: str = '' *,",
      "4": "self, destination: str = '', source: str = '', routing_key: str = \"'\", *,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):\n",
    "target_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_line": "        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " kwarg2 is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebook/TestSlide",
    "source_filename": "tests/mock_callable_testslide.py",
    "target_filename": "tests/mock_callable_testslide.py",
    "source_changeid": "97c39d89c2a047a3396be659645bd89dab01d859^",
    "target_changeid": "97c39d89c2a047a3396be659645bd89dab01d859",
    "predictions": [
      "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):"
    ],
    "correct": true,
    "top_five": {
      "0": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "1": "async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "2": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \" ):",
      "3": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' ):",
      "4": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               symbol_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " symbol_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "1": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "2": "def object(self, symbol_name: str, type_name: Optional[str] = None, offset: int = None,",
      "3": "def object(self, symbol_name: typing.Optional[str] = None, type_name: typing.Optional[str] = None, offset: int = None,",
      "4": "def object(self, symbol_name: str = '', type_name: str = '', offset: int = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def start(self, caller_frame: types.FrameType = None):\n        \"\"\"\n",
    "target_code": "\n    def start(self, caller_frame: types.FrameType | None = None):\n        \"\"\"\n",
    "warning_line": "    def start(self, caller_frame: types.FrameType = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 101,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "joerick/pyinstrument",
    "source_filename": "pyinstrument/profiler.py",
    "target_filename": "pyinstrument/profiler.py",
    "source_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919^",
    "target_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "predictions": [
      "def start(self, caller_frame: types.FrameType): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def start(self, caller_frame: types.FrameType): \"\"\"",
      "1": "def start(self, caller_frame: typing.Optional[types.FrameType] = None): \"\"\"",
      "2": "def start(self, caller_frame: options.FrameType): \"\"\"",
      "3": "def start(self, caller_frame: options.FrameType = None): \"\"\"",
      "4": "def start(self): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_line": "        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scrapy/scrapy",
    "source_filename": "scrapy/core/downloader/handlers/http2.py",
    "target_filename": "scrapy/core/downloader/handlers/http2.py",
    "source_changeid": "38d361792c02ae2b25323258d070c04d8906495a^",
    "target_changeid": "38d361792c02ae2b25323258d070c04d8906495a",
    "predictions": [
      "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None"
    ],
    "correct": false,
    "top_five": {
      "0": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "1": "self, context_factory, connect_timeout=10), bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "2": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool, crawler=None",
      "3": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None, crawler=None",
      "4": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool = H2ConnectionPool, crawler=None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, rf_path: str=None):\n        super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3\n",
    "target_code": "\n    def __init__(self):\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 3"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "1": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "2": "def __init__(): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "3": "def __init__(self, str=None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "4": "def __init__: super(Fonseca, self).__init__() self.number_of_variables = 3"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, {})\n",
    "target_code": "        \"\"\"\n        for style_class in reversed(style_classes):\n            style_data = self.data.get(style_class, {})\n",
    "warning_line": "        style_classes = reversed(style_classes)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/gui/ui_style.py",
    "target_filename": "arcade/gui/ui_style.py",
    "source_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b^",
    "target_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "predictions": [
      "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "1": "\"\"\" style_classes_reversed = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "2": "\"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "3": "\"\"\" style_classes = List[str] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "4": "\"\"\" style_classes_list = reversed(style_classes) for style_classes_list in style_classes: style_data = self.data.get(style_class, { } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:\n",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_line": "        announcements_to_consume: Set[Announcement] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 387,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Chia-Network/chia-blockchain",
    "source_filename": "chia/wallet/wallet.py",
    "target_filename": "chia/wallet/wallet.py",
    "source_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13^",
    "target_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "predictions": [
      "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:"
    ],
    "correct": false,
    "top_five": {
      "0": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "1": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annunciment]] = None, ) -> TransactionRecord:",
      "2": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ), ) -> TransactionRecord:",
      "3": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annotations]] = None, ) -> TransactionRecord:",
      "4": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ), -> TransactionRecord:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def notice(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 334,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "1": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "2": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "3": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "4": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_line": "        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1140,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hikari-py/hikari",
    "source_filename": "hikari/orm/http/base_http_adapter.py",
    "target_filename": "hikari/orm/http/base_http_adapter.py",
    "source_changeid": "cf143052e1228280ed895c06da9177611d8ea088^",
    "target_changeid": "cf143052e1228280ed895c06da9177611d8ea088",
    "predictions": [
      "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,"
    ],
    "correct": false,
    "top_five": {
      "0": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "1": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "2": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNITED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "3": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[int, str] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "4": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFEXED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 208,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, destination: str = '', source: str = '', routing_key: str = '', *,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "1": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "2": "self, destination: str = \"\", source: str = \"\", routing_key: str = \"\", *,",
      "3": "self, destination: str = '', source: str = '', routing_key: str = '' *,",
      "4": "self, destination: str = '', source: str = '', routing_key: str = \"'\", *,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        room_creator: str = None,\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
    "target_code": "        self,\n        room_creator: Optional[str] = None,\n        is_public: bool = True,\n        room_version: Optional[str] = None,\n        tok: Optional[str] = None,\n        expect_code: int = 200,\n",
    "warning_line": "        room_creator: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " room_creator is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "matrix-org/synapse",
    "source_filename": "tests/rest/client/v1/utils.py",
    "target_filename": "tests/rest/client/v1/utils.py",
    "source_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945^",
    "target_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945",
    "predictions": [
      "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "1": "self, room_creator: option[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "2": "self, room_creator: str = '', is_public: bool = True, room_version: str = '', tok: str = '', expect_code: int = 200,",
      "3": "self, room_creator: str = \"\", is_public: bool = True, room_version: str = \"\", tok: str = \"\", expect_code: int = 200,",
      "4": "self, room_creator: str, is_public: bool = True, room_version: str, tok: str = \"\", expect_code: int = 200,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    y: int,\n    channel_id: str = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "target_code": "    y: int,\n    channel_id: Optional[str] = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "warning_line": "    channel_id: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_id is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theislab/squidpy",
    "source_filename": "squidpy/im/crop.py",
    "target_filename": "squidpy/im/crop.py",
    "source_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed^",
    "target_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed",
    "predictions": [
      "y: int, channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?"
    ],
    "correct": true,
    "top_five": {
      "0": "y: int, channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "1": "y: int, channel_id: Optional[str] = None, xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "2": "y: int, channel_id: Optional[str] = None, xs: int = 100: are these defaults reasonable or should no defaults be specified?",
      "3": "y: int, channel_id: Optional[str] = None, xs: optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "4": "y: int, channel_id: str = \"\", xs: int = 100: are these defaults reasonable or should no defaults be specified?"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        user_id:      str,\n        display_name: str  = None,\n        avatar_url:   str  = None,\n        power_level:  int  = 0,\n",
    "target_code": "        user_id:      str,\n        display_name: Optional[str] = None,\n        avatar_url:   Optional[str] = None,\n        power_level:  int  = 0,\n",
    "warning_line": "        display_name: str  = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " display_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 501,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/rooms.py",
    "target_filename": "nio/rooms.py",
    "source_changeid": "54370462a3691387e011912c8450ee062168198a^",
    "target_changeid": "54370462a3691387e011912c8450ee062168198a",
    "predictions": [
      "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,"
    ],
    "correct": true,
    "top_five": {
      "0": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "1": "user_id: str, display_name: str, avatar_url: str, power_level: int = 0,",
      "2": "user_id: str, display_name: option[str] = None, avatar_url: Option[str] = None, power_level: int = 0,",
      "3": "user_id: str, display_name: str = '', avatar_url: str = '', power_level: int = 0,",
      "4": "user_id: str, display_name: str = \"\", avatar_url: str = \"\", power_level: int = 0,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "target_code": "\n    def __init__(self, chat: 'Chat', *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "warning_line": "    def __init__(self, chat: 'Chat' = None, *,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " chat is declared to have type `Chat` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 243,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/ehForwarderBot",
    "source_filename": "ehforwarderbot/chat.py",
    "target_filename": "ehforwarderbot/chat.py",
    "source_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b^",
    "target_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b",
    "predictions": [
      "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "1": "def __init__( self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "2": "def __init__(self, chat: Optional['Chat'], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "3": "def __init__(self, chat: Optional['Chat'] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "4": "def __init__(self, chat: Optional['Chat'] = None, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: int = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "target_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "warning_line": "        timestamp: int = cast(float, message.timestamp)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "robinhood/faust",
    "source_filename": "faust/topics.py",
    "target_filename": "faust/topics.py",
    "source_changeid": "08e3003188557cc18bfd085315892beb1d99584c^",
    "target_changeid": "08e3003188557cc18bfd085315892beb1d99584c",
    "predictions": [
      "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)"
    ],
    "correct": true,
    "top_five": {
      "0": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "1": "value: bytes = cast(bytes, message.value) timestamps: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "2": "value: bytes = cast(bytes, message.value) timestamp: floating=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "3": "value: bytes = cast(bytes, message.value) timestamp=float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "4": "value: bytes = cast(bytes, message.value) timestamp = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def get(self, key: str, default: Optional = None) -> Any:\n        try:\n",
    "target_code": "\n    def get(self, key: str, default: Optional[Any] = None) -> Any:\n        try:\n",
    "warning_line": "    def get(self, key: str, default: Optional = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " default is declared to have type `Optional[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 119,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ducdetronquito/scalpl",
    "source_filename": "scalpl/scalpl.py",
    "target_filename": "scalpl/scalpl.py",
    "source_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216^",
    "target_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216",
    "predictions": [
      "def get(self, key: str, default: Optional[Any] = None) -> Any: try:"
    ],
    "correct": true,
    "top_five": {
      "0": "def get(self, key: str, default: Optional[Any] = None) -> Any: try:",
      "1": "def get(self, key: str, default: Optional[str] = None) -> Any: try:",
      "2": "def get(self, key: str, default: Optional[any] = None) -> Any: try:",
      "3": "def get( self, key: str, default: Optional[Any] = None ) -> Any: try:",
      "4": "def get(self, key: str, default: Optional[none] = None) -> Any: try:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        project_id: str,\n        region: str = None,\n        location: Optional[str] = None,\n",
    "target_code": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
    "warning_line": "        region: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " region is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 931,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "project_id: str, region: Optional[str] = None, location: Optional[str] = None,"
    ],
    "correct": true,
    "top_five": {
      "0": "project_id: str, region: Optional[str] = None, location: Optional[str] = None,",
      "1": "project_id: str, region: Options.Str = None, location: Optional[str] = None,",
      "2": "project_id: str, region: str, location: Optional[str] = None,",
      "3": "project_id: str, region: str, location: Optional[str] = None,",
      "4": "project_id: str, region=None, location= Optional[str] = None,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None,\n) -> Any:\n",
    "target_code": "    persistence_store: BasePersistenceLayer,\n    config: Optional[IdempotencyConfig] = None,\n) -> Any:\n",
    "warning_line": "    config: IdempotencyConfig = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " config is declared to have type `IdempotencyConfig` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "target_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Any:"
    ],
    "correct": true,
    "top_five": {
      "0": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Any:",
      "1": "persistence_store: BasePersistenceLayer, configs: Optional[IdempotencyConfig] = None, ) -> Any:",
      "2": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, () -> Any:",
      "3": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ), -> Any:",
      "4": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig, ) -> Any:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_line": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "alibaba/TinyNeuralNetwork",
    "source_filename": "tinynn/converter/operators/tflite/transformable.py",
    "target_filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1^",
    "target_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "predictions": [
      "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "1": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "2": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "3": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "4": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        exchange: str = None,\n        *,\n",
    "target_code": "        self,\n        exchange: str = '',\n        *,\n",
    "warning_line": "        exchange: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exchange is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, exchange: str = '', *,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, exchange: str = '', *,",
      "1": "self, exchange: str = \"\", *,",
      "2": "self, exchange: str, *,",
      "3": "self, exchange: Optional[str] = None, *,",
      "4": "self, exchange: str = \"\"), *,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: int = 1.0,\n                 ):\n",
    "target_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
    "warning_line": "                 noise_variance: int = 1.0,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " noise_variance is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "GPflow/GPflow",
    "source_filename": "gpflow/models/sgpr.py",
    "target_filename": "gpflow/models/sgpr.py",
    "source_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb^",
    "target_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb",
    "predictions": [
      "num_latent: Optional[int] = None, noise_variance: float = 1.0, ):"
    ],
    "correct": true,
    "top_five": {
      "0": "num_latent: Optional[int] = None, noise_variance: float = 1.0, ):",
      "1": "num_latent: Optional[int] = None, noise_variance: floating int = 1.0, ):",
      "2": "num_latent: Optional[int] = None, noise_variance: int = 1.0, ):",
      "3": "num_latent: Optional[int] = None, noise_variance = 1.0, ):",
      "4": "num_latent: Optional[int] = None, noise_variance=1.0, ):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",\n",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_line": "        organization_id: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " organization_id is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mapillary/mapillary_tools",
    "source_filename": "mapillary_tools/upload_api_v4.py",
    "target_filename": "mapillary_tools/upload_api_v4.py",
    "source_changeid": "79159001d365c75215f0c05ba3b7937180563026^",
    "target_changeid": "79159001d365c75215f0c05ba3b7937180563026",
    "predictions": [
      "entity_size: int, organization_id: Optional[int] = None, file_type: FileType = \"zip\","
    ],
    "correct": false,
    "top_five": {
      "0": "entity_size: int, organization_id: Optional[int] = None, file_type: FileType = \"zip\",",
      "1": "entity_size: int, organization_id: typing.Optional[int] = None, file_type: FileType = \"zip\",",
      "2": "entity_size: int, organization_ids: Optional[int] = None, file_type: FileType = \"zip\",",
      "3": "entity_size: int, organization_id=None, file_type: FileType = \"zip\",",
      "4": "entity_size: int, organization_id: int, file_type: FileType = \"zip\","
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_line": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/extensions/base.py",
    "target_filename": "pystac/extensions/base.py",
    "source_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752^",
    "target_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "predictions": [
      "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "1": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "2": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "3": "def _get_property(self, prop_name: str, typ: Type[Any] = Any) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "4": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "target_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " network_max_retries is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 206,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nabla-c0d3/sslyze",
    "source_filename": "sslyze/utils/ssl_connection.py",
    "target_filename": "sslyze/utils/ssl_connection.py",
    "source_changeid": "761c458b2207abc530b430e56d26bced6e4b9714^",
    "target_changeid": "761c458b2207abc530b430e56d26bced6e4b9714",
    "predictions": [
      "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout"
    ],
    "correct": true,
    "top_five": {
      "0": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "1": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "2": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int], Optional[int] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "3": "def connect(self, network_timeout=None, network_max_retries=None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "4": "def connect(self, network_timeout=None, network_max_retries=None): # type: () -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n\n",
    "target_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_line": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 309,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/federated",
    "source_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "target_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119^",
    "target_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "predictions": [
      "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))"
    ],
    "correct": false,
    "top_five": {
      "0": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "1": "_intern_pool: Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "2": "_intern_pool: Dict[Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "3": "_intern_pool: Dict[Any, Any] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "4": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_line": "    fold_method_args: Tuple[Any] = (),",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 789,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unitaryfund/mitiq",
    "source_filename": "mitiq/zne/scaling.py",
    "target_filename": "mitiq/zne/scaling.py",
    "source_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc^",
    "target_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "predictions": [
      "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,"
    ],
    "correct": false,
    "top_five": {
      "0": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "1": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "2": "scale_factor: float, fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "3": "scale_factor: float, fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "4": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Any] = (), **kwargs,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_line": "        gw: \"Gateway\" = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " gw is declared to have type `Gateway` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rytilahti/python-miio",
    "source_filename": "miio/gateway/devices/subdevice.py",
    "target_filename": "miio/gateway/devices/subdevice.py",
    "source_changeid": "6453bfee512150e3f062670e890533fcd67067ea^",
    "target_changeid": "6453bfee512150e3f062670e890533fcd67067ea",
    "predictions": [
      "self, gw: Optional[\"Gateway\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, gw: Optional[\"Gateway\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "1": "self, gw: Optional[\"Gateway\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "2": "self, gw: Optional[\"Gateway\"] = None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "3": "self, gw: Optional[\"Gateway\", None], dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "4": "self, gw: \"Gateway\", dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true
    }
  },
  {
    "source_code": "\n        dev: FlairDataset = DataPairDataset(\n            dev_file,\n",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_line": "        dev: FlairDataset = DataPairDataset(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 282,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/datasets/text_text.py",
    "target_filename": "flair/datasets/text_text.py",
    "source_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f^",
    "target_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "predictions": [
      "dev: DataPairDataset = DataPairDataset( dev_file,"
    ],
    "correct": false,
    "top_five": {
      "0": "dev: DataPairDataset = DataPairDataset( dev_file,",
      "1": "dev: Optional[FlairDataset] = DataPairDataset( dev_file,",
      "2": "dev: DataPairDataset( dev_file,",
      "3": "dev: FlairDataset = DataPairDataset( dev_file,",
      "4": "dev: DevPairDataset = DataPairDataset( dev_file,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_line": "        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/web3.py",
    "source_filename": "web3/providers/auto.py",
    "target_filename": "web3/providers/auto.py",
    "source_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1^",
    "target_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "predictions": [
      "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None ) -> None:",
      "1": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = None ) -> None:",
      "2": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]] = None ) -> None:",
      "3": "self, potential_providers: Sequence[Callable[..., BaseProvider]] = None ) -> None:",
      "4": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = [] ) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
    "target_code": "\n    def __get__(self, instance: Any, owner: Any = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_line": "    def __get__(self, instance: object, owner: type = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 66,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pgjones/quart",
    "source_filename": "src/quart/config.py",
    "target_filename": "src/quart/config.py",
    "source_changeid": "c6905c0abe702031e79520c1474f2996657bd245^",
    "target_changeid": "c6905c0abe702031e79520c1474f2996657bd245",
    "predictions": [
      "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "1": "def __get__(self, instance: object, owner: Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "2": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "3": "def __get__(self, instance: object, owner: type_name = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "4": "def __get__(self, instance: object, owner: type = \"\") -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator\n\n",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_line": "OVERLAYS = None  # type: Generator",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BEEmod/BEE2.4",
    "source_filename": "src/texturing.py",
    "target_filename": "src/texturing.py",
    "source_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6^",
    "target_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "predictions": [
      "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator]"
    ],
    "correct": false,
    "top_five": {
      "0": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator]",
      "1": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = None # type: Optional[Generator]",
      "2": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS: Optional[Generator]",
      "3": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "4": "# These can just looked up directly. SPECIAL: Optional[Generator] = None # type: Optional[Generator] OVERLAYS: Optional[Generator]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               type_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 121,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "def object(self, symbol_name: str, type_name: str, offset: int = None,"
    ],
    "correct": true,
    "top_five": {
      "0": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "1": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "2": "def object(self, symbol_name: str, type_name: Optional[str] = None, offset: int = None,",
      "3": "def object(self, symbol_name: str = '', type_name: str = '', offset: int = None,",
      "4": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: Optional[int] = None,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,   # type: int\n    max_size=None  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,   # type: None\n    max_size=None  # type: int\n",
    "warning_line": "    average_size=None,   # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 940,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int average_size=None, # type: None max_size=None # type: int"
    ],
    "correct": true,
    "top_five": {
      "0": "min_size=0, # type: int average_size=None, # type: None max_size=None # type: int",
      "1": "min_size=0, # type: None average_size=None, # type: None max_size=None # type: int",
      "2": "min_size=0, # type: Optional[int] average_size=None, # type: Optional[int] max_size=None # type: int",
      "3": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None # type: int",
      "4": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None # type: int"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_line": "            embeddings = cached_path(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " embeddings is declared to have type `str` but is used as type `Path`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2082,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/embeddings/token.py",
    "target_filename": "flair/embeddings/token.py",
    "source_changeid": "0b834f5167d11f06037398fcbe1554f244167e18^",
    "target_changeid": "0b834f5167d11f06037398fcbe1554f244167e18",
    "predictions": [
      ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir"
    ],
    "correct": false,
    "top_five": {
      "0": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "1": ") embeddings_path = cached_path( f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "2": ") embeddings_path= cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "3": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "4": ") embeddingspath = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false
    }
  },
  {
    "source_code": "\n            usd_volume: float = [\n                (\n",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_line": "            usd_volume: float = [",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 97,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hummingbot/hummingbot",
    "source_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "target_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1^",
    "target_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "predictions": [
      "usd_volume: float = [ ("
    ],
    "correct": false,
    "top_five": {
      "0": "usd_volume: float = [ (",
      "1": "usd_volumes: float = [ (",
      "2": "usd_volume = [ (",
      "3": "usd_volume_float = [ (",
      "4": "usd_volume_num = [ ("
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
    "warning_line": "    def __init__(self, reason: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " reason is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 28,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theacodes/nox",
    "source_filename": "nox/command.py",
    "target_filename": "nox/command.py",
    "source_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62^",
    "target_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "predictions": [
      "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "1": "def __init__( self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "2": "def __init__(self, reason: typing.Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "3": "def __init__( self, reason: typing.Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "4": "def __init__(self, reason: Union[str, None] = None) -> None: super(CommandFailed, self).__init__(reason)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_line": "        path_scope: irast.ScopeTreeNode=None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/pathctx.py",
    "target_filename": "edb/edgeql/compiler/pathctx.py",
    "source_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa^",
    "target_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "predictions": [
      "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False,"
    ],
    "correct": true,
    "top_five": {
      "0": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "1": "ir_set: irast.Set, *, path_scope=None, optional: bool=False,",
      "2": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode] = None, optional: bool=False,",
      "3": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode, optional: bool=False,",
      "4": "ir_set: irast.Set, *, path_scope = irast.ScopeTreeNode, optional: bool=False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
    "target_code": "        \"\"\"\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
    "warning_line": "        signer_key = SignerKey.ed25519_public_key(signer_key)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 912,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/transaction_builder.py",
    "target_filename": "stellar_sdk/transaction_builder.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "\"\"\" key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)"
    ],
    "correct": true,
    "top_five": {
      "0": "\"\"\" key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)",
      "1": "\"\"\" key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_id, source) return self.append_operation(op)",
      "2": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id_id, source) return self.append_operation(op)",
      "3": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id, source) return self.append_operation(op)",
      "4": "\"\"\" key_op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_op, source) return self.append_operation(key_op)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
    "warning_line": "    def __init__(self, format: str = None, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " format is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/fields.py",
    "target_filename": "src/marshmallow/fields.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "1": "def __init__(self, format: Optional[str] = None, **kwargs) -> None: super().__init__(**kwargs)",
      "2": "def __init__( self, format: Optional[str] = None, **kwargs ): super().__init__(**kwargs)",
      "3": "def __init__(self, format: str, **kwargs): super().__init__(**kwargs)",
      "4": "def __init__( self, format: Optional[str] = None, **kwargs ) -> None: super().__init__(**kwargs)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __init__(self, rf_path: str=None):\n        super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1\n",
    "target_code": "\n    def __init__(self):\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "def __init__(self): super(Schaffer, self).__init__() self.number_of_variables = 1"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "1": "def __init__(self, str=None): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "2": "def __init__(): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "3": "def __init__: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "4": "def __init__(self): super(Schaffer, self).__init__(rf_path=str) self.number_of_variables = 1"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def run(self, host: str = None, port: int = None, *args, **kwargs):\n        host = host or self.config.HOST\n",
    "target_code": "\n    def run(self, host: Optional[str] = None, port: Optional[int] = None,\n            *args, **kwargs) -> None:\n        host = host or self.config.HOST\n",
    "warning_line": "    def run(self, host: str = None, port: int = None, *args, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " host is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nonebot/nonebot",
    "source_filename": "none/__init__.py",
    "target_filename": "none/__init__.py",
    "source_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd^",
    "target_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd",
    "predictions": [
      "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST"
    ],
    "correct": true,
    "top_five": {
      "0": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "1": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs): host = host or self.config.HOST",
      "2": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None -> None: host = host or self.config.HOST",
      "3": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Optional[str] = None: host = host or self.config.HOST",
      "4": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> bool: host = host or self.config.HOST"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> bool:\n        return capability.available(self.agreed_capabilities)\n",
    "target_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> str:\n        return capability.available(self.agreed_capabilities)\n",
    "warning_line": "        return capability.available(self.agreed_capabilities)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/IRCServer.py",
    "target_filename": "src/IRCServer.py",
    "source_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd^",
    "target_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "predictions": [
      "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)"
    ],
    "correct": true,
    "top_five": {
      "0": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "1": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability)) -> str: return capability.available(self.agreed_capabilities)",
      "2": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability): return capability.available(self.agreed_capabilities)",
      "3": "return capability in self.agreed_capabilities def available_capability(self, capability: utils[irc.Capability]) -> str: return capability.available(self.agreed_capabilities)",
      "4": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability, str: return capability.available(self.agreed_capabilities)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0\n\n",
    "target_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_line": "        return plans and len(plans) > 0",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "synek/git-plan",
    "source_filename": "git_plan/service/plan.py",
    "target_filename": "git_plan/service/plan.py",
    "source_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc^",
    "target_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "predictions": [
      "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "1": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and bool(plans) > 0",
      "2": "\"\"\"Check if a plan already exists in the given directory\"\"\" files = os.listdir(project.plan_dir) return files and len(plans) > 0",
      "3": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return lists and len(plans) > 0",
      "4": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and bool(plans) > 0"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
    "target_code": "    @classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        return [choice for choice in cls]\n",
    "warning_line": "        return [choice for choice in cls]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 11,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SectorLabs/django-postgres-extra",
    "source_filename": "psqlextra/types.py",
    "target_filename": "psqlextra/types.py",
    "source_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813^",
    "target_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "predictions": [
      "@classmethod def all(cls) -> List[StrEnum]: return [choice for choice in cls]"
    ],
    "correct": false,
    "top_five": {
      "0": "@classmethod def all(cls) -> List[StrEnum]: return [choice for choice in cls]",
      "1": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "2": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "3": "@classmethod def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "4": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return cls[choice for choice]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        return {\"resistance\": voltage / current}\n\n",
    "target_code": "        return {\"resistance\": voltage / current}\n    else:\n        raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_line": "        return {\"resistance\": voltage / current}",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "electronics/ohms_law.py",
    "target_filename": "electronics/ohms_law.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "return { \"resistance\": str(voltage) / current }"
    ],
    "correct": false,
    "top_five": {
      "0": "return { \"resistance\": str(voltage) / current }",
      "1": "return { \"resistance\": str(voltage / current) }",
      "2": "return { \"resistance\": Dict[str, float] }",
      "3": "return { \"resistance\": (voltage / current) }",
      "4": "return { \"resistance\": str(volt) / current }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
    "target_code": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_line": "    return origin and issubclass(origin, Collection)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 71,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "konradhalas/dacite",
    "source_filename": "dacite/types.py",
    "target_filename": "dacite/types.py",
    "source_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708^",
    "target_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "predictions": [
      "origin = extract_origin_collection(t) return bool(origin, Collection)"
    ],
    "correct": false,
    "top_five": {
      "0": "origin = extract_origin_collection(t) return bool(origin, Collection)",
      "1": "origin = extract_origin_collection(t) bool = bool return origin and issubclass(origin, Collection)",
      "2": "origin = extract_origin_collection(t) return issubclass(origin, Collection)",
      "3": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection)",
      "4": "origin = extract_origin_collection(t) return bool(origin, bool)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None\n\n",
    "target_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "sensepost/objection",
    "source_filename": "objection/commands/ios/hooking.py",
    "target_filename": "objection/commands/ios/hooking.py",
    "source_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf^",
    "target_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "predictions": [
      "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return []"
    ],
    "correct": true,
    "top_five": {
      "0": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return []",
      "1": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"\"",
      "2": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "3": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return False",
      "4": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return ''"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                            return desc\n        return None\n\n",
    "target_code": "                            return desc\n        return \"\"\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 245,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/player.py",
    "target_filename": "tale/player.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "return desc return \"\""
    ],
    "correct": true,
    "top_five": {
      "0": "return desc return \"\"",
      "1": "return desc return ''",
      "2": "return desc return []",
      "3": "return desc return 0",
      "4": "return desc return None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
    "target_code": "    if unit in units:\n        return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    else:\n",
    "warning_line": "        return int(amount[:-1]) * 100_000_000_000 / units[unit]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 144,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/bolt11.py",
    "target_filename": "lnbits/bolt11.py",
    "source_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2^",
    "target_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "predictions": [
      "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit] else:"
    ],
    "correct": false,
    "top_five": {
      "0": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "1": "if unit in units: return int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "2": "if unit in units: return float(amount[:-1]) * 100_000_000000 / units[unit] else:",
      "3": "if unit in units: return float(amount[:-1], 100_000_000_000) else:",
      "4": "if unit in units: return float(amount[:-1]) * 100_000_000_000/ units[unit] else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
    "target_code": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_line": "    return subdomain",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/extensions/subdomains/crud.py",
    "target_filename": "lnbits/extensions/subdomains/crud.py",
    "source_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d^",
    "target_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "predictions": [
      "subdomain = await get_subdomain(payment_hash) return Optional[subdomain]"
    ],
    "correct": false,
    "top_five": {
      "0": "subdomain = await get_subdomain(payment_hash) return Optional[subdomain]",
      "1": "subdomain = await get_subdomain(payment_hash) assert subdomain is not None return subdomain",
      "2": "subdomain = await get_subdomain(payment_hash) assert payment_hash is not None return subdomain",
      "3": "subdomain = await get_subdomain(payment_hash) return Subdomain",
      "4": "subdomain = await get_subdomain(payment_hash) return Optional[Subdomain]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n\n",
    "target_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_line": "        return ImageData(self._dto[\"profileiconmax\"])",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `ImageData`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "meraki-analytics/cassiopeia",
    "source_filename": "cassiopeia/core/staticdata/realms.py",
    "target_filename": "cassiopeia/core/staticdata/realms.py",
    "source_changeid": "a26127b190f398137c4cf92469c5de573ce2a018^",
    "target_changeid": "a26127b190f398137c4cf92469c5de573ce2a018",
    "predictions": [
      "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"]))"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"]))",
      "1": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "2": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData()",
      "3": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return int(self._dto[\"profileiconmax\"])",
      "4": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return int(ImageData(self._dto[\"profileiconmax\"]))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
    "target_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            return False\n        return self.parent.left is self.parent.left is self\n\n",
    "warning_line": "        return self.parent and self.parent.left is self",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Optional[bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 435,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/red_black_tree.py",
    "target_filename": "data_structures/binary_tree/red_black_tree.py",
    "source_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2^",
    "target_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "predictions": [
      "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and self.parent.left is self"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and self.parent.left is self",
      "1": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent)",
      "2": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self",
      "3": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent and self.parent.left is self)",
      "4": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent is not None and self.parent.left is self"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n\n",
    "target_code": "\n    def __str__(self) -> str:\n        return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_line": "        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `typing.List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 122,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "target_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298^",
    "target_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "predictions": [
      "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]"
    ],
    "correct": false,
    "top_five": {
      "0": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "1": "def __str__(self) -> List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "2": "def __str__(self) -> typing.List[int], true: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "3": "def __str__(self) -> typing.List[int], false: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "4": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        if file_hash == \"\":\n            return False\n        try:\n",
    "target_code": "        if file_hash == \"\":\n            return \"\"\n        try:\n",
    "warning_line": "            return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/Trust.py",
    "target_filename": "UM/Trust.py",
    "source_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41^",
    "target_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "predictions": [
      "if file_hash == \"\": return str(false) try:"
    ],
    "correct": false,
    "top_five": {
      "0": "if file_hash == \"\": return str(false) try:",
      "1": "if file_hash == \"\": return str(str) try:",
      "2": "if file_hash == \"\": return bool(false) try:",
      "3": "if file_hash == \"\": return str(true) try:",
      "4": "if file_hash == \"\": return str(str, bool) try:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            if target.is_ammo_depot:\n                yield target\n",
    "target_code": "            if target.is_ammo_depot:\n                assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_line": "                yield target",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dcs-liberation/dcs_liberation",
    "source_filename": "game/commander/theaterstate.py",
    "target_filename": "game/commander/theaterstate.py",
    "source_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3^",
    "target_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "predictions": [
      "if target.is_ammo_depot: yield Target"
    ],
    "correct": false,
    "top_five": {
      "0": "if target.is_ammo_depot: yield Target",
      "1": "if target.is_ammo_depot: yield TheaterGroundObject",
      "2": "if target.is_ammo_depot: yield target",
      "3": "if target.is_ammo_depot: yield TheaterGroundObject(target, None)",
      "4": "if target.is_ammo_depot: yield TheaterGroundObject(target, BuildingGroundObject)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        else:\n            return self.error.to_string()\n\n",
    "warning_line": "            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 107,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dagster-io/dagster",
    "source_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "target_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84^",
    "target_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "predictions": [
      "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")"
    ],
    "correct": false,
    "top_five": {
      "0": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "1": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "2": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return False",
      "3": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "4": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            # threading library\n            return None\n        frames: List[Tuple[FrameType, int]] = [\n",
    "target_code": "            # threading library\n            return []\n        frames: List[Tuple[FrameType, int]] = [\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 796,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "plasma-umass/scalene",
    "source_filename": "scalene/scalene_profiler.py",
    "target_filename": "scalene/scalene_profiler.py",
    "source_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58^",
    "target_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "predictions": [
      "# threading library return [] frames: List[Tuple[FrameType, int, FrameType]] = ["
    ],
    "correct": false,
    "top_five": {
      "0": "# threading library return [] frames: List[Tuple[FrameType, int, FrameType]] = [",
      "1": "# threading library return [] frames: List[Tuple[FrameType, int]] = [",
      "2": "# threading library return [] frames: List[Tuple[FrameType, int], FrameType] = [",
      "3": "# threading library return None frames: List[Tuple[FrameType, int]] = [",
      "4": "# threading library return [] frames: List[Tuple[FrameType, int,...]] = ["
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n\n",
    "target_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_line": "        return self._mem_slot",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 112,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Qiskit/qiskit-terra",
    "source_filename": "qiskit/pulse/instructions/acquire.py",
    "target_filename": "qiskit/pulse/instructions/acquire.py",
    "source_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23^",
    "target_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "predictions": [
      "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot",
      "1": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self._mem_slot",
      "2": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" assert self.mem_slot is not None return self.mem_slot",
      "3": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" assert self.mem_slot is not None return self._mem_slot",
      "4": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.m_slot"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                self._confidence_hi.update(conf_hi)\n            return None\n        else:\n",
    "target_code": "                self._confidence_hi.update(conf_hi)\n            return self\n        else:\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `TimeSeries` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "u8timeseries/timeseries.py",
    "target_filename": "u8timeseries/timeseries.py",
    "source_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c^",
    "target_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "predictions": [
      "self._confidence_hi.update(conf_hi) return [] else:"
    ],
    "correct": false,
    "top_five": {
      "0": "self._confidence_hi.update(conf_hi) return [] else:",
      "1": "self._confidence_hi.update(conf_hi) return \"\" else:",
      "2": "self._confidence_hi.update(conf_hi) return TimeSeries(TimeSeries) else:",
      "3": "self._confidence_hi.update(conf_hi) return 'TimeSeries' else:",
      "4": "self._confidence_hi.update(conf_hi) return \"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def _get_params(self, **kwargs) -> dict:\n        return None\n\n",
    "target_code": "    def _get_params(self, **kwargs) -> dict:\n        return {}\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "tests/models/test_modelmanager.py",
    "target_filename": "tests/models/test_modelmanager.py",
    "source_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb^",
    "target_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "predictions": [
      "def _get_params(self, **kwargs) -> dict: return []"
    ],
    "correct": false,
    "top_five": {
      "0": "def _get_params(self, **kwargs) -> dict: return []",
      "1": "def _get_params(self, **kwargs) -> dict: return ''",
      "2": "def _get_params(self, **kwargs) -> dict: return \"\"",
      "3": "def _get_params(self, **kwargs) -> dict: return 0",
      "4": "def _get_params(self, **kwargs) -> dict: return \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text\n\n",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_line": "        return text",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Text` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 169,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "willmcgugan/rich",
    "source_filename": "rich/text.py",
    "target_filename": "rich/text.py",
    "source_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06^",
    "target_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "predictions": [
      "render(text, style, emoji=emoji) text.justify = justify return text"
    ],
    "correct": false,
    "top_five": {
      "0": "render(text, style, emoji=emoji) text.justify = justify return text",
      "1": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return text",
      "2": "return render(text, style, emoji=emoji) text.justify = justify return text",
      "3": "render(text, style, emoji=emoji) text.justify = justify return render(text, style, emoji=emoji)",
      "4": "text = render(text, style, emoji=emoji) text.justify = justify return text"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2\n\n",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return [matrix1, matrix2]\n\n",
    "warning_line": "        return matrix1, matrix2",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 124,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "target_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2"
    ],
    "correct": false,
    "top_five": {
      "0": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2",
      "1": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2()",
      "2": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, matrix2)",
      "3": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return list(matrix1, matrix2)",
      "4": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, matrix2)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        return count_label + short_label\n",
    "target_code": "        return count_label + short_label\n\n  raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_line": "        return count_label + short_label",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 582,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "return count_label + str(short_label)"
    ],
    "correct": false,
    "top_five": {
      "0": "return count_label + str(short_label)",
      "1": "return count_label + str(short_label) raise ValueError(f'unknown type')",
      "2": "return count_label + str(short_label) return False",
      "3": "return count_label + str(short_label) return \"\"",
      "4": "return count_label + str(short_label) raise ValueError(f\"Unknown label } \")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> bytes:\n    \"\"\"\n",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    \"\"\"\n",
    "warning_line": "    \"\"\"",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bytes` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trezor/trezor-firmware",
    "source_filename": "core/mocks/generated/trezorconfig.pyi",
    "target_filename": "core/mocks/generated/trezorconfig.pyi",
    "source_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058^",
    "target_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "predictions": [
      "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: \"\"\"",
      "1": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return \"\"\"",
      "2": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return bytes",
      "3": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return bytes \"\"\"",
      "4": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        print()\n        return\n    for i in range(len(board)):\n",
    "target_code": "        print()\n        return True\n    for i in range(len(board)):\n",
    "warning_line": "        return",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 56,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "backtracking/n_queens.py",
    "target_filename": "backtracking/n_queens.py",
    "source_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1^",
    "target_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "predictions": [
      "print() return for i in range(len(board)):"
    ],
    "correct": false,
    "top_five": {
      "0": "print() return for i in range(len(board)):",
      "1": "print() return for i in range(len(board)):",
      "2": "print() return for i in range(slot(len(board))):",
      "3": "print() return for i in range(str(len(board))):",
      "4": "print() return for i in range(slot(len(board)):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    \"\"\"\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
    "target_code": "    \"\"\"\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_line": "    return unicodedata.normalize(",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "oppia/oppia",
    "source_filename": "utils.py",
    "target_filename": "utils.py",
    "source_changeid": "72937725a323b0cc1ccec150c81b041abeacb575^",
    "target_changeid": "72937725a323b0cc1ccec150c81b041abeacb575",
    "predictions": [
      "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "1": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "2": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "3": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "4": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "target_code": "\n    def __iter__(self) -> \"SuperpropertiesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_line": "        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 197,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/logic/lineage.py",
    "target_filename": "pronto/logic/lineage.py",
    "source_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327^",
    "target_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "predictions": [
      "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "1": "def __iter__(self) -> SuperclassesIterator: return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "2": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "3": "def __iter__(self) -> \"SuperclassesIterator\": assert self.entity is not None return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "4": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:\n",
    "target_code": ") -> JsonSchema:\n    if is_true_schema(schema) or is_false_schema(schema):\n        return schema\n    if \"anyOf\" in schema:\n",
    "warning_line": "        return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, typing.Any]` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 988,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "IBM/lale",
    "source_filename": "lale/schema_simplifier.py",
    "target_filename": "lale/schema_simplifier.py",
    "source_changeid": "b38267abe490e869338f212179b03521e89013ee^",
    "target_changeid": "b38267abe490e869338f212179b03521e89013ee",
    "predictions": [
      ") -> JsonSchema: if schema is False: return False if \"anyOf\" in schema:"
    ],
    "correct": false,
    "top_five": {
      "0": ") -> JsonSchema: if schema is False: return False if \"anyOf\" in schema:",
      "1": ") -> JsonSchema: if schema is False: return bool(Dict[str, Any]) if \"anyOf\" in schema:",
      "2": ") -> JsonSchema: if schema is False: return True if \"anyOf\" in schema:",
      "3": ") -> JsonSchema: if schema is False: return None if \"anyOf\" in schema:",
      "4": ") -> JsonSchema: if schema is None: return None if \"anyOf\" in schema:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n\t\t\treturn se.InvalidSeEbookException\n\n",
    "target_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n\t\t\treturn se.InvalidSeEbookException.code\n\n",
    "warning_line": "\t\t\treturn se.InvalidSeEbookException",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 738,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/executables.py",
    "target_filename": "se/executables.py",
    "source_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0^",
    "target_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "predictions": [
      "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException"
    ],
    "correct": false,
    "top_five": {
      "0": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException",
      "1": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.code",
      "2": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return int(se.InvalidSeEbookException)",
      "3": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn\u2019t find endnotes.xhtml file\")",
      "4": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return Se.InvalidSeEbookException"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    @property\n    def layer_name(self) -> str:\n        return self._layer_name\n",
    "target_code": "    @property\n    def layer_name(self) -> typing.Optional[str]:\n        return self._layer_name\n",
    "warning_line": "        return self._layer_name",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/layers.py",
    "target_filename": "volatility/framework/interfaces/layers.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "@property def layer_name(self) -> typing.Optional[str]: return self._layer_name"
    ],
    "correct": true,
    "top_five": {
      "0": "@property def layer_name(self) -> typing.Optional[str]: return self._layer_name",
      "1": "@property def layer_name(self) -> Optional[str]: return self._layer_name",
      "2": "@property def layer_name(self): return self._layer_name",
      "3": "@property def layer_name(self) -> str: return self._layer_name",
      "4": "@property def layer_name(self) -> None: return self._layer_name"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef escape(expr: str) -> None:\n    return expr.replace(\"'\", \"''\")\n",
    "target_code": "\ndef escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")\n",
    "warning_line": "    return expr.replace(\"'\", \"''\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 118,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Shougo/deoplete.nvim",
    "source_filename": "rplugin/python3/deoplete/util.py",
    "target_filename": "rplugin/python3/deoplete/util.py",
    "source_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7^",
    "target_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7",
    "predictions": [
      "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\")"
    ],
    "correct": true,
    "top_five": {
      "0": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\")",
      "1": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\"",
      "2": "def escape(expr: str) -> str: return expr.replace(\"'\", \"'')",
      "3": "def escape(expr: str): return expr.replace(\"'\", \"''\")",
      "4": "def escape(expr: str): return str(expr.replace(\"'\", \"''\"))"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
    "target_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                vty = v.type\n",
    "warning_line": "            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 445,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/Expr.py",
    "target_filename": "WDL/Expr.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)"
    ],
    "correct": false,
    "top_five": {
      "0": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "1": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "2": "k.typecheck(kty) if vty is None or vty is None or vty is None: vty = v.typecheck(kty)",
      "3": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck()",
      "4": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
    "target_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_line": "                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 433,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libp2p/py-libp2p",
    "source_filename": "libp2p/pubsub/gossipsub.py",
    "target_filename": "libp2p/pubsub/gossipsub.py",
    "source_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397^",
    "target_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "predictions": [
      "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], []) )"
    ],
    "correct": false,
    "top_five": {
      "0": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], []) )",
      "1": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[] ] )",
      "2": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[] ) )",
      "3": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], list[] ) )",
      "4": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], [] )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],\n",
    "target_code": "        restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_line": "            expiration=int(data['expiration']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],"
    ],
    "correct": true,
    "top_five": {
      "0": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "1": "restored = cls( expiration=blockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "2": "restored = cls( expiration=BBCExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "3": "restored = cls( expiration=Null(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "4": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balaance_proof'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )\n",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_line": "        InitializationData(unit_data={}, shared=annotation[\"inputs\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 128,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "target_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )"
    ],
    "correct": false,
    "top_five": {
      "0": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "1": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"] )",
      "2": "assignment.write_assignment_data( InitializationData(unit_data= { } ) )",
      "3": "assignment.write_assignment_data( InitializationData(unit_data= { } )",
      "4": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"], None) )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "target_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_line": "                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 267,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/automagic/windows.py",
    "target_filename": "volatility/framework/automagic/windows.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)"
    ],
    "correct": false,
    "top_five": {
      "0": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "1": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, int, str])",
      "2": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str)",
      "3": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "4": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, int, str)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    \"\"\"\n    return bool(name) and name != '_' and len(name) < min_length\n",
    "target_code": "    \"\"\"\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_line": "    return bool(name) and name != '_' and len(name) < min_length",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/wemake-python-styleguide",
    "source_filename": "wemake_python_styleguide/helpers/variables.py",
    "target_filename": "wemake_python_styleguide/helpers/variables.py",
    "source_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9^",
    "target_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "predictions": [
      "\"\"\" return bool(name) and name!= str('_') and len(name)  min_length"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" return bool(name) and name!= str('_') and len(name)  min_length",
      "1": "\"\"\" return bool(name) and name!= '_' and str(name)  min_length",
      "2": "\"\"\" return bool(name) and name!= '_' and str(len(name))  min_length",
      "3": "\"\"\" return str(bool(name)) and name!= '_' and len(name)  min_length",
      "4": "\"\"\" return bool(name) and name!= str('_')  min_length"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        results = self.fit(model)\n        self._set_running_stage(None, model)\n\n",
    "target_code": "        results = self.fit(model)\n        self._running_stage = None\n\n",
    "warning_line": "        self._set_running_stage(None, model)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `LightningEnum` for 1st positional only parameter to call `Trainer._set_running_stage` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1036,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PyTorchLightning/pytorch-lightning",
    "source_filename": "pytorch_lightning/trainer/trainer.py",
    "target_filename": "pytorch_lightning/trainer/trainer.py",
    "source_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b^",
    "target_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b",
    "predictions": [
      "results = self.fit(model) self._running_stage = None"
    ],
    "correct": true,
    "top_five": {
      "0": "results = self.fit(model) self._running_stage = None",
      "1": "results = self.fit(model) assert model is not None self._running_stage = None",
      "2": "results = self.fit(model) if isinstance(model, LighteningEnum): self._running_stage = None",
      "3": "results = self.fit(model)",
      "4": "results = self.fit(model) assert model is not None self._running_stage()"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "target_code": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_line": "        self.query_ethereum_tokens(tokens, self.balances[S_ETH])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 131,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rotki/rotki",
    "source_filename": "rotkehlchen/blockchain.py",
    "target_filename": "rotkehlchen/blockchain.py",
    "source_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282^",
    "target_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "predictions": [
      "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'total': tokens"
    ],
    "correct": false,
    "top_five": {
      "0": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "1": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals } )",
      "2": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals }",
      "3": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "4": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals },"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    assert {} == load_data(\n        datadir='',\n        pairs=[],\n",
    "target_code": "    assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_line": "        datadir='',",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 373,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "tests/data/test_history.py",
    "target_filename": "tests/data/test_history.py",
    "source_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf^",
    "target_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "predictions": [
      "assert { } == load_data( datadir=Path(''), pairs=[],"
    ],
    "correct": true,
    "top_five": {
      "0": "assert { } == load_data( datadir=Path(''), pairs=[],",
      "1": "assert { } == load_data( datadir='', pairs=[],",
      "2": "assert { } == load_data( datadir = Path(''), pairs=[],",
      "3": "assert { } == load_data( datadir=path(''), pairs=[],",
      "4": "assert { } == load_data( datadir=Str(''), pairs=[],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
    "target_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_line": "        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/cli/simple_table.py",
    "target_filename": "airflow/cli/simple_table.py",
    "source_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3^",
    "target_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "predictions": [
      "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys[0].keys()) print(output)"
    ],
    "correct": false,
    "top_five": {
      "0": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys[0].keys()) print(output)",
      "1": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, str]) print(output)",
      "2": "rows = [d.values() for d in data] output = tabulate(str(rows, tablefmt=\"plain\", headers=data[0].keys())) print(output)",
      "3": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, str], str]) print(output)",
      "4": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=keys[0].keys()]) print(output)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
    "target_code": "                r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            except TypeError:\n                intersection_of.append(ont.get_term(typing.cast(str, item)))\n        return frozenset(intersection_of)\n",
    "warning_line": "                intersection_of.append(ont.get_term(item))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 441,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/term.py",
    "target_filename": "pronto/term.py",
    "source_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8^",
    "target_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "predictions": [
      "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)"
    ],
    "correct": false,
    "top_five": {
      "0": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "1": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(str(ont.get_term(item))) return frozenset(intersection_of)",
      "2": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(item) return frozenset(intersection_of)",
      "3": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(t.get_term(item)) return frozenset(intersection_of)",
      "4": "r, t = item intersection_of.append(ont.get_relationship(r)), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    target1, target2 = _get_targets(var, get_players(var), player)\n\n",
    "target_code": "\n    target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_line": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/roles/madscientist.py",
    "target_filename": "src/roles/madscientist.py",
    "source_changeid": "3b3870c9f365944134225c5b7364430c5bce0158^",
    "target_changeid": "3b3870c9f365944134225c5b7364430c5bce0158",
    "predictions": [
      "target1, target2 = _get_targets(var, set_players(var), player)"
    ],
    "correct": false,
    "top_five": {
      "0": "target1, target2 = _get_targets(var, set_players(var), player)",
      "1": "target1, target2 = _get_targets(var, list(get_players(var), player))",
      "2": "target1, target2 = _get_targets(var, list(get_players(var), player)",
      "3": "target1, target2 = _get_targets(var, set(get_players(var), player))",
      "4": "target1, target2 = _get_targets(var, _get_players(var), player)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "target_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_line": "    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 115,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "datatheorem/strongarm",
    "source_filename": "tests/utils.py",
    "target_filename": "tests/utils.py",
    "source_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36^",
    "target_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "predictions": [
      "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)"
    ],
    "correct": false,
    "top_five": {
      "0": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "1": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer()",
      "2": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(compiled_code_bin_path)",
      "3": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macro_analyzer(binary))",
      "4": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho_binary_path)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "target_code": "                continue\n            assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_line": "            self.__check_destination_memo(account_resp, index, destination)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 410,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/server.py",
    "target_filename": "stellar_sdk/server.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "continue self.__check_destination_memo(account_resp, index, destination)"
    ],
    "correct": false,
    "top_five": {
      "0": "continue self.__check_destination_memo(account_resp, index, destination)",
      "1": "continue self.__check_destination_memo(account_resp, index, destination) if not isinstance(destination): return self.__check_destination_memo(account_resp, index, destination)",
      "2": "continue self.__check_destination_memo(account_resp, index, destination) self.__check_destination_memo(account_resp, index, destination)",
      "3": "continue self.__check_destination_memo(account_resp, index, destination) self.__check_destination_memo(account_resp, index)",
      "4": "return self.__check_destination_memo(account_resp, index, destination)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_line": "                    else is_true(simplify(condition))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1357,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "if type(condition) == bool else is_true(simplify(condition)) )"
    ],
    "correct": false,
    "top_five": {
      "0": "if type(condition) == bool else is_true(simplify(condition)) )",
      "1": "if type(condition) == bool else is_true(condition) )",
      "2": "if type(condition) == bool else is_true(Expression(condition)) )",
      "3": "if type(condition) == bool else is_true((condition)) )",
      "4": "if type(condition) == bool else is_true(expression) )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "target_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_line": "                    cmd [\"singularity\", \"build\", name,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/singularity.py",
    "target_filename": "cwltool/singularity.py",
    "source_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61^",
    "target_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "predictions": [
      "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]"
    ],
    "correct": false,
    "top_five": {
      "0": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "1": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "2": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd[\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "3": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"utility\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "4": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] = []"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\\n')\n    elif not order+'\\n' in target:\n",
    "target_code": "    if '--out' in sys.argv:\n        outfile.write(order+'\\n')\n    elif not order+'\\n' in target:\n",
    "warning_line": "        outfile.write(order.encode('utf8')+'\\n')",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 82,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "psychopy/psychopy",
    "source_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "target_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3^",
    "target_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "predictions": [
      "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:"
    ],
    "correct": false,
    "top_five": {
      "0": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "1": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "2": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8'))+' \\ n') elif not order+' \\ n' in target:",
      "3": "if '--out' in sys.argv: outfile.write(order+' \\ n') elif not order+' \\ n' in target:",
      "4": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8') +'\\ n')) elif not order+' \\ n' in target:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false
    }
  },
  {
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n\n",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            state[config.url_id] = scrapper_stat\n\n",
    "warning_line": "        state[config.url_id] = scrapper_stat",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "obsei/obsei",
    "source_filename": "obsei/source/reddit_scrapper.py",
    "target_filename": "obsei/source/reddit_scrapper.py",
    "source_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c^",
    "target_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "predictions": [
      "last_index = since_id state[config.url_id] = str(str)"
    ],
    "correct": false,
    "top_five": {
      "0": "last_index = since_id state[config.url_id] = str(str)",
      "1": "last_index = since_id assert isinstance(str, config.url_id) state[config.url_id] = scrapper_stat",
      "2": "last_index = since_id assert since_id state[config.url_id] = scrapper_stat",
      "3": "last_index = since_id assert since_id is not None state[config.url_id] = scrapper_stat",
      "4": "last_index = since_id state[config.url_id] = str(str(str))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            data,\n            1337,\n            'promote',\n",
    "target_code": "            data,\n            UserID(1337),\n            'promote',\n",
    "warning_line": "            1337,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `UserID` for 2nd positional only parameter to call `JubeatProp._modify_profile` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/tests/test_JubeatProp.py",
    "target_filename": "bemani/tests/test_JubeatProp.py",
    "source_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7^",
    "target_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7",
    "predictions": [
      "data, UserID(1337), 'promote',"
    ],
    "correct": true,
    "top_five": {
      "0": "data, UserID(1337), 'promote',",
      "1": "data, userID(1337), 'promote',",
      "2": "data, UserID(1337), 'promote',",
      "3": "data, UsersID(1337), 'promote',",
      "4": "data, UserID(1377), 'promote',"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "target_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_line": "                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 547,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "electrumsv/electrumsv",
    "source_filename": "examples/applications/restapi/handler_utils.py",
    "target_filename": "examples/applications/restapi/handler_utils.py",
    "source_changeid": "2132e0922ed952c7eb61f639b57182657532a757^",
    "target_changeid": "2132e0922ed952c7eb61f639b57182657532a757",
    "predictions": [
      "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0])"
    ],
    "correct": false,
    "top_five": {
      "0": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0])",
      "1": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data)",
      "2": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data, Optional[bytes])",
      "3": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[1])",
      "4": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]) else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n        return Interpreter(self.pipeline, context=init_context, config=self.config)\n\n",
    "target_code": "\n        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_line": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 190,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crownpku/Rasa_NLU_Chi",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "return Interpreter(self.pipeline, context=init_context, config=self.config)"
    ],
    "correct": false,
    "top_five": {
      "0": "return Interpreter(self.pipeline, context=init_context, config=self.config)",
      "1": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any])",
      "2": "return Interpreter(self.pipeline, context=Init_context, config=self.config)",
      "3": "return Interpreter(self.pipeline, context=init_context, config=self.config) raise NotImplementedError",
      "4": "return Interpreter(self.pipeline, context=Dict[str, Any])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)\n",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_line": "                           scale,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 883,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/draw_commands.py",
    "target_filename": "arcade/draw_commands.py",
    "source_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd^",
    "target_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "predictions": [
      "draw_texture_rectangle(center_x, center_y, texture, scale, angle=angle, alpha=alpha)"
    ],
    "correct": true,
    "top_five": {
      "0": "draw_texture_rectangle(center_x, center_y, texture, scale, angle=angle, alpha=alpha)",
      "1": "draw_texture_rectangle(center_x, center_y, texture, angle=angle, alpha=alpha)",
      "2": "draw_texture_rectangle(center_x, center_y, texture, scale, texture, angle=angle, alpha=alpha)",
      "3": "draw_texture_rectangle(center_x, center_y, scale, texture, angle=angle, alpha=alpha)",
      "4": "draw_texture_rectangle(center_x, center_y, texture, scale=arcade.Texture, angle=angle, alpha=alpha)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelSettled.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 542,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier']),",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_address=to_canonical_address(data['block_address']),",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number']),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                    )\n                result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "target_code": "                    )\n                result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "warning_line": "                result = json_loads(serialized)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `json_loads` but got `bytearray`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 189,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jamesoff/simplemonitor",
    "source_filename": "simplemonitor/Loggers/network.py",
    "target_filename": "simplemonitor/Loggers/network.py",
    "source_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd^",
    "target_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd",
    "predictions": [
      ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])"
    ],
    "correct": true,
    "top_five": {
      "0": ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "1": ") result = bytearray(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "2": ") result = byte_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "3": ") result = bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "4": ") result = json_loads(byte_array(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            target_state=data['target_state'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `TargetTask.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 223,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier']), target_state=data['target_state'],",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_name=typing.ChannelID(int(data['channel_name'])), target_state=data['target_state'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "target_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "1": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, normalizer)",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_izer)",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 79,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/graph_parser.py",
    "target_filename": "allennlp/models/graph_parser.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "1": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, normalizer)",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_izer)",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "target_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_line": "        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 103,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/common/logging.py",
    "target_filename": "allennlp/common/logging.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))"
    ],
    "correct": false,
    "top_five": {
      "0": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "1": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "2": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "3": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") level = logging._nameToLevel.get(level_name, logging.INFO)",
      "4": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[logging.INFO]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
    "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_line": "            user_token",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algolia/algoliasearch-client-python",
    "source_filename": "algoliasearch/insights_client_async.py",
    "target_filename": "algoliasearch/insights_client_async.py",
    "source_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395^",
    "target_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "predictions": [
      "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "1": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__()",
      "2": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "3": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__().__init__( insights_client._transporter, user_token)",
      "4": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_line": "FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 29,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quay/quay",
    "source_filename": "test/specs.py",
    "target_filename": "test/specs.py",
    "source_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04^",
    "target_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "predictions": [
      "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\""
    ],
    "correct": false,
    "top_five": {
      "0": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "1": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\")).hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "2": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "3": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "4": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
    "target_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_line": "            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 201,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "borglab/gtsfm",
    "source_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "target_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_changeid": "26f76a40e21bd082123f275404efca964faa59b9^",
    "target_changeid": "26f76a40e21bd082123f275404efca964faa59b9",
    "predictions": [
      "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2] )"
    ],
    "correct": false,
    "top_five": {
      "0": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2] )",
      "1": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ], two_view_reports_dict )",
      "2": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ] )",
      "3": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( [i0, i1, i2] )",
      "4": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, i0, i1, i2 )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "target_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_line": "        return cls(minimum=minimum, maximum=maximum)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 437,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/collection.py",
    "target_filename": "pystac/collection.py",
    "source_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93^",
    "target_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "predictions": [
      "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)"
    ],
    "correct": false,
    "top_five": {
      "0": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "1": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") max: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "2": "@classmethod def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "3": "@classmethod def from_dict(cls, d: Dict[str, Any], type: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "4": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, max=maximum)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n\n",
    "target_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_line": "        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 550,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "samschott/maestral",
    "source_filename": "maestral/cli.py",
    "target_filename": "maestral/cli.py",
    "source_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97^",
    "target_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "predictions": [
      "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[\"gui\"])"
    ],
    "correct": false,
    "top_five": {
      "0": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[\"gui\"])",
      "1": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=extras.gui)",
      "2": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple[str,...])",
      "3": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"]))",
      "4": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],\n",
    "target_code": "        restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 739,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],"
    ],
    "correct": true,
    "top_five": {
      "0": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "1": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "2": "restored = cls( payment_identifier=PaymentID(INT(data['payment_identifier'])), reason=data['reason'],",
      "3": "restored = cls( PaymentID=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "4": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "target_code": "    if expected_failure is not None:\n        assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_line": "        assert_code_snippet_fails(after, state, expected_failure)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quantumlib/Cirq",
    "source_filename": "cirq/docs/snippets_test.py",
    "target_filename": "cirq/docs/snippets_test.py",
    "source_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995^",
    "target_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "predictions": [
      "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure))"
    ],
    "correct": false,
    "top_five": {
      "0": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure))",
      "1": "if expected_failure is not None: assert_code_snippet_fails(after, state, expected_failure)",
      "2": "if expected_failure is not None: assert_code_snippet_fails(after, state, [expected_failure])",
      "3": "if expected_failure is not None: assert_code_snippet_fails(after, state, \"expected_failure\")",
      "4": "if expected_failure is not None: assert_code_snippet_fails(after, state, _expected_failure)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n\n",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_line": "        save_pickle(self.ec_data, self.save_path)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "target_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_changeid": "1de404c11bc5f40b766e966573506921980ff524^",
    "target_changeid": "1de404c11bc5f40b766e966573506921980ff524",
    "predictions": [
      "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))"
    ],
    "correct": false,
    "top_five": {
      "0": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))",
      "1": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "2": "log.info(f\"Saving model to { self.save_path } \") self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))",
      "3": "log.info(f\"Saving model to { self.save_path } \") self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "4": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
    "target_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            context.add_layer(obj)\n",
    "warning_line": "            context.add_layer(obj)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 635,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/configuration.py",
    "target_filename": "volatility/framework/interfaces/configuration.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj)"
    ],
    "correct": false,
    "top_five": {
      "0": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj)",
      "1": "obj = self._construct_class(context, config_path, args) if obj is not None: if obj is not None: context.add_layer(obj)",
      "2": "obj = self._construct_class(context, config_path, args) if obj is None: context.add_layer(obj)",
      "3": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None, context.add_layer(obj)",
      "4": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj, config_path)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, {})\n        # put delegation last by default\n",
    "target_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_line": "            delegator.delegations = Delegations({}, {})",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 354,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theupdateframework/python-tuf",
    "source_filename": "tests/repository_simulator.py",
    "target_filename": "tests/repository_simulator.py",
    "source_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3^",
    "target_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "predictions": [
      "if delegator.delegations is None: # put delegation last by default"
    ],
    "correct": false,
    "top_five": {
      "0": "if delegator.delegations is None: # put delegation last by default",
      "1": "if delegator.delegations is None: delegator.delegations = Delegations() # put delegation last by default",
      "2": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]]( { }, { } ) # put delegation last by default",
      "3": "if delegator.delegations is None: delegator.delegations = OrderedDict[str, DelegatedRole]( { }, { } ) # put delegation last by default",
      "4": "if delegator.delegations is None: delegator.delegations = OrderedDict(Delegations( { }, { } )) # put delegation last by default"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n                        if isinstance(loss, Tuple):\n                            average_over += loss[1]\n",
    "target_code": "\n                        if isinstance(loss, tuple):\n                            average_over += loss[1]\n",
    "warning_line": "                        if isinstance(loss, Tuple):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing._SpecialForm`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 472,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/trainers/trainer.py",
    "target_filename": "flair/trainers/trainer.py",
    "source_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054^",
    "target_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054",
    "predictions": [
      "if isinstance(loss, tuple): average_over += loss[1]"
    ],
    "correct": true,
    "top_five": {
      "0": "if isinstance(loss, tuple): average_over += loss[1]",
      "1": "if isinstance(loss, Tuple): average_over += loss[1]",
      "2": "if isinstance(str(loss, tuple)): average_over += loss[1]",
      "3": "if isinstance(tuple): average_over += loss[1]",
      "4": "if isinstance(loss): average_over += loss[1]"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            deposit_transaction=data['deposit_transaction'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelNewBalance.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'](int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier']), deposit_transaction=data['deposit_transaction'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
    "target_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
    "warning_line": "            label_probs.append(Label(idx, conf.item()))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "target_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402^",
    "target_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "predictions": [
      "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs"
    ],
    "correct": false,
    "top_five": {
      "0": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs",
      "1": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs",
      "2": "for idx, conf in enumerate(softmax): label_probs.append(Str(Label(idx, conf.item()))) return label_probs",
      "3": "for idx, conf in enumerate(softmax): return label_probs.append(Label(idx, str(conf.item())))",
      "4": "for idx, conf in enumerate(softmax): return label_probs.append(Label(idx, conf.item()))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=int(data['channel_identifier']),\n        )\n",
    "target_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n        )\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `RouteState.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 679,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), )"
    ],
    "correct": true,
    "top_five": {
      "0": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), )",
      "1": "node_address=to_canonical_address(data['node_address']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), )",
      "2": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])) )",
      "3": "node_address=to_canonical_address(data['node_address']), channel_identifier = Typing.ChannelID(int(data['channel_identifier'])), )",
      "4": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(Int(data['channel_identifier'])), )"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
    "target_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
    "warning_line": "                new_value = self._handle_Subscript(value)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Instagram/LibCST",
    "source_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "target_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8^",
    "target_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "predictions": [
      "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)"
    ],
    "correct": false,
    "top_five": {
      "0": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "1": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is not None new_value = self._handle_Subscript(value)",
      "2": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert value is not None new_value = self._handle_Subscript(value)",
      "3": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "4": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is not None and new_value = self._handle_Subscript(value)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.load(json_fp)\n            for jd in json_data:\n",
    "warning_line": "                json_data = json.loads(json_fp)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "target_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:"
    ],
    "correct": false,
    "top_five": {
      "0": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:",
      "1": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): return json_data = json.loads(json_fp) for jd in json_data:",
      "2": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not json_fp: return json_data for jd in json_data:",
      "3": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): json_data = json.loads(json_fp) for jd in json_data:",
      "4": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): return json_data for jd in json_data:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table\n\n",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                tables[name] = table\n\n",
    "warning_line": "                tables[table.name] = table",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "source_filename": "transformers4rec/torch/features/embedding.py",
    "target_filename": "transformers4rec/torch/features/embedding.py",
    "source_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7^",
    "target_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "predictions": [
      "features_dim[name] = table.dim if table.name is not None: tables[table.name] = table"
    ],
    "correct": false,
    "top_five": {
      "0": "features_dim[name] = table.dim if table.name is not None: tables[table.name] = table",
      "1": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = table",
      "2": "features_dim[name] = table.dim if table.name is not None and table.name not in tables: tables[table.name] = table",
      "3": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = dict(table.name)",
      "4": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = dict()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )\n",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_line": "            current_htlc_signatures=[],",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 477,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "spesmilo/electrum",
    "source_filename": "electrum/lnpeer.py",
    "target_filename": "electrum/lnpeer.py",
    "source_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2^",
    "target_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "predictions": [
      "current_commitment_signature=None, current_htlc_signatures=bytes, )"
    ],
    "correct": false,
    "top_five": {
      "0": "current_commitment_signature=None, current_htlc_signatures=bytes, )",
      "1": "current_commitment_signature=None, current_htlc_signatures=bytes(), )",
      "2": "current_commitment_signature=None, current_htlc_signatures= Bytes([], ) )",
      "3": "current_commitment_signature=None, current_htlc_signatures=List[], )",
      "4": "current_commitment_signature=None, current_htlc_signatures= None, )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    with proc as nix_env:\n        return parse_packages_xml(nix_env.stdout)\n",
    "target_code": "    with proc as nix_env:\n        assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_line": "        return parse_packages_xml(nix_env.stdout)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 258,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Mic92/nixpkgs-review",
    "source_filename": "nixpkgs_review/review.py",
    "target_filename": "nixpkgs_review/review.py",
    "source_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a^",
    "target_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "predictions": [
      "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout))"
    ],
    "correct": false,
    "top_five": {
      "0": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout))",
      "1": "with proc as nix_env: assert nix_env.stdout is not None return parse_packages_xml(nix_env.stdout)",
      "2": "with proc as nix_env: return bytes(parse_packages_xml(nix_env.stdout))",
      "3": "with proc as nix_env: return IO[bytes](nix_env.stdout)",
      "4": "with proc as nix_env: return IO[bytes](parse_packages_xml(stdout))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_line": "        player.init_names(self._name, title, self.description, self.short_description)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/charbuilder.py",
    "target_filename": "tale/charbuilder.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)"
    ],
    "correct": false,
    "top_five": {
      "0": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "1": "player.init_gender(self.gender) title = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "2": "player.init_gender(self.gender) title = None if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "3": "player.init_gender(self.gender) title = None if self.title is not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "4": "player.init_gender(self.gender) title = None if self.title == self._name else self.title else self.title player.init_names(self._name, title, self.description, self.short_description)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_line": "    op_node = compile_type_check_op(expr, ctx=ctx)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 91,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/expr.py",
    "target_filename": "edb/edgeql/compiler/expr.py",
    "source_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb^",
    "target_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "predictions": [
      "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)"
    ],
    "correct": false,
    "top_five": {
      "0": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "1": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "2": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "3": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert expr is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "4": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert op is not None op_node = compile_type_check_op(expr, ctx=ctx)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)\n",
    "target_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_line": "            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args) updates = component.pipeline_init(*args)"
    ],
    "correct": false,
    "top_five": {
      "0": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args) updates = component.pipeline_init(*args)",
      "1": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) updates = component.pipeline_init(*args)",
      "2": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str) updates = component.pipeline_init(*args)",
      "3": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get('pipeline_init')) updates = component.pipeline_init(*args)",
      "4": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str()) updates = component.pipeline_init(*args)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n                new = Or(new, key_argument != index_argument)\n\n",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_line": "                new = Or(new, key_argument != index_argument)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1374,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "new = Or(new, key_argument!= index_argument)"
    ],
    "correct": false,
    "top_five": {
      "0": "new = Or(new, key_argument!= index_argument)",
      "1": "new = Or(new, key_argument == index_argument)",
      "2": "new = Or(new, key_argument!= index_argument) if key_argument is not None:",
      "3": "new = Or(new, key_argument!= index_argument) if key_argument is None:",
      "4": "new = Or(new, key_argument!= index_argument) if index_argument is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_line": "    (\"read_map\", [T.File()], T.Map(None), _notimpl),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/StdLib.py",
    "target_filename": "WDL/StdLib.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([]), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),"
    ],
    "correct": false,
    "top_five": {
      "0": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([]), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "1": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "2": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "3": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([]), None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "4": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Any()], None], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_line": "            amount=int(data['amount']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 598,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=to_canonical_address(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_identifier=TokenAmount(int(data['token_identifier'])), token_amount=TokenAmount(int(data['token_amount'])), initiator=to_canonical_address(data['initiator']),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "target_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "warning_line": "        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `frozenset[str]` for 5th parameter `step_metadata_keys` to call `BuilderConfig.__init__` but got `typing.Set[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 210,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/datasets",
    "source_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "target_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "source_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f^",
    "target_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f",
    "predictions": [
      "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),"
    ],
    "correct": true,
    "top_five": {
      "0": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "1": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), has_policy_metadata=True,",
      "2": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), )",
      "3": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), ),",
      "4": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset( [_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ngroup_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n\n",
    "target_code": "\ngroup_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_line": "    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "intel/dffml",
    "source_filename": "dffml/operation/output.py",
    "target_filename": "dffml/operation/output.py",
    "source_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3^",
    "target_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "predictions": [
      "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" )"
    ],
    "correct": false,
    "top_five": {
      "0": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" )",
      "1": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\") )",
      "2": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any]) )",
      "3": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec )",
      "4": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition[GroupBySpec] )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode(from_zip_code)\n        to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "target_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode.create(from_zip_code)\n        to_zip_code = ZipCode.create(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "warning_line": "        to_zip_code = ZipCode(to_zip_code)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `ZipCode.__init__` but got `Union[ZipCode, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 326,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "olist/correios",
    "source_filename": "correios/client.py",
    "target_filename": "correios/client.py",
    "source_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457^",
    "target_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457",
    "predictions": [
      "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\","
    ],
    "correct": false,
    "top_five": {
      "0": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "1": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.Append(from_zip_code) to_zip_code = ZipCode.Append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "2": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "3": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.prototype.append(from_zip_code) to_zip_code = ZipCode.prototype.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "4": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.Append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\","
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
    "target_code": "        if not self.check_enable_mode():\n            new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_line": "            output += self.send_command_timing(",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 65,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ktbyers/netmiko",
    "source_filename": "netmiko/dell/dell_isilon_ssh.py",
    "target_filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8^",
    "target_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "predictions": [
      "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):"
    ],
    "correct": false,
    "top_five": {
      "0": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "1": "if not self.check_enable_mode(): return self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "2": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt = False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "3": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=None, strip_command=None ) if re.search(pattern, output, flags=re_flags):",
      "4": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=flags):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_line": "                cached_trial.distributions[param_name] = dists",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "optuna/optuna",
    "source_filename": "optuna/storages/cached_storage.py",
    "target_filename": "optuna/storages/cached_storage.py",
    "source_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb^",
    "target_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "predictions": [
      "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal"
    ],
    "correct": false,
    "top_five": {
      "0": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "1": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(distributions.BaseDistribution) updates.params[param_name] = param_value_internal",
      "2": "dists[param_name] = dists cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "3": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(dists.BaseDistribution) updates.params[param_name] = param_value_internal",
      "4": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists update_params[param_name] = param_value_internal"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
    "target_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_line": "        ret = perform_krb181_workaround(principal)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 117,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/security/kerberos.py",
    "target_filename": "airflow/security/kerberos.py",
    "source_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0^",
    "target_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "predictions": [
      "time.sleep(1.5) ret = str(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:"
    ],
    "correct": false,
    "top_five": {
      "0": "time.sleep(1.5) ret = str(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "1": "time.sleep(1.5) ret = krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "2": "time.sleep(1.5) ret = self.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "3": "time.sleep(1.5) assert ret is not None if exit_on_fail and ret!= 0:",
      "4": "time.sleep(1.5) ret = krb181[principal] if exit_on_fail and ret!= 0:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "target_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            return\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_line": "        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 111,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "paul-nameless/tg",
    "source_filename": "tg/controllers.py",
    "target_filename": "tg/controllers.py",
    "source_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744^",
    "target_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "predictions": [
      "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)"
    ],
    "correct": false,
    "top_five": {
      "0": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "1": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "2": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "3": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "4": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) return"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    company: ormar.String(max_length=200)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    company = ormar.String(max_length=200)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_unique_constraints.py",
    "target_filename": "tests/test_unique_constraints.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company= ormar.String(max_length=200)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) firm = ormar.String(max_length=200)",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) firm= ormar.String(max_length=200)",
      "4": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) company= ormar.String(max_length=200)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\nclass BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n  \"\"\"Generic TFX example gen base executor.\n",
    "target_code": "\nclass BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  \"\"\"Generic TFX example gen base executor.\n",
    "warning_line": "    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "target_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor."
    ],
    "correct": false,
    "top_five": {
      "0": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor.",
      "1": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "2": "class BaseExampleGenExecutor( base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "3": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.",
      "4": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\nclass BaseHandler(with_metaclass(abc.ABCMeta, object)):\n  \"\"\"Base Handler for CLI.\n",
    "target_code": "\nclass BaseHandler(abc.ABC):\n  \"\"\"Base Handler for CLI.\n",
    "warning_line": "class BaseHandler(with_metaclass(abc.ABCMeta, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/tools/cli/handler/base_handler.py",
    "target_filename": "tfx/tools/cli/handler/base_handler.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI."
    ],
    "correct": true,
    "top_five": {
      "0": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.",
      "1": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.Settings\"\"\"",
      "2": "class BaseHandler(ABC): \"\"\"Base Handler for CLI.",
      "3": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.Settings\"\"\"\"",
      "4": "class BaseHandler(bc.ABC): \"\"\"Base Handler for CLI."
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        unconf_lith_id: int,\n        edges: Array[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
    "target_code": "        unconf_lith_id: int,\n        edges: np.ndarray,\n        centroids: Dict[int, np.ndarray]\n",
    "warning_line": "        edges: Array[int, ..., 2],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `nptyping.Array[(int, ..., 2)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 361,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cgre-aachen/gempy",
    "source_filename": "gempy/assets/topology.py",
    "target_filename": "gempy/assets/topology.py",
    "source_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098^",
    "target_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098",
    "predictions": [
      "unconf_lith_id: int, edges: np.ndarray, centroids: Dict[int, np.ndarray]"
    ],
    "correct": true,
    "top_five": {
      "0": "unconf_lith_id: int, edges: np.ndarray, centroids: Dict[int, np.ndarray]",
      "1": "unconf_lith_id: int, edges: Dict[int,..., 2], centroids: Dict[int, np.ndarray]",
      "2": "unconf_lith_id: int, edges: np.Ndarray, centroids: Dict[int, np.ndarray]",
      "3": "unconf_lith_id: int, edges: np.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "4": "unconf_lith_id: int, edges: int, centroids: Dict[int, np.ndarray]"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\nRemoteMethod = namedtuple('RemoteMethod',\n                          'method config_section kwargs priority',\n                          verbose=False)\n\"\"\"RemotedMethod is used by other modules that want to register a method to\n",
    "target_code": "\nRemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'])\n\"\"\"RemotedMethod is used by other modules that want to register a method to\n",
    "warning_line": "                          verbose=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Final[False]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/mode_controller.py",
    "target_filename": "mpf/core/mode_controller.py",
    "source_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7^",
    "target_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7",
    "predictions": [
      "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to"
    ],
    "correct": true,
    "top_five": {
      "0": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "1": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "2": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "3": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "4": "RemoteMethod = namedtuple('RemoteMethod', \"method config_section kwargs priority\") \"\"\"RemotedMethod is used by other modules that want to register a method to"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.Boolean(default=False)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    completed= ormar.Boolean(default=False)\n\n",
    "warning_line": "    completed: ormar.Boolean(default=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Boolean($parameter$default = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "1": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed = ormar.Boolean(default=False)",
      "2": "id = ormar.Integer(primary_key=True) text= ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "3": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed=ormar.Boolean(default=False)",
      "4": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=True)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):\n    \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\n",
    "target_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]:\n    \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\n",
    "warning_line": "      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(kubernetes.client.V1Job)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster"
    ],
    "correct": true,
    "top_five": {
      "0": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "1": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.",
      "2": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\"\"\"",
      "3": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "4": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster \"\"\""
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):\n    \"\"\"Abstract class for all components.\n",
    "target_code": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=_Maker):\n    \"\"\"Abstract class for all components.\n",
    "warning_line": "class Component(with_metaclass(_Maker, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jwkvam/bowtie",
    "source_filename": "bowtie/_component.py",
    "target_filename": "bowtie/_component.py",
    "source_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1^",
    "target_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "predictions": [
      "# pylint: disable=too-few-public-methods class Component(metaclass=_Maker): \"\"\"Abstract class for all components."
    ],
    "correct": true,
    "top_five": {
      "0": "# pylint: disable=too-few-public-methods class Component(metaclass=_Maker): \"\"\"Abstract class for all components.",
      "1": "# pylint: disable=too-few-public-methods class Component(metaclass: \"\"\"Abstract class for all components.",
      "2": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"): \"\"\"Abstract class for all components.",
      "3": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"]): \"\"\"Abstract class for all components.",
      "4": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"\"): \"\"\"Abstract class for all components."
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 35,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fastapi/docs001.py",
    "target_filename": "docs_src/fastapi/docs001.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "2": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "3": "id = ormar.Indeger(primary_key=True) name = ormar.String(max_length=100)",
      "4": "id= ormar.Integer(primary_key=True) name= ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        \"\"\"\n",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        \"\"\"\n",
    "warning_line": "    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "golemfactory/clay",
    "source_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "target_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6^",
    "target_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "predictions": [
      "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "1": "awaited_messages: typing.Optional[list] = None ) -> bool: \"\"\"",
      "2": "awaited_messages: typing.Optional[list] = None ) -> None: \"\"\"",
      "3": "awaited_messages: typing.Optional[list] = None ) -> Optional[match]: \"\"\"",
      "4": "awaited_messages: typing.Optional[list] = None ) -> Match: \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True, autoincrement=False)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True, autoincrement=False)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True, autoincrement=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True, $parameter$autoincrement = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 20,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_same_table_joins.py",
    "target_filename": "tests/test_more_same_table_joins.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100)",
      "1": "id= ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True, autoincrement=False) name= ormar.String(max_length=100)",
      "3": "id= ormar.Integer(primary_key=True, autoincrement=False) name= ormar.String(max_length=100)",
      "4": "id = ormar.Indeger(primary_key=True, autoincrement=False) name = ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    @staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
    "target_code": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_line": "    def center(a: [\"Point2\"]) -> \"Point2\":",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[sc2.position.Point2]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BurnySc2/python-sc2",
    "source_filename": "sc2/position.py",
    "target_filename": "sc2/position.py",
    "source_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53^",
    "target_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "predictions": [
      "@staticmethod def center(a: List[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "@staticmethod def center(a: List[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "1": "@staticmethod def center(a: Union[List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "2": "@staticmethod def center(a: Optional[[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "3": "@staticmethod def center(a: Union[Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "4": "@staticmethod def center(a: Union[Set[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": false,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "2": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "3": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "4": "id = ormar.Integer(primary_key=True) name = ormar[max_length=100] category= ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fields/docs003.py",
    "target_filename": "docs_src/fields/docs003.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar[max_length=100]",
      "3": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if id is not None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray():\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        if np.max(X) <= 2:\n",
    "target_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        if np.max(X) <= 2:\n",
    "warning_line": "    def predict(self, X: np.ndarray) -> np.ndarray():",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `np.ndarray()` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 116,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scikit-learn-contrib/MAPIE",
    "source_filename": "mapie/tests/test_classification.py",
    "target_filename": "mapie/tests/test_classification.py",
    "source_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f^",
    "target_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "predictions": [
      "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:"
    ],
    "correct": true,
    "top_five": {
      "0": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "1": "def predict(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "2": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "3": "def predict(self, X: Optional[np.ndarray]) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: Optional[np.ndarray]) -> np.ndarray: if np.max(X) = 2:",
      "4": "def predict(self, X: np.ndarray) -> np.ndarray: return np[1, 2, 1] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
    "target_code": "\ndef __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
    "warning_line": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(str, str, str)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 19,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "ciphers/trafid_cipher.py",
    "target_filename": "ciphers/trafid_cipher.py",
    "source_changeid": "60895366c0f50844af2737130ed98c2510e90060^",
    "target_changeid": "60895366c0f50844af2737130ed98c2510e90060",
    "predictions": [
      "def __decryptPart(messagePart: str, character2Number: dict) -> dict: tmp, thisPart = \"\", \"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def __decryptPart(messagePart: str, character2Number: dict) -> dict: tmp, thisPart = \"\", \"\"",
      "1": "def __decryptPart(messagePart: str, character2Number: dict) -> str: tmp, thisPart = \"\", \"\"",
      "2": "def __decryptPart(messagePart: str, character2Number: dict) -> tmp: tmp, thisPart = \"\", \"\"",
      "3": "def __decryptPart(messagePart: str, character2Number: dict) -> '': tmp, thisPart = \"\", \"\"",
      "4": "def __decryptPart(messagePart: str, character2Number: dict) -> dict: tmp, thisPart = \"\", \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 58,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar.ForeignKey(Category)"
    ],
    "correct": false,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar.ForeignKey(Category)",
      "1": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar.ForeignKey(Category)",
      "2": "id = ormar.Integer(primary_key=True) text= ormar.String(max_length=500) category= ormar.ForeignKey(Category)",
      "3": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category: ormar.ForeignKey(Category)",
      "4": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str.ForeignKey(Category)]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category, nullable=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_fastapi_usage.py",
    "target_filename": "tests/test_fastapi_usage.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "3": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "4": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.String(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n\n",
    "target_code": "\n    id = ormar.String(primary_key=True, default=key, max_length=8)\n    name = ormar.String(max_length=32)\n\n",
    "warning_line": "    id: ormar.String(primary_key=True, default=key, max_length=8)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_non_integer_pkey.py",
    "target_filename": "tests/test_non_integer_pkey.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32)",
      "1": "id= ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32)",
      "2": "id= ormar.String(primary_key=True, default=key, max_length=8) name= ormar.String(max_length=32)",
      "3": "id = ormar.String(primary_key=True, default=key, max_length=8) name= ormar.String(max_length=32)",
      "4": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) if id is not None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,\n",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_line": "      command: Optional(List[str]) = None,",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,"
    ],
    "correct": true,
    "top_five": {
      "0": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "1": "experiment: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "2": "experiments: Iterable[conf.Experiment], command: Optional[List[str], None] = None, args: Optional[List[str]] = None,",
      "3": "experiments: Iterable[conf.Experiment], command: Optional[List[str]], args: Optional[List[str]] = None,",
      "4": "experiments: Iterable[conf.Experiment], command: None, args: Optional[List[str]] = None,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata\n",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
    "warning_line": "    def setMetaData(self, metadata: Dict[str: Any]) -> None:",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/PluginObject.py",
    "target_filename": "UM/PluginObject.py",
    "source_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9^",
    "target_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "predictions": [
      "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]): return self._metadata"
    ],
    "correct": false,
    "top_five": {
      "0": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]): return self._metadata",
      "1": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str, Any]: return self._metadata",
      "2": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "3": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, Optional[Dict[str]] = None: return self._metadata",
      "4": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_line": "        plane: [str, Plane],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[str, vedo.Plane]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 336,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "brainglobe/brainrender",
    "source_filename": "brainrender/scene.py",
    "target_filename": "brainrender/scene.py",
    "source_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6^",
    "target_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "predictions": [
      "self, plane: vedo.Plane, actors=None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, plane: vedo.Plane, actors=None,",
      "1": "self, plane: Optional[[str, Plane], actors=None,",
      "2": "self, plane: Optional[str, Plane], actors=None,",
      "3": "self, plane: Optional[[str, Plane]], actors=None,",
      "4": "self, plane: Optional[Plane], actors=None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 48,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "2": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100), category= ormar.ForeignKey(Category, nullable=True)",
      "4": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        text: Optional[Text],\n        sender_id: [Optional[Text]],\n        metadata: Optional[Dict],\n",
    "target_code": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
    "warning_line": "        sender_id: [Optional[Text]],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[typing.Optional[typing.Text]]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/core/channels/webexteams.py",
    "target_filename": "rasa/core/channels/webexteams.py",
    "source_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2^",
    "target_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2",
    "predictions": [
      "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],"
    ],
    "correct": true,
    "top_five": {
      "0": "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],",
      "1": "text: Optional[Text], sender_id: Optional[Text]], metadata: Optional[Dict],",
      "2": "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],",
      "3": "text: Optional[Text], sender_id: Optional[Text] + sender_id, metadata: Optional[Dict],",
      "4": "text: Optional[Text], sender_id: Optional[Text][0], metadata: Optional[Dict],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\ndef ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    magic = pi * sqrt(2) / smoothing\n",
    "target_code": "\ndef ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    magic = pi * sqrt(2) / smoothing\n",
    "warning_line": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `type(pandas.Series)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "freqtrade/indicator_helpers.py",
    "target_filename": "freqtrade/indicator_helpers.py",
    "source_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c^",
    "target_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "predictions": [
      "def ehlers_super_smoother(series: Series, smoothing: float = 6): magic = pi * sqrt(2) / smoothing"
    ],
    "correct": false,
    "top_five": {
      "0": "def ehlers_super_smoother(series: Series, smoothing: float = 6): magic = pi * sqrt(2) / smoothing",
      "1": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str: magic = pi * sqrt(2) / smoothing",
      "2": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: magic = pi * sqrt(2) / smoothing",
      "3": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> [Series]: magic = pi * sqrt(2) / smoothing",
      "4": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> 'Series': magic = pi * sqrt(2) / smoothing"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    album = ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 41,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_foreign_keys.py",
    "target_filename": "tests/test_foreign_keys.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True) album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") title= ormar.String(max_length=100)",
      "3": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title= ormar.String(max_length=100)",
      "4": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "2": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "3": "id = ormar.Indeger(primary_key=True) name = ormar.String(max_length=100)",
      "4": "id= ormar.Integer(primary_key=True) name= ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "target_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_line": "    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 43,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Flax-Network/flax-blockchain",
    "source_filename": "src/util/Conditions.py",
    "target_filename": "src/util/Conditions.py",
    "source_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f^",
    "target_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "predictions": [
      "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:"
    ],
    "correct": true,
    "top_five": {
      "0": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:",
      "1": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] for _ in conditions:",
      "2": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = ( { } for _ in conditions:",
      "3": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions:",
      "4": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d = Dict[ConditionOpcode, List[ConditionVarPair]] for _ in conditions:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            else:\n                extra_info = [] # type: [str]\n                if subtype_label is not None:\n",
    "target_code": "            else:\n                extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_line": "                extra_info = [] # type: [str]",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `\"[str]\"` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checker.py",
    "target_filename": "mypy/checker.py",
    "source_changeid": "021283f03639d185c3a0985684a94307c9fcc15b^",
    "target_changeid": "021283f03639d185c3a0985684a94307c9fcc15b",
    "predictions": [
      "else: extra_info = [] if subtype_label is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "else: extra_info = [] if subtype_label is not None:",
      "1": "else: extra_info = [] # type: List[str] if subtype_label is not None:",
      "2": "else: extra_info = [] # type: Optional[str] if subtype_label is not None:",
      "3": "else: extra_info = [] # type: [str] if subtype_label is not None:",
      "4": "else: extra_info = [] # type: '' if subtype_label is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=40)\n\n",
    "warning_line": "    name: ormar.String(max_length=40)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 40)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_many_to_many.py",
    "target_filename": "tests/test_many_to_many.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40)",
      "1": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=40)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar[max_length=40]",
      "3": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=40)",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) if id is not None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
    "target_code": "\n    def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_line": "    def add(self, predicted: List[str], labels: List[str]) -> None:",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "asyml/texar-pytorch",
    "source_filename": "texar/torch/run/metric/generation.py",
    "target_filename": "texar/torch/run/metric/generation.py",
    "source_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3^",
    "target_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "predictions": [
      "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):"
    ],
    "correct": false,
    "top_five": {
      "0": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "1": "def add(self, predicted: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "2": "def add(self, predicted: List[str], labels: StreamingMetric()) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "3": "def add(self, predicted: List[str], labels: StreamingMetric) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "4": "def add(self, predicted, labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
    "target_code": "\n    def fit(self, ts):\n        super().fit(ts)\n        # Check univariate time series\n",
    "warning_line": "    def fit(self, ts, component_index: Optional[int] = None):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 218,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "darts/models/theta.py",
    "target_filename": "darts/models/theta.py",
    "source_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3^",
    "target_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "predictions": [
      "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series"
    ],
    "correct": false,
    "top_five": {
      "0": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series",
      "1": "def fit(self, ts, component_index: Optional[int] = None) -> None: super().fit(ts, component_index) # Check univariate time series",
      "2": "def fit(self, ts, component_index=None): super().fit(ts, component_index=None) # Check univariate time series",
      "3": "def fit(self, ts): super().fit(ts, component_index) # Check univariate time series",
      "4": "def fit( self, ts, component_index: Optional[int] = None ): super().fit( ts, component_index ) # Check univariate time series"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        \"\"\"\n        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":\n        \"\"\"Create a xor expression.\n",
    "target_code": "        \"\"\"\n        if not isinstance(other, BitVec):\n            other = BitVec(z3.BitVecVal(other, self.size()))\n        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \"\"\"Create a xor expression.\n",
    "warning_line": "    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 145,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/smt/bitvecfunc.py",
    "target_filename": "mythril/laser/smt/bitvecfunc.py",
    "source_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9^",
    "target_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "predictions": [
      "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \"\"\"Create a xor expression."
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "1": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "2": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[BitVec, int]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "3": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "4": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
    "target_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_line": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "target_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28^",
    "target_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "predictions": [
      "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)"
    ],
    "correct": false,
    "top_five": {
      "0": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "1": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "2": "def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "3": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "4": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> bool: self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_line": "    def pop(self, index: int = -1) -> NoReturn: ...",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 52,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pallets/werkzeug",
    "source_filename": "src/werkzeug/datastructures.pyi",
    "target_filename": "src/werkzeug/datastructures.pyi",
    "source_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3^",
    "target_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "predictions": [
      "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:..."
    ],
    "correct": false,
    "top_five": {
      "0": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "1": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int == -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "2": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int, SupportsIndex) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "3": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "4": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: list[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:..."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        return cls(\n",
    "warning_line": "    def from_dict(",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1769,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/messages.py",
    "target_filename": "raiden/messages.py",
    "source_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd^",
    "target_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "predictions": [
      "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls("
    ],
    "correct": false,
    "top_five": {
      "0": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "1": "def from_dict( cls: typing.Optional[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "2": "def from_dict( cls: typing.T_UpdatePFS, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "3": "def from_dict( cls, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "4": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ): return cls("
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_line": "    team: Optional[Team] = ormar.ForeignKey(Team)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "3": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "4": "id= ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None\n\n",
    "target_code": "    id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_line": "    charging_profile: Dict = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 96,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None",
      "1": "id_tag: str connector_id: option[int] = None charging_profile: Optional[Dict] = None",
      "2": "id_tag: str connector_id: int = None charging_profile: Optional[Dict] = None",
      "3": "id_tag: str connector_id: options.int = None charging_profile: Optional[Dict] = None",
      "4": "id_tag: str connector_id: Optional[int] = None charging_profiles: Optional[Dict] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    body: List[Union[Comment, Statement]] = field(default=list)\n",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_line": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 139,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/dotenv-linter",
    "source_filename": "dotenv_linter/grammar/fst.py",
    "target_filename": "dotenv_linter/grammar/fst.py",
    "source_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6^",
    "target_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "predictions": [
      "body: List[Union[Comment, Statement]] = field(default=list)"
    ],
    "correct": false,
    "top_five": {
      "0": "body: List[Union[Comment, Statement]] = field(default=list)",
      "1": "body: List[List[Union[Comment, Statement]]] = field(default=list)",
      "2": "body: List[Comment, Statement] = field(default=list)",
      "3": "body: List[List[Union[Comment, Statement]] = field(default=list)",
      "4": "body = List[Union[Comment, Statement]] = field(default=list)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = None\n    barrier: Optional[Barrier] = None\n",
    "target_code": "    pub_port: Optional[int] = None\n    server: Optional[SuiteRuntimeServer] = None\n    publisher: Optional[WorkflowPublisher] = None\n    barrier: Optional[Barrier] = None\n",
    "warning_line": "    publisher: WorkflowPublisher = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `publisher` declared in class `Scheduler` has type `WorkflowPublisher` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "1": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "2": "pub_port: Optional[int] = None server: Optional[SUPERRUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "3": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher = Optional[WorkflowPublisher] barrier: Optional[Barrier] = None",
      "4": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher = Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: int = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None\n\n",
    "target_code": "class ClearChargingProfilePayload:\n    id: Optional[int] = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `ClearChargingProfilePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 61,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "1": "class ClearChargingProfilePayload: id = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "2": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeTypeType] = None stack_level: Optional[int] = None",
      "3": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType[]] = None stack_level: Optional[int] = None",
      "4": "class ClearChargingProfilePayload: int = \"\" connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n\n",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_line": "    msg = None  # type: MessageBuilder",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checkstrformat.py",
    "target_filename": "mypy/checkstrformat.py",
    "source_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe^",
    "target_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "predictions": [
      "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker"
    ],
    "correct": false,
    "top_five": {
      "0": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "1": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "2": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "3": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "4": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "target_code": "\n    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "warning_line": "    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 353,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "angr/angr",
    "source_filename": "angr/calling_conventions.py",
    "target_filename": "angr/calling_conventions.py",
    "source_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f^",
    "target_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "predictions": [
      "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address"
    ],
    "correct": false,
    "top_five": {
      "0": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address",
      "1": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address",
      "2": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address",
      "3": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address.",
      "4": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    # suite params\n    stop_mode: StopMode = None\n    stop_task: Optional[str] = None\n",
    "target_code": "    # suite params\n    stop_mode: Optional[StopMode] = None\n    stop_task: Optional[str] = None\n",
    "warning_line": "    stop_mode: StopMode = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `stop_mode` declared in class `Scheduler` has type `StopMode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 181,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "1": "# suite params: Optional[StopMode] = None stop_task: Optional[str] = None",
      "2": "# suite params: Optional[str] = None stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "3": "# suite params stop_mode: Optional[str] = None stop_task: Optional[str] = None",
      "4": "# suite params stop_mode = Optional[StopMode] stop_task: Optional[str] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
    "target_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_line": "    single: List[OrthVariantsSingle] = {}",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 26,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/training/augment.py",
    "target_filename": "spacy/training/augment.py",
    "source_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be^",
    "target_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "predictions": [
      "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] single: List[OrthVariantsSingle] = []"
    ],
    "correct": true,
    "top_five": {
      "0": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] single: List[OrthVariantsSingle] = []",
      "1": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] Single: List[OrthVariantsSingle] = []",
      "2": "class OrthVariants(BaseModel): paired: Optional[List[OrthVariantsPaired]] = { } single: Optional[List[OrthVariantsSingle]] = { }",
      "3": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [], single: List[OrthVariantsSingle] = []",
      "4": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] => List[OrthVariantsSingle] = [] ) single: List[OrthVariantsSingle] = []"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str\n\n",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_line": "        self.tmp_meson_version = None # type: str",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 461,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mesonbuild/meson",
    "source_filename": "mesonbuild/interpreterbase.py",
    "target_filename": "mesonbuild/interpreterbase.py",
    "source_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74^",
    "target_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "predictions": [
      "# current meson version target within that if-block. self.tmp_meson_version: Optional[str]"
    ],
    "correct": false,
    "top_five": {
      "0": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str]",
      "1": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] = None # type: Optional[str]",
      "2": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str]",
      "3": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] # type: Optional[str]",
      "4": "# current meson version target within that if-block. self.tmp_meson_version: str # type: Optional[str]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    APP_DIR: str = None\n    STUDIES: str = None\n\n",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_line": "    STUDIES: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAILabel",
    "source_filename": "monailabel/config.py",
    "target_filename": "monailabel/config.py",
    "source_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0^",
    "target_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "predictions": [
      "APP_DIR: str = \"\" STUDIES: Optional[str] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "APP_DIR: str = \"\" STUDIES: Optional[str] = None",
      "1": "APP_DIR: str = '' STUDIES: Optional[str] = None",
      "2": "APP_DIR: str = \"\" STUDIES: str = \"\"",
      "3": "APP_DIR: Optional[str] = None STUDIES: Optional[str] = None",
      "4": "APP_DIR: str = [] STUDIES: Optional[str] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_line": "        self.image: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])"
    ],
    "correct": false,
    "top_five": {
      "0": ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "1": ") self.image: typing.Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "2": ") self.image: option[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "3": ") self.image: str = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "4": ") self.image: str = '' self.append_file = ''.join([self.image_name, '.append'])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true
    }
  },
  {
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_line": "        self.event = None   # type: asyncio.Event",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 794,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/events.py",
    "target_filename": "mpf/core/events.py",
    "source_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278^",
    "target_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "predictions": [
      "self.waiter = False self.event = '' # type: asyncio.Event"
    ],
    "correct": false,
    "top_five": {
      "0": "self.waiter = False self.event = '' # type: asyncio.Event",
      "1": "self.waiter = False self.event = 0 # type: asyncio.Event",
      "2": "self.waiter = False self.event = \"\" # type: asyncio.Event",
      "3": "self.waiter = False self.event = 0 # type: Optional[asyncio.Event]",
      "4": "self.waiter = False self.event: asyncio.Event"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_line": "    id: int = ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "1": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "2": "id= ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "3": "id = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "4": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if ident is not None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False\n",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_line": "    query_subtype: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "target_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "ioc: str ioc_type: str query_subtype: Optional[str] = None result: bool = False"
    ],
    "correct": false,
    "top_five": {
      "0": "ioc: str ioc_type: str query_subtype: Optional[str] = None result: bool = False",
      "1": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None result: bool = False",
      "2": "ioc: str ioc_type: str query_subtype: str result: bool = False",
      "3": "ioc_type: str query_subtype: Optional[str] = None result: bool = False",
      "4": "ioc_type: str query_subtype: str result: bool = False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "class Cli:\n    description: str = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "target_code": "class Cli:\n    description: Optional[str] = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "warning_line": "    description: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `description` declared in class `Cli` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 15,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Andarius/piou",
    "source_filename": "piou/cli.py",
    "target_filename": "piou/cli.py",
    "source_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2^",
    "target_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2",
    "predictions": [
      "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)"
    ],
    "correct": true,
    "top_five": {
      "0": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "1": "class Cli: description = \"\" formatter: Formatter = field(default_factory=RichFormatter)",
      "2": "class Cli: description = Optional[str] formatter: Formatter = field(default_factory=RichFormatter)",
      "3": "class Cli: description = str formatter: Formatter = field(default_factory=RichFormatter)",
      "4": "class Cli: description = '' formatter: Formatter = field(default_factory=RichFormatter)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    requested_message: MessageTrigger\n    connector_id: int = None\n\n",
    "target_code": "    requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "requested_message: MessageTrigger connector_id: Optional[int] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "requested_message: MessageTrigger connector_id: Optional[int] = None",
      "1": "requested_message: Optional[MessageTrigger] = None connector_id: Optional[int] = None",
      "2": "request_message: MessageTrigger connector_id: Optional[int] = None",
      "3": "requested_message: MessageTrigger connector_id: option[int] = None",
      "4": "requested_message: MessageTrigger connector_id: option(int) = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }\n",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_line": "            self._agent_net_config = {",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "instadeepai/Mava",
    "source_filename": "mava/systems/tf/mappo/system.py",
    "target_filename": "mava/systems/tf/mappo/system.py",
    "source_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7^",
    "target_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "predictions": [
      "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }"
    ],
    "correct": false,
    "top_five": {
      "0": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "1": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for a_i, agent in enumerate(agents) }",
      "2": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) {",
      "3": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for agent in enumerate(agents) }",
      "4": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for a_i, agent in enumerate(agents) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: str = ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `name` declared in class `Album` has type `str` but is used as type `ormar.fields.model_fields.String`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 22,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id: int = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "3": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "4": "id= ormar.Integer(primary_key=True) name= ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                    self.env_good = True\n                    self.failure_list = None\n\n",
    "target_code": "                    self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_line": "                    self.failure_list = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 707,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "emissary-ingress/emissary",
    "source_filename": "ambassador/ambassador_diag/diagd.py",
    "target_filename": "ambassador/ambassador_diag/diagd.py",
    "source_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38^",
    "target_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "predictions": [
      "self.env_good = True self.failure_list = []"
    ],
    "correct": true,
    "top_five": {
      "0": "self.env_good = True self.failure_list = []",
      "1": "self.env_good = True self.failure_list = List[str]",
      "2": "self.env_good = True self.failure_list = ''",
      "3": "self.env_good = True self.failure_list: List[str]",
      "4": "self.env_good = True self.failure_list = \"\""
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    topo: Mesh = None\n    element: Element = None\n\n",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_line": "    element: Element = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 171,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "kinnala/scikit-fem",
    "source_filename": "skfem/assembly/dofs.py",
    "target_filename": "skfem/assembly/dofs.py",
    "source_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7^",
    "target_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "predictions": [
      "topo: Mesh = None element: Element"
    ],
    "correct": false,
    "top_five": {
      "0": "topo: Mesh = None element: Element",
      "1": "topo: Mesh = None element: Optional[Element] = None",
      "2": "topo: Mesh = None element: Element = \"\"",
      "3": "topo: Mesh = \"\" element: Element",
      "4": "topo: Mesh = None element: Element = ''"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    num_classes: int = None\n    names: List[str] = None\n    names_file: str = None\n    id: Optional[str] = None\n",
    "target_code": "\n    num_classes: Optional[int] = None\n    names: Optional[List[str]] = None\n    names_file: Optional[str] = None\n    id: Optional[str] = None\n",
    "warning_line": "    names_file: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `names_file` declared in class `ClassLabel` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 552,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "huggingface/datasets",
    "source_filename": "src/datasets/features.py",
    "target_filename": "src/datasets/features.py",
    "source_changeid": "49e517a3d21392291d771872204594f43cd09532^",
    "target_changeid": "49e517a3d21392291d771872204594f43cd09532",
    "predictions": [
      "num_classes: int = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "num_classes: int = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "1": "num_classes: Optional[int] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "2": "num_classes: int = None names: Optional[List[str]] = None id: Optional[str] = None",
      "3": "num_classes: int: Optional[str] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "4": "num_classes: int = 0 names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        self.returncode = code\n",
    "warning_line": "        self.returncode = code",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "actionless/pikaur",
    "source_filename": "pikaur_test/helpers.py",
    "target_filename": "pikaur_test/helpers.py",
    "source_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc^",
    "target_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "predictions": [
      "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code"
    ],
    "correct": false,
    "top_five": {
      "0": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "1": "def _fake_exit(self, code: Int = 0) -> NoReturn: self.returncode = code",
      "2": "def _fake_exit(self, code: Optional[int] = 0) -> None: self.returncode = code",
      "3": "def _fake_exit(self, code: int = 0) -> NoReturn: self.returncode = code",
      "4": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: return code"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false
    }
  },
  {
    "source_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: InferenceAPI = []\n\n",
    "target_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n\n",
    "warning_line": "    _inference_apis: InferenceAPI = []",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_inference_apis` declared in class `BentoService` has type `InferenceAPI` but is used as type `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 588,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bentoml/BentoML",
    "source_filename": "bentoml/service.py",
    "target_filename": "bentoml/service.py",
    "source_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd^",
    "target_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd",
    "predictions": [
      "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = []"
    ],
    "correct": true,
    "top_five": {
      "0": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = []",
      "1": "# List of inference APIs that this BentoService provides _inference_apis: Optional[InferenceAPI] = []",
      "2": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = []",
      "3": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI]",
      "4": "# List of inference APIs that this BentoService provides _inference_apis: _inference_apis = []"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object\n",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_line": "            m.chat = self.chat_manager.get_chat(channel, uid)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 271,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/efb-telegram-master",
    "source_filename": "efb_telegram_master/master_message.py",
    "target_filename": "efb_telegram_master/master_message.py",
    "source_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6^",
    "target_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "predictions": [
      "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object"
    ],
    "correct": false,
    "top_five": {
      "0": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "1": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "2": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object()",
      "3": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object()",
      "4": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat_manager: # Chat not found anyway, build a fake object"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)\n",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_line": "        self.kernel_filename: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 90,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)"
    ],
    "correct": false,
    "top_five": {
      "0": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "1": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"\" self.hypervisor_filename = \"\" self.result = Result(xml_state)",
      "2": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = \"\" self.hypervisor_filename: str = \"\" self.result = Result(xml_state)",
      "3": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = '' self.hypervisor_filename: str = '' self.result = Result(xml_state)",
      "4": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = '' self.hypervisor_filename = '' self.result = Result(xml_state)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = camelCaseify(trait)\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 275,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "1": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "2": "for trait, cfg_key in common_oauth_traits: assert cfg_key is None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "3": "for trait, cfg_key in common_oauth_traits: assert trait is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "4": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n\tnumber = int(number)\n\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])\n\n",
    "target_code": "\n\tvalue = int(number)\n\treturn \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_line": "\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 720,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/formatting.py",
    "target_filename": "se/formatting.py",
    "source_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3^",
    "target_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "predictions": [
      "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])"
    ],
    "correct": false,
    "top_five": {
      "0": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "1": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "2": "value = int(number) return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])",
      "3": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "4": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * % 10::4])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        else:\n            raise ValueError(\"unknown topic: \" + topicname)\n\n",
    "target_code": "        else:\n            raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_line": "            raise ValueError(\"unknown topic: \" + topicname)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1052,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997^",
    "target_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "predictions": [
      "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii"
    ],
    "correct": false,
    "top_five": {
      "0": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii",
      "1": "else: raise ValueError(f\"unknown topic: { topic } \")",
      "2": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii",
      "3": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii n",
      "4": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii re"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) < self._library_max_private_projects)\n",
    "target_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    callback(len(response) < self._library_max_private_projects)\n",
    "warning_line": "                    callback(len(response) < self._library_max_private_projects)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 95,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "target_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af^",
    "target_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "predictions": [
      "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)"
    ],
    "correct": false,
    "top_five": {
      "0": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "1": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "2": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects))",
      "3": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) else:",
      "4": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        if other_line is not None:\n            buffer.append(\" \" + other_line)\n\n",
    "target_code": "        if other_line is not None:\n            buffer.append(\" \" + str(other_line))\n\n",
    "warning_line": "            buffer.append(\" \" + other_line)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 249,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python-poetry/poetry",
    "source_filename": "poetry/mixology/incompatibility.py",
    "target_filename": "poetry/mixology/incompatibility.py",
    "source_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728^",
    "target_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "predictions": [
      "if other_line is not None: buffer.append(str(\" \" + str(other_line))"
    ],
    "correct": false,
    "top_five": {
      "0": "if other_line is not None: buffer.append(str(\" \" + str(other_line))",
      "1": "if other_line is not None: buffer.append(\" \" + str(other_line))",
      "2": "if other_line is not None: buffer.append(str(other_line))",
      "3": "if other_line is not None: buffer.append(int(\" \" + other_line))",
      "4": "if other_line is not None: buffer.append(str(\" \" + str(other_line)))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = camelCaseify(trait)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 279,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "1": "for trait, cfg_key in common_oauth_traits: assert trait is not None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "2": "for trait, cfg_key in common_oauth_traits: assert cfg_key is None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "3": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')",
      "4": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            return 32, True\n\n        return int(self.size / 8), False\n",
    "target_code": "            return 32, True\n        if self.size is None:\n            return 32, True\n        return int(self.size / 8), False\n",
    "warning_line": "        return int(self.size / 8), False",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crytic/slither",
    "source_filename": "slither/core/solidity_types/elementary_type.py",
    "target_filename": "slither/core/solidity_types/elementary_type.py",
    "source_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b^",
    "target_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "predictions": [
      "return 32, True return int(self.size / 8), False"
    ],
    "correct": false,
    "top_five": {
      "0": "return 32, True return int(self.size / 8), False",
      "1": "return 32, True assert self.size is not None return int(self.size / 8), False",
      "2": "return 32, True return int(self.size / 8, False)",
      "3": "return 32, True assert self.size is not None return int(self.size / 8, False",
      "4": "return 32, True return str(int(self.size / 8), False)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_line": "          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `range` and `range`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 848,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rizar/attention-lvcsr",
    "source_filename": "theano/tensor/tests/test_basic.py",
    "target_filename": "theano/tensor/tests/test_basic.py",
    "source_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047^",
    "target_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "predictions": [
      "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128), dtype='int8'), [255, 1])],"
    ],
    "correct": false,
    "top_five": {
      "0": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128), dtype='int8'), [255, 1])],",
      "1": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + drange(1, 128), dtype='int8'), [255, 1])],",
      "2": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8, 0) + int8, [255, 1])],",
      "3": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + drange(1, 128), dtype='int8'), [255, 1])],",
      "4": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + dtype='int8'), [255, 1])],"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            return [global_state]\n\n        if size > 0:\n",
    "target_code": "            return [global_state]\n        size = cast(int, size)\n        if size > 0:\n",
    "warning_line": "        if size > 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 748,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f^",
    "target_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "predictions": [
      "return [global_state] if size is not None and size > 0:"
    ],
    "correct": false,
    "top_five": {
      "0": "return [global_state] if size is not None and size > 0:",
      "1": "return [global_state] if int is not None and size > 0:",
      "2": "return [global_state] if size > 0:",
      "3": "return [global_state] if size  int:",
      "4": "return [global_state] if size == 0:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_line": "                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 159,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/http_base.py",
    "target_filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )"
    ],
    "correct": false,
    "top_five": {
      "0": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "1": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "2": "err_result.raw_result = ( type(err) + str(\" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "3": "err_result.raw_result = ( err_str = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "4": "err_result.raw_result = ( err_str = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "\n        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n\n",
    "target_code": "\n        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_line": "        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1015,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "target_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c^",
    "target_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "predictions": [
      "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir / f\" { file_name }.tf_model\""
    ],
    "correct": false,
    "top_five": {
      "0": "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "1": "model_dir = Path(model_dir) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "2": "model_dir = Path(model_dir) tf_model_file = str(model_dir) / f\" { file_name }.tf_model\"",
      "3": "model_dir = Path(model_dir) assert tf_model_file is not None tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "4": "model_dir = Path(model_dir) assert tf_model_file = model_dir / f\" { file_name }.tf_model\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists + self.sets + self.dict_keys + self.dict_values\n\n",
    "target_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values\n\n",
    "warning_line": "        assert not self.lists + self.sets + self.dict_keys + self.dict_values",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.List[UserList]` and `typing.List[UserSet]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 464,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "# So if any list is non-empty, something went terribly wrong assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values"
    ],
    "correct": true,
    "top_five": {
      "0": "# So if any list is non-empty, something went terribly wrong assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values",
      "1": "# So if any list is non-empty, something went terribly wrong assert not self.lists or not self.sets or not self.dict_keys or not self.dict_values",
      "2": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys is not None assert self.dict_values",
      "3": "# So if any list is non-empty, something went terribly wrong assert not self.lists, not self.sets, not self.dict_keys, not self.dict_values",
      "4": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert self.dict_keys is not None assert self.dict_values"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def _check_params(self) -> None:\n        if self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "target_code": "    def _check_params(self) -> None:\n        if self.step is not None and self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_line": "        if self.eps <= 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 148,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "target_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37^",
    "target_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "predictions": [
      "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")"
    ],
    "correct": false,
    "top_five": {
      "0": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "1": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "2": "def _check_params(self) -> None: if self.step is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "3": "def _check_params(self) -> None: assert self.step is not None if self.eps = 0: raise ValueError(\"Step size must be strictly positive.\")",
      "4": "def _check_params(self) -> None: assert self.step is not None and self.eps = 0: raise ValueError(\"Step size must be strictly positive.\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false
    }
  },
  {
    "source_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream())\n",
    "target_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream)\n",
    "warning_line": "        return aiter(self._stream())",
    "linter_report": {
      "rule_id": "Call error [29]",
      "message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1123,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "faust-streaming/faust",
    "source_filename": "faust/agents/agent.py",
    "target_filename": "faust/agents/agent.py",
    "source_changeid": "51de861ada304a1763a4872811274818a8ee0851^",
    "target_changeid": "51de861ada304a1763a4872811274818a8ee0851",
    "predictions": [
      "def __aiter__(self) -> AsyncIterator: return aiter(self._stream)"
    ],
    "correct": true,
    "top_five": {
      "0": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream)",
      "1": "def __aiter__(self) -> AsyncIterator: assert self._stream is not None return aiter(self._stream())",
      "2": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams[0])",
      "3": "def __aiter__(self) -> AsyncIterator: assert self._stream is not None return aiter(self._stream)",
      "4": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams())"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false
    }
  }
]