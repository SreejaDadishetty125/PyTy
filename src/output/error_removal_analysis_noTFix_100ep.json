[
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils",
    "commit": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "filename": "bemani/format/afp.py",
    "source_code": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            <DED>elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `constrained` is used but not defined in the current scope.",
    "warning_line": 3041,
    "pred_top-1": {
      "pred": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "pred_parsed": "                vprint(f\"\n    prefix   lineno  :\n    action_name\n    Constrain Mouse:\n    'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')\n    \")\nelif opcode == AP2Action.ADD_NUM_REGISTER:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "pred_parsed": "                vprint(f\"\n                prefix\n        lineno  :\n        action_name\n        Constrain Mouse:\n        'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')\n        \")\n    elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "pred_parsed": "                vprint(f\"\n    prefix   lineno  :\n    action_name\n    Constrain Mouse:\n    'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')\n    \")\n        elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "pred_parsed": "                vprint(f\"\n    prefix   lineno  :\n    action_name\n    Constrain Mouse:\n    'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack')\n    \")\nelif opcode == AP2Action.ADD_NUM_REGISTER:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "pred_parsed": "                vprint(f\"\n                prefix\n        lineno  :\n        action_name\n        Constrain Mouse:\n        'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')\n        \")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "DragonMinded/bemaniutils"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/operatorai-modelstore",
    "commit": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `y_test` is used but not defined in the current scope.",
    "warning_line": 42,
    "pred_top-1": {
      "pred": "# Run some test predictions \n y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test = model.predict(X_test))\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# Run some test predictions \n _, x_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _, x_test, y_test = model.predict(X_test))\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# Run some test predictions \n y_test = model.predict(X_test) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test = model.predict(X_test)\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# Run some test predictions \n _, X_test, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _, X_test, _, y_test = model.predict(X_test))\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# Run some test predictions \n _, x_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, x_test) \n",
      "pred_parsed": "    # Run some test predictions\n    _, x_test, y_test = model.predict(X_test))\n    results = mean_squared_error(y_test, x_test)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "operatorai/modelstore"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/openstack-swift",
    "commit": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "filename": "swift/proxy/controllers/obj.py",
    "source_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')",
    "target_code": "    <IND>\"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `_` is used but not defined in the current scope.",
    "warning_line": 235,
    "pred_top-1": {
      "pred": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "{ \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "pred_parsed": "    { \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n <DED>",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "openstack/swift"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/fbchat-dev-fbchat",
    "commit": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "filename": "fbchat/_group.py",
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `admin` is used but not defined in the current scope.",
    "warning_line": 75,
    "pred_top-1": {
      "pred": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "pred_parsed": "        data =\n        \"uid\": user_id, \"tid\": self.id\n        \n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data =\n        \"add\": admin, \"thread_fbid\": self.id\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "pred_parsed": "        data =\n        \"uid\": user_id, \"tid\": self.id\n        \n        j = self._payload_post(\"/chat/remove_participants/\", data)\ndef _admin_status(self, user_ids: Iterable[str], status: bool):\n    data =\n    \"add\": admin, \"thread_fbid\": self.id\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "pred_parsed": "        data =\n        \"uid\": user_id, \"tid\": self.id\n        \n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        def _admin_status(self, user_ids: Iterable[str], status: bool):\n            data =\n            \"add\": admin, \"thread_fbid\": self.id\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "pred_parsed": "        data =\n        \"uid\": user_id, \"tid\": self.id\n    j = self._payload_post(\"/chat/remove_participants/\", data)\n    \ndef _admin_status(self, user_ids: Iterable[str], status: bool):\n    data =\n    \"add\": admin, \"thread_fbid\": self.id\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "pred_parsed": "        data =\n        \"uid\": user_id, \"tid\": self.id\n    j = self._payload_post(\"/chat/remove_participants/\", data)\ndef _admin_status(self, user_ids: Iterable[str], status: bool):\ndata =\n\"add\": admin, \"thread_fbid\": self.id\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "fbchat-dev/fbchat"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pandas-dev-pandas",
    "commit": "6c304c78d6a0559525abe16f03465d275c516455",
    "filename": "scripts/bench_join_multi.py",
    "source_code": "key1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 10,
    "pred_top-1": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n    zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n { zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n{ zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n } zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n} zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "pandas-dev/pandas"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/openstack-ironic",
    "commit": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "filename": "ironic/api/controllers/v1/node.py",
    "source_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):",
    "target_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `unicode` is used but not defined in the current scope.",
    "warning_line": 73,
    "pred_top-1": {
      "pred": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wtype)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wtype)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# GET nodes/uuid>/state/power \n \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    \n    @wsme_pecan.wsexpose(NodePowerState, wtype)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, text) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, text)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, text) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, text)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "openstack/ironic"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/inasafe-inasafe",
    "commit": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_code": "    @pyqtSignature('')\n    def run_selected_clicked(self):",
    "target_code": "\n    <DED>@pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `pyqtSignature` is used but not defined in the current scope.",
    "warning_line": 570,
    "pred_top-1": {
      "pred": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> @pyqtSignature(str('')) \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature(str(''))\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n \n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "inasafe/inasafe"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/convection/exponential2D/mesh2D.py",
    "source_code": "    raw_input('finished')",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "\n input('finished') \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n input('finished') \n \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n input('finished') \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n input('finished') \n <IND>",
      "pred_parsed": "    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n input('finished') \n <DED>",
      "pred_parsed": "    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "usnistgov/fipy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/levelSet/distanceFunction/square.py",
    "source_code": "    viewer.plot()\n    raw_input('finished')",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 70,
    "pred_top-1": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "viewer.plot() \n input('finished') \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED>",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <IND>",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "usnistgov/fipy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/clightning.py",
    "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None",
    "target_code": "        if not r.ok:\n            <IND>return PaymentStatus(None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `payment_hash` is used but not defined in the current scope.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n                payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n                payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n            \n            payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n            payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n    return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n    return PaymentStatus(r, None)\npayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\npayment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "lnbits/lnbits-legend"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/cyverse-atmosphere",
    "commit": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "filename": "api/v2/views/platform_type.py",
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    <IND>",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `viewsets` is used but not defined in the current scope.",
    "warning_line": 7,
    "pred_top-1": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(ReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyViewSet\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "cyverse/atmosphere"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 384,
    "pred_top-1": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(set(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(list(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(0, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(0, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10), 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(list(xrange(10), 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "wrye-bash/wrye-bash"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hail-is-hail",
    "commit": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "filename": "hail/python/hail/table.py",
    "source_code": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),",
    "target_code": "                <DED><DED>else:\n                    <IND>def joiner(left: MatrixTable):\n                        <IND>return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                <DED><DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
    "warning_line": 1637,
    "pred_top-1": {
      "pred": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n            joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n            left._mir, right._tir, uid))\n        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                    \n                    ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <IND> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "hail-is/hail"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/streamlit-streamlit",
    "commit": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "filename": "examples/run_on_save.py",
    "source_code": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n\nelse:\n    raise Error(\"Unknown platform\")",
    "target_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise NotImplementedError(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Exception(\"Unknown platform\")\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `Error` is used but not defined in the current scope.",
    "warning_line": 68,
    "pred_top-1": {
      "pred": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\nelse:\nraise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    else:\n        raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \n        else:\n            raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Unknown platform not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "streamlit/streamlit"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/levelSet/surfactant/square.py",
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 88,
    "pred_top-1": {
      "pred": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n <IND>",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "usnistgov/fipy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/frames.py",
    "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8)",
    "target_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8)\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 296,
    "exception": "'pred_top-1'",
    "repo": "wrye-bash/wrye-bash"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/algoo-preview-generator",
    "commit": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "filename": "preview_generator/preview/generic_preview.py",
    "source_code": "    def get_label(cls) -> str:\n        return self.__name__  #\u00a0default label is the class name",
    "target_code": "    def get_label(cls) -> str:\n        <IND>return cls.__name__  # default label is the class name\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `self` is used but not defined in the current scope.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def get_label(cls) -> str: \n <DED> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\nreturn self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def get_label(cls) -> str: \n \n return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n    \n    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def get_label(cls) -> str: \n { return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n    { return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def get_label(cls) -> str: \n } return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n    } return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "algoo/preview-generator"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/naparuba-shinken",
    "commit": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "filename": "shinken/scheduler.py",
    "source_code": "        \n self.conf = Config()",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `self` is used but not defined in the current scope.",
    "warning_line": 134,
    "exception": "'pred_top-1'",
    "repo": "naparuba/shinken"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/strongio-torch-kalman",
    "commit": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,",
    "target_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `Cens` is used but not defined in the current scope.",
    "warning_line": 172,
    "pred_top-1": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs: Tensor, \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Tensor,\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs, \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs,\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs: Union[Tensor, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs, <DED> group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\nobs,  group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs, <IND> group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n        obs,  group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "strongio/torch-kalman"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mozilla-services-socorro",
    "commit": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "filename": "webapp-django/crashstats/crashstats/models.py",
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `unicode` is used but not defined in the current scope.",
    "warning_line": 1460,
    "pred_top-1": {
      "pred": "required_params = ( \n ('product', unicode), \n ('version', unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', unicode),\n    ('version', unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "required_params = ( \n ('product', 'text'), \n ('version', 'text'), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', 'text'),\n    ('version', 'text'),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "required_params = ( \n ('product', 'unicode'), \n ('version', 'unicode'), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', 'unicode'),\n    ('version', 'unicode'),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "required_params = ( \n ('product', ''), \n ('version', ''), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', ''),\n    ('version', ''),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "required_params = ( \n ('product', unicode), \n ('version', version), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', unicode),\n    ('version', version),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "mozilla-services/socorro"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy",
    "commit": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "filename": "mypy/parsetype.py",
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `line` is used but not defined in the current scope.",
    "warning_line": 153,
    "pred_top-1": {
      "pred": "type = self.parse_type() \n return StarType(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "type = self.parse_type() \n return StarType(type, line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, line)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "type = self.parse_type() \n return StarType(type, range) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, range)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "type = self.parse_type() \n return StarType(type, 'line') \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, 'line')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "type = self.parse_type() \n return StarType(type, string) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, string)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "python/mypy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/networktocode-pyntc",
    "commit": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "filename": "pyntc/devices/__init__.py",
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
    "warning_line": 32,
    "pred_top-1": {
      "pred": "\n, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    ,\n    F5_DEVICE_TYPE:\n        DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED>, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    ,\n    F5_DEVICE_TYPE:\n        DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND>, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    ,\n    F5_DEVICE_TYPE:\n        DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    ,\n    F5_DEVICE_TYPE:\nDEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED>, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    ,\n    F5_DEVICE_TYPE:\nDEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "networktocode/pyntc"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ciphey-Ciphey",
    "commit": "5544e945c591d063a2541fd40991c1f81b729575",
    "filename": "ciphey/basemods/Crackers/hash.py",
    "source_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass",
    "target_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        <IND>return None\n\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
    "warning_line": 105,
    "pred_top-1": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Ciphey/Ciphey"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity",
    "commit": "ad61361109f7df88eb807a543191d491e76eed0c",
    "filename": "trinity/protocol/eth/monitors.py",
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock}",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
    "warning_line": 6,
    "pred_top-1": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = frozenset(\n    commands.NewBlock\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = commands.NewBlock \n \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = commands.NewBlock\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = frozenset(\ncommands.NewBlock\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( <IND> commands.NewBlock \n ) \n \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n        subscription_msg_types = frozenset(  commands.NewBlock\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( <DED> commands.NewBlock \n ) \n \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = frozenset(  commands.NewBlock\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "ethereum/trinity"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact",
    "commit": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "filename": "rl_habitat/habitat_preprocessors.py",
    "source_code": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:",
    "target_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        <IND>if not self.parallel:\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
    "warning_line": 100,
    "pred_top-1": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    \n    if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n \n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    \n    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "allenai/allenact"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 332,
    "pred_top-1": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notification:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n                def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notify:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n                def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notification:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notify:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,]) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notify:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n                def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "jesopo/bitbot"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "source_code": "def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':",
    "target_code": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]=\n\n\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n        def notice(target: str, message: str, tags: typing.Dict[str, str]=\n        \n        \n        ) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]=\n\n\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]=\n\n\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]=\n\n\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n    \n    def notice(target: str, message: str, tags: typing.Dict[str, str]=\n    \n    \n    ) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]=\n\n\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n        def notice(target: str, message: str, tags: typing.Dict[str, str]=\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n\n\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n        def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "jesopo/bitbot"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "warning_line": 677,
    "pred_top-1": {
      "pred": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "pred_parsed": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "pred_parsed": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "category_map: Dict[int, List[str]], \n immutable_features: List[str], \n diverse=False) -> List[np.ndarray]: \n",
      "pred_parsed": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = (), \n diverse=False) -> List[np.ndarray]: \n",
      "pred_parsed": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = (),\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n divers=False) -> List[np.ndarray]: \n",
      "pred_parsed": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       divers=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "SeldonIO/alibi"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " value is declared to have type `Optional[int]` but is used as type `str`.",
    "warning_line": 211,
    "pred_top-1": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value): \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value):\n            self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None:\n            self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n                self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "googleapis/python-bigquery"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pcah-python-clean-architecture",
    "commit": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "filename": "dharma/domain/repos/in_memory.py",
    "source_code": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "target_code": "\n    <DED>def filter(self, predicate: Predicate) -> t.List[T]:\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
    "warning_line": 81,
    "pred_top-1": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def filter(self, predicate: Predicate) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Predicate) -> t.List[T]:\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "pcah/python-clean-architecture"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/libtcod-python-tcod",
    "commit": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "filename": "tcod/console.py",
    "source_code": "        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
    "target_code": "\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " string is declared to have type `str` but is used as type `bytes`.",
    "warning_line": 312,
    "pred_top-1": {
      "pred": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "pred_parsed": "        _fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt()\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "pred_parsed": "        fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt()\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "pred_parsed": "        _fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt()\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "pred_parsed": "        _fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt(string\n        ))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "pred_parsed": "        fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt(string\n        ))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "libtcod/python-tcod"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:",
    "target_code": "    if type_type == SCALAR:\n        <IND>result_type = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
    "warning_line": 231,
    "pred_top-1": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n                elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            \n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "googleapis/python-bigquery"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/submodule/base.py",
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "warning_line": 342,
    "pred_top-1": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "gitpython-developers/GitPython"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "source_code": "    def __init__(self, comparable, *, error: str = None):\n        self.comparable = comparable",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        <IND>self.comparable = comparable\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " error is declared to have type `str` but is used as type `None`.",
    "warning_line": 339,
    "pred_top-1": {
      "pred": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "pred_parsed": "    def __init__(\n    self, comparable, *, error: typing.Optional[str] = None\n    ):\n        self.comparable = comparable\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "pred_parsed": "    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        self.comparable = comparable\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <DED> self.comparable = comparable \n",
      "pred_parsed": "    def __init__(\n    self, comparable, *, error: typing.Optional[str] = None\n    ):\nself.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "pred_parsed": "    def __init__(\n    self, comparable, *, error: typing.Optional[str] = None\n    ) -> None:\n        self.comparable = comparable\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <DED> self.comparable = comparable \n",
      "pred_parsed": "    def __init__(self, comparable, *, error: typing.Optional[str] = None):\nself.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "marshmallow-code/marshmallow"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/fscdev-vkwave",
    "commit": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "filename": "vkwave/bots/easy/easy_bot.py",
    "source_code": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        loop = loop or asyncio.get_event_loop()",
    "target_code": "\n    <DED>def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
    "warning_line": 137,
    "pred_top-1": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Asyncio.AbstractEventLoop):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop):\nloop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> asyncio.get_event_loop(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop) -> asyncio.get_event_loop():\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "fscdev/vkwave"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python",
    "commit": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " timestamp is declared to have type `int` but is used as type `None`.",
    "warning_line": 207,
    "pred_top-1": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <IND>",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n            ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "attributes: types.Attributes = None, <IND> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,  timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "attributes: types.Attributes = None, <DED> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,  timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "open-telemetry/opentelemetry-python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/deepchem-deepchem",
    "commit": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]",
    "target_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
    "warning_line": 161,
    "pred_top-1": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n  ]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n  ]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n  ]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# First type of supported featurizers \n <IND> <IND> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n  ]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# First type of supported featurizers \n \n <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  \nsupported_featurizers = ['ElementPropertyFingerprint'\n]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "deepchem/deepchem"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lykoss-lykos",
    "commit": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "filename": "src/users.py",
    "source_code": "            if self is Bot:\n                Bot = new",
    "target_code": "            <DED>if self is Bot:\n                <IND>assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " Bot is declared to have type `BotUser` but is used as type `User`.",
    "warning_line": 460,
    "pred_top-1": {
      "pred": "\n if self is Bot: \n <IND> Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> if self is Bot: \n <IND> Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n if self is Bot: \n <IND> if new is not None: \n <IND> Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                if new is not None:\n                    Bot = new\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> if self is Bot: \n <IND> Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n if self is Bot: \n <IND> new = new \n",
      "pred_parsed": "            if self is Bot:\n                new = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "lykoss/lykos"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python",
    "commit": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " error is declared to have type `Exception` but is used as type `None`.",
    "warning_line": 658,
    "pred_top-1": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Exception,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n method_name: str, \n error: Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "awslabs/aws-lambda-powertools-python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hsahovic-poke-env",
    "commit": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "filename": "src/poke_env/environment/pokemon.py",
    "source_code": "        details = details.split(\", \")",
    "target_code": "\n        <DED>split_details = details.split(\", \")\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " details is declared to have type `str` but is used as type `List[str]`.",
    "warning_line": 229,
    "pred_top-1": {
      "pred": "\n <DED> details_split = details.split(\", \") \n \n",
      "pred_parsed": "        details_split = details.split(\", \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> details_list = details.split(\", \") \n \n",
      "pred_parsed": "        details_list = details.split(\", \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> details_split = details.split(\", \") \n \n",
      "pred_parsed": "        details_split = details.split(\", \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> details_list = details.split(\", \") \n \n",
      "pred_parsed": "        details_list = details.split(\", \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <DED> details = details.split(\", \") \n \n",
      "pred_parsed": "        details = details.split(\", \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "hsahovic/poke-env"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "source_code": "def batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
    "target_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 84,
    "pred_top-1": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Optional[typing.Dict[str, str]]=\n    ):\n        return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]=\n\n):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Optional[typing.Dict[str, str]]=\n\n):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Optional[typing.Dict[str, str]]=\n):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]=\n    ):\n        return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "jesopo/bitbot"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)",
    "target_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " privilege is declared to have type `str` but is used as type `None`.",
    "warning_line": 47,
    "pred_top-1": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv =\n        \"\"]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv =  \"\"]\n    self.no_soul_parsing = set() # type: Set[str]\n    \ndef add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n    self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n            self.commands_per_priv =  \"\"]\n            self.no_soul_parsing = set() # type: Set[str]\n            \n        def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n            self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv =\n        \"\"]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n            def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n                self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv =  \"\"]\n    self.no_soul_parsing = set() # type: Set[str]\n    \n        def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n            self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "irmen/Tale"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "filename": "allennlp/training/trainer.py",
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
    "warning_line": 1235,
    "pred_top-1": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpoint\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer],\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpoint\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer],\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callbacks: Optional[List[BatchCallback]] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Optional[Lazy[Optimizer]] = None,\n        learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None,\n        momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None,\n        moving_average: Optional[Lazy[MovingAverage]] = None,\n        checkpointer: Optional[Lazy[Checkpointer]] = None,\n        batch_callbacks: Optional[List[BatchCallback]] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "allenai/allennlp"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-pip-audit",
    "commit": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " extras is declared to have type `bool` but is used as type `None`.",
    "warning_line": 46,
    "pred_top-1": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = False,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "version: Version, <DED> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,  url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "version: Version, <IND> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,  url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <IND> is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n            extras: Optional[bool] = None,  is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "trailofbits/pip-audit"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count",
    "target_code": "    <IND>count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " seconds is declared to have type `int` but is used as type `float`.",
    "warning_line": 416,
    "pred_top-1": {
      "pred": "\n count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= int(seconds)\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= int(seconds / amount)\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<DED> count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= int(seconds)\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= int(seconds)\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "torproject/stem"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "source_code": "        homeserver = urlparse(homeserver) if homeserver else None",
    "target_code": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "warning_line": 104,
    "pred_top-1": {
      "pred": "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        if homeserver is not None:\n            homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> if not homeserver: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        if not homeserver:\n            homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <IND> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        if homeserver is not None:\n            homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> if homeserver else None: \n <IND> homeserver = urlparse(homeserver) if homeserver \n \n",
      "pred_parsed": "        if homeserver else None:\n            homeserver = urlparse(homeserver) if homeserver\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "poljar/matrix-nio"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAI",
    "commit": "718d11abb2310ab74321256032a264488a7883b4",
    "filename": "monai/visualize/img2tensorboard.py",
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[dict] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Optional[dict] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Optional[typing.Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Optional[Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Project-MONAI/MONAI"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/osmocom-pysim",
    "commit": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "filename": "pySim/filesystem.py",
    "source_code": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "target_code": "\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rec_len is declared to have type `int` but is used as type `None`.",
    "warning_line": 687,
    "pred_top-1": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size=\n    1,None\n    ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str, desc:str,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size=\n    1,None\n    ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size=\n    1,None\n    ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size=\n    1,None\n    ):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size=\n    1,None\n    ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "osmocom/pysim"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/facebook-TestSlide",
    "commit": "97c39d89c2a047a3396be659645bd89dab01d859",
    "filename": "tests/mock_callable_testslide.py",
    "source_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):",
    "target_code": "    <DED>async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " kwarg2 is declared to have type `str` but is used as type `None`.",
    "warning_line": 47,
    "pred_top-1": {
      "pred": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "{ async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "pred_parsed": "    { async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "} async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "pred_parsed": "    } async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "facebook/TestSlide"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/contexts/__init__.py",
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " symbol_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 120,
    "pred_top-1": {
      "pred": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "volatilityfoundation/volatility3"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/joerick-pyinstrument",
    "commit": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "filename": "pyinstrument/profiler.py",
    "source_code": "    def start(self, caller_frame: types.FrameType = None):",
    "target_code": "\n    <DED>def start(self, caller_frame: types.FrameType | None = None):\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
    "warning_line": 101,
    "pred_top-1": {
      "pred": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <DED>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "joerick/pyinstrument"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/scrapy-scrapy",
    "commit": "38d361792c02ae2b25323258d070c04d8906495a",
    "filename": "scrapy/core/downloader/handlers/http2.py",
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
    "warning_line": 75,
    "pred_top-1": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler: Optional[None] = None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler: Optional[None] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, context_factory, <DED> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,  connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, context_factory, <IND> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,  connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "scrapy/scrapy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jMetal-jMetalPy",
    "commit": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_code": "    def __init__(self, rf_path: str=None):\n        super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rf_path is declared to have type `str` but is used as type `None`.",
    "warning_line": 53,
    "pred_top-1": {
      "pred": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "pred_parsed": "    def __init__(self):\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "pred_parsed": "    def __init__(self):\nsuper(Fonseca, self).__init__()\nself.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "pred_parsed": "    def __init__(self):\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "pred_parsed": "    def __init__(self, rf_path: Optional[str]=None):\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __init__(self) -> None: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "pred_parsed": "    def __init__(self) -> None:\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "jMetal/jMetalPy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade",
    "commit": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "filename": "arcade/gui/ui_style.py",
    "source_code": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, {})",
    "target_code": "\n        for style_class in reversed(style_classes):\n            <IND>style_data = self.data.get(style_class, {})\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class,\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <IND> ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class,\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n \n ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class,\n            \n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <DED> ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n    style_data = self.data.get(style_class,\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class,\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "pythonarcade/arcade"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Chia-Network-chia-blockchain",
    "commit": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "filename": "chia/wallet/wallet.py",
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
    "warning_line": 387,
    "pred_top-1": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "ignore_max_send_amount: bool = False, \n announceds_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announceds_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = [], \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = [],\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "ignore_max_send_amount: bool = False, <IND> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,  announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Chia-Network/chia-blockchain"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 334,
    "pred_top-1": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notification:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notification:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n                def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> None:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n                def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]=\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,]) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notification:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,]= \n ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=\n        ) -> Notification:\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,]=\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "jesopo/bitbot"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari",
    "commit": "cf143052e1228280ed895c06da9177611d8ea088",
    "filename": "hikari/orm/http/base_http_adapter.py",
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
    "warning_line": 1140,
    "pred_top-1": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: typing.Optional[type_hints.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified,\n        nsfw: typing.Optional[type_hints.NotRequired[bool]] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: Type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: Type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "hikari-py/hikari"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/alibaba-TinyNeuralNetwork",
    "commit": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_code": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters[''] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters[''] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "alibaba/TinyNeuralNetwork"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mapillary-mapillary_tools",
    "commit": "79159001d365c75215f0c05ba3b7937180563026",
    "filename": "mapillary_tools/upload_api_v4.py",
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " organization_id is declared to have type `int` but is used as type `None`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "entity_size: int, \n organization_id: int, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: int,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "entity_size: int, <DED> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,  organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "entity_size: int, <IND> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,  organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, <IND> file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n            organization_id: Optional[int] = None,  file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "mapillary/mapillary_tools"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "pystac/extensions/base.py",
    "source_code": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        <IND>result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
    "warning_line": 31,
    "pred_top-1": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]:\nresult: Optional[typ] = self.properties.get(prop_name)\nif result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P] = Any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "stac-utils/pystac"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/utils/ssl_connection.py",
    "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
    "target_code": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " network_max_retries is declared to have type `int` but is used as type `None`.",
    "warning_line": 206,
    "pred_top-1": {
      "pred": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (Optional[int], Optional[int]) -> None\nfinal_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (Optional[int], Optional[int]) -> None\n    \n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (Optional[int], Optional[int]) -> None\nfinal_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "nabla-c0d3/sslyze"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-federated",
    "commit": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
    "target_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
    "warning_line": 309,
    "pred_top-1": {
      "pred": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary(\n)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary(\n)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary(\n    )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary(\n    )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \n ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary(\n\n)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "tensorflow/federated"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/scaling.py",
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
    "warning_line": 789,
    "pred_top-1": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), <DED> **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\nfold_method_args: Tuple[Any] = (),  **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "unitaryfund/mitiq"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/gateway/devices/subdevice.py",
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " gw is declared to have type `Gateway` but is used as type `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n gw: \"Gateway\", \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self, \n gw: Optional[Gateway] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[Gateway] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, \n gw: Optional[\"Gateway\", \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\",\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n gw = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw = None,\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "rytilahti/python-miio"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair",
    "commit": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "filename": "flair/datasets/text_text.py",
    "source_code": "        dev: FlairDataset = DataPairDataset(\n            dev_file,",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
    "warning_line": 282,
    "pred_top-1": {
      "pred": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Union[FlairDataset, DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n dev: Union[FlairDataset and DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Union[FlairDataset and DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n dev: Union[DataPairDataset, FlairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Union[DataPairDataset, FlairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "flairNLP/flair"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/providers/auto.py",
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
    "warning_line": 77,
    "pred_top-1": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = []\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [0] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [0]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, \n potential_providers: Sequence[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = (\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "ethereum/web3.py"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/config.py",
    "source_code": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:",
    "target_code": "\n    <DED>def __get__(self, instance: Any, owner: Any = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
    "warning_line": 66,
    "pred_top-1": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n                result = instance.config[self.key] # type: ignore\n                if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(\n    self, instance: object, owner: typing.Optional[type] = None\n    if instance is None:\n        return self\n    result = instance.config[self.key] # type: ignore\n    if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n            \n            result = instance.config[self.key] # type: ignore\n            if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n    return self\nresult = instance.config[self.key] # type: ignore\nif self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "pgjones/quart"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/contexts/__init__.py",
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " type_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 121,
    "pred_top-1": {
      "pred": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "volatilityfoundation/volatility3"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair",
    "commit": "0b834f5167d11f06037398fcbe1554f244167e18",
    "filename": "flair/embeddings/token.py",
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " embeddings is declared to have type `str` but is used as type `Path`.",
    "warning_line": 2082,
    "pred_top-1": {
      "pred": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\"\n            base_path\n        embeddings\n        /\n    embeddings  _s\n    size\n    .zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\"\n            base_path\n        embeddings\n        /\n        embeddings\n        _s\n        size\n        .zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\"\n            base_path\n        embeddings\n        /\n            embeddings  _s\n            size\n            .zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\"\n            base_path\n    embeddings  /\nembeddings  _s\nsize\n.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\"\n            base_path\n    embeddings  /\n    embeddings\n    _s\n    size\n    .zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "flairNLP/flair"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/command.py",
    "source_code": "    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " reason is declared to have type `str` but is used as type `None`.",
    "warning_line": 28,
    "pred_top-1": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\nsuper(CommandFailed, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n    \n    super(CommandFailed, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: Union[str, None] = None) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "theacodes/nox"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "source_code": "    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " format is declared to have type `str` but is used as type `None`.",
    "warning_line": 1184,
    "pred_top-1": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <DED> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\nsuper().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n \n super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n    \n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "marshmallow-code/marshmallow"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jMetal-jMetalPy",
    "commit": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_code": "    def __init__(self, rf_path: str=None):\n        super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rf_path is declared to have type `str` but is used as type `None`.",
    "warning_line": 81,
    "pred_top-1": {
      "pred": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "pred_parsed": "    def __init__(self):\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "pred_parsed": "    def __init__(self):\nsuper(Schaffer, self).__init__()\nself.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "pred_parsed": "    def __init__(self):\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "pred_parsed": "    def __init__(self, rf_path: Optional[str]=None):\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __init__(self) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "pred_parsed": "    def __init__(self) -> None:\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "jMetal/jMetalPy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "filename": "src/IRCServer.py",
    "source_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> bool:\n        return capability.available(self.agreed_capabilities)",
    "target_code": "        <IND>return capability in self.agreed_capabilities\n    <DED>def available_capability(self, capability: utils.irc.Capability) -> str:\n        <IND>return capability.available(self.agreed_capabilities)\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `str`.",
    "warning_line": 292,
    "pred_top-1": {
      "pred": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "pred_parsed": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> str:\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "pred_parsed": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> str:\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "pred_parsed": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> str:\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "pred_parsed": "        return capability in self.agreed_capabilities\n            def available_capability(self, capability: utils.irc.Capability) -> str:\n                return capability.available(self.agreed_capabilities)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "pred_parsed": "        return capability in self.agreed_capabilities\n            def available_capability(self, capability: utils.irc.Capability) -> str:\n                return capability.available(self.agreed_capabilities)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "jesopo/bitbot"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/synek-git-plan",
    "commit": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "filename": "git_plan/service/plan.py",
    "source_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0",
    "target_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
    "warning_line": 62,
    "pred_top-1": {
      "pred": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n    return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n    return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n            return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n    return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n            return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "synek/git-plan"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/SectorLabs-django-postgres-extra",
    "commit": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "filename": "psqlextra/types.py",
    "source_code": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]",
    "target_code": "    <IND>@classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        <IND>return [choice for choice in cls]\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
    "warning_line": 11,
    "pred_top-1": {
      "pred": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[PostgresPartitioningMethod]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "SectorLabs/django-postgres-extra"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "electronics/ohms_law.py",
    "source_code": "        return {\"resistance\": voltage / current}",
    "target_code": "        <IND>return {\"resistance\": voltage / current}\n    <DED>else:\n        <IND>raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "\n return \n \"resistance\": voltage / current \n \n <DED>",
      "pred_parsed": "        return\n        \"resistance\": voltage / current\n        \n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return \n \"resistance\": voltage / current \n \n \n",
      "pred_parsed": "        return\n        \"resistance\": voltage / current\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n return \n \"resistance\": voltage / current \n \n <IND>",
      "pred_parsed": "        return\n        \"resistance\": voltage / current\n        \n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> return \n \"resistance\": voltage / current \n \n <DED>",
      "pred_parsed": "        return\n        \"resistance\": voltage / current\n        \n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> return \n \"resistance\": voltage / current \n \n \n",
      "pred_parsed": "        return\n        \"resistance\": voltage / current\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "TheAlgorithms/Python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/konradhalas-dacite",
    "commit": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "filename": "dacite/types.py",
    "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)",
    "target_code": "    <DED>origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
    "warning_line": 71,
    "pred_top-1": {
      "pred": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "{ origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    { origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "} origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    } origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "konradhalas/dacite"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/sensepost-objection",
    "commit": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "filename": "objection/commands/ios/hooking.py",
    "source_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None",
    "target_code": "        <IND>click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.List[typing.Any]` but got `None`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "pred_parsed": "        click.secho('Failed to list classes with error:\n        0\n        '.format(response.error_reason), fg='red')\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "pred_parsed": "        click.secho('Failed to list classes with error:\n        0\n        '.format(response.error_reason), fg='red')\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "pred_parsed": "        click.secho('Failed to list classes with error:\n        0\n        '.format(response.error_reason), fg='red')\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "pred_parsed": "        click.secho('Failed to list classes with error:\n        0\n        '.format(response.error_reason), fg='red')\n        return ['Unable to retrieve data']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "pred_parsed": "        click.secho('Failed to list classes with error:\n        0\n        '.format(response.error_reason), fg='red')\n        return ['Unable to retrieve data']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "sensepost/objection"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "source_code": "                            return desc\n        return None",
    "target_code": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return \"\"\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `None`.",
    "warning_line": 245,
    "pred_top-1": {
      "pred": "\n return desc \n <DED> <DED> <DED> <DED> return \"\" \n \n",
      "pred_parsed": "                            return desc\n            return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return desc \n <IND> <DED> <DED> <DED> return \"\" \n \n",
      "pred_parsed": "                            return desc\n                    return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> return desc \n <DED> <DED> <DED> <DED> return \"\" \n \n",
      "pred_parsed": "                            return desc\n            return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n return desc \n \n <DED> <DED> <DED> return \"\" \n \n",
      "pred_parsed": "                            return desc\n                            \n                return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n return desc \n <DED> <IND> <DED> <DED> return \"\" \n \n",
      "pred_parsed": "                            return desc\n                    return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "irmen/Tale"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend",
    "commit": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "filename": "lnbits/bolt11.py",
    "source_code": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:",
    "target_code": "    <DED>if unit in units:\n        <IND>return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    <DED>else:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `float`.",
    "warning_line": 144,
    "pred_top-1": {
      "pred": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "lnbits/lnbits-legend"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "source_code": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain",
    "target_code": "\n    <DED>new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
    "warning_line": 74,
    "pred_top-1": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return [] \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "lnbits/lnbits-legend"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/meraki-analytics-cassiopeia",
    "commit": "a26127b190f398137c4cf92469c5de573ce2a018",
    "filename": "cassiopeia/core/staticdata/realms.py",
    "source_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])",
    "target_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `ImageData`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "meraki-analytics/cassiopeia"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self",
    "target_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.left is self.parent.left is self\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `typing.Optional[bool]`.",
    "warning_line": 435,
    "pred_top-1": {
      "pred": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent is not None and self.parent.left is self\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "TheAlgorithms/Python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_code": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "target_code": "\n    <DED>def __str__(self) -> str:\n        <IND>return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `None` but got `typing.List[int]`.",
    "warning_line": 122,
    "pred_top-1": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\nreturn [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "TheAlgorithms/Python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium",
    "commit": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "filename": "UM/Trust.py",
    "source_code": "        if file_hash == \"\":\n            return False\n        try:",
    "target_code": "        if file_hash == \"\":\n            <IND>return \"\"\n        <DED>try:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `bool`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "if file_hash == \"\": \n <IND> return None \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return None\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if file_hash == \"\": \n <IND> return None \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return None\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if file_hash == \"\": \n <IND> return None \n \n try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return None\n            \n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if file_hash == \"\": \n <IND> return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return False\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if file_hash == \"\": \n <IND> return True, but not None \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return True, but not None\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Ultimaker/Uranium"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/dcs-liberation-dcs_liberation",
    "commit": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "filename": "game/commander/theaterstate.py",
    "source_code": "            if target.is_ammo_depot:\n                yield target",
    "target_code": "            <DED>if target.is_ammo_depot:\n                <IND>assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
    "warning_line": 100,
    "pred_top-1": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> if target.is_ammo_depot: \n <DED> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n        yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n if target.is_ammo_depot: \n <DED> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n        yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "dcs-liberation/dcs_liberation"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster",
    "commit": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>else:\n            <IND>return self.error.to_string()\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got implicit return value of `None`.",
    "warning_line": 107,
    "pred_top-1": {
      "pred": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \":\n        n  n\" + user_code_error.to_string()\n            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                return self.error.to_string()\n            else:\n                check.failed(f\"Unexpected error setting:\n                self.error_source\n                \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \":\n        n  n\" + user_code_error.to_string()\n    elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n        return self.error.to_string()\n    else:\n        check.failed(f\"Unexpected error setting:\n        self.error_source\n        \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \":\n                n  n\" + user_code_error.to_string()\n                    elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                        return self.error.to_string()\n                    else:\n                        check.failed(f\"Unexpected error setting:\n                        self.error_source\n                        \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \":\n            n\n            n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return self.error.to_string()\n                else:\n                    check.failed(f\"Unexpected error setting:\n                    self.error_source\n                    \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \":\n                n  n\" + user_code_error.to_string()\n            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                return self.error.to_string()\n            else:\n                check.failed(f\"Unexpected error setting:\n                self.error_source\n                \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "dagster-io/dagster"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/plasma-umass-scalene",
    "commit": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "filename": "scalene/scalene_profiler.py",
    "source_code": "            # threading library\n            return None\n        frames: List[Tuple[FrameType, int]] = [",
    "target_code": "            # threading library\n            <IND>return []\n        <DED>frames: List[Tuple[FrameType, int]] = [\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
    "warning_line": 796,
    "pred_top-1": {
      "pred": "# threading library \n <DED> return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "pred_parsed": "            # threading library\n            return []\n            \n            frames: List[Tuple[FrameType, int, FrameType]] = [\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# threading library \n <DED> return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "pred_parsed": "            # threading library\n            return []\n        frames: List[Tuple[FrameType, int, FrameType]] = [\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# threading library \n <IND> return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "pred_parsed": "            # threading library\n            return []\n            \n            frames: List[Tuple[FrameType, int, FrameType]] = [\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# threading library \n <DED> return [] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "pred_parsed": "            # threading library\n            return []\n                frames: List[Tuple[FrameType, int, FrameType]] = [\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# threading library \n <IND> return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "pred_parsed": "            # threading library\n            return []\n        frames: List[Tuple[FrameType, int, FrameType]] = [\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "plasma-umass/scalene"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra",
    "commit": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "filename": "qiskit/pulse/instructions/acquire.py",
    "source_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot",
    "target_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
    "warning_line": 112,
    "pred_top-1": {
      "pred": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "Qiskit/qiskit-terra"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/unit8co-darts",
    "commit": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "filename": "u8timeseries/timeseries.py",
    "source_code": "                self._confidence_hi.update(conf_hi)\n            return None\n        else:",
    "target_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return self\n        <DED>else:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `TimeSeries` but got `None`.",
    "warning_line": 548,
    "pred_top-1": {
      "pred": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n \n else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return 0\n            \n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 0 \n \n else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n                    return 0\n                    \n                    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n \n else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return 'TimeSeries'\n            \n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n \n else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n                    return 'TimeSeries'\n                    \n                    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n \n else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return 'TimeSeries'\n            \n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "unit8co/darts"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/operatorai-modelstore",
    "commit": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "filename": "tests/models/test_modelmanager.py",
    "source_code": "    def _get_params(self, **kwargs) -> dict:\n        return None",
    "target_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return {}\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "warning_line": 62,
    "pred_top-1": {
      "pred": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> typing.Dict:\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> typing.Dict:\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "operatorai/modelstore"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich",
    "commit": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "filename": "rich/text.py",
    "source_code": "        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Text` but got `str`.",
    "warning_line": 169,
    "pred_top-1": {
      "pred": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        text.justify = justify\n        return Text\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        text.justify = justify\n        return Text\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        text.justify = justify\n        return Text\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n return rendered_text \n \n",
      "pred_parsed": "        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <DED> return rendered_text \n \n",
      "pred_parsed": "        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        rendered_text\n    return rendered_text\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "willmcgugan/rich"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return [matrix1, matrix2]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "warning_line": 124,
    "pred_top-1": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <DED> return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\nreturn matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n \n return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    \n    return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n { return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    { return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n } return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    } return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "TheAlgorithms/Python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "source_code": "        return count_label + short_label",
    "target_code": "        <IND>return count_label + short_label\n\n  <DED><DED><DED>raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got implicit return value of `None`.",
    "warning_line": 582,
    "pred_top-1": {
      "pred": "\n return count_label + short_label \n <DED> return 0 \n \n",
      "pred_parsed": "        return count_label + short_label\n    return 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return count_label + short_label \n <IND> return 0 \n \n",
      "pred_parsed": "        return count_label + short_label\n            return 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n return count_label + short_label \n <DED> return '' \n \n",
      "pred_parsed": "        return count_label + short_label\n    return ''\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n return count_label + short_label \n <IND> return '' \n \n",
      "pred_parsed": "        return count_label + short_label\n            return ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Expected an error, got int/list instead\") \n",
      "pred_parsed": "        return count_label + short_label\n    raise RuntimeError(\"Expected an error, got int/list instead\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "torproject/stem"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware",
    "commit": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "filename": "core/mocks/generated/trezorconfig.pyi",
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> bytes:",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    <IND>",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bytes` but got implicit return value of `None`.",
    "warning_line": 59,
    "exception": "'pred_top-1'",
    "repo": "trezor/trezor-firmware"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "source_code": "        print()\n        return\n    for i in range(len(board)):",
    "target_code": "        print()\n        return True\n    <DED>for i in range(len(board)):\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `None`.",
    "warning_line": 56,
    "pred_top-1": {
      "pred": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False \n \n",
      "pred_parsed": "        print()\n        return False\n        \n        for i in range(len(board)):\n            return False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "print() \n return False \n \n for i in range(len(board)): \n <DED> return False \n \n",
      "pred_parsed": "        print()\n        return False\n        \n        for i in range(len(board)):\n    return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "print() \n return False \n <DED> for i in range(len(board)): \n <IND> return False \n \n",
      "pred_parsed": "        print()\n        return False\n    for i in range(len(board)):\n        return False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "print() \n return False \n \n for i in range(len(board)): \n <IND>",
      "pred_parsed": "        print()\n        return False\n        \n        for i in range(len(board)):\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "print() \n return False \n <IND> for i in range(len(board)): \n <IND> return False \n \n",
      "pred_parsed": "        print()\n        return False\n            for i in range(len(board)):\n                return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "TheAlgorithms/Python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "source_code": "    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
    "target_code": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `bytes`.",
    "warning_line": 213,
    "pred_top-1": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n    \n    return normalized_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "oppia/oppia"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/althonos-pronto",
    "commit": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "filename": "pronto/logic/lineage.py",
    "source_code": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "target_code": "\n    <IND>def __iter__(self) -> \"SuperpropertiesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
    "warning_line": 197,
    "pred_top-1": {
      "pred": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\nreturn SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "althonos/pronto"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/IBM-lale",
    "commit": "b38267abe490e869338f212179b03521e89013ee",
    "filename": "lale/schema_simplifier.py",
    "source_code": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:",
    "target_code": ") -> JsonSchema:\n    <IND>if is_true_schema(schema) or is_false_schema(schema):\n        <IND>return schema\n    <DED>if \"anyOf\" in schema:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Dict[str, typing.Any]` but got `bool`.",
    "warning_line": 988,
    "pred_top-1": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return None\n            if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return None\n        \n        if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "IBM/lale"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/standardebooks-tools",
    "commit": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "filename": "se/executables.py",
    "source_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException",
    "target_code": "\t\t\t<IND>se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException.code\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
    "warning_line": 738,
    "exception": "'pred_top-1'",
    "repo": "standardebooks/tools"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type",
    "target_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                <IND>vty = v.type\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "warning_line": 445,
    "pred_top-1": {
      "pred": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n                    if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                        vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n                    if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                        vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "chanzuckerberg/miniwdl"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p",
    "commit": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "filename": "libp2p/pubsub/gossipsub.py",
    "source_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )",
    "target_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
    "warning_line": 433,
    "pred_top-1": {
      "pred": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "libp2p/py-libp2p"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "        restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],",
    "target_code": "        <IND>restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
    "warning_line": 231,
    "pred_top-1": {
      "pred": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> restored = cls( \n block_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "pred_parsed": "        restored = cls(\n        block_expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> restored = cls( \n LockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "pred_parsed": "        restored = cls(\n        LockExpiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "raiden-network/raiden"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto",
    "commit": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 128,
    "pred_top-1": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= \n <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=\n, shared=annotation[\"inputs\"])\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= \n <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=\n        , shared=annotation[\"inputs\"])\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\nInitializationData(unit_data=  , shared=annotation[\"inputs\"])\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND> <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=  , shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=  , shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "facebookresearch/Mephisto"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "filename": "volatility/framework/automagic/windows.py",
    "source_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "target_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        <IND>raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    <DED>hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
    "warning_line": 267,
    "pred_top-1": {
      "pred": "\n physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "{ physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    { physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "} physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    } physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "volatilityfoundation/volatility3"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wemake-services-wemake-python-styleguide",
    "commit": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "filename": "wemake_python_styleguide/helpers/variables.py",
    "source_code": "    return bool(name) and name != '_' and len(name) < min_length",
    "target_code": "\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
    "warning_line": 38,
    "pred_top-1": {
      "pred": "\n return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "{ return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    { return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "} return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    } return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "wemake-services/wemake-python-styleguide"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki",
    "commit": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "filename": "rotkehlchen/blockchain.py",
    "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}",
    "target_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "warning_line": 131,
    "pred_top-1": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return\n        'per_account': self.balances, 'totals': self.totals\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return\n        'per_account': self.balances, 'totals': self.totals\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return\n        'per_account': self.balances, 'totals': self.totals\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        return\n        'per_account': self.balances, 'totals': self.totals\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.tokens \n \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return\n        'per_account': self.balances, 'totals': self.tokens\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "rotki/rotki"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade",
    "commit": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "filename": "tests/data/test_history.py",
    "source_code": "    assert {} == load_data(\n        datadir='',\n        pairs=[],",
    "target_code": "    <IND>assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
    "warning_line": 373,
    "pred_top-1": {
      "pred": "\n assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "pred_parsed": "    assert\n== load_data(\ndatadir=Path(''),\npairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "pred_parsed": "    assert\n== load_data(\ndatadir=Path(''),\npairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "pred_parsed": "    assert\n== load_data(\ndatadir=Path(''),\npairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n assert \n <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "pred_parsed": "    assert\n        == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> assert \n <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "pred_parsed": "    assert\n        == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "freqtrade/freqtrade"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow",
    "commit": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "filename": "airflow/cli/simple_table.py",
    "source_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)",
    "target_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
    "warning_line": 73,
    "pred_top-1": {
      "pred": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = dict(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = dict(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = dict(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "apache/airflow"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/althonos-pronto",
    "commit": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "filename": "pronto/term.py",
    "source_code": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)",
    "target_code": "                <IND>r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(typing.cast(str, item)))\n        <DED><DED>return frozenset(intersection_of)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
    "warning_line": 441,
    "pred_top-1": {
      "pred": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                \n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                        \n                    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                \n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                        \n                    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                \n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "althonos/pronto"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lykoss-lykos",
    "commit": "3b3870c9f365944134225c5b7364430c5bce0158",
    "filename": "src/roles/madscientist.py",
    "source_code": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "target_code": "\n    <DED>target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
    "warning_line": 53,
    "pred_top-1": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> if not target: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    if not target:\n        target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n <IND>",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "lykoss/lykos"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/datatheorem-strongarm",
    "commit": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "filename": "tests/utils.py",
    "source_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "target_code": "    <DED><DED>binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
    "warning_line": 115,
    "pred_top-1": {
      "pred": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) <IND>",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n        analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "datatheorem/strongarm"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)",
    "target_code": "                <IND>continue\n            <DED>assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "warning_line": 410,
    "pred_top-1": {
      "pred": "\n continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue\n                    self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n continue <DED> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue   self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n continue <DED> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue   self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n continue <IND> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue   self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "StellarCN/py-stellar-base"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
    "warning_line": 1357,
    "pred_top-1": {
      "pred": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if condition == bool \n else is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if condition == bool\n                    else is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "if type(condition) == bool \n else simple(is_true(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else simple(is_true(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if condition(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if condition(condition) == bool\n                    else is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) <IND>",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "ConsenSys/mythril"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool",
    "commit": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "filename": "cwltool/singularity.py",
    "source_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
    "target_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
    "warning_line": 182,
    "pred_top-1": {
      "pred": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \"\n                    .sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd [\"singularity\", \"build\", name,\n                \"docker-archive://\n            \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \"\n                    .sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd [\"singularity\", \"build\", name,\n                \"docker-archive://\n            \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \"\n                    .sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd [\"singularity\", \"build\", name,\n                        \"docker-archive://\n                    \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \"\n                    .sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd [\"singularity\", \"build\", name,\n                        \"docker-archive://\n                    \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \"\n                    .sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd [\"singularity\", \"build\", name,\n                \"docker-archive://\n            \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "common-workflow-language/cwltool"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/psychopy-psychopy",
    "commit": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_code": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\\n')\n    elif not order+'\\n' in target:",
    "target_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
    "warning_line": 82,
    "pred_top-1": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' \n n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\n        n')\n            elif not order+'\n            n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' \n n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order.encode('utf8')+'  n')\n        elif not order+'\n        n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' \n n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\n        n')\n    elif not order+'\n    n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' \n n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n            outfile.write(order.encode('utf8')+'  n')\n                elif not order+'\n                n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' \n n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order.encode('utf8')+'  n')\nelif not order+'\nn' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "psychopy/psychopy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/obsei-obsei",
    "commit": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "filename": "obsei/source/reddit_scrapper.py",
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            <IND>state[config.url_id] = scrapper_stat\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "warning_line": 69,
    "pred_top-1": {
      "pred": "last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(scrapper_stat, str)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "last_index = since_id \n assert scrapper_stat is not None \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert scrapper_stat is not None\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n assert isinstance(scrapper_stat, str) \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(scrapper_stat, str)\n        assert isinstance(scrapper_stat, str)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, dict) \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(str, scrapper_stat)\n        assert isinstance(str, dict)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "obsei/obsei"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "source_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "target_code": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
    "warning_line": 547,
    "pred_top-1": {
      "pred": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "electrumsv/electrumsv"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade",
    "commit": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "filename": "arcade/draw_commands.py",
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
    "warning_line": 883,
    "pred_top-1": {
      "pred": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    texture,\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "draw_texture_rectangle(center_x, center_y, \n texture, \n scale, \n angle=angle, alpha=alpha) \n",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    texture,\n    scale,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture, \n angle=angle, alpha=alpha) \n",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    texture=arcade.drawing_support.Texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(angle=angle), \n alpha=alpha) \n",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    texture=arcade.drawing_support.Texture(angle=angle),\n    alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "pythonarcade/arcade"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "warning_line": 59,
    "pred_top-1": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n        \n        super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, *, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, *, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "allenai/allennlp"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/graph_parser.py",
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "warning_line": 79,
    "pred_top-1": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n        \n        super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, *, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, *, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "allenai/allennlp"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "filename": "allennlp/common/logging.py",
    "source_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "target_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
    "warning_line": 103,
    "pred_top-1": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO] \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel[level_name], logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "allenai/allennlp"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token",
    "target_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "warning_line": 32,
    "pred_top-1": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \nsuper(UserInsightsClientAsync, self).__init__(\ninsights_client._transporter,\nuser_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \nsuper(UserInsightsClientAsync, self).__init__(\ninsights_client._transporter,\nuser_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \nsuper(UserInsightsClientAsync, self).__init__(\ninsights_client._transporter,\nuser_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    super(UserInsightsClientAsync, self).__init__(\n    insights_client._transporter,\n    user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "algolia/algoliasearch-client-python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/quay-quay",
    "commit": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "filename": "test/specs.py",
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
    "warning_line": 29,
    "pred_top-1": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"fake\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"fake\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256: Union[bytes, bytearray, memoryview, mmap.mmap]] \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [sha256: Union[bytes, bytearray, memoryview, mmap.mmap]]\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "quay/quay"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/borglab-gtsfm",
    "commit": "26f76a40e21bd082123f275404efca964faa59b9",
    "filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )",
    "target_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
    "warning_line": 201,
    "pred_top-1": {
      "pred": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "} cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        } cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "{ cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        { cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "borglab/gtsfm"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac",
    "commit": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "filename": "pystac/collection.py",
    "source_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)",
    "target_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        <IND>minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
    "warning_line": 437,
    "pred_top-1": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\")\n        return cls(minimum=minimum,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\")\n        return cls(minimum=minimum,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\")\n        return cls(minimum=minimum,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "stac-utils/pystac"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral",
    "commit": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "filename": "maestral/cli.py",
    "source_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "target_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
    "warning_line": 550,
    "pred_top-1": {
      "pred": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=typing.Tuple[str,...])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "samschott/maestral"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "        restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],",
    "target_code": "        <IND>restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
    "warning_line": 739,
    "pred_top-1": {
      "pred": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "{ restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "pred_parsed": "        { restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "} restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "pred_parsed": "        } restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "raiden-network/raiden"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/docs/snippets_test.py",
    "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)",
    "target_code": "    if expected_failure is not None:\n        <IND>assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if expected_failure is not None: \n <DED> assert_code_snippet_fails(after, state, expected_failure) \n",
      "pred_parsed": "    if expected_failure is not None:\nassert_code_snippet_fails(after, state, expected_failure)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if expected_failure is not None: \n \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "pred_parsed": "    if expected_failure is not None:\n    \n    assert_code_snippet_fails(after, state, expected_failure)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if expected_failure is not None: \n { assert_code_snippet_fails(after, state, expected_failure) \n",
      "pred_parsed": "    if expected_failure is not None:\n    { assert_code_snippet_fails(after, state, expected_failure)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if expected_failure is not None: \n } assert_code_snippet_fails(after, state, expected_failure) \n",
      "pred_parsed": "    if expected_failure is not None:\n    } assert_code_snippet_fails(after, state, expected_failure)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "quantumlib/Cirq"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/deepmipt-DeepPavlov",
    "commit": "1de404c11bc5f40b766e966573506921980ff524",
    "filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "log.info(f\"Saving model to \n self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to\n        self.save_path\n        \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "log.info(f\"Saving model to \n self.save_path <DED> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to\n    self.save_path  \")\n    self.save_path.parent.mkdir(parents=True, exist_ok=True)\n    save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "log.info(f\"Saving model to <DED> self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to  self.save_path\n        \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "log.info(f\"Saving model to <IND> self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to  self.save_path\n        \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "log.info(f\"Saving model to \n self.save_path <IND> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to\n            self.save_path  \")\n            self.save_path.parent.mkdir(parents=True, exist_ok=True)\n            save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "deepmipt/DeepPavlov"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "filename": "volatility/framework/interfaces/configuration.py",
    "source_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)",
    "target_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            <IND>context.add_layer(obj)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
    "warning_line": 635,
    "pred_top-1": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n    context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n    context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "volatilityfoundation/volatility3"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/theupdateframework-python-tuf",
    "commit": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "filename": "tests/repository_simulator.py",
    "source_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, {})\n        # put delegation last by default",
    "target_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 354,
    "pred_top-1": {
      "pred": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            assert Delegations is not None\n            delegator.delegations = Delegations(\n        ,\n    )\n    # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            assert Delegations is not None\n            delegator.delegations = Delegations(\n                ,\n            )\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            assert Delegations is not None\n            delegator.delegations = Delegations(\n        ,\n            )\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if delegator.delegations is None: \n <IND> assert Delegation is not None \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            assert Delegation is not None\n            delegator.delegations = Delegations(\n        ,\n    )\n    # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            assert Delegations is not None\n            delegator.delegations = Delegations(\n                ,\n                    )\n                    # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "theupdateframework/python-tuf"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair",
    "commit": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs",
    "target_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(str(idx), conf.item()))\n        <DED>return label_probs\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
    "warning_line": 488,
    "pred_top-1": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \n return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n            \n            return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, str(conf.item())))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "flairNLP/flair"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Instagram-LibCST",
    "commit": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)",
    "target_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
    "warning_line": 80,
    "pred_top-1": {
      "pred": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                \n                elif isinstance(base.value, cst.Subscript):\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Instagram/LibCST"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto",
    "commit": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.load(json_fp)\n            <DED>for jd in json_data:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n                    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n                \n                for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <DED> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n        json_data = json.loads(json_fp)\n    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.load(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper.load(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "facebookresearch/Mephisto"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec",
    "commit": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "filename": "transformers4rec/torch/features/embedding.py",
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                <IND>tables[name] = table\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "warning_line": 76,
    "pred_top-1": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "features_dim[name] = table.dim \n if not in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if not in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "features_dim[name] = table.dim \n if not table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if not table.name in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <DED> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n        tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "NVIDIA-Merlin/Transformers4Rec"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/spesmilo-electrum",
    "commit": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "filename": "electrum/lnpeer.py",
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
    "warning_line": 477,
    "pred_top-1": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=[], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes(), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes(),\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes([], [],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes((),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "spesmilo/electrum"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Mic92-nixpkgs-review",
    "commit": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "filename": "nixpkgs_review/review.py",
    "source_code": "    with proc as nix_env:\n        return parse_packages_xml(nix_env.stdout)",
    "target_code": "    with proc as nix_env:\n        <IND>assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
    "warning_line": 258,
    "pred_top-1": {
      "pred": "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return IO[bytes](parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(IO[bytes]) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(IO[bytes])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env is not None\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env is not None\n        return parse_packages_xml(bytes(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Mic92/nixpkgs-review"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <IND> player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n            title = None if self.title == self._name else self.title  player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <DED> player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n    title = None if self.title == self._name else self.title  player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "player.init_gender(self.gender) <IND> title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)  title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "irmen/Tale"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
    "warning_line": 91,
    "pred_top-1": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert expr is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> expr = expr \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    expr = expr\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "edgedb/edgedb"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "                new = Or(new, key_argument != index_argument)",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
    "warning_line": 1374,
    "pred_top-1": {
      "pred": "\n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n new_argument = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new_argument = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n new = Or(new, key_argument!= index_argument) \n <IND>",
      "pred_parsed": "                new = Or(new, key_argument!= index_argument)\n                    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "ConsenSys/mythril"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/StdLib.py",
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "warning_line": 180,
    "pred_top-1": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any())), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "chanzuckerberg/miniwdl"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
    "warning_line": 598,
    "pred_top-1": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n token_network_identifier=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            token_network_identifier=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),  identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),  identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <IND> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n                identifier=TokenAmount(int(data['identifier'])),  amount=TokenAmount(int(data['amount'])),\n                initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "raiden-network/raiden"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/intel-dffml",
    "commit": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "filename": "dffml/operation/output.py",
    "source_code": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)",
    "target_code": "\n<DED><DED>group_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "intel/dffml"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ktbyers-netmiko",
    "commit": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_code": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):",
    "target_code": "        if not self.check_enable_mode():\n            <IND>new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
    "warning_line": 65,
    "pred_top-1": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if not self.check_enable_mode(): \n <DED> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n    output += self.send_command_timing(\n    cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if not self.check_enable_mode(): \n <IND> timing += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            timing += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <DED> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False  )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <IND> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False  )\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "ktbyers/netmiko"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna",
    "commit": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "filename": "optuna/storages/cached_storage.py",
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
    "warning_line": 182,
    "pred_top-1": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = base_distribution \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = base_distribution\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bastion_distribution \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = bastion_distribution\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bastion() \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = bastion()\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <IND>",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                    updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "optuna/optuna"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow",
    "commit": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "filename": "airflow/security/kerberos.py",
    "source_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:",
    "target_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
    "warning_line": 117,
    "pred_top-1": {
      "pred": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> time.sleep(1.5) \n assert isinstance(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        assert isinstance(principal, str)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> time.sleep(1.5) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "apache/airflow"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/paul-nameless-tg",
    "commit": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "filename": "tg/controllers.py",
    "source_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "target_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            <IND>return\n        <DED>self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
    "warning_line": 111,
    "pred_top-1": {
      "pred": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return from_chat_id, msg_ids = self.model.yanked_msgs\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return from_chat_id, msg_ids = self.model.yanked_msgs\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert chat_id is not None\n            return\n                from_chat_id, msg_ids = self.model.yanked_msgs\n                self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert chat_id is not None\n            return\n                from_chat_id, msg_ids = self.model.yanked_msgs\n                self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id and msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return from_chat_id and msg_ids\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "paul-nameless/tg"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx",
    "commit": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_code": "class BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "target_code": "\n<DED>class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n metaclass=base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nmetaclass=base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n metaclass=abc.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nmetaclass=abc.ABC):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC) -> tfx.dsl.components.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "tensorflow/tfx"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie",
    "commit": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "filename": "bowtie/_component.py",
    "source_code": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):",
    "target_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(metaclass=_Maker):\n    <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
    "warning_line": 240,
    "pred_top-1": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# pylint: disable=too-few-public-methods \n <IND> <IND> class Component(_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# pylint: disable=too-few-public-methods \n \n <DED> class Component(_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\n\nclass Component(_Maker, object):\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "jwkvam/bowtie"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/golemfactory-clay",
    "commit": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
    "warning_line": 24,
    "pred_top-1": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <DED>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <DED>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "golemfactory/clay"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/BurnySc2-python-sc2",
    "commit": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "filename": "sc2/position.py",
    "source_code": "    @staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"",
    "target_code": "    <DED>@staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        <IND>\"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `[sc2.position.Point2]` is not a valid type.",
    "warning_line": 240,
    "pred_top-1": {
      "pred": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "pred_parsed": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "pred_parsed": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "pred_parsed": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "pred_parsed": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n\"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "pred_parsed": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "BurnySc2/python-sc2"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "60895366c0f50844af2737130ed98c2510e90060",
    "filename": "ciphers/trafid_cipher.py",
    "source_code": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    tmp, thisPart = \"\", \"\"",
    "target_code": "\n<DED>def __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `(str, str, str)` is not a valid type.",
    "warning_line": 19,
    "pred_top-1": {
      "pred": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(\nmessagePart: str, character2Number: dict\n) -> Tuple[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <IND> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(\nmessagePart: str, character2Number: dict\n) -> Tuple[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def __decryptPart( <DED> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(  messagePart: str, character2Number: dict\n) -> Tuple[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(\nmessagePart: str, character2Number: dict\n) -> Tuple[str, str, str]:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], [str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(\nmessagePart: str, character2Number: dict\n) -> Tuple[str, str, str], [str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "TheAlgorithms/Python"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_queryset_level_methods.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
    "warning_line": 58,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "collerek/ormar"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/google-caliban",
    "commit": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "filename": "caliban/gke/cluster.py",
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
    "warning_line": 687,
    "pred_top-1": {
      "pred": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Iterable[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Iterable[List[str]] = None, \n",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Iterable[List[str]] = None,\n      args: Iterable[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "experiments: Iterable[conf.Experiment], \n command: Iterable[list[str]] = None, \n args: Optional[List[str]] = None, \n",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Iterable[list[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "experiment: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "pred_parsed": "      experiment: Iterable[conf.Experiment],\n      command: Iterable[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "google/caliban"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium",
    "commit": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "filename": "UM/PluginObject.py",
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str, Any]:\n        <IND>return self._metadata\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "warning_line": 31,
    "pred_top-1": {
      "pred": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "pred_parsed": "    # The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n        \n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "pred_parsed": "    # The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n        \n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "pred_parsed": "    # The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n        \n            def getMetaData(self) -> Dict[str, Any]:\n                return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "pred_parsed": "    # The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n        \n            def getMetaData(self) -> Dict[str, Any]:\n                return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "pred_parsed": "    # The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\ndef getMetaData(self) -> Dict[str, Any]:\n    return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "Ultimaker/Uranium"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/brainglobe-brainrender",
    "commit": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "filename": "brainrender/scene.py",
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `[str, vedo.Plane]` is not a valid type.",
    "warning_line": 336,
    "pred_top-1": {
      "pred": "self, \n plane: List[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: List[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n plane: [str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "self, \n plane: vedo.Plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, \n plane: Union[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Union[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane,\n        actors=None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "brainglobe/brainrender"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_reallife_fastapi.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 48,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "collerek/ormar"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade",
    "commit": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "filename": "freqtrade/indicator_helpers.py",
    "source_code": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    magic = pi * sqrt(2) / smoothing",
    "target_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `type(pandas.Series)` is not a valid type.",
    "warning_line": 16,
    "pred_top-1": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]:\nmagic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n \n magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]:\n\nmagic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "freqtrade/freqtrade"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/util/Conditions.py",
    "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:",
    "target_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
    "warning_line": 43,
    "pred_top-1": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <DED> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] =\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <DED> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] =\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] =\n            for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] =\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Flax-Network/flax-blockchain"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy",
    "commit": "021283f03639d185c3a0985684a94307c9fcc15b",
    "filename": "mypy/checker.py",
    "source_code": "            else:\n                extra_info = [] # type: [str]\n                if subtype_label is not None:",
    "target_code": "            <DED>else:\n                <IND>extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `\"[str]\"` is not a valid type.",
    "warning_line": 1292,
    "pred_top-1": {
      "pred": "\n else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "pred_parsed": "            else:\n                extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "pred_parsed": "            else:\n                extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "pred_parsed": "            else:\n                extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n else: \n <IND> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "pred_parsed": "            else:\n                extra_info = [] # type: list[str]\n                if subtype_label is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n else: \n <IND> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "pred_parsed": "            else:\n                extra_info = [] # type: typing.Optional[str]\n                if subtype_label is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "python/mypy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/metric/generation.py",
    "source_code": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):",
    "target_code": "\n    <DED>def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
    "warning_line": 69,
    "pred_top-1": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\nfor (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n    \n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n \n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    \n    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "asyml/texar-pytorch"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/unit8co-darts",
    "commit": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "filename": "darts/models/theta.py",
    "source_code": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series",
    "target_code": "\n    <DED>def fit(self, ts):\n        <IND>super().fit(ts)\n        # Check univariate time series\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
    "warning_line": 218,
    "pred_top-1": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> UnivariateForecastingModel: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None) -> UnivariateForecastingModel:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\nsuper().fit(ts, component_index)\n# Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> ts: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None) -> ts:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "unit8co/darts"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "filename": "mythril/laser/smt/bitvecfunc.py",
    "source_code": "        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "target_code": "\n        if not isinstance(other, BitVec):\n            <IND>other = BitVec(z3.BitVecVal(other, self.size()))\n        <DED>return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        <IND>",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
    "warning_line": 145,
    "pred_top-1": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\ndef __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n            def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "ConsenSys/mythril"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura",
    "commit": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_code": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
    "target_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
    "warning_line": 36,
    "pred_top-1": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\ndata = str(temperature)\nself._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 255): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: float, temperature: 255):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "Ultimaker/Cura"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/datastructures.pyi",
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "warning_line": 52,
    "pred_top-1": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = 1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V):...\n    def pop(self, index: int = 1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V):...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "pallets/werkzeug"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden",
    "commit": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "filename": "raiden/messages.py",
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        <IND>return cls(\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
    "warning_line": 1769,
    "pred_top-1": {
      "pred": "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls,\n    data,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'UpdatePFS': \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> 'UpdatePFS':\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> Message:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "def from_dict( \n cls, \n data, \n ) -> 'T_UpdatePFS': \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls,\n    data,\n    ) -> 'T_UpdatePFS':\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "raiden-network/raiden"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mobilityhouse-ocpp",
    "commit": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "filename": "ocpp/v16/call.py",
    "source_code": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None",
    "target_code": "    <IND>id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 96,
    "pred_top-1": {
      "pred": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "pred_parsed": "    id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "pred_parsed": "    id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "pred_parsed": "    id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "{ id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "pred_parsed": "    { id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n id_tag: str \n connector_id: int = \"\" \n charging_profile: Optional[Dict] = None \n \n",
      "pred_parsed": "    id_tag: str\n    connector_id: int = \"\"\n    charging_profile: Optional[Dict] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "mobilityhouse/ocpp"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wemake-services-dotenv-linter",
    "commit": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "filename": "dotenv_linter/grammar/fst.py",
    "source_code": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
    "warning_line": 139,
    "pred_top-1": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n body: List[List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=list) \n \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "wemake-services/dotenv-linter"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy",
    "commit": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "filename": "mypy/checkstrformat.py",
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
    "warning_line": 175,
    "pred_top-1": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker <DED> \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    # Some services are provided by a ExpressionChecker instance.\nexprchk: \"mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "python/mypy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/augment.py",
    "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}",
    "target_code": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 26,
    "pred_top-1": {
      "pred": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "pred_parsed": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "pred_parsed": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "pred_parsed": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "explosion/spaCy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson",
    "commit": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "filename": "mesonbuild/interpreterbase.py",
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
    "warning_line": 461,
    "pred_top-1": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = 0 # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n <IND>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Optional[str]\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "mesonbuild/meson"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAILabel",
    "commit": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "filename": "monailabel/config.py",
    "source_code": "    APP_DIR: str = None\n    STUDIES: str = None",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
    "warning_line": 12,
    "pred_top-1": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "{ APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "pred_parsed": "    { APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <DED>",
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Project-MONAI/MONAI"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/OSInside-kiwi",
    "commit": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "filename": "kiwi/builder/kis.py",
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": ") \n self.image: str = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": ") \n self.image: str = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": ") <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )  self.image: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": ") <IND> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )  self.image: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "OSInside/kiwi"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/events.py",
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
    "warning_line": 794,
    "pred_top-1": {
      "pred": "self.waiter = False \n self.event = None # type: asyncio.Event \n \n",
      "pred_parsed": "        self.waiter = False\n        self.event = None # type: asyncio.Event\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "self.waiter = False \n self.event = 0 # type: asyncio.Event \n \n",
      "pred_parsed": "        self.waiter = False\n        self.event = 0 # type: asyncio.Event\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.waiter = False \n self.event = asyncio.Event \n \n",
      "pred_parsed": "        self.waiter = False\n        self.event = asyncio.Event\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self.waiter = False \n self.event = None # type: Optional[asyncio.Event] \n \n",
      "pred_parsed": "        self.waiter = False\n        self.event = None # type: Optional[asyncio.Event]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self.waiter = False \n self.event = None # type: Asyncio.Event \n \n",
      "pred_parsed": "        self.waiter = False\n        self.event = None # type: Asyncio.Event\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true,
    "repo": "missionpinball/mpf"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_new_annotation_style.py",
    "source_code": "    id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "collerek/ormar"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy",
    "commit": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
    "warning_line": 50,
    "pred_top-1": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = None\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\n        result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "microsoft/msticpy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mobilityhouse-ocpp",
    "commit": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "filename": "ocpp/v16/call.py",
    "source_code": "    requested_message: MessageTrigger\n    connector_id: int = None",
    "target_code": "    <IND>requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "\n requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "{ requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "pred_parsed": "    { requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "} requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "pred_parsed": "    } requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "mobilityhouse/ocpp"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/instadeepai-Mava",
    "commit": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "filename": "mava/systems/tf/mappo/system.py",
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
    "warning_line": 153,
    "pred_top-1": {
      "pred": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "pred_parsed": "            self._agent_net_config =\n            \n            agent: agent.split(\"_\")[0] if shared_weights else agent\n            for a_i, agent in enumerate(agents)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "pred_parsed": "            self._agent_net_config =\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for a_i, agent in enumerate(agents)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "pred_parsed": "            self._agent_net_config =\n        agent: agent.split(\"_\")[0] if shared_weights else agent\n        for a_i, agent in enumerate(agents)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self._agent_net_config = <DED> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "pred_parsed": "            self._agent_net_config =\n            agent: agent.split(\"_\")[0] if shared_weights else agent\n            for a_i, agent in enumerate(agents)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self._agent_net_config = <IND> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "pred_parsed": "            self._agent_net_config =\n            agent: agent.split(\"_\")[0] if shared_weights else agent\n            for a_i, agent in enumerate(agents)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "instadeepai/Mava"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary",
    "commit": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "filename": "ambassador/ambassador_diag/diagd.py",
    "source_code": "                    self.env_good = True\n                    self.failure_list = None",
    "target_code": "                    <IND>self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
    "warning_line": 707,
    "pred_top-1": {
      "pred": "\n self.env_good = True \n self.failure_list = [] \n \n",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n self.env_good = True \n self.list = [] \n \n",
      "pred_parsed": "                    self.env_good = True\n                    self.list = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> self.env_good = True \n self.failure_list = [] \n \n",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<IND> self.env_good = True \n self.failure_list = [] \n \n",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n self.env_good = True \n # self.failure_list: List[str] \n \n",
      "pred_parsed": "                    self.env_good = True\n                    # self.failure_list: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "emissary-ingress/emissary"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/kinnala-scikit-fem",
    "commit": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "filename": "skfem/assembly/dofs.py",
    "source_code": "    topo: Mesh = None\n    element: Element = None",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
    "warning_line": 171,
    "pred_top-1": {
      "pred": "\n topo: Mesh \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Mesh\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n topo: Mesh \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh\n    element: Element\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n topo: Mesh \n element: Optional[element] = None \n \n",
      "pred_parsed": "    topo: Mesh\n    element: Optional[element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> topo: Mesh \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Mesh\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> topo: Mesh \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Mesh\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "kinnala/scikit-fem"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/actionless-pikaur",
    "commit": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "filename": "pikaur_test/helpers.py",
    "source_code": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
    "warning_line": 85,
    "pred_top-1": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\nself.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\nself.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "actionless/pikaur"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ehForwarderBot-efb-telegram-master",
    "commit": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "filename": "efb_telegram_master/master_message.py",
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
    "warning_line": 271,
    "pred_top-1": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            if not m.chat:\n                build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "m.author = self.chat_manager.self \n if not m.chat: \n <DED> build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            if not m.chat:\n        build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n <IND> build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            if not m.chat:\n                m.chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "ehForwarderBot/efb-telegram-master"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/OSInside-kiwi",
    "commit": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "filename": "kiwi/builder/kis.py",
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
    "warning_line": 90,
    "pred_top-1": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = \"\"\n        self.hypervisor_filename: str = \"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <IND> self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n            self.hypervisor_filename: Optional[str] = None  self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <IND> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n            self.kernel_filename: Optional[str] = None  self.hypervisor_filename: Optional[str] = None\n            self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "OSInside/kiwi"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jupyterhub-zero-to-jupyterhub-k8s",
    "commit": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "filename": "images/hub/jupyterhub_config.py",
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "warning_line": 275,
    "pred_top-1": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert trait is not None\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert trait is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "jupyterhub/zero-to-jupyterhub-k8s"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/standardebooks-tools",
    "commit": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "filename": "se/formatting.py",
    "source_code": " number = int(number)\n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "target_code": "\n value = int(number)\n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `str` and `int`.",
    "warning_line": 720,
    "exception": "'pred_top-1'",
    "repo": "standardebooks/tools"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "filename": "tale/driver.py",
    "source_code": "        else:\n            raise ValueError(\"unknown topic: \" + topicname)",
    "target_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
    "warning_line": 1052,
    "pred_top-1": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic:\n            topicname\n            \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic:\n            topicname\n            \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic:\n            topicname\n            \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "pred_parsed": "        else:\n        raise ValueError(f\"unknown topic:  topicname\n        \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "pred_parsed": "        else:\n                raise ValueError(f\"unknown topic:  topicname\n                \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "irmen/Tale"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura",
    "commit": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) < self._library_max_private_projects)",
    "target_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "warning_line": 95,
    "pred_top-1": {
      "pred": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                        elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                            callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  tuple(self._library_max_private_projects))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  tuple(self._library_max_private_projects))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Ultimaker/Cura"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jupyterhub-zero-to-jupyterhub-k8s",
    "commit": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "filename": "images/hub/jupyterhub_config.py",
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "warning_line": 279,
    "pred_top-1": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert trait is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert trait is not None\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "jupyterhub/zero-to-jupyterhub-k8s"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/crytic-slither",
    "commit": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "filename": "slither/core/solidity_types/elementary_type.py",
    "source_code": "            return 32, True\n\n        return int(self.size / 8), False",
    "target_code": "            <IND>return 32, True\n        <DED>if self.size is None:\n            <IND>return 32, True\n        <DED>return int(self.size / 8), False\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "warning_line": 180,
    "pred_top-1": {
      "pred": "\n return 32, True \n <DED> <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n    return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return 32, True \n <IND> <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n return 32, True \n <DED> <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n return 32, True \n <IND> <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n                    return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "crytic/slither"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/tensor/tests/test_basic.py",
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `range` and `range`.",
    "warning_line": 848,
    "pred_top-1": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(range(-127, 0)) + range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "rizar/attention-lvcsr"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "            return [global_state]\n\n        if size > 0:",
    "target_code": "            return [global_state]\n        <DED>size = cast(int, size)\n        if size > 0:\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
    "warning_line": 748,
    "pred_top-1": {
      "pred": "return [global_state] \n <DED> <DED> if size is not None and size > 0: \n",
      "pred_parsed": "            return [global_state]\n    if size is not None and size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "return [global_state] \n <IND> <DED> if size is not None and size > 0: \n",
      "pred_parsed": "            return [global_state]\n            if size is not None and size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "return [global_state] \n <DED> <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n    if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "return [global_state] \n <IND> <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "return [global_state] \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "ConsenSys/mythril"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy",
    "commit": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
    "warning_line": 159,
    "pred_top-1": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \"\n            n\" + str(err) + \"\n            n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" <DED> n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \"\n        n\" + str(err) + \"  n\" + traceback.format_exc()\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "err_result.raw_result = ( \n type(err) + \" <DED> n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n        type(err) + \"  n\" + str(err) + \"\n        n\" + traceback.format_exc()\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" <IND> n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \"\n                n\" + str(err) + \"  n\" + traceback.format_exc()\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "err_result.raw_result = ( \n type(err) + \" <IND> n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n                type(err) + \"  n\" + str(err) + \"\n                n\" + traceback.format_exc()\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "microsoft/msticpy"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/RasaHQ-rasa",
    "commit": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_code": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "target_code": "\n        <DED>model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `str` and `str`.",
    "warning_line": 1015,
    "pred_top-1": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \n.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"\n        file_name\n        .tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <DED>.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"\n    file_name .tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <IND>.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"\n            file_name .tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name \n.tf_model\" \n \n",
      "pred_parsed": "        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"\n        file_name\n        .tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name <DED>.tf_model\" \n \n",
      "pred_parsed": "        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"\n    file_name .tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "RasaHQ/rasa"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox",
    "commit": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_code": "    def _check_params(self) -> None:\n        if self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")",
    "target_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step is not None and self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps is not None and self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "warning_line": 148,
    "pred_top-1": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n                if self.eps is not None and self.eps = 0:\n                    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n                if self.eps = 0:\n                    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false,
    "repo": "Trusted-AI/adversarial-robustness-toolbox"
  },
  {
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust",
    "commit": "51de861ada304a1763a4872811274818a8ee0851",
    "filename": "faust/agents/agent.py",
    "source_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream())",
    "target_code": "    <DED>def __aiter__(self) -> AsyncIterator:\n        <IND>return aiter(self._stream)\n",
    "warning_type": "Call error [29]",
    "warning_message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
    "warning_line": 1123,
    "pred_top-1": {
      "pred": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream())\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream) \n",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\nreturn aiter(self._stream)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true,
    "repo": "faust-streaming/faust"
  }
]