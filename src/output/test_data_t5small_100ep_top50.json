[
  {
    "source_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            <DED>elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            <DED>elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_line": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `constrained` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 3041,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/format/afp.py",
    "target_filename": "bemani/format/afp.py",
    "source_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da^",
    "target_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "predictions": [
      "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "1": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "2": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "3": "\n vprint(f\" ^ prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "4": "\n vprint =f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "5": "<DED> vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "6": "<IND> vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "7": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: <IND>",
      "8": "\n self.vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "9": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") <IND> <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "10": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "11": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: <DED>",
      "12": "\n vprint = f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "13": "\n print(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "14": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0, 'no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "15": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") <DED> <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "16": "\n assert action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "17": "\n vprint(f \" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "18": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained === 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "19": "\n vprint[f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "20": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") <DED> \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "21": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n \n \n elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "22": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "23": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0.0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "24": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "25": "\n vprint = (f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "26": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0, 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "27": "\n vprint=f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "28": "\n vprint(f\" { prefix \\ { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "29": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else 'no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "30": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0, null else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "31": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0, stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "32": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else (0'no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "33": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \\ \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "34": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0, no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "35": "\n vprint(f\" ^ prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "36": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else (\"'no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "37": "\n vprint(f' { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "38": "\n vprint(f\" { prefix } { lineno } : { action_name \\ Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "39": "\n vprint(f\" ^ prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "40": "\n vprint == f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "41": "\n _vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "42": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == \"0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "43": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0. 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "44": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'Check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "45": "\n vprint (f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "46": "\n vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else ('check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "47": "\n vprint(f\" \\ prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "48": "\n vprint = \" ^ prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "49": "\n f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_line": "    results = mean_squared_error(y_test, model.predict(X_test))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `y_test` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 42,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "target_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2^",
    "target_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "predictions": [
      "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(X_test)) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "1": "# Run some test predictions \n var results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "2": "# Run some test predictions \n results = mean_squared_error(model.predict(X_test)) \n",
      "3": "# Run some test predictions \n _ results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "4": "# Run some test predictions \n if X_test is not None: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "5": "# Run some test predictions \n results = mean_squared_error(x_test, model.predict(X_test)) \n",
      "6": "# Run some test predictions \n if not Y_test: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "7": "# Run some test predictions \n results = mean_squared_error(Y_test, model.predict(X_test)) \n",
      "8": "# Run some test predictions \n if not X_test is not None: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "9": "# Run some test predictions \n if not X_test: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "10": "# Run some test predictions \n if not X_test is None: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "11": "# Run some test predictions \n if X_test is None: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "12": "# Run some test predictions \n results = mean_squared_error(str, model.predict(X_test)) \n",
      "13": "# Run some test predictions \n tests = mean_squared_error(y_test, model.predict(X_test)) \n",
      "14": "# Run some test predictions \n result = mean_squared_error(y_test, model.predict(X_test)) \n",
      "15": "# Run some test predictions \n if not y_test: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "16": "# Run some test predictions \n qs = mean_squared_error(y_test, model.predict(X_test)) \n",
      "17": "# Run some test predictions \n y_test = mean_squared_error(y_test, model.predict(X_test)) \n",
      "18": "# Run some test predictions \n _results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "19": "# Run some test predictions \n...results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "20": "# Run some test predictions \n _ <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "21": "# Run some test predictions \n _.define(\"y_test\", mean_squared_error(y_test), model.predict(X_test)) \n",
      "22": "# Run some test predictions \n _.results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "23": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(Y_test)) \n",
      "24": "# Run some test predictions \n results = mean_squared_error(serialize_test(model.predict(X_test))) \n",
      "25": "# Run some test predictions \n results = mean_squared_error(str(y_test), model.predict(X_test)) \n",
      "26": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(X_test)) \n \n",
      "27": "# Run some test predictions \n results = mean_squared_error(serialize_test, model.predict(X_test)) \n",
      "28": "# Run some test predictions \n __results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "29": "# Run some test predictions \n _ \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "30": "# Run some test predictions \n data = mean_squared_error(y_test, model.predict(X_test)) \n",
      "31": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(x_test)) \n",
      "32": "# Run some test predictions \n _ <DED> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "33": "# Run some test predictions \n results = mean_squared_error(null, model.predict(X_test)) \n",
      "34": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(X_test)) \n <IND>",
      "35": "# Run some test predictions \n var results = mean_squared_error(Y_test, model.predict(X_test)) \n",
      "36": "# Run some test predictions \n if not X_test: \n <IND> results = mean_squared_error(y_test, model.predict(Y_test)) \n",
      "37": "# Run some test predictions \n var results = mean_squared_error(y_test, model.predict(X_test)) \n \n",
      "38": "# Run some test predictions \n _ y_test = mean_squared_error(y_test, model.predict(X_test)) \n",
      "39": "# Run some test predictions \n var results = mean_squared_error(x_test, model.predict(X_test)) \n",
      "40": "# Run some test predictions \n results = mean_squared_error(list(y_test), model.predict(X_test)) \n",
      "41": "# Run some test predictions \n var results = mean_squared_error(y_test, model.predict(X_test)) \n <IND>",
      "42": "# Run some test predictions \n _ results = mean_squared_error(model.predict(X_test)) \n",
      "43": "# Run some test predictions \n vars = mean_squared_error(y_test, model.predict(X_test)) \n",
      "44": "# Run some test predictions \n _ results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "45": "# Run some test predictions \n if not X_test is not None: \n <IND> results = mean_squared_error(y_test, model.predict(Y_test)) \n",
      "46": "# Run some test predictions \n var results = mean_squared_error(model.predict(X_test)) \n",
      "47": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(X_test,...)) \n",
      "48": "# Run some test predictions \n var results = mean_squared_error(y_test, model.predict(X_test)) \n ) \n",
      "49": "# Run some test predictions \n if not X_test is None: \n <IND> results = mean_squared_error(y_test, model.predict(Y_test)) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>\"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')\n\n",
    "target_code": "    <IND>\"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_line": "    server_type = _('Object')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `_` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/swift",
    "source_filename": "swift/proxy/controllers/obj.py",
    "target_filename": "swift/proxy/controllers/obj.py",
    "source_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21^",
    "target_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "predictions": [
      "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "1": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'object' \n \n",
      "2": "<DED> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "3": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = '' \n \n",
      "4": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = WSGI controller for object requests.\"\" \n \n",
      "5": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = ('Object') \n \n",
      "6": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = \"\" \n \n",
      "7": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "8": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = \"Object\" \n \n",
      "9": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = new _('Object') \n \n",
      "10": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' <DED> \n \n",
      "11": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' <IND> \n",
      "12": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n <IND>",
      "13": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = _('Object') \n \n",
      "14": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n <DED> \n",
      "15": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = $('Object') \n \n",
      "16": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Type' \n \n",
      "17": "<IND> \"\"\"WSGI controller for object requests.\"\"\" <IND> server_type = 'Object' \n \n",
      "18": "<IND> \"\"\"WSGI controller for object requests.\"\"\" <DED> server_type = 'Object' \n \n",
      "19": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.get('Object') \n \n",
      "20": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.decode('Object') \n \n",
      "21": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = this._server_type \n \n",
      "22": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = ['Object'] \n \n",
      "23": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = [] \n \n",
      "24": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'WWSGI controller for object requests.' \n \n",
      "25": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Protocol' \n \n",
      "26": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = (Object) \n \n",
      "27": "<DED> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'object' \n \n",
      "28": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.create('Object') \n \n",
      "29": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = this.server_type \n \n",
      "30": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type: 'Object' \n \n",
      "31": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.prototype \n \n",
      "32": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = type('Object') \n \n",
      "33": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Default' \n \n",
      "34": "<DED> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = '' \n \n",
      "35": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = object requests.\"\" \n \n",
      "36": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Property' \n \n",
      "37": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Unknown object' \n \n",
      "38": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'WWSGI controller for object requests.\"\"\" \n \n",
      "39": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.decode('object') \n \n",
      "40": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = [\"Object\"] \n \n",
      "41": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = WSGI controller for object requests.\"\" \n <IND>",
      "42": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'View' \n \n",
      "43": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.as_number('Object') \n \n",
      "44": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'target' \n \n",
      "45": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = Object.decode('Server') \n \n",
      "46": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = \"object\" \n \n",
      "47": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = WSGI controller for object requests. \"\" \n \n",
      "48": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = object requests._type \n \n",
      "49": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = object requests.type \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>@pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "target_code": "\n    <DED>@pyqtSlot(bool)  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "warning_line": "    @pyqtSignature('bool')  # prevents actions being handled twice",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "target_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "1": "\n <IND> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "2": "\n <DED> @pyqtSlot() # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "3": "\n \n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "4": "<DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "5": "\n <DED> @pyqtSlot(bool, bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "6": "<IND> <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "7": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice <IND> def help_toggled(self, flag): \n",
      "8": "\n <DED> @pyqtSlot() \n @pyqtSignature(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "9": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): <IND>",
      "10": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice <DED> def help_toggled(self, flag): \n",
      "11": "\n <DED> @pyqtSlot(bool), # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "12": "\n <DED> @pyqtSlot[bool] # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "13": "\n <DED> @_pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "14": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): <DED>",
      "15": "\n <DED> @pyqtSlot() \n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "16": "\n <DED> @qtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "17": "\n <DED> @pyqtSlot(bool) # stops actions being handled twice \n def help_toggled(self, flag): \n",
      "18": "\n <DED> @pyqtSlot(bool, flag) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "19": "\n <DED> @appyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "20": "\n <DED> # @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "21": "\n <DED> @pyqtSlot() \n # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "22": "\n <DED> @pyqtSlot() \n @pyqt[bool] # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "23": "\n <DED> @pyqtSlot(bool) # prevented actions being handled twice \n def help_toggled(self, flag): \n",
      "24": "\n <DED> @pyqtSlot() \n @pyqt_bool # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "25": "\n <DED> @pyqtSlot() \n @pyqt(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "26": "\n <DED> @PyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "27": "\n <DED> @pyqtSlot() \n @pyqtSlot[bool] # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "28": "\n \n <IND> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "29": "\n <DED> @ @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "30": "\n <DED> @pyqtSlot() @ prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "31": "\n <IND> @pyqtSlot() # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "32": "\n <DED> @pyqtSlot() \n @bool # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "33": "\n <DED> @pyqtSlot (bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "34": "\n <DED> @bool_pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "35": "\n <DED> @pingqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "36": "\n \n \n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "37": "\n <IND> @_pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "38": "\n <DED> @pyqtSlot(bool, actions) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "39": "\n <DED> @slot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "40": "\n <DED> @pyqtSlot(bool) @ prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "41": "\n <IND> # @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "42": "\n \n <DED> @pyqtSlot() # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "43": "\n <DED> @pyqtSlot(bool) # prevents action being handled twice \n def help_toggled(self, flag): \n",
      "44": "\n <DED> @apiqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "45": "\n <DED> @pyqtSlot(bool): \n <IND> def help_toggled(self, flag): \n",
      "46": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n <IND>",
      "47": "\n <DED> @pyqtSlot # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "48": "\n <IND> @qtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "49": "\n <DED> @pyqtSlot, # prevents actions being handled twice \n def help_toggled(self, flag): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": admin, \"thread_fbid\": self.id}\n\n",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_line": "        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `admin` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fbchat-dev/fbchat",
    "source_filename": "fbchat/_group.py",
    "target_filename": "fbchat/_group.py",
    "source_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372^",
    "target_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "predictions": [
      "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "1": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "2": "\n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "3": "<DED> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "4": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\") \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "5": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "6": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "7": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "8": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", (data)) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "9": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "10": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <DED> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "11": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n <IND>",
      "12": "\n user_id = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", user_ids) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "13": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n <DED>",
      "14": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", j) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "15": "\n user_id = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "16": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\") \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "17": "\n user_ids = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", user_ids) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "18": "\n info = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "19": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str, status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "20": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\"), data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "21": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "22": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", list(data)) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "23": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "24": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", user_ids) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "25": "\n user_ids = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "26": "\n self.data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "27": "\n data = { \"uid\": user_id, \"tid\": self.id } <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "28": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "29": "\n self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "30": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } <IND> \n",
      "31": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "32": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool, data): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "33": "\n data = { \"uid\": user_id, \"tid\": self.id } <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "34": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/,\" data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "35": "\n users = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", users) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "36": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } <DED> \n",
      "37": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", status) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "38": "<DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "39": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): <IND> <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "40": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "41": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_ids, \"thread_fbid\": self.id } \n \n",
      "42": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): <DED> <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "43": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <DED> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "44": "\n use_data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", use_data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "45": "<IND> data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n <IND>",
      "46": "\n return { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "47": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: \"bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "48": "\n data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n",
      "49": "\n var data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": admin, \"thread_fbid\": self.id } \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nkey1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)\n\n",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_line": "key1 = [rands(10) for _ in xrange(N)]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 10,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pandas-dev/pandas",
    "source_filename": "scripts/bench_join_multi.py",
    "target_filename": "scripts/bench_join_multi.py",
    "source_changeid": "6c304c78d6a0559525abe16f03465d275c516455^",
    "target_changeid": "6c304c78d6a0559525abe16f03465d275c516455",
    "predictions": [
      "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "1": "\n key1 = [rands(10) for _ in str(N)] \n key2 = [rands(10) for _ in str(N)] \n \n zipped = izip(key1, key2) \n \n",
      "2": "\n key1 = [rands(10) for _ in xrange(N)] \n key2 = [rands(10) for _ in xrange(N)] \n \n zipped = izip(key1, key2) \n \n",
      "3": "\n key1 = [rands(10) for _ in array(N)] \n key2 = [rands(10) for _ in array(N)] \n \n zipped = izip(key1, key2) \n \n",
      "4": "\n key1 = [ands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "5": "\n key2 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "6": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "7": "\n _key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "8": "<DED> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "9": "<IND> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "10": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n <IND>",
      "11": "\n key1 = [rands(10) for _ in Range(N)] \n key2 = [rands(10) for _ in Range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "12": "\n key1 = [rands(10) for _ in xrange(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "13": "\n var key1 = [rands(10) for _ in range(N)] \n var key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "14": "\n keys = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "15": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "16": "\n key1 = [rands(10) for _ in scope(N)] \n key2 = [rands(10) for _ in scope(N)] \n \n zipped = izip(key1, key2) \n \n",
      "17": "\n key1 = [rands(10) for _ in range(N)] <IND> key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "18": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) <DED> \n",
      "19": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) <IND> \n",
      "20": "\n key1 = [rands(10) for _ in xrange(N)] \n key2 = [rands(10) for _ in Xrange(N)] \n \n zipped = izip(key1, key2) \n \n",
      "21": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n <DED>",
      "22": "\n key1 = [rands(10) for _ in range(N)] <DED> key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "23": "\n key1 = [rands(10) for _ in field(N)] \n key2 = [rands(10) for _ in field(N)] \n \n zipped = izip(key1, key2) \n \n",
      "24": "\n key1 = [ands(10) for _ in range(N)] \n key2 = [ands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "25": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] <IND> \n zipped = izip(key1, key2) \n \n",
      "26": "\n key1 = [[rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "27": "\n key1 = [rands(10) for _ in N(N)] \n key2 = [rands(10) for _ in N(N)] \n \n zipped = izip(key1, key2) \n \n",
      "28": "\n key1 = [rands(10) for _ in Xrange(N)] \n key2 = [rands(10) for _ in Xrange(N)] \n \n zipped = izip(key1, key2) \n \n",
      "29": "\n key1 = [rands(10) for _ in (N)] \n key2 = [rands(10) for _ in (N)] \n \n zipped = izip(key1, key2) \n \n",
      "30": "\n key1 = [np.ndarray(10) for _ in range(N)] \n key2 = [np.ndarray(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "31": "\n key1 = [rands(10) for _ in array(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "32": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] <DED> \n \n zipped = izip(key1, key2) \n \n",
      "33": "\n key1 = [str(10) for _ in range(N)] \n key2 = [str(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "34": "\n key1 = [rands(10) for _ in n(N)] \n key2 = [rands(10) for _ in n(N)] \n \n zipped = izip(key1, key2) \n \n",
      "35": "\n key1 = [reands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "36": "\n key1 = [sands(10) for _ in range(N)] \n key2 = [sands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "37": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] <DED> \n zipped = izip(key1, key2) \n \n",
      "38": "\n key1 = [rands(10) for _ in str[N]] \n key2 = [rands(10) for _ in str[N]] \n \n zipped = izip(key1, key2) \n \n",
      "39": "\n keys = [rands(10) for _ in xrange(N)] \n key2 = [rands(10) for _ in xrange(N)] \n \n zipped = izip(key1, key2) \n \n",
      "40": "\n key1 = [rands(10) for _ in range[N]] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "41": "\n key1 = (rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "42": "\n key1= [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "43": "\n keys = [rands(10) for _ in str(N)] \n key2 = [rands(10) for _ in str(N)] \n \n zipped = izip(key1, key2) \n \n",
      "44": "\n key0 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "45": "\n key1 = [rands(10) for _ in line(N)] \n key2 = [rands(10) for _ in line(N)] \n \n zipped = izip(key1, key2) \n \n",
      "46": "\n key1 = [rands(10) for _ in range(N)] \n value2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "47": "\n value_key1 = [rands(10) for _ in range(N)] \n value_key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, value2) \n \n",
      "48": "\n value_1 = [rands(10) for _ in range(N)] \n value_2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, value2) \n \n",
      "49": "\n key1 = [rands(10) for _ in positionN)] \n key2 = [rands(10) for _ in positionN)] \n \n zipped = izip(key1, key2) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):\n",
    "target_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_line": "    @wsme_pecan.wsexpose(NodePowerState, unicode)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/ironic",
    "source_filename": "ironic/api/controllers/v1/node.py",
    "target_filename": "ironic/api/controllers/v1/node.py",
    "source_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18^",
    "target_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "predictions": [
      "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, icode) \n def get(self, node_id): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, icode) \n def get(self, node_id): \n",
      "1": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype) \n def get(self, node_id): \n",
      "2": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, node_id) \n def get(self, node_id): \n",
      "3": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype",
      "4": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, code) \n def get(self, node_id): \n",
      "5": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState,...) \n def get(self, node_id): \n",
      "6": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype) \n def get(self, node_id): \n <IND>",
      "7": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype: \n",
      "8": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, str) \n def get(self, node_id): \n",
      "9": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype]: \n",
      "10": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, null) \n def get(self, node_id): \n",
      "11": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, ()) \n def get(self, node_id): \n",
      "12": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype] \n def get(self, node_id): \n",
      "13": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype) \n",
      "14": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype: <IND>",
      "15": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype=='unicode') \n def get(self, node_id): \n",
      "16": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, list(node_id)) \n def get(self, node_id): \n",
      "17": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype='unicode') \n def get(self, node_id): \n",
      "18": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, self.get(\"unicode\")) \n def get(self, node_id): \n",
      "19": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, assert (self, node_id)) \n def get(self, node_id): \n",
      "20": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, list(self, node_id)) \n def get(self, node_id): \n",
      "21": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, _.wsexpose(_nodePowerState, _.wsexpose__)) \n def get(self, node_id): \n",
      "22": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, self.node_id) \n def get(self, node_id): \n",
      "23": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wyid) \n def get(self, node_id): \n",
      "24": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype): \n",
      "25": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, 'wsexpose') \n def get(self, node_id): \n",
      "26": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype: <DED> { } ) \n def get(self, node_id): \n",
      "27": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, isinstance(unicode)) \n def get(self, node_id): \n",
      "28": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, str(self, node_id)) \n def get(self, node_id): \n",
      "29": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypes): \n",
      "30": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype == self, node_id) \n",
      "31": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype === self, node_id) \n",
      "32": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, unicode) \n def get(self, node_id): \n",
      "33": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, 'wsexpose', 'wsexpose') \n def get(self, node_id): \n",
      "34": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, bool) \n def get(self, node_id): \n",
      "35": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype) \n def get(self, node_id): <IND>",
      "36": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype === unicode) \n <IND> def get(self, node_id): \n",
      "37": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype='') \n def get(self, node_id): \n",
      "38": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype) \n def get(self, node_id): \n \n",
      "39": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype=create) \n def get(self, node_id): \n",
      "40": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype='first') \n def get(self, node_id): \n",
      "41": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof w typeof wtype",
      "42": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype) \n def get(self, node_id): <DED>",
      "43": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype=style \n ) \n def get(self, node_id): \n",
      "44": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype] \n",
      "45": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, _.wsexpose(_nodePowerState, _.wsexpose(_node_id)) \n def get(self, node_id): \n",
      "46": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, namespace.unicode) \n def get(self, node_id): \n",
      "47": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtypeof wtype);",
      "48": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsexpose[str, str]) \n def get(self, node_id): \n",
      "49": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wyfid) \n def get(self, node_id): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>@pyqtSignature('')\n    def run_selected_clicked(self):\n",
    "target_code": "\n    <DED>@pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_line": "    @pyqtSignature('')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 570,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/batch/batch_dialog.py",
    "target_filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "1": "\n <DED> @selected_clicked(self): \n <IND> def run_selected_clicked(self): \n",
      "2": "\n <DED> @_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "3": "\n <DED> @qtSignature('') \n def run_selected_clicked(self): \n",
      "4": "\n <DED> @pyqt_Signature('') \n def run_selected_clicked(self): \n",
      "5": "\n <DED> @pyqt('') \n def run_selected_clicked(self): \n",
      "6": "\n <DED> @pyqt_selected_clicked(self): \n <IND> def run_selected_clicked(self): \n",
      "7": "\n <DED> @pyqt_signature('') \n def run_selected_clicked(self): \n",
      "8": "\n <DED> @mock_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "9": "\n <DED> @_pyqt_Signature('') \n def run_selected_clicked(self): \n",
      "10": "\n <DED> @pyqtSequence('') \n def run_selected_clicked(self): \n",
      "11": "\n <IND> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "12": "\n <DED> @pyqt.Signature('') \n def run_selected_clicked(self): \n",
      "13": "\n <DED> @new_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "14": "\n \n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "15": "\n <DED> @pyqt_selected('') \n def run_selected_clicked(self): \n",
      "16": "\n <DED> @hash_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "17": "\n <DED> @PyqtSignature('') \n def run_selected_clicked(self): \n",
      "18": "\n <DED> @npyqtSignature('') \n def run_selected_clicked(self): \n",
      "19": "\n <DED> @pyqtInt('') \n def run_selected_clicked(self): \n",
      "20": "\n <DED> @type('') \n def run_selected_clicked(self): \n",
      "21": "\n <DED> @pyqt['']: \n <IND> def run_selected_clicked(self): \n",
      "22": "\n <DED> @pyqt() \n def run_selected_clicked(self): \n",
      "23": "\n <DED> @qt_selected_clicked(self): \n <IND> def run_selected_clicked(self): \n",
      "24": "\n <DED> @t.pyqtSignature('') \n def run_selected_clicked(self): \n",
      "25": "\n <DED> @current_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "26": "\n <DED> @appyqtSignature('') \n def run_selected_clicked(self): \n",
      "27": "\n <DED> @pyqtSerializer('') \n def run_selected_clicked(self): \n",
      "28": "\n <DED> @pyqt[''] = new pyqt[''] \n def run_selected_clicked(self): \n",
      "29": "\n <DED> @pyqt__Signature('') \n def run_selected_clicked(self): \n",
      "30": "\n <DED> @pyqt[\"pyqt\"]('') \n def run_selected_clicked(self): \n",
      "31": "\n <DED> @pyqtStatus('') \n def run_selected_clicked(self): \n",
      "32": "<DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "33": "\n <DED> @msg('') \n def run_selected_clicked(self): \n",
      "34": "\n <IND> @selected_clicked(self): \n <IND> def run_selected_clicked(self): \n",
      "35": "\n <DED> @selected_clicked(self): \n <DED> def run_selected_clicked(self): \n",
      "36": "\n <DED> @repyqtSignature('') \n def run_selected_clicked(self): \n",
      "37": "\n <DED> @cyqtSignature('') \n def run_selected_clicked(self): \n",
      "38": "\n <DED> @iqtSignature('') \n def run_selected_clicked(self): \n",
      "39": "\n <DED> @pyqt[''] = new pyqt[\"pyqt\"] \n def run_selected_clicked(self): \n",
      "40": "\n <DED> @pyqt_type('') \n def run_selected_clicked(self): \n",
      "41": "\n <DED> @pyqtDate('') \n def run_selected_clicked(self): \n",
      "42": "\n <DED> @_pyqt('') \n def run_selected_clicked(self): \n",
      "43": "\n <DED> @pyqtContext('') \n def run_selected_clicked(self): \n",
      "44": "\n <DED> @pyqt[''] = '' \n def run_selected_clicked(self): \n",
      "45": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): <IND>",
      "46": "\n <DED> @pyqts('') \n def run_selected_clicked(self): \n",
      "47": "\n <DED> @pyqt[''] = new pyqt[\"'\"] \n def run_selected_clicked(self): \n",
      "48": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): <DED>",
      "49": "\n <DED> @qt('') \n def run_selected_clicked(self): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input('finished')\n",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/convection/exponential2D/mesh2D.py",
    "target_filename": "examples/convection/exponential2D/mesh2D.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "\n input('finished') \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n input('finished') \n",
      "1": "\n input('finished') \n \n",
      "2": "\n input('finished') \n <DED> \n",
      "3": "\n input('finished') \n <IND>",
      "4": "\n input('finished') \n \n \n",
      "5": "\n input('finished') \n <IND> \n",
      "6": "\n input('finished') \n <DED> \n \n",
      "7": "\n input('finished') \n \n <IND>",
      "8": "\n input('finished') \n \n <DED>",
      "9": "\n input('finished') \n <IND> <DED> \n",
      "10": "\n input('finished') \n <DED> \n <IND>",
      "11": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "12": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "13": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "14": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "15": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "16": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "17": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "18": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "19": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n \n",
      "20": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "21": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n \n",
      "22": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "23": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "24": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "25": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "26": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n \n",
      "27": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "28": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "29": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> input('finished') \n",
      "30": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> input('finished') \n",
      "31": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "32": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "33": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n \n <DED> input('finished') \n",
      "34": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "35": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n \n <DED> input('finished') \n",
      "36": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "37": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n <IND> \n",
      "38": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n \n",
      "39": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n \n",
      "40": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n",
      "41": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n",
      "42": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND>",
      "43": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> input('finished') \n \n",
      "44": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND>",
      "45": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> if input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n \n",
      "46": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> input('finished') \n \n \n",
      "47": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n \n",
      "48": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n \n",
      "49": "\n input('finished') \n <IND> <IND> if input is not None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <IND> elif input is None: \n <DED> elif input is None: \n <IND> input('finished') \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    viewer.plot()\n    raw_input('finished')\n",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/distanceFunction/square.py",
    "target_filename": "examples/levelSet/distanceFunction/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "viewer.plot() \n input('finished') \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "viewer.plot() \n input('finished') \n \n",
      "1": "viewer.plot() \n input('finished') \n",
      "2": "viewer.plot() \n input('finished') \n <IND>",
      "3": "viewer.plot() \n input('finished') \n <DED> \n",
      "4": "viewer.plot() \n input('finished') \n \n \n",
      "5": "viewer.plot() \n input('finished') \n <IND> \n",
      "6": "viewer.plot() \n input('finished') \n \n <IND>",
      "7": "viewer.plot() \n input('finished') \n <DED>",
      "8": "viewer.plot() \n input('finished') \n <DED> <IND>",
      "9": "viewer.plot() \n input('finished') \n \n <DED>",
      "10": "viewer.plot() \n input('finished') \n <IND> <IND>",
      "11": "viewer.plot() \n input('finished') \n <DED> \n \n",
      "12": "viewer.plot() \n input('finished') \n <DED> <DED> \n",
      "13": "viewer.plot() \n input('finished') \n \n <DED> \n",
      "14": "viewer.plot() \n input('finished') \n <DED> \n <IND>",
      "15": "viewer.plot() \n input('finished') \n <DED> <DED>",
      "16": "viewer.plot() \n input('finished') \n <IND> <DED>",
      "17": "viewer.plot() \n input('finished') \n \n <IND> \n",
      "18": "viewer.plot() \n input('finished') \n <DED> \n <DED>",
      "19": "viewer.plot() \n input('finished') \n \n <DED> <IND>",
      "20": "viewer.plot() \n input('finished') \n <IND> <DED> \n",
      "21": "viewer.plot() \n input('finished') <IND> \n",
      "22": "viewer.plot() \n input('finished') \n <DED> <IND> \n",
      "23": "viewer.plot() \n input('finished') \n <IND> <IND> if not viewer.plot() \n",
      "24": "viewer.plot() \n input('finished') \n <DED> ) \n",
      "25": "viewer.plot() <IND> input('finished') \n \n",
      "26": "viewer.plot() \n input('finished') \n \n <IND> <IND>",
      "27": "viewer.plot() \n input('finished') \n \n <DED> ) \n",
      "28": "viewer.plot() \n input('finished') <DED> \n",
      "29": "viewer.plot() \n input('finished') \n <DED> <IND> if not viewer.plot() \n",
      "30": "viewer.plot() \n input('finished') \n <IND> \n \n",
      "31": "viewer.plot() <DED> input('finished') \n \n",
      "32": "viewer.plot() \n input('finished') \n \n <DED> <DED>",
      "33": "viewer.plot() \n input('finished') \n <IND> if not viewer.plot() \n",
      "34": "viewer.plot() \n input('finished') \n <DED> \n <DED> \n",
      "35": "viewer.plot() \n input('finished') \n <DED> if not viewer.plot() \n",
      "36": "viewer.plot() \n input('finished') \n \n \n \n",
      "37": "viewer.plot() \n input('finished') \n <IND> \n <IND>",
      "38": "viewer.plot() \n input('finished') \n \n <DED> if not viewer.plot(): \n",
      "39": "viewer.plot() \n input('finished') \n \n \n <IND>",
      "40": "viewer.plot() \n input('finished') \n \n <IND> <DED>",
      "41": "viewer.plot() \n input('finished') \n <IND> <DED> <IND>",
      "42": "viewer.plot() \n input('finished') \n \n <IND> if not viewer.plot() \n",
      "43": "viewer.plot() \n input('finished') \n <DED> <DED> <DED> \n",
      "44": "viewer.plot() \n input('finished') \n <DED> \n <DED> <IND>",
      "45": "viewer.plot() \n input('finished') \n <IND> <IND> \n",
      "46": "viewer.plot() \n input('finished') <DED> \n \n",
      "47": "viewer.plot() \n input('finished') \n \n <DED> if not viewer.plot() \n",
      "48": "viewer.plot() \n input('finished') \n <DED> <DED> \n \n",
      "49": "viewer.plot() \n input('finished') \n <DED> <DED> <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not r.ok:\n            <IND>return PaymentStatus(r, None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
    "target_code": "        if not r.ok:\n            <IND>return PaymentStatus(None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_line": "        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `payment_hash` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/wallets/clightning.py",
    "target_filename": "lnbits/wallets/clightning.py",
    "source_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484^",
    "target_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "predictions": [
      "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "1": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "2": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "3": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "4": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments.hash] \n payment = payments[0] if payments else None \n",
      "5": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "6": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "7": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == r.json()[\"payment_hash\"] \n payment = payments[0] if payments else None \n",
      "8": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == PaymentHash] \n payment = payments[0] if payments else None \n",
      "9": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment_s = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "10": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "11": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "12": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments[0] if payments else None \n",
      "13": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payments = payments[0] if payments else None \n",
      "14": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> pay_relationships = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "15": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "16": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == Payment_hash] \n payment = payments[0] if payments else None \n",
      "17": "if not r.ok: \n \n return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "18": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> if not r.json(): \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == r.json()[\"payment_hash\"] \n payment = payments[0] if payments else None \n",
      "19": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "20": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == r.json()[\"payment_hash\"] \n payment = payments[0] if payments else None \n",
      "21": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == pay_hash] \n payment = payments[0] if payments else None \n",
      "22": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "23": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None <IND>",
      "24": "if not r.ok: \n <IND> return PaymentStatus(r, None) <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "25": "if not r.ok: \n <IND> pay_status(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == pay_hash] \n payment = payments[0] if payments else None \n",
      "26": "if not r.ok: <IND> <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "27": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "28": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if r[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "29": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> let payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "30": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "31": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> if payments else None \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "32": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> pay_s = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "33": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> pay_counts = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "34": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments.hash] \n payment = payments[0] if payments else None \n",
      "35": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_ = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "36": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment_hash = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "37": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> if not r.json(): \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "38": "if not r.ok: <DED> <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "39": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == _payment_hash] \n payment = payments[0] if payments else None \n",
      "40": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] <IND> payment = payments[0] if payments else None \n",
      "41": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "42": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] <DED> payment = payments[0] if payments else None \n",
      "43": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if r.json()[\"payment_hash\"] == payments.hash] \n payment = payments[0] if payments else None \n",
      "44": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == PaymentStatus(p, None)] \n payment = payments[0] if payments else None \n",
      "45": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payment else None \n",
      "46": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"]] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "47": "if not r.ok: \n <IND> return PaymentStatus(r, None) <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "48": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "49": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payment_hash[0] if payments else None \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    <IND>",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    <IND>",
    "warning_line": "class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `viewsets` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 7,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cyverse/atmosphere",
    "source_filename": "api/v2/views/platform_type.py",
    "target_filename": "api/v2/views/platform_type.py",
    "source_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470^",
    "target_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "predictions": [
      "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "1": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "2": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "3": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <IND> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "4": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet <DED> \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "5": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <DED> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "6": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet <IND> \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "7": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, AuthViewSet): \n <IND>",
      "8": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet \n \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "9": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet \n \n <IND> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "10": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet from api.v2.base \n \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "11": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <DED>",
      "12": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, AuthViewSet): \n <IND>",
      "13": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, self.viewsets.ReadOnlyModelViewSet): \n <IND>",
      "14": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(): \n <IND>",
      "15": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet from api.v2.base \n \n <IND> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "16": "from api.v2.serializers.details import AuthViewSet from api.v2.base \n \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "17": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet <DED> \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "18": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "19": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, viewsets.ReadOnlyModelViewSet): \n <IND>",
      "20": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "21": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet: \n <IND>",
      "22": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, ViewSet): \n <IND>",
      "23": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet \n \n <DED> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "24": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n \n",
      "25": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n \n class PlatformTypeViewSet(AuthViewSet, AuthViewSet): \n <IND>",
      "26": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "27": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "28": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet <IND> \n <IND> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "29": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet from api.v2.base \n \n <DED> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "30": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet <IND> \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "31": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <IND> class PlatformTypeViewSet(AuthViewSet, AuthViewSet): \n <IND>",
      "32": "from api.v2.serializers.details import PlatformTypeSerializer <DED> \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "33": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet()): \n <IND>",
      "34": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, Model): \n <IND>",
      "35": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet[str, str]): \n <IND>",
      "36": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "37": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "38": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n level = class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "39": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet <IND> \n <DED> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "40": "from api.v2.serializers.details import AuthViewSet from api.v2.base \n \n <IND> class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "41": "from api.v2.serializers.details import AuthViewSet <DED> \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "42": "from api.v2.serializers.details import AuthViewSet, PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "43": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n \n class PlatformTypeViewSet(AuthViewSet, self.viewsets.ReadOnlyModelViewSet): \n <IND>",
      "44": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n \n class PlatformTypeViewSet(AuthViewSet): \n <DED>",
      "45": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet[str]): \n <IND>",
      "46": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet (AuthViewSet): \n <IND>",
      "47": "from api.v2.serializers.details import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "48": "from api.v2.serializers.details import AuthViewSet \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <DED>",
      "49": "from api.v2.serializers.details import PlatformTypeSerializer <IND> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return self is other or (\n            isintance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "target_code": "        return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "warning_line": "            isintance(other, GraphQLScalarTypeExtension)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `isintance` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 166,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tartiflette/tartiflette",
    "source_filename": "tartiflette/types/scalar.py",
    "target_filename": "tartiflette/types/scalar.py",
    "source_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc^",
    "target_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc",
    "predictions": [
      "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n"
    ],
    "correct": true,
    "top_five": {
      "0": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "1": "return self is other or ( \n self.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "2": "return self is other or ( \n assert isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "3": "return self is other or ( \n GraphQLScalarTypeExtension.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "4": "return self is other or ( \n self.isinstance(other, self.GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "5": "return self is other or ( <DED> isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "6": "return self is other or ( \n assert self.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "7": "return self is other or ( \n assert GraphQLScalarTypeExtension is not None or isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "8": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <IND>",
      "9": "return self is other or ( <IND> isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "10": "return self is other or ( \n isinstance(other, GraphQLcalarTypeExtension) \n and other.directives == self.directives \n",
      "11": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <DED> \n",
      "12": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension, isinstance(other, GraphQLScalarTypeExtension)) \n and other.directives == self.directives \n",
      "13": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) <IND> and other.directives == self.directives \n",
      "14": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) <DED> and other.directives == self.directives \n",
      "15": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n if isinstance(other, GraphQLScalarTypeExtension): \n",
      "16": "return self is other or ( \n exports.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "17": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension), \n and other.directives == self.directives \n",
      "18": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and others.directives == self.directives \n",
      "19": "return self is other or ( \n _other.isinstance(_other, _GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "20": "return self is other or ( \n async isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "21": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension, 'directives') \n and other.directives == self.directives \n",
      "22": "return self is other or ( \n $(other, GraphQLScalarTypeExtension)) \n and other.directives == self.directives \n",
      "23": "return self is other or ( \n typeof isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "24": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension, isinstance(other, 'directives')) \n and other.directives == self.directives \n",
      "25": "return self is autre or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "26": "return self is other or ( \n isInstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "27": "return self is other or ( \n isinstance(other, TypeExtension) \n and other.directives == self.directives \n",
      "28": "return self is other or ( \n isinstance(other, this.GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "29": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension,...) \n and other.directives == self.directives \n",
      "30": "return self is other or ( \n isinstance(other, Optional[GraphQLScalarTypeExtension]) \n and other.directives == self.directives \n",
      "31": "return self is other or ( \n int(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "32": "return self is other or ( \n class isinstance(other, class GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "33": "return self is other or ( \n (isinstance(other, GraphQLScalarTypeExtension)) \n and other.directives == self.directives \n",
      "34": "return self isother or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "35": "return self is other or ( \n hash(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "36": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <IND> if isinstance(other, GraphQLScalarTypeExtension): \n",
      "37": "return self is other or ( \n isinstance(other, ExpressionExtension) \n and other.directives == self.directives \n",
      "38": "return self is other or ( \n isinstance(other, ModelExtension) \n and other.directives == self.directives \n",
      "39": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n assert isinstance(other, GraphQLScalarTypeExtension) \n",
      "40": "return self is other or ( \n self.int(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "41": "return self is other or ( \n typeExtension(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "42": "return self is other or ( \n isinstance(other, _GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "43": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n ) \n",
      "44": "return self is other or ( \n str(other, str(GraphQLScalarTypeExtension)) \n and other.directives == self.directives \n",
      "45": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n or other.directives == self.directives \n",
      "46": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension, isinstance(other, 'directive')) \n and other.directives == self.directives \n",
      "47": "return self is andere or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "48": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <DED> <IND>",
      "49": "return self is other or ( \n assert isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n assert isinstance(other, GraphQLScalarTypeExtension) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_line": "    _valid_ingestibles = set(xrange(10, 14))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 384,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "target_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n) \n \n",
      "1": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_ingestibles) \n \n",
      "2": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.s) \n \n",
      "3": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.p.example_code) \n \n",
      "4": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.s) \n \n",
      "5": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.num(10)) \n \n",
      "6": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n]) \n \n",
      "7": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns = [] \n \n",
      "8": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.sample(10)) \n \n",
      "9": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n)) \n \n",
      "10": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.') \n \n",
      "11": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.x.range(10, 14)) \n \n",
      "12": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.p.example_ingestibles) \n \n",
      "13": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n) <DED> \n \n",
      "14": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns) \n \n",
      "15": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_ingestibles) \n <IND>",
      "16": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ntp.example_code) \n \n",
      "17": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n = 0) \n \n",
      "18": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.000) \n \n",
      "19": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.nspray(10, 14)) \n \n",
      "20": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_card) \n \n",
      "21": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n) <IND> \n",
      "22": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.x(10)) \n \n",
      "23": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.e.example_code) \n \n",
      "24": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n'') \n \n",
      "25": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.next(10, 14)) \n \n",
      "26": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n === 14) \n \n",
      "27": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.model.model) \n \n",
      "28": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns.range(10, 14)) \n \n",
      "29": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.num) \n \n",
      "30": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_ingestibles) \n <DED>",
      "31": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ml(10)) \n \n",
      "32": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_range(10, 14)) \n \n",
      "33": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_bar = u'F' \n \n",
      "34": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.nspray(10)) \n \n",
      "35": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns.utils.range(10, 14)) \n \n",
      "36": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_range(10)) \n \n",
      "37": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.x.range(10)) \n \n",
      "38": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example(10, 14)) \n \n",
      "39": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.example_settings) \n \n",
      "40": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.p.example_bar = u'F' \n \n",
      "41": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.p.s) \n \n",
      "42": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.sample(10, 14)) \n \n",
      "43": "_example_code = u'F' \n _valid_ingestibles = set(_range(10, 14)) \n \n",
      "44": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns.models.model) \n \n",
      "45": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.p.example_card) \n \n",
      "46": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns.model.s) \n \n",
      "47": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n.example(10, 14)) \n \n",
      "48": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns.utils.set(10, 14)) \n \n",
      "49": "_example_code = u'F' \n _valid_ingestibles = set(np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.ns.a+10) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <DED><DED>else:\n                    <IND>joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                <DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "target_code": "                <DED><DED>else:\n                    <IND>def joiner(left: MatrixTable):\n                        <IND>return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                <DED><DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_line": "                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1637,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "hail/python/hail/table.py",
    "target_filename": "hail/python/hail/table.py",
    "source_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629^",
    "target_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "predictions": [
      "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "1": "<DED> <DED> else: \n <IND> joiner = lambda left: Table(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "2": "<DED> <DED> else: \n <IND> joiner = lambda left = MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "3": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable[str, str]]( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "4": "<DED> <DED> else: \n <IND> joiner = lambda left: Table.MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "5": "<DED> <DED> else: \n <IND> joiner = lambda left: TabRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "6": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "7": "<DED> <DED> else: \n <IND> joiner = lambda left: table.MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "8": "<DED> <DED> else: \n <IND> joiner = lambda left(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "9": "<DED> <DED> else: \n <IND> joiner = lambda left: Table[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "10": "<DED> <DED> else: \n <IND> joiner = lambda left: Optional[MatrixAnnotateRowsTable]( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "11": "<DED> <DED> else: \n <IND> joiner = lambda left: List(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "12": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "13": "<DED> <DED> else: \n <IND> joiner = lambda left: List.MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "14": "<DED> <DED> else: \n <IND> joiner = lambda left || MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "15": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( <IND> left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "16": "<DED> <DED> else: \n <IND> joiner = lambda left: Table.Add(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "17": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable]( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "18": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "19": "<DED> <DED> else: \n <IND> joiner = lambda left = table(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "20": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid]) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "21": "<IND> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "22": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable[str,...]]( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "23": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "24": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "25": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = join(GetField(TopLevelReference('va'), uid), \n",
      "26": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable[str]]( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "27": "<DED> <IND> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "28": "<DED> <DED> else: \n <IND> joiner = lambda left: SetTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "29": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable[0]]( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "30": "<DED> <DED> else: \n <IND> joiner = lambda left=MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "31": "<DED> <DED> else: \n <DED> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "32": "<DED> <DED> else: \n <IND> joiner = lambda left: MapRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "33": "\n <DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "34": "<DED> <DED> else: \n <IND> joiner = lambda left: MenuAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "35": "<DED> <DED> else: \n <IND> joiner = lambda left: table.MatrixAnnotateRows( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "36": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( <IND> left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "37": "<DED> \n else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "38": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) <IND> <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "39": "<DED> <DED> else: \n <IND> joiner = lambda left: Table.Table( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "40": "<DED> <DED> else: \n <IND> joiner = lambda left: TabrixTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "41": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( <DED> left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "42": "<DED> <DED> else: \n <IND> joiner = lambda left = MatrixTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "43": "<DED> <DED> else: \n <IND> joiner = lambda left: table( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "44": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( <DED> left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "45": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable[str, str]]( \n left._mir, right._tir, uid)) \n <DED> ast = join(GetField(TopLevelReference('va'), uid), \n",
      "46": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable( <IND> left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "47": "<DED> <DED> else: \n <IND> joiner = lambda left = MatrixTable( <IND> left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "48": "<DED> <DED> else: \n <IND> joiner = lambda left: PositionTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "49": "<DED> <DED> else: \n <IND> joiner = lambda left: ColumnTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise Error(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Error(\"Unknown platform\")\n\n",
    "target_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise NotImplementedError(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Exception(\"Unknown platform\")\n\n",
    "warning_line": "    raise Error(\"Windows not supported\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Error` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 68,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "streamlit/streamlit",
    "source_filename": "examples/run_on_save.py",
    "target_filename": "examples/run_on_save.py",
    "source_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15^",
    "target_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "predictions": [
      "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n",
      "1": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "2": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Window not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "3": "<DED> elif platform_system == \"Windows\": \n <IND> raise ValueError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise ValueError(\"Unknown platform\") \n \n",
      "4": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "5": "<DED> elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "6": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "7": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "8": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Function not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "9": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "10": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "11": "\n <DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "12": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "13": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "14": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Mac not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "15": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise elif platform_system == \"Unknown platform\") \n \n",
      "16": "<DED> elif platform_system == \"Windows\": \n <IND> raise error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "17": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"File not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "18": "<DED> elif platform_system == \"Windows\": \n <IND> raise 'Error'(\"Windows not supported\") \n \n <DED> else: \n <IND> raise 'Unknown platform' \n \n",
      "19": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Mock not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "20": "<DED> elif platform_system == \"Windows\": \n <IND> raise elif elif isinstance(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "21": "\n <DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n",
      "22": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"False not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "23": "<DED> elif platform_system == \"Windows\": \n <IND> raise TypeError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise TypeError(\"Unknown platform\") \n \n",
      "24": "<DED> elif platform_system == \"Windows\": \n <IND> raise str(Error(\"Windows not supported\") \n <DED> else: \n <IND> raise str(\"Unknown platform\") \n \n",
      "25": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "26": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n",
      "27": "<DED> elif platform_system == \"Windows\": \n <IND> raise elif isinstance(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "28": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n <IND>",
      "29": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "30": "<DED> elif platform_system == \"Windows\": \n <IND> raise elif elif elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n",
      "31": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") <IND> \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "32": "<DED> elif platform_system == \"Windows\": \n <IND> raise OptionalError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise OptionalError(\"Unknown platform\") \n \n",
      "33": "<DED> elif platform_system == \"Windows\": \n <IND> raise ThemeError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise ThemeError(\"Unknown platform\") \n \n",
      "34": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") <DED> \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "35": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: <IND> <IND> raise Error(\"Unknown platform\") \n \n",
      "36": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n \n",
      "37": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n <DED>",
      "38": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Invalid platform\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "39": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Window not supported\") \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "40": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "41": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") <DED> \n \n",
      "42": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise error(\"Unknown platform\") \n \n",
      "43": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "44": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") <IND> \n",
      "45": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: <DED> <IND> raise Error(\"Unknown platform\") \n \n",
      "46": "<DED> elif platform_system == \"Windows\": \n <IND> raise elif elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n",
      "47": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Window not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "48": "<DED> elif platform_system == \"Windows\": \n <IND> raise OptionalError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "49": "<DED> elif platform_system == \"Windows\": \n <IND> raise error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise error(\"Unknown platform\") \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)\n",
    "target_code": "\n<DED>@typecheck(structs=oneof(expr_array),\n           identifier=str)\n",
    "warning_line": "@typecheck(structs=oneof(expr_array, listof(Struct)),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `listof` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 649,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "python/hail/expr/functions.py",
    "target_filename": "python/hail/expr/functions.py",
    "source_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5^",
    "target_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5",
    "predictions": [
      "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "1": "\n <IND> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "2": "\n <DED> @typecheck(structs=oneof(expr_array, listof(Struct)), \n identifier=str) \n",
      "3": "\n <DED> @typecheck(structs=oneof(extr_array), \n identifier=str) \n",
      "4": "\n <DED> @typecheck(structs=oneof(expr_array, str(struct)), \n identifier=str) \n",
      "5": "\n <DED> @typecheck(structs=one of(expr_array), \n identifier=str) \n",
      "6": "\n <DED> @typecheck(structs=oneof(expr_array, str)), \n identifier=str) \n",
      "7": "\n <DED> @typecheck(structs=oneof(expr_array, str(listof(Struct))), \n identifier=str) \n",
      "8": "\n \n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "9": "\n <DED> @typecheck(structs=oneof(expr_array, str), \n identifier=str) \n",
      "10": "\n <DED> @typecheck(structs=extr_array, listof(Struct)), \n identifier=str) \n",
      "11": "\n <DED> @typecheck(structs=oneof(expr_array, str(str)), \n identifier=str) \n",
      "12": "\n <DED> @typecheck(structs=oneof(expr_array, str(str, str))), \n identifier=str) \n",
      "13": "<DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "14": "\n <DED> @typecheck(structs=oneof(expr_array, str(struct))), \n identifier=str) \n",
      "15": "<IND> <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "16": "\n <DED> @typecheck(structs=oneof (expr_array), \n identifier=str) \n",
      "17": "\n <DED> @typecheck(structs=uniqueof(expr_array), \n identifier=str) \n",
      "18": "\n <DED> @typecheck(structs=one of(expr_array, listof(Struct)), \n identifier=str) \n",
      "19": "\n <DED> @typecheck(structs=one of(expr_array, str(struct)), \n identifier=str) \n",
      "20": "\n <DED> @typecheck(structs=oneof(expr_array, str(str))), \n identifier=str) \n",
      "21": "\n <DED> @typecheck(structs=oneof(expr_array, str(listof(struct))), \n identifier=str) \n",
      "22": "\n <DED> @typecheck(structs=oneof(expr_array)), \n identifier=str) \n",
      "23": "\n <DED> @typecheck(structs=str, listof(Struct)), \n identifier=str) \n",
      "24": "\n <DED> @typecheck(structs=oneof(Expr_array), \n identifier=str) \n",
      "25": "\n <DED> @typecheck(structs=expr_array, listof(Struct)), \n identifier=str) \n",
      "26": "\n <DED> @typecheck(structs=[str, expr_array], \n identifier=str) \n",
      "27": "\n <DED> @typecheck(structs=oneof(expr_array, listof(struct)), \n identifier=str) \n",
      "28": "\n <DED> @typecheck(structs=oneof(expr_array), <IND> identifier=str) \n",
      "29": "\n <DED> @typecheck(structs=oneof(expr_array), <DED> identifier=str) \n",
      "30": "\n <DED> @typecheck(structs=extr_array, str(listof(Struct)), \n identifier=str) \n",
      "31": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) <DED> \n",
      "32": "\n <DED> @typecheck(structs=oneof(expr_array, listof(Struct))), \n identifier=str) \n",
      "33": "\n <DED> @typecheck(structs=str, listof(Expr_array), \n identifier=str) \n",
      "34": "\n <DED> @typecheck(structs=oneof(expr_array, str, str)), \n identifier=str) \n",
      "35": "\n <DED> @typecheck(structs=unicode(expr_array), \n identifier=str) \n",
      "36": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) <IND>",
      "37": "\n <DED> @typecheck(structs=oneof(expr_array, str(listof(Struct)), \n identifier=str) \n",
      "38": "\n <DED> @typecheck(structs=extr_array, listof(str)), \n identifier=str) \n",
      "39": "\n <DED> @typecheck(structs=one of(expr_array, str)), \n identifier=str) \n",
      "40": "\n <DED> @typecheck(structs=oneof(str, expr_array), \n identifier=str) \n",
      "41": "\n <DED> @typecheck(structs=one of(expr_array, str), \n identifier=str) \n",
      "42": "\n <DED> @typecheck(structs=...list(expr_array), \n identifier=str) \n",
      "43": "\n <DED> @typecheck(structs=int, listof(Struct)), \n identifier=str) \n",
      "44": "\n \n <IND> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "45": "\n <DED> @typecheck(structs=noneof(expr_array), \n identifier=str) \n",
      "46": "\n <DED> @typecheck(structs=int(expr_array), \n identifier=str) \n",
      "47": "\n <DED> @typecheck(structs=onceof(expr_array), \n identifier=str) \n",
      "48": "\n <DED> @typecheck(structs=one of(extr_array), \n identifier=str) \n",
      "49": "\n <DED> @typecheck(structs=[extr_array], \n identifier=str) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')\n",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 88,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/surfactant/square.py",
    "target_filename": "examples/levelSet/surfactant/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n"
    ],
    "correct": true,
    "top_five": {
      "0": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "1": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n",
      "2": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n",
      "3": "surfactantViewer.plot() \n printout(surfactantVariable) \n input('finished') \n",
      "4": "surfactantViewer.plot() \n print onfactantVariable \n input('finished') \n",
      "5": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n \n",
      "6": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('s') \n input('finished') \n",
      "7": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('",
      "8": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print, \n",
      "9": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print(print",
      "10": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n <IND>",
      "11": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print <IND>",
      "12": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('\"') \n",
      "13": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print <DED>",
      "14": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input(') \n",
      "15": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('') \n",
      "16": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print. \n",
      "17": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('a') \n",
      "18": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print(\"\") \n input('finished') \n",
      "19": "surfactantViewer.plot() \n printout(surfactantVariable) \n input('finished') \n \n",
      "20": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n <IND>",
      "21": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('utf-8') \n",
      "22": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('premium') \n",
      "23": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('ready') \n",
      "24": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finish') \n input('finished') \n",
      "25": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print, <IND>",
      "26": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n's' \n",
      "27": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print(print or print) \n input('finished') \n",
      "28": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print(print) \n input('finished') \n",
      "29": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('do') \n",
      "30": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n <DED>",
      "31": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print: \n",
      "32": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('ready') \n input('finished') \n",
      "33": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n's' \n input('finished') \n",
      "34": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('print') \n",
      "35": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print. <DED>",
      "36": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print, <IND> ) \n input('finished') \n",
      "37": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('s') \n input('finished') \n \n",
      "38": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n imprimable \n input('finished') \n",
      "39": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('y') \n",
      "40": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('.') \n",
      "41": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('t') \n",
      "42": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print <IND> + \"\" \n input('finished') \n",
      "43": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('p') \n",
      "44": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print, <DED>",
      "45": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('#') \n",
      "46": "surfactantViewer.plot() \n print onfactantVariable \n input('finished') \n \n",
      "47": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print('finished') \n input('finished') \n",
      "48": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print. \n \n",
      "49": "surfactantViewer.plot() \n print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print or print \n input('finished') \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8)\n\n",
    "target_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8)\n\n",
    "warning_line": "_UPDATE = xrange(8)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 296,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/basher/frames.py",
    "target_filename": "Mopy/bash/basher/frames.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8) \n \n",
      "1": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = range(8) \n \n",
      "2": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "3": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "4": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE=range(8) \n \n",
      "5": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE=range(8) \n \n",
      "6": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = _range(8) \n \n",
      "7": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = str(range(8)) \n \n",
      "8": "<IND> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8) \n \n",
      "9": "<IND> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = range(8) \n \n",
      "10": "\n <DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8) \n \n",
      "11": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xthread(8) \n \n",
      "12": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = str(range(8)) \n \n",
      "13": "\n <DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = range(8) \n \n",
      "14": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = _range(8) \n \n",
      "15": "<DED> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8) \n \n",
      "16": "<DED> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = range(8) \n \n",
      "17": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xthread(8) \n \n",
      "18": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = str(xrange(8)) \n \n",
      "19": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xhr(8) \n \n",
      "20": "<DED> \n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = range(8) \n \n",
      "21": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = str(xrange(8)) \n \n",
      "22": "<IND> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "23": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE: Optional[xrange(8)] \n \n",
      "24": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = (range(8)) \n \n",
      "25": "<DED> \n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8) \n \n",
      "26": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xhr(8) \n \n",
      "27": "\n <DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "28": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xstr(8) \n \n",
      "29": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = 0 \n \n",
      "30": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = (range(8)) \n \n",
      "31": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = array(8) \n \n",
      "32": "<IND> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "33": "<DED> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "34": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = array(8) \n \n",
      "35": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = scope(8) \n \n",
      "36": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = this.range(8) \n \n",
      "37": "\n <DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "38": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = Range(8) \n \n",
      "39": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xstr(8) \n \n",
      "40": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = 0 \n \n",
      "41": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = lib.xrange(8) \n \n",
      "42": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE: Optional[xrange(8)] \n \n",
      "43": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = range(8) \n <IND>",
      "44": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xsample(8) \n \n",
      "45": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE: Optional[str] = None \n \n",
      "46": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xserialize(8) \n \n",
      "47": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = lib.range(8) \n \n",
      "48": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrc(8) \n \n",
      "49": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xr(range(8)) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def get_label(cls) -> str:\n        <IND>return self.__name__  #\u00a0default label is the class name\n\n",
    "target_code": "    def get_label(cls) -> str:\n        <IND>return cls.__name__  # default label is the class name\n\n",
    "warning_line": "        return self.__name__  #\u00a0default label is the class name",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algoo/preview-generator",
    "source_filename": "preview_generator/preview/generic_preview.py",
    "target_filename": "preview_generator/preview/generic_preview.py",
    "source_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2^",
    "target_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "predictions": [
      "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "1": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None \n return self.__name__ # default label is the class name \n \n",
      "2": "def get_label(cls) -> Optional[str]: \n <IND> return self.__name__ # default label is the class name \n \n",
      "3": "def get_label(cls) -> str: \n <IND> label = self.__name__ # default label is the class name \n \n",
      "4": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n <IND>",
      "5": "def get_label(cls) -> str: \n <IND> if isinstance(cls, self.__name__): \n <IND> return self.__name__ # default label is the class name \n \n",
      "6": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n <DED>",
      "7": "def get_label(cls) -> str: \n <IND> assert isinstance(self, self.__name__) # default label is the class name \n \n",
      "8": "def get_label(cls) -> str: \n <IND> name = self.__name__ # default label is the class name \n \n",
      "9": "def get_label(cls) -> str: \n <DED> return self.__name__ # default label is the class name \n \n",
      "10": "def get_label(cls) -> str: \n <IND> assert class name is not None \n return self.__name__ # default label is the class name \n \n",
      "11": "def get_label(cls) -> str: \n <IND> if not self.__name__ is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "12": "def get_label(cls) -> str: \n <IND> self.__name__ = self.__name__ # default label is the class name \n \n",
      "13": "def get_label(cls) -> str: \n <IND> self.__name__ is not None \n return self.__name__ # default label is the class name \n \n",
      "14": "def get_label(cls) -> str: \n <IND> assert isinstance(self, self.__name__) # default label is the class name \n <IND>",
      "15": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None <IND> return self.__name__ # default label is the class name \n \n",
      "16": "def get_label(cls) -> str: \n <IND> assert isinstance(self.__name__) # default label is the class name \n \n",
      "17": "def get_label(cls) -> str: \n <IND> label = self.__name__ # default label is the class name \n <IND>",
      "18": "def get_label(cls) -> str: \n <IND> return str(self.__name__) # default label is the class name \n \n",
      "19": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None <DED> return self.__name__ # default label is the class name \n \n",
      "20": "def get_label(cls) -> str: \n <IND> return self.__name__ # default name is the class name \n \n",
      "21": "def get_label(cls) -> str: \n <IND> assert isinstance(self.__name__) # default label is the class name \n return self.__name__ # default label is the class name \n \n",
      "22": "def get_label(cls) -> str: \n \n return self.__name__ # default label is the class name \n \n",
      "23": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name <IND> \n",
      "24": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None \n return self.__name__ # default label is the class name \n <IND>",
      "25": "def get_label(cls) -> Optional: \n <IND> return self.__name__ # default label is the class name \n \n",
      "26": "def get_label(cls) -> String: \n <IND> return self.__name__ # default label is the class name \n \n",
      "27": "def get_label(cls) -> str: \n <IND> assert isinstance(str, self.__name__) # default label is the class name \n \n",
      "28": "def get_label(cls) -> str: \n <IND> self.__name__ = self.__name__ # default label is the class name \n <IND>",
      "29": "def get_label(cls) -> str: \n <IND> if not label: \n <IND> return self.__name__ # default label is the class name \n \n",
      "30": "def get_label(cls) -> str: \n <IND> assert isinstance(self.__name__) # default label is the class name \n <IND>",
      "31": "def get_label(cls) -> str: \n <IND> assert isinstance(self, self.__name__) # default label is the class name \n <DED>",
      "32": "def get_label(cls) -> str: \n <IND> assert isinstance(self, self.__name__) # default label is the class name \n return self.__name__ # default label is the class name \n \n",
      "33": "def get_label(cls) -> str: \n <IND> assert isinstance(str, self.__name__) # default label is the class name \n return self.__name__ # default label is the class name \n \n",
      "34": "def get_label(cls) -> str: <DED> <IND> return self.__name__ # default label is the class name \n \n",
      "35": "def get_label(cls) -> str: \n <IND> assert isinstance(self.__name__ # default label is the class name \n ) \n return self.__name__ # default label is the class name \n \n",
      "36": "def get_label(cls) -> cls: \n <IND> return self.__name__ # default label is the class name \n \n",
      "37": "def get_label(cls) -> str: \n <IND> assert isinstance(self, self.__name__) # default label is the class name \n <DED> return self.__name__ # default label is the class name \n \n",
      "38": "def get_label(cls) -> List[str]: \n <IND> return self.__name__ # default label is the class name \n \n",
      "39": "def get_label(cls) -> str: \n <IND> return self.__name__ # default class is the class name \n \n",
      "40": "def get_label(cls) -> str: <IND> <IND> return self.__name__ # default label is the class name \n \n",
      "41": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None \n return self.__name__ # default label is the class name \n <DED>",
      "42": "def get_label(cls) -> str: \n <IND> name = self.__name__ # default label is the class name \n <IND>",
      "43": "def get_label(cls) -> List[Str]: \n <IND> return self.__name__ # default label is the class name \n \n",
      "44": "def get_label(cls) -> str: \n <IND> assert isinstance(cls, self.__name__) # default label is the class name \n \n",
      "45": "def get_label(cls) -> str: \n <IND> assert isinstance(self, self.__name__ # default label is the class name \n ) \n return self.__name__ # default label is the class name \n \n",
      "46": "def get_label(cls) -> str: \n <IND> assert isinstance(str, self.__name__) # default label is the class name \n <IND>",
      "47": "def get_label(cls) -> str: \n <IND> label = self.__name__ # default label is the class name \n <DED>",
      "48": "def get_label(cls) -> str: \n <IND> if isinstance(cls, self.__name__): \n <IND> return self.__name__ # default label is the class name \n <IND>",
      "49": "def get_label(cls) -> str: \n <IND> assert isinstance(cls, self.__name__) # default label is the class name \n return self.__name__ # default label is the class name \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input(\"finished\")\n",
    "target_code": "\n    input(\"finished\")\n",
    "warning_line": "    raw_input(\"finished\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 136,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "target_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "\n input(\"finished\") \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n input(\"finished\") \n",
      "1": "\n input(\"finished\") \n \n",
      "2": "\n input(\"finished\") \n <DED> \n",
      "3": "\n input(\"finished\") \n <IND>",
      "4": "\n input(\"finished\") \n <IND> \n",
      "5": "\n input(\"finished\") \n <IND> if input is not None: \n <IND> input(\"finished\") \n",
      "6": "\n input(\"finished\") \n <IND> <IND> if input is not None: \n <IND> input(\"finished\") \n",
      "7": "\n input(\"finished\") \n <IND> isinstance(raw_input(\"finished\") \n",
      "8": "\n input(\"finished\") \n \n <DED> if input is not None: \n <IND> input(\"finished\") \n",
      "9": "\n input(\"finished\") \n <IND> <IND> if input is not None: \n <IND> input(\"finished\") \n \n",
      "10": "\n input(\"finished\") \n <IND> <DED> <IND> if input is not None: \n <IND> input(\"finished\") \n",
      "11": "\n input(\"finished\") \n \n \n",
      "12": "\n input(\"finished\") \n <IND> if input is not None: \n <DED> input(\"finished\") \n",
      "13": "\n input(\"finished\") \n <IND> if input is not None: \n <IND> input(\"finished\") \n \n",
      "14": "\n input(\"finished\") \n <DED> <IND> if input is not None: \n <IND> input(\"finished\") \n",
      "15": "\n input(\"finished\") \n <IND> <IND> if input is not None: \n <DED> input(\"finished\") \n",
      "16": "\n input(\"finished\") \n \n <DED> if input is None: \n <IND> input(\"finished\") \n",
      "17": "\n input(\"finished\") \n <IND> if output is not None: \n <IND> input(\"finished\") \n",
      "18": "\n input(\"finished\") \n <IND> if not input(\"finished\") \n",
      "19": "\n input(\"finished\") \n <DED> if input is not None: \n <IND> input(\"finished\") \n",
      "20": "\n input(\"finished\") \n <IND> <DED> <IND> if input is not None: \n <IND> input(\"finished\") \n \n",
      "21": "\n input(\"finished\") \n \n <DED> if input is not None: \n <IND> input(\"finished\") \n \n",
      "22": "\n input(\"finished\") \n <IND> <DED> <IND> if input is None: \n <IND> input(\"finished\") \n",
      "23": "\n input(\"finished\") \n \n <IND> if input is not None: \n <IND> input(\"finished\") \n",
      "24": "\n input(\"finished\") \n \n <DED> if input is not None: \n <DED> input(\"finished\") \n",
      "25": "\n input(\"finished\") \n <DED> \n <DED> elif isinstance(finished, input): \n",
      "26": "\n input(\"finished\") \n <IND> <DED> if input is not None: \n <IND> input(\"finished\") \n",
      "27": "\n input(\"finished\") \n <IND> <DED> <IND> if input is not None: \n <DED> input(\"finished\") \n",
      "28": "\n input(\"finished\") \n <IND> <IND> if input is None: \n <IND> input(\"finished\") \n",
      "29": "\n input(\"finished\") \n <IND> <DED> \n",
      "30": "\n input(\"finished\") \n <IND> if output is None: \n <IND> input(\"finished\") \n",
      "31": "\n input(\"finished\") \n <DED> \n <DED> if input is not None: \n <IND> input(\"finished\") \n",
      "32": "\n input(\"finished\") \n <DED> <IND> if input is not None: \n <IND> input(\"finished\") \n \n",
      "33": "\n input(\"finished\") \n <DED> \n \n",
      "34": "\n input(\"finished\") \n <IND> <IND> if input is not None: \n <DED> input(\"finished\") \n \n",
      "35": "\n input(\"finished\") \n <IND> <IND> if input is not None: \n <IND> input(\"finished\") \n <DED> \n",
      "36": "\n input(\"finished\") \n \n <IND>",
      "37": "\n input(\"finished\") \n \n <DED> if input is None: \n <DED> input(\"finished\") \n",
      "38": "\n input(\"finished\") \n <DED> <IND> if input is None: \n <IND> input(\"finished\") \n",
      "39": "\n input(\"finished\") \n <IND> if input is None: \n <IND> input(\"finished\") \n",
      "40": "\n input(\"finished\") \n <IND> \n <DED> if input is not None: \n <IND> input(\"finished\") \n",
      "41": "\n input(\"finished\") \n <IND> <IND>",
      "42": "\n input(\"finished\") \n <IND> <IND> if input is not None: \n <IND> input(\"finished\") \n <IND> \n",
      "43": "\n input(\"finished\") \n <IND> if input is not None: \n <DED> input(\"finished\") \n \n",
      "44": "\n input(\"finished\") \n \n <DED> if output is None: \n <IND> input(\"finished\") \n",
      "45": "\n input(\"finished\") \n <DED> \n <DED> if input is None: \n <IND> input(\"finished\") \n",
      "46": "\n input(\"finished\") \n <IND> if output is not None: \n <IND> input(\"finished\") \n \n",
      "47": "\n input(\"finished\") \n <IND> <DED> <IND> if input is None: \n <IND> input(\"finished\") \n \n",
      "48": "\n input(\"finished\") \n <IND> isinstance(raw_input, \"finished\") \n",
      "49": "\n input(\"finished\") \n <IND> if input is not None: \n <IND> input(\"finished\") \n <DED> \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \n self.conf = Config()\n\n",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_line": "\tself.conf = Config()",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "naparuba/shinken",
    "source_filename": "shinken/scheduler.py",
    "target_filename": "shinken/scheduler.py",
    "source_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54^",
    "target_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "predictions": [
      "\n self.conf = Config() \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n self.conf = Config() \n \n",
      "1": "\n assert isinstance(config(), self.conf) \n \n",
      "2": "\n conf = Config() \n \n",
      "3": "\n assert isinstance(Config(), self.conf) \n \n",
      "4": "\n self.conf = '' \n \n",
      "5": "\n assert isinstance(self, Config) \n self.conf = Config() \n \n",
      "6": "\n if not Config: \n \n self.conf = Config() \n \n",
      "7": "\n _self.conf = Config() \n \n",
      "8": "\n self.config = Config() \n \n",
      "9": "\n if not config: \n \n self.conf = Config() \n \n",
      "10": "\n exports.conf = Config() \n \n",
      "11": "\n assert isinstance(config(),'self.conf') \n \n",
      "12": "\n assert isinstance(self, Config()) \n self.conf = Config() \n \n",
      "13": "\n ctx.self.conf = Config() \n \n",
      "14": "\n if not Config: \n <IND> self.conf = Config() \n \n",
      "15": "\n t.conf = Config() \n \n",
      "16": "\n assert isinstance(Config(),'self.conf') \n \n",
      "17": "\n context.conf = Config() \n \n",
      "18": "\n def _self.conf = Config() \n \n",
      "19": "\n assert isinstance(config(), \"self\") \n self.conf = Config() \n \n",
      "20": "\n self.config = Config() \n \n",
      "21": "\n assert isinstance(config(),'self.conf', 'Config') \n \n",
      "22": "\n self.config = '' \n \n",
      "23": "\n constructor.conf = Config() \n \n",
      "24": "\n utils.conf = Config() \n \n",
      "25": "\n assert isinstance(config(), self.conf) \n \n assert isinstance(config(), self.config) \n",
      "26": "\n _self.conf = _self.config() \n \n",
      "27": "\n use_self.conf = Config() \n \n",
      "28": "\n assert isinstance(config(), config) \n self.conf = Config() \n \n",
      "29": "\n assert isinstance(config, self) \n self.conf = Config() \n \n",
      "30": "\n assert isinstance(Config(),'self.conf', 'Config') \n \n",
      "31": "\n assert isinstance(config(), self.conf) \n \n assert isinstance(config(), self.config()) \n",
      "32": "\n assert isinstance(config(), self.conf, 'Config') \n \n",
      "33": "\n if not Config: \n \n self.conf = new Config() \n \n",
      "34": "\n assert isinstance(self, Config) \n <DED> self.conf = Config() \n \n",
      "35": "\n if not Config: \n \n self.conf = '' \n \n",
      "36": "\n this.conf = Config() \n \n",
      "37": "\n assert isinstance(self, Config) \n self.conf = '' \n \n",
      "38": "\n _self.conf = _self.Config() \n \n",
      "39": "\n console.conf = Config() \n \n",
      "40": "\n assert isinstance(config(), self.conf) \n \n assert isinstance(config(), self.conf) \n",
      "41": "\n fn = Config() \n \n",
      "42": "\n assert isinstance(Config(), self.conf, 'Config') \n \n",
      "43": "\n assert isinstance(Config(), self) \n self.conf = Config() \n \n",
      "44": "\n assert isinstance(config(), self.conf) \n \n assert isinstance(config(), self.config) \n",
      "45": "\n self.conf = Config() <DED> \n \n",
      "46": "\n assert isinstance(config(), self.conf) \n \n assert isinstance(Config(), self.config) \n",
      "47": "\n global.conf = Config() \n \n",
      "48": "\n self.conf = Config() <IND> \n",
      "49": "\n self.conf = () -> None \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,\n",
    "target_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_line": "                                  obs: Union[Tensor, Cens],",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Cens` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 172,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "strongio/torch-kalman",
    "source_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "target_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca^",
    "target_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "predictions": [
      "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, Optional[Cens]]], \n group_idx: Selector, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, Optional[Cens]]], \n group_idx: Selector, \n",
      "1": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[str, str]], \n group_idx: Selector, \n",
      "2": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, Cens], \n group_idx: Selector, \n",
      "3": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, Cens], \n group_idx: Selector, \n",
      "4": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[str, str], \n group_idx: Selector, \n",
      "5": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[Cens]], \n group_idx: Selector, \n",
      "6": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List], \n group_idx: Selector, \n",
      "7": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Tensor, List[str, str]], \n group_idx: Selector, \n",
      "8": "<DED> def _log_prob_with_subsetting(self, \n obs, \n group_idx, \n",
      "9": "<DED> def _log_prob_with_subsetting(self, \n obs: 'Tensor', \n group_idx: Selector, \n",
      "10": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[str, str]]], \n group_idx: Selector, \n",
      "11": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List], \n group_idx: Selector, \n",
      "12": "<DED> def _log_prob_with_subsetting(self, \n obs: 'Censor', \n group_idx: Selector, \n",
      "13": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Cens]]], \n group_idx: Selector, \n",
      "14": "<DED> def _log_prob_with_subsetting(self, \n obs, \n group_idx: Selector, \n",
      "15": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Command], \n group_idx: Selector, \n",
      "16": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, str], \n group_idx: Selector, \n",
      "17": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[str, str], \n group_idx: Selector, \n",
      "18": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor, List[str, str], \n group_idx: Selector, \n",
      "19": "<DED> def _log_prob_with_subsetting(self, \n obs: Censor, \n group_idx: Selector, \n",
      "20": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[tensor, tens], \n group_idx: Selector, \n",
      "21": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Cens]], \n group_idx: Selector, \n",
      "22": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor, List[str, str]], \n group_idx: Selector, \n",
      "23": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Symbol, List[Symbol, List[Symbol]]]], \n group_idx: Selector, \n",
      "24": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, Optional[Cens]]), \n group_idx: Selector, \n",
      "25": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, Optional[cens]]], \n group_idx: Selector, \n",
      "26": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[str], T.Cens], \n group_idx: Selector, \n",
      "27": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Symbol, List[Symbol, List[Symbol, List[Symbol]]]]], \n group_idx: Selector, \n",
      "28": "<DED> def _log_prob_with_subsetting(self, \n obs: List[str, str], \n group_idx: Selector, \n",
      "29": "<DED> def _log_prob_with_subsetting(self, \n obs: 'Could not Triangulate', \n group_idx: Selector, \n",
      "30": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List]], \n group_idx: Selector, \n",
      "31": "<DED> def _log_prob_with_subsetting(self, \n obs: T.Censor, \n group_idx: Selector, \n",
      "32": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, Selector], \n group_idx: Selector, \n",
      "33": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Symbol, List[Symbol, List[Symbol, List[Symbol, List[Symbol]]]]], \n group_idx: Selector, \n",
      "34": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Tensor, List[str]], \n group_idx: Selector, \n",
      "35": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Tensor, List[str], Ttensor], \n group_idx: Selector, \n",
      "36": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[str, str]], \n group_idx: Selector, \n",
      "37": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List, List], \n group_idx: Selector, \n",
      "38": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Symbol, List[Symbol, List[Symbol.]]]], \n group_idx: Selector, \n",
      "39": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Tensor, List[str, str], \n group_idx: Selector, \n",
      "40": "<DED> def _log_prob_with_subsetting(self, \n obs: List[List[Tensor, List[Cens]]], \n group_idx: Selector, \n",
      "41": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, Ttensor], \n group_idx: Selector, \n",
      "42": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[str], str], \n group_idx: Selector, \n",
      "43": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List, List], \n group_idx: Selector, \n",
      "44": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[Symbol, List[Symbol, List[Symbol, List[Symbol]]]]), \n group_idx: Selector, \n",
      "45": "<DED> def _log_prob_with_subsetting(self, \n obs: '', \n group_idx: Selector, \n",
      "46": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Censor], \n group_idx: Selector, \n",
      "47": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor,...], \n group_idx: Selector, \n",
      "48": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, Selector], \n group_idx: Selector, \n",
      "49": "<DED> def _log_prob_with_subsetting(self, \n obs: Optional[Union[Tensor, List[str], str], \n group_idx: Selector, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )\n",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_line": "        ('product', unicode),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mozilla-services/socorro",
    "source_filename": "webapp-django/crashstats/crashstats/models.py",
    "target_filename": "webapp-django/crashstats/crashstats/models.py",
    "source_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084^",
    "target_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "predictions": [
      "required_params = ( \n ('product', args), \n ('version', args), \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "required_params = ( \n ('product', args), \n ('version', args), \n ) \n",
      "1": "required_params = ( \n ('product', icode), \n ('version', icode), \n ) \n",
      "2": "required_params = ( \n ('product', args.unicode), \n ('version', args.unicode), \n ) \n",
      "3": "required_params = ( \n ('product','version', 'unicode'), \n ) \n",
      "4": "required_params = ( \n ('product','version'), \n ('unicode'), \n ) \n",
      "5": "required_params = ( \n ('product', unicode), \n ('version', unicode), \n ) \n",
      "6": "required_params = ( \n ('product', args_unicode), \n ('version', args_unicode), \n ) \n",
      "7": "required_params = ( \n ('product', exports.unicode), \n ('version', exports.unicode), \n ) \n",
      "8": "required_params = ( \n ('product', args, args), \n ('version', args), \n ) \n",
      "9": "required_params = ( \n ('product',...args), \n ('version',...args), \n ) \n",
      "10": "required_params = ( \n ('product','version'), \n ('utf-8'), \n ) \n",
      "11": "required_params = ( \n ('product', t.unicode), \n ('version', t.unicode), \n ) \n",
      "12": "required_params = ( \n ('product', _icode), \n ('version', _icode), \n ) \n",
      "13": "required_params = ( \n ('product', args, unicode), \n ('version', args), \n ) \n",
      "14": "required_params = ( \n ('product', utils.unicode), \n ('version', utils.unicode), \n ) \n",
      "15": "required_params = ( \n ('product', ctx), \n ('version', ctx), \n ) \n",
      "16": "required_params = ( \n ('product', 'unicode'), \n ('version', 'unicode'), \n ) \n",
      "17": "required_params = ( \n ('product','version'), \n ) \n",
      "18": "required_params = ( \n ('product', args, version), \n ('version', args), \n ) \n",
      "19": "required_params = ( \n ('product', dict), \n ('version', dict), \n ) \n",
      "20": "required_params = ( \n ('product', self.unicode), \n ('version', self.unicode), \n ) \n",
      "21": "required_params = ( \n ('product',...icode), \n ('version',...icode), \n ) \n",
      "22": "required_params = ( \n ('product', uicode), \n ('version', uicode), \n ) \n",
      "23": "required_params = ( \n ('product','version'), \n ('implementation'), \n ) \n",
      "24": "required_params = ( \n ('product', 'unicode'), \n ('version', 'unicode), \n ) \n",
      "25": "required_params = ( \n ('product','version', 'utf-8'), \n ) \n",
      "26": "required_params = ( \n ('product', version, version), \n ('version', version), \n ) \n",
      "27": "required_params = ( \n ('product','version', 'utf-8'), \n ('utf-8'), \n ) \n",
      "28": "required_params = ( \n 'product','version', 'unicode'), \n ) \n",
      "29": "required_params = ( \n ('product','version'), \n ('serialization'), \n ) \n",
      "30": "required_params = ( \n ('product','version'), \n ('icode'), \n ) \n",
      "31": "required_params = ( \n ('product', code), \n ('version', code), \n ) \n",
      "32": "required_params = ( \n ('product','version'), \n ('dialog'), \n ) \n",
      "33": "required_params = ( \n ('product', version), \n ('version', version), \n ) \n",
      "34": "required_params = ( \n ('product', ('version', ('unicode'), \n ) \n",
      "35": "required_params = ( \n ('product','version'), \n ('decoder'), \n ) \n",
      "36": "required_params = ( \n ('product','version'), \n () \n",
      "37": "required_params = ( \n ('product', encoded, \n ('version', encoded), \n ) \n",
      "38": "required_params = ( \n ('product','version'), \n ('implementation', 'unicode'), \n ) \n",
      "39": "required_params = ( \n ('product', str), \n ('version', str), \n ) \n",
      "40": "required_params = ( \n ('product','version'), \n ('premium'), \n ) \n",
      "41": "required_params = ( \n ('product', \"code\", \n ('version', code), \n ) \n",
      "42": "required_params = ( \n ('product','version'), \n ('decode'), \n ) \n",
      "43": "required_params = ( \n ('product','version'), \n ('eval'), \n ) \n",
      "44": "required_params = ( \n ('product','version', 'code'), \n ) \n",
      "45": "required_params = ( \n ('product', version, version), \n ('version'), \n ) \n",
      "46": "required_params = ( \n ('product','version'), \n ('six'), \n ) \n",
      "47": "required_params = ( \n ('product','version'), \n ('str'), \n ) \n",
      "48": "required_params = ( \n ('product','version'), \n ('disabled'), \n ) \n",
      "49": "required_params = ( \n ('product',...args), \n ('version', args), \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)\n\n",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_line": "        return StarType(type, line)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `line` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/parsetype.py",
    "target_filename": "mypy/parsetype.py",
    "source_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7^",
    "target_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "predictions": [
      "type = self.parse_type() \n return self.type(type) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "type = self.parse_type() \n return self.type(type) \n \n",
      "1": "type = self.parse_type() \n return self.type(type, line) \n \n",
      "2": "type = self.parse_type() \n return self.starType(type) \n \n",
      "3": "type = self.parse_type() \n return \"\"(type, line) \n \n",
      "4": "type = self.parse_type() \n return self.starType(type, line) \n \n",
      "5": "type = self.parse_type() \n return str(type, line) \n \n",
      "6": "type = self.parse_type() \n return self.type(type, 'line') \n \n",
      "7": "type = self.parse_type() \n return ctx.StarType(type, ctx) \n \n",
      "8": "type = self.parse_type() \n return self.parse_type(type, line) \n \n",
      "9": "type = self.parse_type() \n return self.parse_type(type) \n \n",
      "10": "type = self.parse_type() \n return ''('type', 'line') \n \n",
      "11": "type = self.parse_type() \n return lib.StarType(type, lib.line) \n \n",
      "12": "type = self.parse_type() \n return self.startType(type, line) \n \n",
      "13": "type = self.parse_type() \n return ''(type, line) \n \n",
      "14": "type = self.parse_type() \n return tuple(type, line) \n \n",
      "15": "type = self.parse_type() \n return self.type(type, self.line) \n \n",
      "16": "type = self.parse_type() \n return self.str(type, line) \n \n",
      "17": "type = self.parse_type() \n return _line(type, line) \n \n",
      "18": "type = self.parse_type() \n return Object.assign(type, line) \n \n",
      "19": "type = self.parse_type() \n return (type, line) \n \n",
      "20": "type = self.parse_type() \n return f.starType(type, f.line) \n \n",
      "21": "type = self.parse_type() \n return self.line(type, line) \n \n",
      "22": "type = self.parse_type() \n return self._parse_type(type, line) \n \n",
      "23": "type = self.parse_type() \n return ''('type', line) \n \n",
      "24": "type = self.parse_type() \n return self.type(type, [line]) \n \n",
      "25": "type = self.parse_type() \n return self.StarType(type, line) \n \n",
      "26": "type = self.parse_type() \n return ''(type, 'line') \n \n",
      "27": "type = self.parse_type() \n return self.starType(type, 'line') \n \n",
      "28": "type = self.parse_type() \n return self.starType(type, self.line) \n \n",
      "29": "type = self.parse_type() \n return 'StarType'(type, 'line') \n \n",
      "30": "type = self.parse_type() \n return Type(type, line) \n \n",
      "31": "type = self.parse_type() \n return type(type, line) \n \n",
      "32": "type = self.parse_type() \n return self.startType(type) \n \n",
      "33": "type = self.parse_type() \n return self.StarType(type) \n \n",
      "34": "type = self.parse_type() \n return tuple(type) \n \n",
      "35": "type = self.parse_type() \n return self.line(type) \n \n",
      "36": "type = self.parse_type() \n return self.default_type(type) \n \n",
      "37": "type = self.parse_type() \n return self.trigger(type, line) \n \n",
      "38": "type = self.parse_type() \n return Selector(type, line) \n \n",
      "39": "type = self.parse_type() \n return self._parse_type(type) \n \n",
      "40": "type = self.parse_type() \n return self.starType(type, [line]) \n \n",
      "41": "type = self.parse_type() \n return 'line'(type, line) \n \n",
      "42": "type = self.parse_type() \n return msg(type, line) \n \n",
      "43": "type = self.parse_type() \n return self.tid(type, line) \n \n",
      "44": "type = self.parse_type() \n return \"\" \n \n",
      "45": "type = self.parse_type() \n return type(type) \n \n",
      "46": "type = self.parse_type() \n return elem(type, line) \n \n",
      "47": "type = self.parse_type() \n return self.set(type, line) \n \n",
      "48": "type = self.parse_type() \n return self.default_type(type, line) \n \n",
      "49": "type = self.parse_type() \n return self.get('line') \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_line": "    F5_DEVICE_TYPE: {",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "networktocode/pyntc",
    "source_filename": "pyntc/devices/__init__.py",
    "target_filename": "pyntc/devices/__init__.py",
    "source_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9^",
    "target_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "predictions": [
      "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "1": "}, \n f5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "2": "}, \n DEVICE_CLASS_KEY: F5Device, \n",
      "3": "}, \n F5_DEVICE_TYPE_: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "4": "}, \n 'F5_DEVICE_TYPE': { \n DEVICE_CLASS_KEY: F5Device, \n",
      "5": "}, \n F5_DEVICE_TYPE = { \n DEVICE_CLASS_KEY: F5Device, \n",
      "6": "}, \n F5_DEVICE_CLASS_KEY: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "7": "}, \n F5_DEVICE_TYPE_NONE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "8": "}, \n F5_DEVICE_TYPE: { <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "9": "}, \n F5_DEVICE_TYPE_FILE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "10": "}, \n 'f5_DEVICE_TYPE': { \n DEVICE_CLASS_KEY: F5Device, \n",
      "11": "}, <IND> F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "12": "}, \n F5_DEVICE_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "13": "}, \n F8_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "14": "}, \n F5_DEVICE_KEY: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "15": "}, \n F5_DEVICE_TYPE= { \n DEVICE_CLASS_KEY: F5Device, \n",
      "16": "}, \n F5_DEVICE_TYPE: { <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "17": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, <IND>",
      "18": "}, \n \"F5_DEVICE_TYPE\": { \n DEVICE_CLASS_KEY: F5Device, \n",
      "19": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n ) -> None: \n",
      "20": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, <DED>",
      "21": "}, \n F5_DEVICE_TYPE_PROBS: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "22": "}, \n F5_DEVICE_TTYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "23": "}, \n F5_DEVICE_TYPE__: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "24": "}, \n F5_DEVICE_TYPE_= { \n DEVICE_CLASS_KEY: F5Device, \n",
      "25": "}, \n FF5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "26": "}, <DED> \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "27": "}, \n F5_DEVICE_YPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "28": "}, \n F6_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "29": "}, \n F5_DEVICE_TYPE_MANY: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "30": "}, \n _F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "31": "}, \n F5_DEVICE_INCLUDE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "32": "}, \n F5_DEVICE_TYPE_R: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "33": "}, \n F5_DEVICE_SUCCESS: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "34": "}, \n F4_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "35": "}, \n F5_DEVICE_PROBS: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "36": "}, \n F5_DEVICE_PARTY: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "37": "}, \n ) -> None: \n \n DEVICE_CLASS_KEY: F5Device, \n",
      "38": "}, \n f5_DEVICE_TYPE_: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "39": "}, \n F5_DEVICE_TYPE: [] \n DEVICE_CLASS_KEY: F5Device, \n",
      "40": "}, \n F5_DEVICE_TYPE_DRAG: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "41": "}, \n F5_DEVICE_TYPE_USE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "42": "}, \n F5_DEVICE_TYPE= { \n DEVICE_CLASS_KEY=F5Device, \n",
      "43": "}, \n F5_DEVICE_TYPE: \"\" \n DEVICE_CLASS_KEY: F5Device, \n",
      "44": "}, \n F5_DEVICE_TYPE: [ { \n DEVICE_CLASS_KEY: F5Device, \n",
      "45": "}, \n ): \n DEVICE_CLASS_KEY: F5Device, \n",
      "46": "}, \n DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "47": "}, \n devICE_CLASS_KEY: F5Device, \n",
      "48": "}, \n f5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: f5Device, \n",
      "49": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: Optional[F5Device], \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DisnakeDev/disnake",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ \n \n",
      "1": "\n __slots__ = BaseUser.__slots__ \n \n",
      "2": "\n __slots__ = BaseUser.__slots__('__weakref__',) \n \n",
      "3": "\n __slots__ = BaseUser.__slots__.__weakref__ \n \n",
      "4": "\n __slots__ = BaseUser.__weakref__ \n \n",
      "5": "\n __slots__ = BaseUser.__slots__ ('__weakref__',) \n \n",
      "6": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "7": "\n __slots__ = BaseUser.__slots__ = ('__weakref__',) \n \n",
      "8": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ \n \n",
      "9": "\n __slots__ = BaseUser.__slots__, \n '__weakref__', \n",
      "10": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__.__slots__ \n \n",
      "11": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__('__weakref__',) \n \n",
      "12": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <DED> \n \n",
      "13": "\n __slots__ = BaseUser.__slots__.__weakref__('__weakref__',) \n \n",
      "14": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__('__weakref__',) \n \n",
      "15": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__.__weakref__ \n \n",
      "16": "\n __slots__ = BaseUser.__slots__ <IND> \n \n",
      "17": "\n __slots__ = BaseUser.__slots__, \n ) \n \n",
      "18": "\n __slots__ = BaseUser.__slots__.typing.Tuple[str, '__weakref__', '__weakref__'] \n \n",
      "19": "\n __slots__ = BaseUser.__slots__ <DED> \n \n",
      "20": "\n __slots__ = BaseUser.__slots__.__weakref__.__slots__ = BaseUser.__slots__ \n \n",
      "21": "\n __slots__ = BaseUser.__weakref__('__weakref__',) \n \n",
      "22": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ ('__weakref__',) \n \n",
      "23": "\n __slots__ = BaseUser.__slots__, \n \n",
      "24": "\n __slots__ = BaseUser.__slots__.__weakref__.__slots__ \n \n",
      "25": "\n __slots__ = BaseUser.__slots__.__weakref__ <DED> \n \n",
      "26": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <IND> \n \n",
      "27": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ = ('__weakref__',) \n \n",
      "28": "\n __slots__ = BaseUser.__slots__ | '__weakref__' \n \n",
      "29": "\n __slots__ = BaseUser.__slots__.__weakref__ <IND> \n \n",
      "30": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__() \n \n",
      "31": "\n __slots__ = BaseUser.__slots__, \n '__weakref__' \n \n",
      "32": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref___ \n \n",
      "33": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <IND> \n",
      "34": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ <DED> \n \n",
      "35": "\n __slots__ = BaseUser.__slots__.typing.Tuple[str, '__weakref__'] \n \n",
      "36": "\n __slots__ = BaseUser.__slots__, <IND> '__weakref__' \n \n",
      "37": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__' \n \n",
      "38": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ <IND> \n \n",
      "39": "\n __slots__ = BaseUser.__weakref__.__slots__ = BaseUser.__slots__ \n \n",
      "40": "\n __slots__ = BaseUser.__slots__; \n \n",
      "41": "\n __slots__ = BaseUser.__slots__.__weakref__.__slots__.__slots__ = BaseUser.__slots__ \n \n",
      "42": "\n __slots__ = BaseUser.__slots__ = baseUser.__weakref__ \n \n",
      "43": "\n __slots__ = BaseUser.__slots__, <DED> '__weakref__' \n \n",
      "44": "\n __slots__ = BaseUser.__slots__.decode('__weakref__', '__weakref__') \n \n",
      "45": "\n __slots__ = BaseUser.__slots__.typing.Tuple('__weakref__',) \n \n",
      "46": "\n __slots__ = BaseUser.__slots__.decode('__weakref__',) \n \n",
      "47": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__.__weakref__('__weakref__',) \n \n",
      "48": "\n __slots__ = BaseUser.__slots__ and ('__weakref__',) \n \n",
      "49": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <IND> \n __slots__ = BaseUser.__slots__ \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def get_node_type(self) -> Optional[str]:\n        <IND>return 'IpAddress'\n",
    "target_code": "\n    <DED>def get_node_type(self) -> str:\n        <IND>return 'IpAddress'\n",
    "warning_line": "    def get_node_type(self) -> Optional[str]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `grapl_analyzerlib.nodes.ip_address_node.IpAddressView.get_node_type` overrides method defined in `DynamicNodeView` inconsistently. Returned type `typing.Optional[str]` is not a subtype of the overridden return `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 125,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "grapl-security/grapl",
    "source_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "target_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "source_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551^",
    "target_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551",
    "predictions": [
      "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "1": "\n <DED> def get_node_type(self) -> typing.Optional[str]: \n <IND> return 'IpAddress' \n",
      "2": "\n <IND> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "3": "\n \n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "4": "\n <DED> def get_node_type(self): \n <IND> return 'IpAddress' \n",
      "5": "\n <DED> def get_node_type(self, str) -> str: \n <IND> return 'IpAddress' \n",
      "6": "\n <DED> def get_node_type(self) -> str: \n <DED> return 'IpAddress' \n",
      "7": "\n <DED> def get_node_type(self) -> str: \n \n return 'IpAddress' \n",
      "8": "\n <DED> def get_node_type(self) -> Optional[str]: \n <IND> return 'IpAddress' \n",
      "9": "\n <DED> def get_node_type(self) -> str: \n <IND> return \"IpAddress\" \n",
      "10": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type): \n <IND> return 'IpAddress' \n",
      "11": "\n <DED> def get_node_type(self, 'IpAddress') -> str: \n <IND> return 'IpAddress' \n",
      "12": "<DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "13": "\n <IND> def get_node_type(self) -> typing.Optional[str]: \n <IND> return 'IpAddress' \n",
      "14": "<IND> <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "15": "\n <DED> def get_node_type(self, 'IpAddress'): \n <IND> return 'IpAddress' \n",
      "16": "\n \n <DED> def get_node_type(self) -> typing.Optional[str]: \n <IND> return 'IpAddress' \n",
      "17": "\n <DED> def get_node_type(self) -> str: \n <IND> return str('IpAddress' \n",
      "18": "\n <DED> def get_node_type(self) -> List[typing.Optional[str]]: \n <IND> return 'IpAddress' \n",
      "19": "\n <DED> def get_node_type(self) -> Typing.Optional[str]: \n <IND> return 'IpAddress' \n",
      "20": "\n <DED> def get_node_type(self) -> str: <IND> <IND> return 'IpAddress' \n",
      "21": "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' <IND>",
      "22": "\n <DED> def get_node_type(self) -> typing.Optional[str]: \n <DED> return 'IpAddress' \n",
      "23": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type()) -> str: \n <IND> return 'IpAddress' \n",
      "24": "\n <DED> def get_node_type(self) -> typing.Optional[str]: \n \n return 'IpAddress' \n",
      "25": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type]: \n <IND> return 'IpAddress' \n",
      "26": "\n <DED> def get_node_type(self) -> str: <DED> <IND> return 'IpAddress' \n",
      "27": "\n <DED> def get_node_type(self) -> typing[typing.Optional[str]]: \n <IND> return 'IpAddress' \n",
      "28": "\n <DED> def get_node_type(self) -> List[str]: \n <IND> return 'IpAddress' \n",
      "29": "\n <DED> def got_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "30": "\n <DED> def get_node_type(self) -> typing[typing.Optional[str]: \n <IND> return 'IpAddress' \n",
      "31": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type) -> str: \n <IND> return 'IpAddress' \n",
      "32": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type()): \n <IND> return 'IpAddress' \n",
      "33": "\n <DED> def get_node_type(self) -> typing.Optional[str]: \n <IND> return \"IpAddress\" \n",
      "34": "<DED> def get_node_type(self) -> typing.Optional[str]: \n <IND> return 'IpAddress' \n",
      "35": "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' <DED>",
      "36": "\n <DED> def get_node_type(self) -> 'IpAddress': \n <IND> return 'IpAddress' \n",
      "37": "\n <DED> def get_node_type(self) -> \"IpAddress\": \n <IND> return 'IpAddress' \n",
      "38": "\n <DED> def get_node_type(self = { } ) -> str: \n <IND> return 'IpAddress' \n",
      "39": "\n <DED> def get_node_type(self()) -> str: \n <IND> return 'IpAddress' \n",
      "40": "\n <DED> def get_node_type(self) -> typing.Optional[str]: <IND> <IND> return 'IpAddress' \n",
      "41": "\n <DED> def get_node_type(self) -> typing.Optional[str]: \n <IND> return 'IpAddress' <IND>",
      "42": "\n <DED> def get_node_type(self) -> Str: \n <IND> return 'IpAddress' \n",
      "43": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type) -> str: \n <IND> return 'IpAddress' \n",
      "44": "\n <DED> def get_node_type(self) -> typing.Optional[str]: <DED> <IND> return 'IpAddress' \n",
      "45": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type): \n <IND> return \"IpAddress\" \n",
      "46": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type\": \n <IND> return 'IpAddress' \n",
      "47": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView) -> str: \n <IND> return 'IpAddress' \n",
      "48": "\n <DED> def get_node_type(self) -> Str: \n <IND> return 'IpAddress' \n",
      "49": "\n <DED> def get_node_type(self.ip_address_node.IpAddressView.get_node_type): \n <DED> return 'IpAddress' \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        <IND>pass\n\n",
    "target_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        <IND>return None\n\n",
    "warning_line": "    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 105,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ciphey/Ciphey",
    "source_filename": "ciphey/basemods/Crackers/hash.py",
    "target_filename": "ciphey/basemods/Crackers/hash.py",
    "source_changeid": "5544e945c591d063a2541fd40991c1f81b729575^",
    "target_changeid": "5544e945c591d063a2541fd40991c1f81b729575",
    "predictions": [
      "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "1": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "2": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "3": "\n <DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "4": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "5": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND>",
      "6": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED>",
      "7": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n \n pass \n",
      "8": "<DED> @staticmethod <DED> def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "9": "<DED> @staticmethod <IND> def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "10": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: <IND> <IND> pass \n \n",
      "11": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <IND> \n",
      "12": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: <DED> <IND> pass \n \n",
      "13": "<DED> @staticmethod \n def getParams(...) -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "14": "\n <IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "15": "<DED> @staticmethod \n def getParams(...args) -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "16": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> get pass \n \n",
      "17": "\n <DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "18": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> assert isinstance(ciphey.iface._modules.ParamSpec) \n",
      "19": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "20": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND>",
      "21": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> if pass \n \n",
      "22": "<DED> @staticmethod \n def getParams(str) -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "23": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> assert isinstance(ciphey.iface._modules.ParamSpec, Any) \n",
      "24": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> assert isinstance(ciphey.basemods.Crackers.hash.HashBuster.getParams) \n",
      "25": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n if isinstance(ciphey.iface._modules.ParamSpec): \n",
      "26": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any], Any]]: \n <IND> pass \n \n",
      "27": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "28": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> if isinstance(ciphey.iface._modules.ParamSpec): \n",
      "29": "<DED> @staticmethod \n def getParams(optional[Dict[str, Dict[str, Any]]]): \n <IND> pass \n \n",
      "30": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND>",
      "31": "\n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "32": "\n <DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "33": "<DED> @staticmethod \n def getParams() -> ciphey.iface._modules.ParamSpec: \n <IND> pass \n \n",
      "34": "\n <DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND>",
      "35": "<DED> @staticmethod \n def getParams(...) -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "36": "<DED> @staticmethod \n def getParams(optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "37": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return \"\" \n \n",
      "38": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> assert isinstance(ciphey.iface._modules.ParamSpec), \n",
      "39": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <DED> \n \n",
      "40": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <DED> pass \n \n",
      "41": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n \n pass \n \n",
      "42": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any, Any]]]: \n <IND> pass \n \n",
      "43": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND> if isinstance(ciphey.iface._modules.ParamSpec): \n",
      "44": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> assert isinstance(ciphey.basemods.Crackers.hash.HashBuster.getParams)] \n",
      "45": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n if not isinstance(ciphey.iface._modules.ParamSpec): \n",
      "46": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED> assert isinstance(ciphey.iface._modules.ParamSpec,...) \n",
      "47": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "48": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n if isinstance(ciphey.iface._modules.ParamSpec, Any): \n",
      "49": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <DED> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nextcord/nextcord",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ \n \n",
      "1": "\n __slots__ = BaseUser.__slots__ \n \n",
      "2": "\n __slots__ = BaseUser.__slots__('__weakref__',) \n \n",
      "3": "\n __slots__ = BaseUser.__slots__.__weakref__ \n \n",
      "4": "\n __slots__ = BaseUser.__weakref__ \n \n",
      "5": "\n __slots__ = BaseUser.__slots__ ('__weakref__',) \n \n",
      "6": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "7": "\n __slots__ = BaseUser.__slots__ = ('__weakref__',) \n \n",
      "8": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ \n \n",
      "9": "\n __slots__ = BaseUser.__slots__, \n '__weakref__', \n",
      "10": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__.__slots__ \n \n",
      "11": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__('__weakref__',) \n \n",
      "12": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <DED> \n \n",
      "13": "\n __slots__ = BaseUser.__slots__.__weakref__('__weakref__',) \n \n",
      "14": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__('__weakref__',) \n \n",
      "15": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__.__weakref__ \n \n",
      "16": "\n __slots__ = BaseUser.__slots__ <IND> \n \n",
      "17": "\n __slots__ = BaseUser.__slots__, \n ) \n \n",
      "18": "\n __slots__ = BaseUser.__slots__.typing.Tuple[str, '__weakref__', '__weakref__'] \n \n",
      "19": "\n __slots__ = BaseUser.__slots__ <DED> \n \n",
      "20": "\n __slots__ = BaseUser.__slots__.__weakref__.__slots__ = BaseUser.__slots__ \n \n",
      "21": "\n __slots__ = BaseUser.__weakref__('__weakref__',) \n \n",
      "22": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ ('__weakref__',) \n \n",
      "23": "\n __slots__ = BaseUser.__slots__, \n \n",
      "24": "\n __slots__ = BaseUser.__slots__.__weakref__.__slots__ \n \n",
      "25": "\n __slots__ = BaseUser.__slots__.__weakref__ <DED> \n \n",
      "26": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <IND> \n \n",
      "27": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ = ('__weakref__',) \n \n",
      "28": "\n __slots__ = BaseUser.__slots__ | '__weakref__' \n \n",
      "29": "\n __slots__ = BaseUser.__slots__.__weakref__ <IND> \n \n",
      "30": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__() \n \n",
      "31": "\n __slots__ = BaseUser.__slots__, \n '__weakref__' \n \n",
      "32": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref___ \n \n",
      "33": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <IND> \n",
      "34": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ <DED> \n \n",
      "35": "\n __slots__ = BaseUser.__slots__.typing.Tuple[str, '__weakref__'] \n \n",
      "36": "\n __slots__ = BaseUser.__slots__, <IND> '__weakref__' \n \n",
      "37": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__' \n \n",
      "38": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__ <IND> \n \n",
      "39": "\n __slots__ = BaseUser.__weakref__.__slots__ = BaseUser.__slots__ \n \n",
      "40": "\n __slots__ = BaseUser.__slots__; \n \n",
      "41": "\n __slots__ = BaseUser.__slots__.__weakref__.__slots__.__slots__ = BaseUser.__slots__ \n \n",
      "42": "\n __slots__ = BaseUser.__slots__ = baseUser.__weakref__ \n \n",
      "43": "\n __slots__ = BaseUser.__slots__, <DED> '__weakref__' \n \n",
      "44": "\n __slots__ = BaseUser.__slots__.decode('__weakref__', '__weakref__') \n \n",
      "45": "\n __slots__ = BaseUser.__slots__.typing.Tuple('__weakref__',) \n \n",
      "46": "\n __slots__ = BaseUser.__slots__.decode('__weakref__',) \n \n",
      "47": "\n __slots__ = BaseUser.__slots__ = BaseUser.__slots__.__weakref__('__weakref__',) \n \n",
      "48": "\n __slots__ = BaseUser.__slots__ and ('__weakref__',) \n \n",
      "49": "\n __slots__ = BaseUser.__slots__ = BaseUser.__weakref__ <IND> \n __slots__ = BaseUser.__slots__ \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = {commands.NewBlock}\n",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_line": "    subscription_msg_types = {commands.NewBlock}",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 6,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/trinity",
    "source_filename": "trinity/protocol/eth/monitors.py",
    "target_filename": "trinity/protocol/eth/monitors.py",
    "source_changeid": "ad61361109f7df88eb807a543191d491e76eed0c^",
    "target_changeid": "ad61361109f7df88eb807a543191d491e76eed0c",
    "predictions": [
      "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = { commands.NewBlock } \n"
    ],
    "correct": false,
    "top_five": {
      "0": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = { commands.NewBlock } \n",
      "1": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } \n",
      "2": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = newBlock( { commands.NewBlock } \n",
      "3": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = [] \n",
      "4": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = ( { commands.NewBlock } \n",
      "5": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber( { commands.NewBlock } \n",
      "6": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } ) \n",
      "7": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = new Block( { commands.NewBlock } \n",
      "8": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = python.NewBlock( { commands.NewBlock } ) \n",
      "9": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen.NewBlock( { commands.NewBlock } \n",
      "10": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen.NewBlock( { commands.NewBlock } ) \n",
      "11": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen_types.NewBlock( { commands.NewBlock } ) \n",
      "12": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } <IND> ) \n",
      "13": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = newBlock( { commands.NewBlock } ) \n",
      "14": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen.NewBlock() \n",
      "15": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freshBlock( { commands.NewBlock } \n",
      "16": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types= { commands.NewBlock } \n",
      "17": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen_types( { commands.NewBlock } ) \n",
      "18": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen_types.NewBlock() \n",
      "19": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( { commands.NewBlock } ) \n",
      "20": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } \n ) \n",
      "21": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = extend( { commands.NewBlock } \n",
      "22": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freshBlock( { commands.NewBlock } ) \n",
      "23": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = { commands.NewBlock } \n",
      "24": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set().NewBlock(baseChainTipMonitor) \n",
      "25": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = subscription_msg_types( { commands.NewBlock } \n",
      "26": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenBlock( { commands.NewBlock } \n",
      "27": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen_types.NewBlock( { commands.NewBlock } \n",
      "28": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.Subscriber( { commands.NewBlock } \n",
      "29": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set_types( { commands.NewBlock } \n",
      "30": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = \"\" \n",
      "31": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber( { commands.NewBlock } ) \n",
      "32": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = newBlock( { commands.NewBlock } \n ) \n",
      "33": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber( { commands.NewBlock } \n ) \n",
      "34": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber( { commands.NewBlock } <IND> ) \n",
      "35": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } <IND> ) \n",
      "36": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.NewBlock( { commands.NewBlock } ) \n",
      "37": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } <DED> ) \n",
      "38": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freshBlockType( { commands.NewBlock } \n",
      "39": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozen_types( { commands.NewBlock } \n",
      "40": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = new Blocked( { commands.NewBlock } ) \n",
      "41": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set_types.NewBlock( { commands.NewBlock } ) \n",
      "42": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = stream( { commands.NewBlock } \n",
      "43": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = tuneout commands.NewBlock(BaseChainTipMonitor) \n",
      "44": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p.NewBlock( { commands.NewBlock } \n",
      "45": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber( { commands.NewBlock } <IND> ) \n",
      "46": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = new Subscriber( { commands.NewBlock } \n",
      "47": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = python.NewBlock( { commands.NewBlock } \n",
      "48": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = newBlock( { commands.NewBlock } <IND> ) \n",
      "49": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = 0 \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": true,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        <IND>if not self.parallel:\n",
    "target_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        <IND>if not self.parallel:\n",
    "warning_line": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allenact",
    "source_filename": "rl_habitat/habitat_preprocessors.py",
    "target_filename": "rl_habitat/habitat_preprocessors.py",
    "source_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c^",
    "target_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "predictions": [
      "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "1": "\n <DED> def to(self, device: Preprocessor) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "2": "\n <DED> def to(self, device: Preprocessor.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "3": "\n <DED> def to(self, device: str) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "4": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "5": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "6": "\n <DED> def to(self, device: torch.device) -> 'ResnetPreProcessorThor': \n <IND> if not self.parallel: \n",
      "7": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "8": "\n <DED> def to(self, device: PreprocessorHabitat) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "9": "\n <DED> def to(self, device: tuple.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "10": "\n \n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "11": "<DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "12": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n",
      "13": "\n <DED> def to(self, device: ResnetPreProcessorThor) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "14": "\n <DED> def to(self, device: Resnet.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "15": "\n <DED> def to(self, device: self.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "16": "\n <DED> def to(self, device: Fire.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "17": "<IND> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "18": "\n <DED> def to(self, device: Route.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "19": "\n <DED> def to(self, device: route.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "20": "\n <DED> def to(self, device: Resnet[str, str]) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "21": "\n <DED> def to(self, device: PrimeProcessor.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "22": "\n <DED> def to(self, device: t.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "23": "\n <DED> def to(self, device: Router.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "24": "\n <DED> def to(self, device: torch.device) -> List[\"ResnetPreProcessorThor\"]: \n <IND> if not self.parallel: \n",
      "25": "\n <DED> def to(self, device: preprocessor.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "26": "\n <DED> def to(self, device: Key.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "27": "\n <DED> def to(self, device: Set.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "28": "\n <DED> def to(self, device: torch.device) -> str: \n <IND> if not self.parallel: \n",
      "29": "\n <DED> def to(self, device: method.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "30": "\n <DED> def to(self, device: Tapir.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "31": "\n \n <DED> def to(self, device: Preprocessor) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "32": "\n <DED> def to(self, device: ResnetHabitat) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "33": "\n <DED> def to(self, device: Piper.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "34": "\n <DED> def to(self, device: Mask.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "35": "\n <IND> def to(self, device: Preprocessor) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "36": "\n <DED> def to(self, device: PrimeProcessorHabitat) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "37": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": <IND> <IND> if not self.parallel: \n",
      "38": "\n <DED> def to(self, device: Device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "39": "\n <DED> def to(self, device: Distr) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "40": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: <IND>",
      "41": "\n <DED> def to(self, device: Preprocessor) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "42": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": <DED> <IND> if not self.parallel: \n",
      "43": "\n <DED> def to(self, device: Deprecator) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "44": "\n <IND> def to(self, device: Preprocessor.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "45": "\n <DED> def to(self, device: Flame.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "46": "\n <DED> def to(self, device, torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "47": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\", \n <IND> if not self.parallel: \n",
      "48": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: <DED>",
      "49": "\n <DED> def to(self, device: Preprocessor) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: str = None,\n    ):\n",
    "target_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):\n",
    "warning_line": "        method_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " method_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 605,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "1": "capture_error: Optional[Union[bool, str]] = None, \n method_name: str, \n ): \n",
      "2": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): <IND>",
      "3": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): <DED>",
      "4": "capture_error: Optional[Union[bool, str]] = None, <IND> method_name: Optional[str] = None, \n ): \n",
      "5": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ) -> None: \n",
      "6": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, <IND> ): \n",
      "7": "capture_error: Optional[Union[bool, str]] = None, <DED> method_name: Optional[str] = None, \n ): \n",
      "8": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, <DED> ): \n",
      "9": "capture_error: Optional[Union[bool, str]]: Optional[str] = None, \n method_name: Optional[str] = None, \n ): \n",
      "10": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n method_name: Optional[str] = None, \n ): \n",
      "11": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Union[str, None] = None, \n ): \n",
      "12": "capture_error: Optional[Union[bool, str]]: Optional[Str] = None, \n method_name: Optional[str] = None, \n ): \n",
      "13": "capture_error: Optional[Union[bool, str]] = None, \n method_name: optional[str] = None, \n ): \n",
      "14": "capture_error: Optional[Union[bool, str]] = None, \n method_name: typing.Optional[str] = None, \n ): \n",
      "15": "capture_error: Optional[Union[bool, str]] = None, \n methods_name: Optional[str] = None, \n ): \n",
      "16": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[Str] = None, \n ): \n",
      "17": "capture_error: Optional[Union[bool, str]] = None, \n method_name: bool = False, \n ): \n",
      "18": "capture_error: Optional[Union[bool, str]] = None, \n method_name = Optional[str] = None, \n ): \n",
      "19": "capture_error: Optional[Union[bool, str], str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "20": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Union[str] = None, \n ): \n",
      "21": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str]=None, \n ): \n",
      "22": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Union[str, Optional[str]] = None, \n ): \n",
      "23": "capture_error: Optional[Union[bool, str]] = None, \n method_name=Str, \n ): \n",
      "24": "capture_error: Optional[Union[bool, str]] = None, \n method_name : Optional[str] = None, \n ): \n",
      "25": "capture_error: Optional[Union[bool, str]] = None, \n method_name: str: Optional[str] = None, \n ): \n",
      "26": "capture_error: Optional[Union[bool], str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "27": "capture_error: Optional[Union[bool, str]] = None, \n method_name = None, \n ): \n",
      "28": "capture_error: Optional[Union[bool, str]] = None, \n method_name: str = '', \n ): \n",
      "29": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str]: Optional[None] = None, \n ): \n",
      "30": "capture_error: Optional[Union[bool, str]] = None, \n method_name=Optional[str] = None, \n ): \n",
      "31": "capture_error: Optional[Union[bool, str]] = None, \n methodology_name: Optional[str] = None, \n ): \n",
      "32": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ) -> Optional[Str]: \n",
      "33": "capture_error: Optional[Union[bool, str]]= None, \n method_name: Optional[str] = None, \n ): \n",
      "34": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, <DED> ) -> None: \n",
      "35": "capture_error: Optional[Union[bool, str]] = None, \n method_name: str = \"\", \n ): \n",
      "36": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Alternative[str] = None, \n ): \n",
      "37": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None): \n",
      "38": "capture_error: Optional[UE[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "39": "capture_error: Optional[Uniunea[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "40": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n ): \n",
      "41": "capture_error: Optional[Union[bool, str]]: None, \n method_name: Optional[str] = None, \n ): \n",
      "42": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n () -> None: \n",
      "43": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ) = None: \n",
      "44": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] | None = None, \n ): \n",
      "45": "capture_error: Optional[Union[bool, str]] = None, \n mode_name: Optional[str] = None, \n ): \n",
      "46": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = \"\", \n ): \n",
      "47": "capture_error: Optional[Union[bool, str]] = None, <IND> method_name: Optional[str] = None, \n ): <IND>",
      "48": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None), \n ): \n",
      "49": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str]] = None, \n ): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        usertags: list = [],\n        configure_timeout: str = 10,\n    ) -> dict:\n",
    "target_code": "        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:\n",
    "warning_line": "        configure_timeout: str = 10,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " configure_timeout is declared to have type `str` but is used as type `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "adw0rd/instagrapi",
    "source_filename": "instagrapi/igtv.py",
    "target_filename": "instagrapi/igtv.py",
    "source_changeid": "0344324a593097604ea701186dc17afb977245f0^",
    "target_changeid": "0344324a593097604ea701186dc17afb977245f0",
    "predictions": [
      "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: \n",
      "1": "usertags: list = [], \n configure_timeout: int = 10 \n ) -> dict: \n",
      "2": "usertags: list = [], \n configure_timeout: int = 0 \n ) -> dict: \n",
      "3": "usertags: list = [], \n configure_timeout: int = 10) -> dict: \n",
      "4": "usertags: list = [], \n configure_timeout: int = 5, \n ) -> dict: \n",
      "5": "usertags: list = [], \n configure_timeout: int = int, \n ) -> dict: \n",
      "6": "usertags: list = [], \n configure_timeout: typing.Optional[str] = 10, \n ) -> dict: \n",
      "7": "usertags: int = [], \n configure_timeout: int = 10, \n ) -> dict: \n",
      "8": "usertags: list = [], \n configure_timeout: int = 8, \n ) -> dict: \n",
      "9": "usertags: list = [], \n configure_timeout: int = 0, \n ) -> dict: \n",
      "10": "usertags: list = [], \n configure_timeout: int = int = 10, \n ) -> dict: \n",
      "11": "usertags: list = [], \n configure_timeout: int = 20, \n ) -> dict: \n",
      "12": "usertags: list = [], \n configure_timeout: int = 15, \n ) -> dict: \n",
      "13": "usertags: list = [], \n configure_timeout: int = 10, <IND> ) -> dict: \n",
      "14": "usertags: list = [], \n configure_timeout: Int = 10, \n ) -> dict: \n",
      "15": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: <IND>",
      "16": "usertags: list = [], \n configure_timeout: Optional[str] = 10, \n ) -> dict: \n",
      "17": "usertags: list = [], \n configure_timeout: int, \n ) -> dict: \n",
      "18": "usertags: list = [], <IND> configure_timeout: int = 10, \n ) -> dict: \n",
      "19": "usertags: list = [], \n configure_timeout: int = 1, \n ) -> dict: \n",
      "20": "usertags: list = [], \n configure_timeout: int = 100 \n ) -> dict: \n",
      "21": "usertags: list = [], \n configure_timeout: int = 40 \n ) -> dict: \n",
      "22": "usertags: list = [], <DED> configure_timeout: int = 10, \n ) -> dict: \n",
      "23": "usertags: list = [], \n configure_timeout: int = 3, \n ) -> dict: \n",
      "24": "usertags: list = [], \n configure_timeout: int = Int() -> dict: \n",
      "25": "usertags: list = [], \n configure_timeout: int = 6, \n ) -> dict: \n",
      "26": "usertags: list = [], \n configure_timeout: int = 2, \n ) -> dict: \n",
      "27": "usertags: list = [], \n configure_timeout: int = 10, <DED> ) -> dict: \n",
      "28": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: <DED>",
      "29": "usertags: list = [], \n configure_timeout: int = 20 \n ) -> dict: \n",
      "30": "usertags: list = [], \n configure_timeout: int = 16, \n ) -> dict: \n",
      "31": "usertags: list = [], \n configure_timeout: int = 5 \n ) -> dict: \n",
      "32": "usertags: list = [], \n configure_timeout: int = 11, \n ) -> dict: \n",
      "33": "usertags: list = [], \n configure_timeout: int = 10 <IND> ) -> dict: \n",
      "34": "usertags: list = [], \n configure_timeout: int = 9, \n ) -> dict: \n",
      "35": "usertags: list = [], \n configure_timeout: int = 4, \n ) -> dict: \n",
      "36": "usertags: list = [], \n configure_config: int = 10, \n ) -> dict: \n",
      "37": "usertags: List = [], \n configure_timeout: int = 10, \n ) -> dict: \n",
      "38": "usertags: list = [], \n configure_timeout: int = int || 10 \n ) -> dict: \n",
      "39": "usertags: list = [], \n configure_timeout: int = 12, \n ) -> dict: \n",
      "40": "usertags: list = [], \n configure_timeout: int = (10) \n ) -> dict: \n",
      "41": "usertags: list = [], \n configure_timeout: int = [], \n ) -> dict: \n",
      "42": "usertags: list = [], \n configure_timeout: int = 5) -> dict: \n",
      "43": "usertags: list = [], \n configure_timeout: int = 1 \n ) -> dict: \n",
      "44": "usertags: list = [], \n configure_timeout: int = 7, \n ) -> dict: \n",
      "45": "usertags: list = [], \n configure_timeout: int = 15 \n ) -> dict: \n",
      "46": "usertags: list = [], \n configure_timeout: int = 8) -> dict: \n",
      "47": "usertags: list = [], \n configure_timeout: int = 14, \n ) -> dict: \n",
      "48": "usertags: list = [], \n configure_timeout: int = 7) -> dict: \n",
      "49": "usertags: list = [], \n configure_timeout: int = int(str), \n ) -> dict: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = None,\n    ) -> None:\n",
    "target_code": "        should_archive: bool = True,\n        extra_data: Optional[Dict] = None,\n        dispatch_to: Optional[List[str]] = None,\n    ) -> None:\n",
    "warning_line": "        dispatch_to: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dispatch_to is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 30,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PUNCH-Cyber/stoq",
    "source_filename": "stoq/data_classes.py",
    "target_filename": "stoq/data_classes.py",
    "source_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c^",
    "target_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c",
    "predictions": [
      "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "1": "should_archive: bool = True, \n extra_data: Dict, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "2": "should_archive: bool = True, \n extra_data: Dict = False, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "3": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: <IND>",
      "4": "should_archive: bool = False, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "5": "should_archive: bool = True, <IND> extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "6": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, <IND> dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "7": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, <IND> ) -> None: \n",
      "8": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: <DED>",
      "9": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, <DED> dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "10": "should_archive: bool = True, <DED> extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "11": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, <DED> ) -> None: \n",
      "12": "should_archive: bool = True, \n extra_data: Dict = True, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "13": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str], None] = None, \n ) -> None: \n",
      "14": "should_archive: bool = True, \n extra_data: Optional[Dict], \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "15": "should_archive: bool = True, \n extra_data: Optional[Dict, None] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "16": "should_archive: bool = True, \n extra_data: Optional[dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "17": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ): \n",
      "18": "shouldn_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "19": "ought_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "20": "should_archive: Optional[bool] = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "21": "should_archive: bool = True, <DED> extra_data: Dict, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "22": "should_archive: bool = True, \n extra_data: Optional[Dict[str]] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "23": "should_archive: bool = False, \n extra_data: Dict, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "24": "should_archive: bool = True, \n extra_data: Dict = False, \n dispatch_to: List[str] = False, \n ) -> None: \n",
      "25": "should_archive: bool = False, \n extra_data: Dict = False, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "26": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n callback: Optional[List[str]] = None, \n ) -> None: \n",
      "27": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n send_to: Optional[List[str]] = None, \n ) -> None: \n",
      "28": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n return dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "29": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "30": "should_archive: bool = True, \n extra_data: Dict = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "31": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None) -> None: \n",
      "32": "should_archive: bool = True, \n extra_data: bool = False, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "33": "should_archive: bool = True, \n additional_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "34": "should_archive: bool = True, <IND> extra_data: Dict, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "35": "should_archive: bool = True, \n extra_data: Dict, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: <IND>",
      "36": "should_archive: bool = True, \n extra_data: Dict = False, \n dispatch_to: List[str] = (), \n ) -> None: \n",
      "37": "should_archive: bool = True, \n extra_data: Dict, \n dispatch_to: List[str] = [], \n ) -> None: \n",
      "38": "should_archive: bool = True, \n extra_data: Dict, \n dispatch_to: Optional[List[str], None] = None, \n ) -> None: \n",
      "39": "should_archive: bool = True, \n extra_data: Dict = False, <IND> dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "40": "should_archive: bool = True, \n extra_data: Dict = False, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: <IND>",
      "41": "should_archive: bool = True, <DED> extra_data: Dict = False, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "42": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: List[str] = None, \n ) -> None: \n",
      "43": "should_archive: bool = True, <IND> extra_data: Dict = False, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "44": "should_archive: bool = True, \n extra_data: None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "45": "should_archive: bool = True, \n extra_data: Dict, \n dispatch_to: List[str] = (), \n ) -> None: \n",
      "46": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n )) -> None: \n",
      "47": "should_archive: bool = True, \n extra_data: Dict, <IND> dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "48": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n 1) -> None: \n",
      "49": "should_archive: bool = True, \n extra_data: Dict, \n dispatch_to: Optional[List[str]] = None, <IND> ) -> None: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n    <IND>",
    "target_code": "                     https: bool = False,\n                     ssl_key: Optional[str] = None,\n                     ssl_cert: Optional[str] = None) -> None:\n    <IND>",
    "warning_line": "                     ssl_cert: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " ssl_cert is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 89,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/utils/alexa/server.py",
    "target_filename": "deeppavlov/utils/alexa/server.py",
    "source_changeid": "0f32759c67ea961737a6538fd37426f564bae925^",
    "target_changeid": "0f32759c67ea961737a6538fd37426f564bae925",
    "predictions": [
      "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "1": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "2": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n \n",
      "3": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <IND> <IND>",
      "4": "https: bool = False, <IND> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "5": "https: bool = False, <DED> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "6": "https: bool = True, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "7": "https: bool = False, \n ssl_key: Optional[str] = None, <IND> ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "8": "https: bool = False, \n ssl_key: Optional[str] = None, <DED> ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "9": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <DED> <IND>",
      "10": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None \n ) -> None: \n <IND>",
      "11": "https: bool = False, \n str_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "12": "https: bool = False, \n ssl_key: typing.Optional[str] = None, \n ssl_cert: typing.Optional[str] = None) -> None: \n <IND>",
      "13": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> ssl_cert: Optional[str] = None \n",
      "14": "https: bool = Truese, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "15": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None <IND> ) -> None: \n <IND>",
      "16": "https: Optional[bool] = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "17": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None <DED> ) -> None: \n <IND>",
      "18": "https: bool = False, \n ssl_key: option.Optional[str] = None, \n ssl_cert: option.Optional[str] = None) -> None: \n <IND>",
      "19": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> assert str is not None \n ssl_cert: Optional[str] = None \n",
      "20": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> ssl_key: Optional[str] = None \n",
      "21": "https: bool = False, \n ssl_key: option.str = None, \n ssl_cert: option.str = None) -> None: \n <IND>",
      "22": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None, \n ) -> None: \n <IND>",
      "23": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> bool = False \n",
      "24": "https: bool = False, \n assert bool is not None, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "25": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None): \n <IND>",
      "26": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: optional[str] = None) -> None: \n <IND>",
      "27": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> assert ssl_cert is not None \n ssl_cert: Optional[str] = None \n",
      "28": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <IND> <DED>",
      "29": "https: bool = False, <IND> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "30": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None \n ) -> None: \n <IND>",
      "31": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> ssl_cert: Optional[str] = None \n ) -> None: \n <IND>",
      "32": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> ssl_key: Optional[str] = None \n ssl_cert: Optional[str] = None \n",
      "33": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <IND> \n",
      "34": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <DED> \n <IND>",
      "35": "https: bool = False, <DED> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "36": "https: bool = False, \n ssl_key: Optional[str] = None, <IND> ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "37": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> else: \n",
      "38": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> if bool is None: \n",
      "39": "https: bool = False, \n ssl_key: Optional[str] = None, <DED> ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "40": "https: bool = False, \n ssl_key_str: Optional[str] = None, \n ssl_cert_str_str_str_str_str] = None) -> None: \n <IND>",
      "41": "https: bool = True, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "42": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> if bool = True",
      "43": "https: bool = False, \n assert ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "44": "https: bool = False, \n ssl_key_str: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "45": "https: bool = False, <IND> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n \n",
      "46": "https: bool = False, \n self.ssl_key: Optional[str] = None, \n self.ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "47": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> ssl_context: Optional[str] = None \n",
      "48": "https: bool = False, \n ssl_key_str: Optional[str] = None, \n ssl_cert_str_str_str_str_str_str] = None) -> None: \n <IND>",
      "49": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND> str: Optional[str] = None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def message(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 332,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target) \n",
      "1": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, tags) \n",
      "2": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, message) \n",
      "3": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, message) \n",
      "4": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message) \n",
      "5": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message) \n",
      "6": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(target) \n",
      "7": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, messages) \n",
      "8": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(message) \n",
      "9": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(target, tags) \n",
      "10": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(notice) \n",
      "11": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, message, tags) \n",
      "12": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags)) \n",
      "13": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, messages) \n",
      "14": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= } } ): \n <IND> self._add_line(target) \n",
      "15": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, messages) \n",
      "16": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._line.notice(target, message) \n",
      "17": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags) \n",
      "18": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(mock) \n",
      "19": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message)) \n",
      "20": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags)) \n",
      "21": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.message.notice(target, message) \n",
      "22": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, tag) \n",
      "23": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, message) \n",
      "24": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line.notice(target, message) \n",
      "25": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, messages.notice(Message)) \n",
      "26": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, tags) \n",
      "27": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self.lines.notice(target, message) \n",
      "28": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.line.notice(target, message) \n",
      "29": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(line) \n",
      "30": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= } } ): \n <IND> self._add_line(target, tags) \n",
      "31": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(target, message) \n",
      "32": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message) \n",
      "33": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= } } ): \n <IND> self.lines.notice(target, message) \n",
      "34": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.notice(target, message) \n",
      "35": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message, tags) \n",
      "36": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, messages) \n",
      "37": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, messages)) \n",
      "38": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.notice(target, message)) \n",
      "39": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n",
      "40": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(message, tags) \n",
      "41": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, tags) \n",
      "42": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target) \n",
      "43": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(notice(target, tags)) \n",
      "44": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.notice(target, message, tags)) \n",
      "45": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(cell) \n",
      "46": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(utils.irc.notice(target, message) \n",
      "47": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message)) \n",
      "48": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message)) \n",
      "49": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(target, messages) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
    "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
    "warning_line": "        labels: typing.Iterable[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 476,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "1": "choices: typing.Iterable, \n labels: typing.Optional[typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "2": "choices: typing.Iterable, \n labels: typing.Iterable[str] = [], \n *, \n error: typing.Optional[str] = None \n ): \n",
      "3": "choices: typing.Iterable, \n labels: typing.Iterable[str], \n *, \n error: typing.Optional[str] = None \n ): \n",
      "4": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: str = None \n ): \n",
      "5": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str]] = None \n ): \n",
      "6": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None <IND> ): \n",
      "7": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, <IND> error: typing.Optional[str] = None \n ): \n",
      "8": "choices: typing.Iterable, \n labels: typing.Iterable[str] = (), \n *, \n error: typing.Optional[str] = None \n ): \n",
      "9": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None <DED> ): \n",
      "10": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): <IND>",
      "11": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ) -> None: \n",
      "12": "choices: typing.Iterable, <IND> labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "13": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, <DED> error: typing.Optional[str] = None \n ): \n",
      "14": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None \n *, \n error: typing.Optional[str] = None \n ): \n",
      "15": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str]] \n ): \n",
      "16": "choices: typing.Iterable, <DED> labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "17": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str], \n *, \n error: typing.Optional[str]] = None \n ): \n",
      "18": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, <IND> *, \n error: typing.Optional[str] = None \n ): \n",
      "19": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): <DED>",
      "20": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, <DED> *, \n error: typing.Optional[str] = None \n ): \n",
      "21": "choices: typing.Iterable, \n labels: typing.Iterable[str] = \"\", \n *, \n error: typing.Optional[str] = None \n ): \n",
      "22": "choices: typing.Iterable, \n labels: typing.Iterable[str] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "23": "choices: typing.Iterable, \n labels: typing.Iterable[str] = [] \n *, \n error: typing.Optional[str] = None \n ): \n",
      "24": "choices: typing.Iterable, \n labels: typing.Optional[typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str]] = None \n ): \n",
      "25": "choices: typing.Iterable, \n labels: typing.Iterable[str, None] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "26": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str], \n *, \n error: typing.Optional[str] = None \n ): \n",
      "27": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n errors: typing.Optional[str] = None \n ): \n",
      "28": "choices: typing.Iterable, \n labels: typing.Iterable, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "29": "choices: typing.Iterable, \n labels: typing.Iterable[str] = \"\", \n *, \n error: typing.Optional[str] = \"\" \n ): \n",
      "30": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = [], \n *, \n error: typing.Optional[str] = None \n ): \n",
      "31": "choices: typing.Iterable, \n labels: typing.Internal[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "32": "choices: typing.Iterable, \n labels: typing.Args[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "33": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = False, \n *, \n error: typing.Optional[str] = False \n ): \n",
      "34": "choices: typing.Iterable, \n labels: typing.Str(typing.Iterable[str]) = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "35": "choices: typing.Iterable, \n labels = typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "36": "choices: typing.Iterable, \n labels: typing.Iterable[str] = False, \n *, \n error: typing.Optional[str] = False \n ): \n",
      "37": "choices: typing.Iterable, \n labels: typing.Optional[ typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "38": "choices: typing.Iterable, \n labels: typing.Argument[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "39": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] \n ): \n",
      "40": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]], \n *, \n error: typing.Optional[str] = None \n ): \n",
      "41": "choices: typing.Iterable, \n names: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "42": "choices: typing.Iterable, \n labels: typing.Str(typing.Iterable[str]), \n *, \n error: typing.Optional[str] = None \n ): \n",
      "43": "choices: typing.Iterable, \n labels: typing.Optional[typing.Optional[typing.Iterable[str]] = None, \n *, \n error: str = None \n ): \n",
      "44": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: str = False \n ): \n",
      "45": "choices: typing.Iterable, \n labels: typing.Iterable[str] = (0), \n *, \n error: typing.Optional[str] = None \n ): \n",
      "46": "choices: typing.Iterable, \n labels: typing.Iterable[str], \n *, \n error: typing.Optional[str]] = None \n ): \n",
      "47": "choices: typing.Iterable, \n labels: typing.False, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "48": "choices: typing.Iterable, \n labels: typing.Optional[typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str]] \n ): \n",
      "49": "choices: typing.Iterable, \n labels: typing.Optional[typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None <IND> ): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "target_code": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_line": "def notice(target: str, message: str, tags: dict=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n",
      "1": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n",
      "2": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n",
      "3": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "4": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n",
      "5": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "6": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND>",
      "7": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "8": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n",
      "9": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine': \n",
      "10": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine': \n <IND>",
      "11": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND>",
      "12": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine: \n",
      "13": "\n <DED> def notice(target: str, message: str, <IND> tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= {",
      "14": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n \n",
      "15": "\n <DED> def notice(target: str, message: str, \n tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= {",
      "16": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= {",
      "17": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine: \n",
      "18": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine': \n \n",
      "19": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine: \n",
      "20": "\n <DED> def notice(target: str, message: str, <IND> tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } \n",
      "21": "\n <DED> def notice(target: str, message: str, <DED> tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= {",
      "22": "<DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n",
      "23": "\n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n",
      "24": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n",
      "25": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n",
      "26": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } \n",
      "27": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n \n",
      "28": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "29": "\n <DED> def notice(target: str, message: str, \n tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } \n",
      "30": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n",
      "31": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= ^ } \n",
      "32": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <DED> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n",
      "33": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str] = { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n",
      "34": "\n \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= {",
      "35": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } <IND> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "36": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n",
      "37": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "38": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str], tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.",
      "39": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "40": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "41": "\n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "42": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.striped: \n",
      "43": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> ) -> 'utils.irc.",
      "44": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str] = { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "45": "\n <DED> def notice(target: str, message: str, <DED> tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } \n",
      "46": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n",
      "47": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } <IND> ) -> 'utils.irc.IRCParsedLine': \n",
      "48": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= ^ } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.",
      "49": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_line": "                                       immutable_features: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 677,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SeldonIO/alibi",
    "source_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "target_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60^",
    "target_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "predictions": [
      "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "1": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "2": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = (), \n diverse=False) -> List[np.ndarray]: \n",
      "3": "category_map: Dict[int, List[str]], \n immutable_features: List[List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "4": "category_map: Dict[int, List[str], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "5": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: <IND>",
      "6": "category_map: Dict[int, List[str]], <IND> immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "7": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, <IND> diverse=False) -> List[np.ndarray]: \n",
      "8": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n divers=False) -> List[np.ndarray]: \n",
      "9": "category_map: Dict[int, List[str]], <DED> immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "10": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = \"\", \n diverse=False) -> List[np.ndarray]: \n",
      "11": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: <DED>",
      "12": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, <DED> diverse=False) -> List[np.ndarray]: \n",
      "13": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diversity=False) -> List[np.ndarray]: \n",
      "14": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "15": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [] \n diverse=False) -> List[np.ndarray]: \n",
      "16": "category_map: Dict[int, List[str]], \n immutable_features: List[int, List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "17": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[int]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "18": "category_map: Dict[int, List[str]], \n immutable_features: List[str], \n diverse=False) -> List[np.ndarray]: \n",
      "19": "category_map: Dict[int, List[str]], \n imobilize_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "20": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = 0, \n diverse=False) -> List[np.ndarray]: \n",
      "21": "category_map: Dict[int, List[str]], \n mutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "22": "category_map: Dict[int, List[str]], \n immutable_features: List[List[str]] = (), \n diverse=False) -> List[np.ndarray]: \n",
      "23": "category_map: Dict[int, List[str]], \n immutable_features: List[Str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "24": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n varied=False) -> List[np.ndarray]: \n",
      "25": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diferite=False) -> List[np.ndarray]: \n",
      "26": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=\"False) -> List[np.ndarray]: \n",
      "27": "category_map: Dict[int, List[str]], \n immutable_features=List[str], \n diverse=False) -> List[np.ndarray]: \n",
      "28": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "29": "category_map: Dict[int, List[str]], \n immutable_features: List[str] | None = None, \n diverse=False) -> List[np.ndarray]: \n",
      "30": "category_map: Dict[int, List[str]], \n immutable_features = List[str], \n diverse=False) -> List[np.ndarray]: \n",
      "31": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], <IND> diverse=False) -> List[np.ndarray]: \n",
      "32": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n divers=False) -> List[np.ndarray]: \n",
      "33": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diversit\u00e9=False) -> List[np.ndarray]: \n",
      "34": "category_map: Dict[int, List[str]], \n immutable_features: list[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "35": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: <IND>",
      "36": "category_map: Dict[int, List[str]], \n immutable_features: List[str, None] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "37": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n vielf\u00e4ltig=False) -> List[np.ndarray]: \n",
      "38": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diversity=False) -> List[np.ndarray]: \n",
      "39": "category_map: Dict[int, List[str]], \n immutable_features: List[[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "40": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], <DED> diverse=False) -> List[np.ndarray]: \n",
      "41": "category_map: Dict[int, List[str]], \n imobilize_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "42": "category_map: Dict[int, List[str], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "43": "category_map: Dict[int, List[str]], \n immutable_features: List[int] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "44": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: <DED>",
      "45": "category_map: Dict[int, List[str]], <IND> immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "46": "category_map: Dict[int, List[str]], \n immutable_features: List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "47": "category_map: Dict[int, List[str]], <DED> immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "48": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray], \n",
      "49": "category_map: Dict[int, List[str]], \n immutable_features: List[str], \n diverse=False) -> List[np.ndarray]: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>if value is not None:\n            <IND>value = str(value)\n        <DED>self._properties[\"statementByteBudget\"] = value\n\n",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_line": "            value = str(value)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 211,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/job/query.py",
    "target_filename": "google/cloud/bigquery/job/query.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "1": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "2": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(int) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "3": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "4": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "5": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "6": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "7": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(int) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "8": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "9": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "10": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "11": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "12": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "13": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "14": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = str(int) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "15": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(int, str) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "16": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "17": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else Value: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "18": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is not None: \n <IND> value = str(int) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "19": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(value) \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "20": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else Value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "21": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "22": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "23": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None or None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "24": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None other than None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "25": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "26": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "27": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(int) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "28": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "29": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(int, str) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "30": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "31": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = str(int, str) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "32": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "33": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "34": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "35": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> return str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "36": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else Value: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "37": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "38": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is not None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "39": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "40": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None and value is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "41": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value = str(int, str) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "42": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else False: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "43": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "44": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "45": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None else value \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "46": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else value <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "47": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "48": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "49": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def filter(self, predicate: Predicate = None) -> t.List[T]:\n        <IND>",
    "target_code": "\n    <DED>def filter(self, predicate: Predicate) -> t.List[T]:\n        <IND>",
    "warning_line": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pcah/python-clean-architecture",
    "source_filename": "dharma/domain/repos/in_memory.py",
    "target_filename": "dharma/domain/repos/in_memory.py",
    "source_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e^",
    "target_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "predictions": [
      "\n <DED> def filter(self, predicate: Optional[List] = None) -> t.List[T]: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def filter(self, predicate: Optional[List] = None) -> t.List[T]: \n <IND>",
      "1": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "2": "\n <DED> def filter(self, predicate: Optional[T] = None) -> t.List[T]: \n <IND>",
      "3": "\n <DED> def filter(self, predicate: Optional[False] = None) -> t.List[T]: \n <IND>",
      "4": "\n <DED> def filter(self, predicate: Optional[Pedicate] = None) -> t.List[T]: \n <IND>",
      "5": "\n <DED> def filter(self, predicate: Optional[None] = None) -> t.List[T]: \n <IND>",
      "6": "\n <DED> def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]: \n <IND>",
      "7": "\n <DED> def filter(self, predicate: Optional[Secret] = None) -> t.List[T]: \n <IND>",
      "8": "\n <DED> def filter(self, predicate: Optional[Peer] = None) -> t.List[T]: \n <IND>",
      "9": "\n <DED> def filter(self, predicate: Optional[Pictate] = None) -> t.List[T]: \n <IND>",
      "10": "\n <DED> def filter(self, predicate: Optional[Sequence] = None) -> t.List[T]: \n <IND>",
      "11": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]: \n <IND>",
      "12": "\n <DED> def filter(self, predicate: Optional[Pied] = None) -> t.List[T]: \n <IND>",
      "13": "\n <DED> def filter(self, predicate: Optional[Optional[str]] = None) -> t.List[T]: \n <IND>",
      "14": "\n <DED> def filter(self, predicate: Optional[Class] = None) -> t.List[T]: \n <IND>",
      "15": "\n <DED> def filter(self, predicate: Optional[Optional[List]] = None) -> t.List[T]: \n <IND>",
      "16": "\n <DED> def filter(self, predicate = None) -> t.List[T]: \n <IND>",
      "17": "\n <DED> def filter(self, predicate: Optional[Optional[\"Predicate\"]] = None) -> t.List[T]: \n <IND>",
      "18": "\n <DED> def filter(self, predicate: Optional[Placeholder] = None) -> t.List[T]: \n <IND>",
      "19": "\n <DED> def filter(self, predicate: Optional[Type] = None) -> t.List[T]: \n <IND>",
      "20": "\n <DED> def filter(self, predicate: Optional[List[T]] = None) -> t.List[T]: \n <IND>",
      "21": "\n <DED> def filter(self, predicate: Optional[FileType] = None) -> t.List[T]: \n <IND>",
      "22": "\n <DED> def filter(self, predicate: Optional[P\"] = None) -> t.List[T]: \n <IND>",
      "23": "\n <DED> def filter(self, predicate: Optional[Pending] = None) -> t.List[T]: \n <IND>",
      "24": "\n <DED> def filter(self, predicate: Optional[List] = None \n ) -> t.List[T]: \n <IND>",
      "25": "\n <DED> def filter(self, predicate: Optional[Picture] = None) -> t.List[T]: \n <IND>",
      "26": "\n <DED> def filter(self, predicate: Optional[Kernel] = None) -> t.List[T]: \n <IND>",
      "27": "\n <DED> def filter(self, predicate: Optional[Picate] = None) -> t.List[T]: \n <IND>",
      "28": "\n <DED> def filter(self, predicate: Optional[Failed Predicate] = None) -> t.List[T]: \n <IND>",
      "29": "\n <DED> def filter(self, predicate: Optional[Equal] = None) -> t.List[T]: \n <IND>",
      "30": "\n <DED> def filter(self, predicate: Optional[Instance] = None) -> t.List[T]: \n <IND>",
      "31": "\n <DED> def filter(self, predicate: Optional[Context] = None) -> t.List[T]: \n <IND>",
      "32": "\n <DED> def filter(self, predicate, Optional[T] = None) -> t.List[T]: \n <IND>",
      "33": "\n <DED> def filter(self, predicate: Optional[Math] = None) -> t.List[T]: \n <IND>",
      "34": "\n <DED> def filter(self, predicate: Optional[str] = None) -> t.List[T]: \n <IND>",
      "35": "\n <DED> def filter(self, predicate: Optional[Pict] = None) -> t.List[T]: \n <IND>",
      "36": "\n <DED> def filter(self, predicate: Optional[Pictim] = None) -> t.List[T]: \n <IND>",
      "37": "\n <DED> def filter(self, predicate: Optional[Placer] = None) -> t.List[T]: \n <IND>",
      "38": "\n <IND> def filter(self, predicate: Optional[List] = None) -> t.List[T]: \n <IND>",
      "39": "\n <DED> def filter(self, predicate: Optional[T] = None \n ) -> t.List[T]: \n <IND>",
      "40": "\n <DED> def filter(self, predicate: Optional[Function] = None) -> t.List[T]: \n <IND>",
      "41": "\n <DED> def filter(self, predicate: Predicate) -> t.List[T]: \n <IND>",
      "42": "\n <DED> def filter(self) -> t.List[T]: \n <IND>",
      "43": "\n \n <DED> def filter(self, predicate: Optional[List] = None) -> t.List[T]: \n <IND>",
      "44": "\n <DED> def filter(self, predicate: Optional[options] = None) -> t.List[T]: \n <IND>",
      "45": "\n <DED> def filter(self, predicate: Optional[Address] = None) -> t.List[T]: \n <IND>",
      "46": "\n <DED> def filter(self, predicate: Optional[List] = None) -> t.List[T]: \n <DED>",
      "47": "\n <DED> def filter(self, predicate: Optional[Next] = None) -> t.List[T]: \n <IND>",
      "48": "\n <DED> def filter(self, predicate: Optional[List] = None) -> Optional[T]: \n <IND>",
      "49": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": true,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2315,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n"
    ],
    "correct": false,
    "top_five": {
      "0": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "1": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "2": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "3": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "4": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "5": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "6": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "7": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "8": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (\"\") \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "9": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "10": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "11": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "12": "timeout: Optional[float] = None, \n metadata: Optional[sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "13": "timeout: Optional[float] = None, \n metadata: Sequence[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "14": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "15": "timeout: Optional[float] = None, \n metadata: str = \"google_cloud_default\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "16": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "17": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = { } \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "18": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "19": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "20": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "21": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), <IND> gcp_conn_id: str = \"google_cloud_default\", \n",
      "22": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "23": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "24": "timeout: Optional[float] = None, <IND> metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "25": "timeout: Optional[float] = None, <DED> metadata: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "26": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "27": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), <DED> gcp_conn_id: str = \"google_cloud_default\", \n",
      "28": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = () \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "29": "timeout: Optional[float] = None, \n metadata=None: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "30": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <DED>",
      "31": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = true, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "32": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "33": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "34": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = \",\" \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "35": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "36": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = { } \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "37": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "38": "timeout: Optional[float] = None, \n metadata: () => Optional[Sequence[Tuple[str, str]]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "39": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]) = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "40": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "41": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "42": "timeout: Optional[float] = None, \n metadata: Snequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "43": "timeout: Optional[float] = None, \n metadata:Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "44": "timeout: Optional[float] = None, \n metadata: str = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "45": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "46": "timeout: Optional[float] = None, \n metadata: Optional[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "47": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = [], \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "48": "timeout: Optional[float] = None, \n metadata: str = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "49": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
    "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
    "warning_line": "                tmpdir_lock=None  # type: threading.Lock",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/command_line_tool.py",
    "target_filename": "cwltool/command_line_tool.py",
    "source_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c^",
    "target_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "predictions": [
      "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "1": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "2": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: typing.Lock \n ): # type: (...) -> None \n",
      "3": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <IND>",
      "4": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] <DED> ): # type: (...) -> None \n",
      "5": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = [] \n ): # type: (...) -> None \n",
      "6": "runtimeContext, # type: RuntimeContext \n tmpdir_lock: Optional[threading.Lock] = None \n ): # type: (...) -> None \n",
      "7": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: typing.Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "8": "runtimeContext, # type: RuntimeContext <IND> tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "9": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] <IND> ): # type: (...) -> None \n",
      "10": "runtimeContext, # type: RuntimeContext <DED> tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "11": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED> tmpdir_lock=None # type: Optional[threading.Lock] \n",
      "12": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED>",
      "13": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[Threading.Lock] \n ): # type: (...) -> None \n",
      "14": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "15": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "16": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = \"\" \n ): # type: (...) -> None \n",
      "17": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=none # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "18": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].Path: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "19": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].None \n ): # type: (...) -> None \n",
      "20": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = False # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "21": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=Any # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "22": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].Lock \n ): # type: (...) -> None \n",
      "23": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED> tmpdir_lock=None # type: Optional[threading.Lock] \n",
      "24": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED> tmpdir_lock = None \n",
      "25": "runtimeContext, # type: RuntimeContext \n tmpdir_lock ==None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "26": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None \n ): # type: (...) -> None \n",
      "27": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].Path = None \n ): # type: (...) -> None \n",
      "28": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n tmpdir_lock=None # type: Optional[threading.Lock] \n",
      "29": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].Tmpdir_lock] \n ): # type: (...) -> None \n",
      "30": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock].Sequence() \n ): # type: (...) -> None \n",
      "31": "runtimeContext, # type: Optional[RangetimeContext] \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "32": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = (None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "33": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: typing.Lock \n ): # type: (...) -> None \n",
      "34": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = [] # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "35": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = [] <DED> # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "36": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n if not tmpdir_lock: # type: Optional[threading.Lock]: \n",
      "37": "runtimeContext, # type: RuntimeContext \n tmpdir_lock =None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "38": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: Optional[threading.Lock] \n ): # type: (...) -> None <IND>",
      "39": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = NaNone # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "40": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=All # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "41": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: Optional[threading.Lock] <DED> ): # type: (...) -> None \n",
      "42": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED> tmpdir_lock=none # type: Optional[threading.Lock] \n",
      "43": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED> tmpdir_lock=None # type: Optional[threading.Lock] \n ) \n",
      "44": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Type[threading.Lock] \n ): # type: (...) -> None \n",
      "45": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED> <DED> tmpdir_lock=None # type: Optional[threading.Lock] \n",
      "46": "runtimeContext, # type: RuntimeContext <DED> tmpdir_lock = None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "47": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = None # type: Optional[threading.Lock] <IND> ): # type: (...) -> None \n",
      "48": "runtimeContext, # type: RuntimeContext \n tmpdir_lock = Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "49": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: option.Threading.Lock \n ): # type: (...) -> None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )\n",
    "target_code": "\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_line": "        string = _fmt(string)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " string is declared to have type `str` but is used as type `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 312,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libtcod/python-tcod",
    "source_filename": "tcod/console.py",
    "target_filename": "tcod/console.py",
    "source_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9^",
    "target_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "predictions": [
      "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte_string \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte_string \n ) \n",
      "1": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "2": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "3": "\n _fmt_string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string \n ) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string \n ) \n",
      "4": "\n str = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "5": "\n _fmt_string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string \n ) \n",
      "6": "\n string_bytes = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "7": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n",
      "8": "\n str = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "9": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "10": "\n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "11": "\n string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "12": "\n bytes = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes \n ) \n",
      "13": "\n _fmt.string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt.string \n ) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt.string \n ) \n",
      "14": "\n assert self.console_get_height_rect_fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "15": "\n fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, fmt \n ) \n",
      "16": "\n bytes = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "17": "\n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n",
      "18": "\n string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "19": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "20": "\n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.string \n ) \n",
      "21": "\n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "22": "\n string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "23": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt \n ) \n",
      "24": "\n fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, fmt) \n",
      "25": "\n _fmt.string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt.string \n ) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt.string) \n",
      "26": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "27": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n ) \n",
      "28": "\n var string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "29": "\n assert self.console_get_height_rect_fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "30": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt ) \n",
      "31": "\n _fmt.string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt.string \n ) \n",
      "32": "\n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.string \n ) \n",
      "33": "\n self.console_get_height_rect_fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "34": "\n string = fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "35": "\n _fmt_string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string \n ) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string <IND> ) \n",
      "36": "\n byte = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte \n ) \n",
      "37": "\n byte_string = fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte_string \n ) \n",
      "38": "\n byte = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "39": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt: \n ) \n",
      "40": "\n byte_string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "41": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt: \n",
      "42": "\n _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "43": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height,byte_string \n ) \n",
      "44": "\n _fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "45": "\n fmt = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, fmt) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, fmt: \n ) \n",
      "46": "\n string_bytes = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes \n ) \n",
      "47": "\n _fmt_string = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string \n ) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "48": "\n self.console_get_height_rect_fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "49": "\n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if type_type == SCALAR:\n        <IND>type_ = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "target_code": "    if type_type == SCALAR:\n        <IND>result_type = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "warning_line": "        type_ = query.ArrayQueryParameterType(sub_type, name=name)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "target_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "1": "if type_type == SCALAR: \n <IND> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "2": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "3": "if type_type == SCALAR: \n <IND> _type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> _type_ = query.ArrayQueryParameterType(sub_type, name=_name) \n <DED> elif type_type == STRUCT: \n",
      "4": "if type_type == SCALAR: \n <IND> type__ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type__type == STRUCT: \n",
      "5": "if type_type == SCALAR: \n <IND> _type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> _type_ = query.ArrayQueryParameterType(sub_type, name=_type) \n <DED> elif type_type == STRUCT: \n",
      "6": "if type_type == SCALAR: \n <IND> type__ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "7": "if type_type == SCALAR: \n <DED> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "8": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "9": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "10": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "11": "if type_type == SCALAR: \n <IND> str = sub_type \n <DED> elif str == ARRAY: \n <IND> str = query.ArrayQueryParameterType(sub_type, name= str) \n <DED> elif str == STRUCT: \n",
      "12": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "13": "if type_type == SCALAR: \n <IND> name = sub_type \n <DED> elif name == ARRAY: \n <IND> name = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif name_type == STRUCT: \n",
      "14": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == str(ARRAY): \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "15": "if type_type == SCALAR: \n <IND> type__ = sub_type \n <DED> elif type__ == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type__type == STRUCT: \n",
      "16": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == str(ARRAY): \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=str(name)) \n <DED> elif type_type == STRUCT: \n",
      "17": "if type_type == SCALAR: \n <IND> value_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> value_ = query.ArrayQueryParameterType(sub_type, name=value) \n <DED> elif value_type == STRUCT: \n",
      "18": "if type_type == SCALAR: \n <IND> input_type = sub_type \n <DED> elif input_type == ARRAY: \n <IND> input_type = query.ArrayQueryParameterType(sub_type, name= input_type) \n <DED> elif input_type == STRUCT: \n",
      "19": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "20": "if type_type == SCALAR: \n <IND> type__ = sub_type \n <DED> elif type__type == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type__type == STRUCT: \n",
      "21": "if type_type == SCALAR: \n <IND> if type_type == sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "22": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "23": "if type_type == SCALAR: \n <IND> _type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> _type = query.ArrayQueryParameterType(sub_type, name=_name) \n <DED> elif type_type == STRUCT: \n",
      "24": "if type_type == SCALAR: \n <IND> _type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> _type_ = query.ArrayQueryParameterType(sub_type, name=_name) \n <DED> elif type_type == STRUCT: \n",
      "25": "if type_type == SCALAR: \n <IND> type__ = sub_type \n <DED> elif sub_type == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type__type == STRUCT: \n",
      "26": "if type_type == SCALAR: \n <IND> name = sub_type \n <DED> elif name == ARRAY: \n <IND> name = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "27": "if type_type == SCALAR: \n <IND> type_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_type = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "28": "if type_type == SCALAR: \n <IND> elif sub_type == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "29": "if type_type == SCALAR: \n <IND> type_ = sub_type \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "30": "if type_type == SCALAR: \n <IND> sum_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> sum_type = query.ArrayQueryParameterType(sub_type, name=value) \n <DED> elif type_type == STRUCT: \n",
      "31": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "32": "if type_type == SCALAR: \n <IND> elif sub_type == str(ARRAY): \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=str(name)) \n <DED> elif type_type == STRUCT: \n",
      "33": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "34": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "35": "if type_type == SCALAR: \n <IND> if type_type == Sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "36": "if type_type == SCALAR: \n <IND> def type_ = sub_type \n <DED> elif def type_type == ARRAY: \n <IND> def type_ = query.ArrayQueryParameterType(sub_type, name=f\"\") \n <DED> elif def type_type == STRUCT: \n",
      "37": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type__ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "38": "if type_type == SCALAR: \n <IND> value_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> value_ = query.ArrayQueryParameterType(sub_type, name=value) \n <DED> elif type_type == STRUCT: \n",
      "39": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=type) \n <DED> elif type_type == STRUCT: \n",
      "40": "if type_type == SCALAR: \n <IND> sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "41": "if type_type == SCALAR: \n <IND> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=str(name)) \n <DED> elif type_type == STRUCT: \n",
      "42": "if type_type == SCALAR: \n <IND> if type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "43": "if type_type == SCALAR: \n <IND> elif sub_type == str: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=str(name)) \n <DED> elif type_type == STRUCT: \n",
      "44": "if type_type == SCALAR: \n <IND> elif sub_type == str: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=str) \n <DED> elif type_type == STRUCT: \n",
      "45": "if type_type == SCALAR: \n <IND> str = sub_type \n <DED> elif str == ARRAY: \n <IND> str = query.ArrayQueryParameterType(sub_type, name=str) \n <DED> elif str == STRUCT: \n",
      "46": "if type_type == SCALAR: \n <IND> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=type) \n <DED> elif type_type == STRUCT: \n",
      "47": "if type_type == SCALAR: \n <IND> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "48": "if type_type == SCALAR: \n <IND> elif sub_type == str(ARRAY): \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "49": "if type_type == SCALAR: \n <IND> elif sub_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_line": "            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 342,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "gitpython-developers/GitPython",
    "source_filename": "git/objects/submodule/base.py",
    "target_filename": "git/objects/submodule/base.py",
    "source_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f^",
    "target_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "predictions": [
      "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n"
    ],
    "correct": false,
    "top_five": {
      "0": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "1": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "2": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, <IND> clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "3": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "4": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "5": "branch: Union[str, None] = None, no_checkout: bool = True, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "6": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, <DED> clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "7": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "8": "branch: Union[str, None]] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "9": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ): 'Submodule': \n",
      "10": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "11": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None <IND> ) -> 'Submodule': \n",
      "12": "branch: Union[str, None], None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "13": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "14": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None <DED> ) -> 'Submodule': \n",
      "15": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': <IND>",
      "16": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD]], None] = None \n ) -> 'Submodule': \n",
      "17": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None]] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "18": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <IND> env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "19": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': <DED>",
      "20": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <DED> env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "21": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "22": "branch: Union[str, None] = None, no_checkout: bool = True, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "23": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD]], None]] = None \n ) -> 'Submodule': \n",
      "24": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "25": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ): \n",
      "26": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], Optional[TBD]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "27": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "28": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], Optional[TBD]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "29": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "30": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <IND> env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "31": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[str, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "32": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <DED> env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "33": "branch: Union[str, None] = None, no_checkout: bool = True, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, <IND> clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "34": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, <DED> clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "35": "branch: Union[str, None], No_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "36": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "37": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "38": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], \n env: Optional[Mapping[str, str]] = None, <IND> clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "39": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None <IND> ) -> 'Submodule': \n",
      "40": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "41": "branch: Union[str, None] = None, no_checkout: bool = True, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "42": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "43": "branch: Union[str, None]] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "44": "branch: Union[str, None] = None, no_checkout: bool = True, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "45": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ): 'Submodule': \n",
      "46": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "47": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None <DED> ) -> 'Submodule': \n",
      "48": "branches: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "49": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, \n clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        key: str = \"\",\n        algorithms: List[str] = None,\n        options: Dict = None,\n        **kwargs,\n",
    "target_code": "        key: str = \"\",\n        algorithms: Optional[List[str]] = None,\n        options: Optional[Dict] = None,\n        **kwargs,\n",
    "warning_line": "        algorithms: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " algorithms is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 135,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jpadilla/pyjwt",
    "source_filename": "jwt/api_jws.py",
    "target_filename": "jwt/api_jws.py",
    "source_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235^",
    "target_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235",
    "predictions": [
      "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "1": "key: str = \"\", \n algorithm: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "2": "key: str = \"\", <IND> algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "3": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, <IND>",
      "4": "key: str = \"\", \n algorithms: Optional[List[str], List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "5": "key: str = \"\", <DED> algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "6": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, <IND> **kwargs, \n",
      "7": "key: str = \"\", \n algorithms: Optional[List[str]] = None, <IND> options: Optional[Dict] = None, \n **kwargs, \n",
      "8": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, <DED> **kwargs, \n",
      "9": "key: str = \"\", \n algorithms: Optional[List[str]] = None, <DED> options: Optional[Dict] = None, \n **kwargs, \n",
      "10": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n ): \n",
      "11": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, <DED>",
      "12": "key: str = \"\", \n algorithms: List[str] = [], \n options: Optional[Dict] = None, \n **kwargs, \n",
      "13": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n ) -> None: \n",
      "14": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[dict] = None, \n **kwargs, \n",
      "15": "key: str = \"\", \n algorithms: Optional[List[str], Optional[List[str]]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "16": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n ) -> List[str]: \n",
      "17": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n globals: Optional[List[str]] = None, \n",
      "18": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n exports: Optional[List[str]] = None, \n",
      "19": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n type: Optional[List[str]] = None, \n",
      "20": "key: str = \"\", \n algorithms: Optional[List[str]] | None = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "21": "key: str = \"\", \n algorithms: Optional[List[str]] = \"\", \n options: Optional[Dict] = None, \n **kwargs, \n",
      "22": "key: str = \"\", \n algorithms: Optional[List[str], None] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "23": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n algorithms: Optional[List[str]] = None, \n",
      "24": "key: str = \"\", \n algorithms: Optional[List[str]]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "25": "key: str = \"\", \n algorithms: Optional[List[str]] = [], \n options: Optional[Dict] = None, \n **kwargs, \n",
      "26": "key: str = \"\", \n algorithms: Optional[List[str], Optional[None]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "27": "key: str = \"\", \n algorithm_str: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "28": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n algorithm: Optional[List[str]] = None, \n",
      "29": "key: str = \"\", \n algorithms: Optional[List[str]][0] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "30": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict]] = None, \n **kwargs, \n",
      "31": "key: str = \"\", \n algorithms: Optional[List[str]] = (), \n options: Optional[Dict] = None, \n **kwargs, \n",
      "32": "key: str = \"\", \n algorithms: Optional[List[str, None]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "33": "key: str = \"\", \n algorithm_parameters: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "34": "key: str = \"\", \n algorithms: List[str] = (), \n options: Optional[Dict] = None, \n **kwargs, \n",
      "35": "key: str = \"\", \n algorithm_types: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "36": "key: str = \"\", \n algorithm_list: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "37": "key: str = \"\", \n algorithms: Optional[List[str], None]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "38": "key: str = \"\", \n algorithms: List[str, None] = [], \n options: Optional[Dict] = None, \n **kwargs, \n",
      "39": "key: str = \"\", \n algorithms: typing.Optional[List[str]] = None, \n options: Dict = None, \n **kwargs, \n",
      "40": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n state: Optional[List[str]] = None, \n",
      "41": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n ) -> Optional[List[str]] = None, \n",
      "42": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n ) -> Optional[List[str]]: \n",
      "43": "key: str = \"\", \n algorithms: Optional[Mapping[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "44": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Dict = None, \n **kwargs, \n",
      "45": "key: str = \"\", \n algorithms = Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "46": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n *kwargs: Optional[List[str]] = None, \n",
      "47": "key: str = \"\", \n algorithms: List[str] = \"\", \n options: Optional[Dict] = None, \n **kwargs, \n",
      "48": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n choices: Optional[Dict] = None, \n **kwargs, \n",
      "49": "key: str = \"\", \n algorithms: List[str], \n options: Optional[Dict] = None, \n **kwargs, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, comparable, *, error: str = None):\n        <IND>self.comparable = comparable\n",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        <IND>self.comparable = comparable\n",
    "warning_line": "    def __init__(self, comparable, *, error: str = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 339,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "1": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "2": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "3": "\n def __init__(self, comparable, *, error: Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "4": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "5": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n \n self.comparable = comparable \n",
      "6": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <DED> self.comparable = comparable \n",
      "7": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None <DED> ): \n <IND> self.comparable = comparable \n",
      "8": "\n def __init__( <DED> self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "9": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None <IND> ): \n <IND> self.comparable = comparable \n",
      "10": "<DED> def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "11": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "12": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None <IND> ): \n <IND> self.comparable = comparable \n",
      "13": "<IND> def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "14": "\n def __init__( <IND> self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "15": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "16": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "17": "\n def __init__(self, comparable, *, error: Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "18": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): <IND> <IND> self.comparable = comparable \n",
      "19": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable <IND>",
      "20": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): <DED> <IND> self.comparable = comparable \n",
      "21": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n \n self.comparable = comparable \n",
      "22": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "23": "\n def __init__( <DED> self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "24": "\n def __init__(self, comparable, *, error): \n <IND> self.comparable = comparable \n",
      "25": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None <IND> ) -> None: \n <IND> self.comparable = comparable \n",
      "26": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None <DED> ) -> None: \n <IND> self.comparable = comparable \n",
      "27": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n <DED> self.comparable = comparable \n",
      "28": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None <IND> ) -> None: \n <IND> self.comparable = comparable \n",
      "29": "\n def __init__( <IND> self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "30": "\n def __init__(self, comparable, *, error, Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "31": "\n def __init__(self, comparable, *, error: Type[str] = None): \n <IND> self.comparable = comparable \n",
      "32": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None <IND> ): \n <IND> self.comparable = comparable \n",
      "33": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None <DED> ): \n <IND> self.comparable = comparable \n",
      "34": "\n def __init__( <IND> self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "35": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable <DED> \n",
      "36": "\n def __init__( <DED> self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "37": "<DED> def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "38": "\n def __init__(self, comparable, *, error: Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "39": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable <DED>",
      "40": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None \n <IND> self.comparable = comparable \n",
      "41": "<IND> def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "42": "\n def __init__(self, comparable: Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "43": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable <IND>",
      "44": "\n def __init__(self, comparable): \n <IND> self.comparable = comparable \n",
      "45": "\n def __init__(self, comparable, *, error: str): \n <IND> self.comparable = comparable \n",
      "46": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "47": "\n def __init__(self, comparable, *, error : typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "48": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None \n ): \n <DED> self.comparable = comparable \n",
      "49": "\n def __init__(self, comparable, *, errors: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        <IND>self.db_user = db_user\n",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        <IND>self.db_user = db_user\n",
    "warning_line": "    def __init__(self, db_user, instance=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tribe29/checkmk",
    "source_filename": "agents/plugins/mk_postgres.py",
    "target_filename": "agents/plugins/mk_postgres.py",
    "source_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1^",
    "target_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "predictions": [
      "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "1": "def __init__(self, db_user, instance=None): \n # type: (Str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "2": "def __init__(self, db_user, instance=None): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "3": "def __init__( \n self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "4": "def __init__( <DED> self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "5": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "6": "def __init__(self, db_user, instance=None) -> None: \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "7": "def __init__( <IND> self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "8": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict], None) -> None \n <IND> self.db_user = db_user \n",
      "9": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <DED> self.db_user = db_user \n",
      "10": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n \n self.db_user = db_user \n",
      "11": "def __init__( \n self, db_user, instance=None): \n # type: (Str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "12": "def __init__(self, db_user, instance): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "13": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict, None]) -> None \n <IND> self.db_user = db_user \n",
      "14": "def __init__(self, db_user, instance=None) -> None: \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "15": "def __init__(self, db_user, instance=None): \n # type: Optional[Dict[str, Dict]] -> None \n <IND> self.db_user = db_user \n",
      "16": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[dict]) -> None \n <IND> self.db_user = db_user \n",
      "17": "def __init__(self, db_user, instance=None): \n # type: (Str) -> None \n <IND> self.db_user = db_user \n",
      "18": "def __init__( \n self, db_user, instance=None): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "19": "def __init__( <DED> self, db_user, instance=None): \n # type: (Str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "20": "def __init__( \n self, db_user, instance=None) -> None: \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "21": "def __init__( \n self, db_user: Optional[instance]=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "22": "def __init__(self, db_user, instance=None): \n # type: (Optional[str, Dict]) -> None \n <IND> self.db_user = db_user \n",
      "23": "def __init__(self, db_user, instance=None): \n # type: (Dict[str, Dict]) -> None \n <IND> self.db_user = db_user \n",
      "24": "def __init__(self, db_user: Optional[instance]=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "25": "def __init__(self, db_user): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "26": "def __init__(self, db_user, instance = None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "27": "def __init__( <DED> self, db_user, instance=None): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "28": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict, Any]) -> None \n <IND> self.db_user = db_user \n",
      "29": "def __init__(self, db_user, instance=None): \n # type: (Str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "30": "def __init__( <IND> self, db_user, instance=None): \n # type: (Str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "31": "def __init__(self, db_user, instance=None) -> None: \n # type: (Str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "32": "def __init__( \n self, db_user, instance=None): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "33": "def __init__(self, db_user, instance=None): \n # type: Optional[Dict[str, Dict]] = None \n <IND> self.db_user = db_user \n",
      "34": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user <IND>",
      "35": "def __init__(self, db_user, instance=None): \n # type: (Str, Optional[Dict], None) -> None \n <IND> self.db_user = db_user \n",
      "36": "def __init__(self, db_user, instance=None): <IND> # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "37": "def __init__(self, db_user, instance=None): \n # typing: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "38": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None <IND> <IND> self.db_user = db_user \n",
      "39": "def __init__(self, db_user, instance = []): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "40": "def __init__(self, db_user, instance=None): \n # type: Optional[Dict] = None \n <IND> self.db_user = db_user \n",
      "41": "def __init__( <IND> self, db_user, instance=None): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "42": "def __init__(self, db_user, instance=None): \n # type: (str, None) -> None \n <IND> self.db_user = db_user \n",
      "43": "def __init__( <DED> self, db_user, instance=None): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "44": "def __init__(self, db_user, instance=None): \n # type: () -> None \n <IND> self.db_user = db_user \n",
      "45": "def __init__(self, db_user, instance): \n # type: (Str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "46": "def __init__(self, db_user, instance): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "47": "def __init__(self, db_user, instance=None): \n # type: (str, Any) -> None \n <IND> self.db_user = db_user \n",
      "48": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user <DED> # type: (str, Optional[Dict]) \n",
      "49": "def __init__(self, db_user, instance=None) -> None: \n # type: (str) -> None \n <IND> self.db_user = db_user \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "target_code": "\n    <DED>def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "warning_line": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 137,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fscdev/vkwave",
    "source_filename": "vkwave/bots/easy/easy_bot.py",
    "target_filename": "vkwave/bots/easy/easy_bot.py",
    "source_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc^",
    "target_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "predictions": [
      "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "1": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "2": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "3": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "4": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "5": "\n <IND> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "6": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop \n if asyncio.get_event_loop() \n",
      "7": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "8": "\n <IND> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "9": "\n \n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "10": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop \n if asyncio.get_event_loop() \n",
      "11": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "12": "\n \n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "13": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop \n",
      "14": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = []): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "15": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "16": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n \n loop = loop or asyncio.get_event_loop() \n",
      "17": "\n <DED> def run_forever(self, loop = asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "18": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "19": "<DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "20": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None \n ) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "21": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop \n asyncio.get_event_loop() \n",
      "22": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = 0) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "23": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop \n",
      "24": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n \n loop = loop or asyncio.get_event_loop() \n",
      "25": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "26": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop \n asyncio.get_event_loop() \n",
      "27": "\n <DED> def run_forever(self, loop, Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "28": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop, None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "29": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = 0): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "30": "\n <DED> def run_forever(self, loop = asyncio.EventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "31": "<IND> <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "32": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = \"\"): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "33": "\n \n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "34": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop <DED> or asyncio.get_event_loop() \n",
      "35": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop \n asyncio.get_event_loop() \n",
      "36": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None \n ): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "37": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = ()): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "38": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): <IND> <IND> loop = loop or asyncio.get_event_loop() \n",
      "39": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop \n if asyncio.get_event_loop() \n",
      "40": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop <DED> or asyncio.get_event_loop() \n",
      "41": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n \n loop = loop or asyncio.get_event_loop() \n",
      "42": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() <IND>",
      "43": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "44": "\n <DED> def run_forever(self, loop, asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "45": "<DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "46": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop == None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "47": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() <IND>",
      "48": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop <IND> asyncio.get_event_loop() \n",
      "49": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop = None): \n <IND> loop = loop or asyncio.get_event_loop() \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:\n",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_line": "        timestamp: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 207,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "open-telemetry/opentelemetry-python",
    "source_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "target_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226^",
    "target_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "predictions": [
      "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "1": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: \n",
      "2": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <IND>",
      "3": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <DED>",
      "4": "attributes: types.Attributes = None, <IND> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "5": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, <IND> ) -> None: \n",
      "6": "attributes: types.Attributes = None, <DED> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "7": "attributes: types.Attributes, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "8": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, <DED> ) -> None: \n",
      "9": "attributes: types.Attributes = None, \n timestamp: typing.Optional[str] = None, \n ) -> None: \n",
      "10": "attributes: types.Attributes = None, \n timestamp: int, \n ) -> None: \n",
      "11": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: <IND>",
      "12": "attributes: types.Attributes = None, \n timestamp: bool = False, \n ) -> None: \n",
      "13": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int], \n ) -> None: \n",
      "14": "attributes: types.Attributes = None, <DED> timestamp: Optional[int] = None, \n ) -> None: \n",
      "15": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: <DED>",
      "16": "attributes: types.Attributes = None, <IND> timestamp: Optional[int] = None, \n ) -> None: \n",
      "17": "attributes: types.Attributes = None, \n timestamp=None, \n ) -> None: \n",
      "18": "attributes: types.Attributes = None, \n timestamp: options.Optional[int] = None, \n ) -> None: \n",
      "19": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, <IND> ) -> None: \n",
      "20": "attributes: types.Attributes = None, \n timestamp: option.Optional[int] = None, \n ) -> None: \n",
      "21": "attributes: types.Attributes, \n timestamp: Optional[int] = None, \n ) -> None: \n",
      "22": "attributes: types.Attributes = None, \n timestamp: Type[int] = None, \n ) -> None: \n",
      "23": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, <DED> ) -> None: \n",
      "24": "attributes: types.Attributes = None, \n timestamp: Optional[str] = None, \n ) -> None: \n",
      "25": "attributes: types.Attributes = None, \n timestamps: typing.Optional[int] = None, \n ) -> None: \n",
      "26": "attributes: types.Attributes = None, \n timestamp = None, \n ) -> None: \n",
      "27": "attributes: types.Attributes = None, \n timestamp = typing.Optional[int] = None, \n ) -> None: \n",
      "28": "attributes: types.Attributes = None, \n timestamp: optional[int] = None, \n ) -> None: \n",
      "29": "attributes: types.Attributes = None, \n timestamp: combinations.Optional[int] = None, \n ) -> None: \n",
      "30": "attributes: types.Attributes = None, \n timestamp: variants.Optional[int] = None, \n ) -> None: \n",
      "31": "attributes: types.Attributes = None, \n timestamp: Type[str] = None, \n ) -> None: \n",
      "32": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ): \n",
      "33": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = False, \n ) -> None: \n",
      "34": "attributes: types.Attributes = None, \n timestamp: expressions.Optional[int] = None, \n ) -> None: \n",
      "35": "attributes: types.Attributes = None, \n timestamp_: typing.Optional[int] = None, \n ) -> None: \n",
      "36": "attributes: types.Attributes = None, \n timetamp: typing.Optional[int] = None, \n ) -> None: \n",
      "37": "attributes: kinds.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "38": "attributes: type.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "39": "attributes = types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "40": "attributes: types.Attributes = None, \n timestamp: optional.Optional[int] = None, \n ) -> None: \n",
      "41": "attributes: types.Attributes = None, \n timestamps: Optional[int] = None, \n ) -> None: \n",
      "42": "attributes: types.Attributes = None, \n timetamp: Optional[int] = None, \n ) -> None: \n",
      "43": "attributes = types.Attributes, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "44": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ): \n",
      "45": "attributes: types.Attributes = None, \n timestamp: Standard[int] = None, \n ) -> None: \n",
      "46": "attributes: types.Attributes = None, \n timestamp: bool = True, \n ) -> None: \n",
      "47": "attributes: types.Attributes = None, \n timestamp: () = None, \n ) -> None: \n",
      "48": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ), \n ) -> None: \n",
      "49": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None \n ) -> None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]\n\n",
    "target_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_line": "  supported_featurizers = ['ElementPropertyFingerprint'",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 161,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepchem/deepchem",
    "source_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "target_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b^",
    "target_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "predictions": [
      "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Featurizer] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Featurizer] \n \n",
      "1": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] \n \n",
      "2": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "3": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[str] \n \n",
      "4": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[List[Featurizer]] \n \n",
      "5": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Str] \n \n",
      "6": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Text] \n \n",
      "7": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ) # type: List[Featurizer] \n \n",
      "8": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[Featurizer] \n \n",
      "9": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[List[str]] \n \n",
      "10": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n <IND>",
      "11": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # Type: List[Featurizer] \n \n",
      "12": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[List[Text]] \n \n",
      "13": "# First type of supported featurizers \n <DED> \n supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "14": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Basechem.feat.base_classes.Featurizer] \n \n",
      "15": "# First type of supported featurizers \n \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "16": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n <DED>",
      "17": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "18": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "19": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[featurizer] \n \n",
      "20": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ) # type: List[str] \n \n",
      "21": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[List[featurizer]] \n \n",
      "22": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] <IND> \n",
      "23": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] # type: List[Featurizer] \n \n",
      "24": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Secret[Featurizer]] \n \n",
      "25": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] <DED> \n \n",
      "26": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ) # type: List[Str] \n \n",
      "27": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ) # type: List[List[Featurizer]] \n \n",
      "28": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint', ['ElementPropertyFingerprint'] \n ] # type: List[Featurizer] \n \n",
      "29": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[ElementPropertyFingerprint] \n \n",
      "30": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[Text] \n \n",
      "31": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ) # type: List[Text] \n \n",
      "32": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: list[Featurizer] \n \n",
      "33": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] <DED> # type: List[Featurizer] \n \n",
      "34": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[SecretFeaturizer] \n \n",
      "35": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Secret] \n \n",
      "36": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[List[str]] \n \n",
      "37": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[Str] \n \n",
      "38": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[[Featurizer]] \n \n",
      "39": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] <IND> ] # type: List[Featurizer] \n \n",
      "40": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # Type: List[List[Featurizer]] \n \n",
      "41": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[List[Featurizer]] \n \n",
      "42": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # Type: List[str] \n \n",
      "43": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] \n <IND>",
      "44": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] <DED> # type: List[Featurizer] \n \n",
      "45": "# First type of supported featurizers <IND> <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Featurizer] \n \n",
      "46": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # Type: List[Str] \n \n",
      "47": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: Optional[List[Featurizer]] \n \n",
      "48": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[Text[str]] \n \n",
      "49": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ) # type: List[List[str]] \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <DED>if self is Bot:\n                <IND>Bot = new\n",
    "target_code": "            <DED>if self is Bot:\n                <IND>assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_line": "                Bot = new",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " Bot is declared to have type `BotUser` but is used as type `User`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "<DED> if self is Bot: \n <IND> Bot = new \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> if self is Bot: \n <IND> Bot = new \n",
      "1": "<DED> if self is Bot: \n <IND> if self.BotUser is None: \n <IND> Bot = new \n",
      "2": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> Bot = new \n",
      "3": "<DED> if self is Bot: \n <IND> Optional[Bot] = new \n",
      "4": "<DED> if self is Bot: \n <IND> Optional[BotUser] = new \n",
      "5": "<IND> if self is Bot: \n <IND> Bot = new \n",
      "6": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND>",
      "7": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND>",
      "8": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <DED> if self is Bot: \n <IND>",
      "9": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n",
      "10": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n",
      "11": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n",
      "12": "\n <DED> if self is Bot: \n <IND> Bot = new \n",
      "13": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser, elif self.Bot): \n <IND>",
      "14": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <DED> if self is Bot: \n <IND> Bot = new \n",
      "15": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n",
      "16": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, elif self.BotUser): \n <IND> elif self.BotUser isinstance(Bot): \n <IND>",
      "17": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n",
      "18": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser) -> None: \n <IND> elif self.BotUser isinstance(BotUser): \n <IND>",
      "19": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n",
      "20": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND>",
      "21": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n \n",
      "22": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <DED> if self is Bot: \n",
      "23": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <DED> if self is Bot: \n <IND>",
      "24": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser) is not None: \n <IND> elif self.BotUser isinstance(BotUser): \n <IND>",
      "25": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> isinstance(BotUser, BotUser): \n",
      "26": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <DED> elif self.BotUser isinstance(BotUser, BotUser): \n <IND>",
      "27": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <DED> if self is Bot: \n <IND> Bot = new \n",
      "28": "<DED> if self is Bot: \n <IND> if self.BotUser is None is None: \n <IND> Bot = new \n",
      "29": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser) -> None: \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n",
      "30": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <DED> if self: \n",
      "31": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> isinstance(BotUser, BotUser) -> None: \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n",
      "32": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <DED> if self: \n <IND>",
      "33": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n",
      "34": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <DED> elif self.BotUser isinstance(BotUser): \n <IND>",
      "35": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser) -> None: \n <IND>",
      "36": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser) -> None: \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> isinstance(BotUser, BotUser): \n",
      "37": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <DED> elif self.BotUser isinstance(BotUser): \n",
      "38": "<DED> if self is Bot: \n <IND> User = new \n",
      "39": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser) and isinstance(BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n",
      "40": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND> elif self.BotUser isinstance(BotUser): \n <IND>",
      "41": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser) && BotUser.Bot = new \n",
      "42": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> Bot = new \n",
      "43": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <DED> elif self.BotUser isinstance(BotUser): \n <DED> if self is Bot: \n <IND>",
      "44": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, botUser): \n <IND>",
      "45": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, elif self.BotUser): \n <IND> elif self.BotUser isinstance(Bot): \n",
      "46": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, elif self.BotUser) && elif self.BotUser isinstance(Bot): \n <IND>",
      "47": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, BotUser): \n <IND> elif self.BotUser isinstance(BotUser, Bot): \n",
      "48": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser) and isinstance(BotUser): \n <IND> if self.BotUser isinstance(BotUser, BotUser): \n <IND> isinstance(BotUser, BotUser): \n",
      "49": "<DED> if self is Bot: \n <IND> if self.BotUser is not None: \n <IND> isinstance(BotUser, BotUser): \n <IND> if self.BotUser isinstance(BotUser): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_line": "        error: Exception = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `Exception` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 658,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86^",
    "target_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "predictions": [
      "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "1": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "2": "self, \n method_name: str = '', \n error: Exception, \n subsegment: BaseSegment = '', \n capture_error: Optional[bool] = None, \n",
      "3": "self, \n method_name: str, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "4": "self, \n method_name: str, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "5": "self, \n method_name: Optional[str] = None, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "6": "self, \n method_name: str = '', \n error: Exception, \n subsegment = 'BaseSegment', \n capture_error: Optional[bool] = None, \n",
      "7": "self, \n method_name: str, \n error_name: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "8": "self, \n method_name: str = '', \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "9": "self, \n method_name: str: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "10": "self, \n method_name: Optional[str] = None, \n error_name: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "11": "self, \n method_name: str = '', \n error: 'Exception', \n subsegment: BaseSegment = '', \n capture_error: Optional[bool] = None, \n",
      "12": "self, \n method_name: str = '', \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "13": "self, \n method_name: str = '', \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "14": "self, \n method_name: str = \"\", \n error: Exception, \n subsegment: BaseSegment = \"\", \n capture_error: Optional[bool] = None, \n",
      "15": "self, \n method_name: str = '', \n error_name: Optional[Exception'] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "16": "self, \n method_name: str = '', \n error_name: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "17": "self, \n method_name: str: Optional[str] = None, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "18": "self, \n method_name: str, \n error_name: Optional[Str] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "19": "self, \n method_name: str = '', \n error: Exception, \n subsegment ='BaseSegment', \n capture_error: Optional[bool] = None, \n",
      "20": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, <IND>",
      "21": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment = None, \n capture_error: Optional[bool] = None, \n",
      "22": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, <IND> capture_error: Optional[bool] = None, \n",
      "23": "self, \n method_name: str = '', \n error_name: Exception, \n subsegment: BaseSegment = '', \n capture_error: Optional[bool] = None, \n",
      "24": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, <DED>",
      "25": "self, \n method_name: str, \n error_name: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "26": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, <DED> capture_error: Optional[bool] = None, \n",
      "27": "self, \n method_name: str, \n error: Exception, \n subsegment: Exception, \n capture_error: Optional[bool] = None, \n",
      "28": "self, \n method_name: str = '', \n error: 'Exception', \n subsegment = 'BaseSegment', \n capture_error: Optional[bool] = None, \n",
      "29": "self, \n method_name: str = [], \n error: Exception, \n subsegment: BaseSegment = None, \n capture_error: Optional[bool] = None, \n",
      "30": "self, \n method_name: str = '', \n error = 'Exception', \n subsegment: BaseSegment = '', \n capture_error: Optional[bool] = None, \n",
      "31": "self, \n method_name: str, \n error_name: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "32": "self, \n method_name: str = 0, \n error: Exception, \n subsegment: BaseSegment = 0, \n capture_error: Optional[bool] = None, \n",
      "33": "self, \n method_name: str = \"\", \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "34": "self, \n method_name: str = [], \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "35": "self, \n method_name: str = '', \n error: Exception, \n subsegment: 'BaseSegment', \n capture_error: Optional[bool] = None, \n",
      "36": "self, \n method_name: str = (), \n error: Exception, \n subsegment: BaseSegment = None, \n capture_error: Optional[bool] = None, \n",
      "37": "self, \n method_name: str, \n error: str, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "38": "self, \n method_name: str, \n error: 'Exception', \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "39": "self, \n method_name: str = \"\", \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "40": "self, \n method_name: str, \n error = '', \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "41": "self, \n method_name: str, \n error: Exception, \n subsegment = BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "42": "self, \n method_name: str = \"\", \n error: Exception, \n subsegment = BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "43": "self, \n method_name: str, \n error: Exception, \n subsegment: Optional[BaseSegment], \n capture_error: Optional[bool] = None, \n",
      "44": "self, <DED> method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "45": "self, \n method_name, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "46": "self, \n method_name: str, \n error: \"Exception\", \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "47": "self, \n method_name: str, \n error: Exception, <IND> subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "48": "self, <IND> method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "49": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED>details = details.split(\", \")\n\n",
    "target_code": "\n        <DED>split_details = details.split(\", \")\n\n",
    "warning_line": "        details = details.split(\", \")",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " details is declared to have type `str` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 229,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hsahovic/poke-env",
    "source_filename": "src/poke_env/environment/pokemon.py",
    "target_filename": "src/poke_env/environment/pokemon.py",
    "source_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7^",
    "target_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "predictions": [
      "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "1": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "2": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "3": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "4": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "5": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "6": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "7": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "8": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",\") \n \n",
      "9": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").details = details.split(\",\") \n \n",
      "10": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "11": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "12": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "13": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "14": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "15": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "16": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "17": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "18": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "19": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "20": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "21": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "22": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "23": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "24": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "25": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\" \n \n",
      "26": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "27": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "28": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "29": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "30": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "31": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").detail(tailtails.split(\",\") \n \n",
      "32": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "33": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "34": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "35": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "36": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "37": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\" \n \n",
      "38": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "39": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "40": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "41": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "42": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "43": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n",
      "44": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "45": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "46": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "47": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "48": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\").decode(\"\"\").decode(\"\"\").details = details.split(\",)) \n \n",
      "49": "\n <DED> details = details.split(\"\").decode(\"\").decode(\"\").decode(\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\").decode(\"\"\") \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,  # type: int\n    max_size=None,  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,  # type: None\n    max_size=None,  # type: int\n",
    "warning_line": "    average_size=None,  # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 705,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n"
    ],
    "correct": false,
    "top_five": {
      "0": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "1": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int \n",
      "2": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "3": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None, # type: int \n",
      "4": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "5": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "6": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: Optional[int] \n",
      "7": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None, # type: Optional[int] \n",
      "8": "min_size=0, # type: Int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "9": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Int \n",
      "10": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: None \n",
      "11": "min_size=0, # type: Int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "12": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: None \n",
      "13": "min_size=0, # type: int \n average_size=None, # type: Int \n max_size=None, # type: int \n",
      "14": "min_size=0, # type: int \n average_size=None, # type: Optional[int] <DED> max_size=None, # type: int \n",
      "15": "min_size=0, # type: int <IND> average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "16": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int <IND>",
      "17": "min_size=0, # type: int \n average_size=None, # type: Optional[int] <IND> max_size=None, # type: int \n",
      "18": "min_size=0, # type: None \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "19": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None, # type: None \n",
      "20": "min_size=0, # type: int <DED> average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "21": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int <DED>",
      "22": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: Int \n",
      "23": "min_size=0, # type: int \n average_size=None, # type:None \n max_size=None, # type: int \n",
      "24": "min_size=0, # type: int \n average_size=None, # type: Optional[int] <DED> max_size=None, # type: Optional[int] \n",
      "25": "min_size=0, # type: Int \n average_size=None, # type: None \n max_size=None, # type: int \n",
      "26": "min_size=0, # type: int \n average_size=None, # type: optional[int] \n max_size=None, # type: int \n",
      "27": "min_size=0, # type: int \n average_sized=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "28": "min_size=0, # type: int \n average_size=None, # type: Optional[int] <IND> max_size=None, # type: Optional[int] \n",
      "29": "min_size=0, # type: int <IND> average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "30": "min_size=0, # type: 0 \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "31": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] <IND>",
      "32": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None, # type: Int \n",
      "33": "min_size=0, # type: int \n average_size=None, # type: Non, max_size=None, # type: int \n",
      "34": "min_size=0, # type: None \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "35": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] <DED>",
      "36": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None, # type: Int \n",
      "37": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int \n",
      "38": "min_size=0, # type: None \n average_size=None, # type: None \n max_size=None, # type: int \n",
      "39": "min_size=0, # type: int \n average_size=None, # type: none \n max_size=None, # type: int \n",
      "40": "min_size=0, # type: int <DED> average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "41": "min_size=0, # type: int \n average_size=None, # type: typing.Optional[int] \n max_size=None, # type: int \n",
      "42": "min_size=0, # type: int \n average_size=None, # type: option.Optional[int] \n max_size=None, # type: Optional[int] \n",
      "43": "min_size=0, # type: 0 \n average_size=None, # type: int \n max_size=None, # type: int \n",
      "44": "min_size=0, # type: int \n average_sized=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "45": "min_size=0, # type: Int \n average_size=None, # type: int \n max_size=None, # type: int \n",
      "46": "min_size=0, # type: int \n average_size=None, # type: NONE \n max_size=None, # type: int \n",
      "47": "min_size=0, # type: int \n average_size=None, # type: Optional[str] \n max_size=None, # type: int \n",
      "48": "min_size=0, # type: int \n average_size=None, # type: Optional[Int] \n max_size=None, # type: int \n",
      "49": "min_size=0, # type: int \n average_size=none, # type: Optional[int] \n max_size=None, # type: int \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: str = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
    "target_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
    "warning_line": "        datefmt: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " datefmt is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 63,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/logging/formatter.py",
    "target_filename": "aws_lambda_powertools/logging/formatter.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "1": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = True, \n",
      "2": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: List[str] = None, \n utc: bool = False, \n",
      "3": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, <IND>",
      "4": "json_default: Optional[Callable[[Any], Any]] = None, \n timefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "5": "json_default: Optional[Callable[[Any], Any]] = None, <IND> datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "6": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, <IND> utc: bool = False, \n",
      "7": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, <IND> log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "8": "json_default: Optional[Callable[[Any], Any]] = None, <DED> datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "9": "json_default: Optional[Callable[[Any], Any]] = None, \n fmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "10": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, <DED>",
      "11": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, <DED> utc: bool = False, \n",
      "12": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, <DED> log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "13": "json_default: Optional[Callable[[Any], Any]] = None, \n datafmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "14": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[Str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "15": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: Optional[bool = False, \n",
      "16": "json_default: Optional[Callable[[Any], Any]] = None, \n datfmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "17": "json_default: Optional[Callable[[Any], Any]] = None, \n Datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "18": "json_default: Optional[Callable[[Any], Any]] = None, \n datesfmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "19": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[Str] = None, \n utc: bool = False, \n",
      "20": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: Optional[bool] = False, \n",
      "21": "json_default: Optional[Callable[[Any], Any]] = None, \n momentfmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "22": "json_default: Optional[Callable[[Any], Any]] = None, \n dayfmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "23": "json_default: Optional[Callable[[Any], Any]] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "24": "json_default: Optional[Callable[[Any], Any]] = None, \n typeof datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "25": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "26": "json_default: Optional[Callable[[Any], Any]] = None, \n last_datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "27": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "28": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n ): \n",
      "29": "json_default: Optional[Callable[[Any], Any]] = None, \n callback: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "30": "json_default: Optional[Callable[[Any], Any]] = None, \n get_datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "31": "json_default: Optional[Callable[[Any], Any]] = None, \n ftp: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "32": "json_default: Optional[Callable[[Any], Any]] = None, \n _datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "33": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str] = None, \n utc: bool = False, \n",
      "34": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n ) -> None: \n",
      "35": "json_default: Optional[Callable[[Any], Any]] = None, \n fn: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "36": "json_default: Optional[Callable[[Any], Any]] = None, \n defmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "37": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str], \n utc: bool = False, \n",
      "38": "json_default: Optional[Callable[[Any], Any]] = None, \n invoicefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "39": "json_default: Optional[Callable[[Any], Any]] = None, \n timeout: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "40": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order = List[str] = None, \n utc: bool = False, \n",
      "41": "json_default: Optional[Callable[[Any], Any]] = None, \n option_datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "42": "json_default: Optional[Callable[[Any], Any]] = None, \n quotefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "43": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt=None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "44": "json_default: Optional[Callable[[Any], Any]] = None, \n version: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "45": "json_default: Optional[Callable[[Any], Any]] = None, \n dates: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "46": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n Log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "47": "json_default: Optional[Callable[[Any], Any]] = None, \n status: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "48": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[list[str]] = None, \n utc: bool = False, \n",
      "49": "json_default: Optional[Callable[[Any], Any]] = None, \n namespace: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
    "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
    "warning_line": "        channel_index: int = Deprecated,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 72,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/estimators/classification/keras.py",
    "target_filename": "art/estimators/classification/keras.py",
    "source_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c^",
    "target_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "predictions": [
      "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n",
      "1": "use_logits: bool = False, \n channel_index = Deprecated, \n channels_first: bool = False, \n",
      "2": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = Truese, \n",
      "3": "use_logits: bool = False, <IND> channel_index=Deprecated, \n channels_first: bool = False, \n",
      "4": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <IND>",
      "5": "use_logits: bool = False, \n channel_index: Deprecated, \n channels_first: bool = False, \n",
      "6": "use_logits: bool = False, <DED> channel_index=Deprecated, \n channels_first: bool = False, \n",
      "7": "use_logits: bool = False, \n channel_index=Deprecated, <IND> channels_first: bool = False, \n",
      "8": "usage_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n",
      "9": "use_logits: bool = False, \n channel_index=Deprecated, <DED> channels_first: bool = False, \n",
      "10": "use_logits: bool = Truese, \n channel_index=Deprecated, \n channels_first: bool = False, \n",
      "11": "use_logits: bool = False, \n channel_indexDeprecated: Deprecated, \n channels_first: bool = False, \n",
      "12": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED>",
      "13": "use_logits: bool = False, \n channel_indexDeprecated = Deprecated, \n channels_first: bool = False, \n",
      "14": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n ): \n",
      "15": "use_logits: bool = False, \n channel_index_deprecated: Deprecated, \n channels_first: bool = False, \n",
      "16": "use_logits: bool = False, \n channel_index=Deprecated, \n channel_first: bool = False, \n",
      "17": "use_logits: bool = False, \n channel_index = Deprecated, \n channels_first: bool = Truese, \n",
      "18": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n ) -> Deprecated: \n",
      "19": "use_logits: bool = False, \n channel_indexDeprecated: bool = Deprecated, \n channels_first: bool = False, \n",
      "20": "use_logits: bool = False, \n channel_indexDeprecated: Optional[int] = Deprecated, \n channels_first: bool = False, \n",
      "21": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n ) -> None: \n",
      "22": "use_logits: bool = False, \n channel_index_Deprecated: Deprecated, \n channels_first: bool = False, \n",
      "23": "use_logits: bool = False, \n channel_index_deprecated = Deprecated, \n channels_first: bool = False, \n",
      "24": "use_logits: bool = False, \n channels_index=Deprecated, \n channels_first: bool = False, \n",
      "25": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> bool: bool = False, \n",
      "26": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED>... \n",
      "27": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> bool = False, \n",
      "28": "use_logits: bool = False, \n channel_index=Defprecated, \n channels_first: bool = False, \n",
      "29": "use_logits: bool = False, \n channel_index_Deprecated = Deprecated, \n channels_first: bool = False, \n",
      "30": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n ) -> bool: \n",
      "31": "use_logits: bool = False, \n channel_index=Deprecation, \n channels_first: bool = False, \n",
      "32": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> python: bool = False, \n",
      "33": "use_logits: bool = False, \n channel_index = Deprecated, \n channels_first: bool = False, <IND>",
      "34": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> bool_first: bool = False, \n",
      "35": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> Undefined: bool = False, \n",
      "36": "use_logits: bool = False, \n channel_index = Deprecated, <IND> channels_first: bool = False, \n",
      "37": "usage_logits: bool = False, \n channel_index = Deprecated, \n channels_first: bool = False, \n",
      "38": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> bool: Deprecated, \n",
      "39": "use_logits: bool = False, \n channel_index=Deprecated \n channels_first: bool = False, \n",
      "40": "use_logits: bool = False, \n channel_indexOf = Deprecated, \n channels_first: bool = False, \n",
      "41": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> elif isinstance(str, int): \n",
      "42": "use_logits: bool = False, <IND> channel_index = Deprecated, \n channels_first: bool = False, \n",
      "43": "use_logits: bool = False, \n channel_index = Deprecated, <DED> channels_first: bool = False, \n",
      "44": "use_logits: bool = False, \n channel_index = deprecated, \n channels_first: bool = False, \n",
      "45": "use_logits: bool = False, \n channel_index_des = Deprecated, \n channels_first: bool = False, \n",
      "46": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> 't': bool = False, \n",
      "47": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED>'serialization': bool = False, \n",
      "48": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED> \"\": bool = False, \n",
      "49": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = True, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED><DED>def rjust(self, width, fillchar=None):\n        # type: (int, Text) -> FmtStr\n        <IND>",
    "target_code": "\n    <DED><DED>def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr:\n        <IND>",
    "warning_line": "    def rjust(self, width, fillchar=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fillchar is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 513,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bpython/curtsies",
    "source_filename": "curtsies/formatstring.py",
    "target_filename": "curtsies/formatstring.py",
    "source_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413^",
    "target_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413",
    "predictions": [
      "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: (int, Text) -> FmtStr \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "1": "\n <DED> <DED> def rjust(self, width, fillchar=None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "2": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: (int, FmtStr) -> FmtStr \n <IND>",
      "3": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None) -> FmtStr: \n <IND>",
      "4": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "5": "\n <DED> <DED> def rjust(self, width, fillchar): \n # type: (int, Text) -> FmtStr \n <IND>",
      "6": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "7": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None) -> FmtStr: \n <IND>",
      "8": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "9": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: (Int, Text) -> FmtStr \n <IND>",
      "10": "\n <DED> <DED> def rjust(self, width: int, Fillchar: Optional[int] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "11": "\n <DED> <DED> def rjust(self, width, fillchar: Optional[int] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "12": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: (Optional[int, Text]) -> FmtStr \n <IND>",
      "13": "\n <DED> <DED> def rjust(self, width, fillchar=None): \n # type: (int, Optional[Text]) -> FmtStr \n <IND>",
      "14": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "15": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: () -> FmtStr \n <IND>",
      "16": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: Optional[int, Text] -> FmtStr \n <IND>",
      "17": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: (Optional[int, Text]) -> FmtStr \n <IND>",
      "18": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "19": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None): \n # type: (int, FmtStr) -> FmtStr \n <IND>",
      "20": "\n <DED> <DED> def rjust(self, width, fillchar=False): \n # type: (int, Text) -> FmtStr \n <IND>",
      "21": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: (Int, FmtStr) -> FmtStr \n <IND>",
      "22": "\n <DED> <DED> def rjust(self, width, fillchar): \n # type: (int, Optional[Text]) -> FmtStr \n <IND>",
      "23": "\n <DED> <DED> def rjust(self, width: int, Fillchar: Optional[int, Text] = None \n # type: (int, FmtStr) -> FmtStr \n <IND>",
      "24": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[Text] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "25": "\n <DED> <DED> def rjust(self, width=None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "26": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, text] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "27": "\n <DED> <DED> def rjust(self, width, fillchar=Optional[str]): \n # type: (int, Text) -> FmtStr \n <IND>",
      "28": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text]=None): \n # type: (int, FmtStr) -> FmtStr \n <IND>",
      "29": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: Optional[int, Text] -> FmtStr \n <IND>",
      "30": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n ) -> FmtStr: \n <IND>",
      "31": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "32": "\n <DED> <DED> def rjust(self, width, fillchar: Optional[int] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "33": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: (int, Text) -> FmtStr \n <DED>",
      "34": "\n <DED> <DED> def rjust(self, width, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "35": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: (int, text) -> FmtStr \n <IND>",
      "36": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[none] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "37": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None <DED> # type: (int, Text) -> FmtStr \n <IND>",
      "38": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: () -> FmtStr \n <IND>",
      "39": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None \n # type: (int, Optional[Text]) -> FmtStr \n <IND>",
      "40": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text]: \n # type: (int, FmtStr) -> FmtStr \n <IND>",
      "41": "\n <DED> <DED> def rjust(self, width, fillchar, Optional[int] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "42": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text]=None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "43": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None <IND> ) -> FmtStr: \n <IND>",
      "44": "\n <DED> <DED> def rjust(self, width, fillchar: Optional[int] = None) -> FmtStr: \n <IND>",
      "45": "\n <DED> <DED> def rjust(self, width: int, Fillchar: Optional[int, Text] = None \n # type: (int, Text) -> FmtStr \n <IND>",
      "46": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, text] = None) -> FmtStr: \n <IND>",
      "47": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int, Text] = None <IND> ) -> FmtStr: \n <IND>",
      "48": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[int] = None \n # type: (int, Text) -> FmtStr \n \n",
      "49": "\n <DED> <DED> def rjust(self, width, fillchar = \"\"): \n # type: (int, Text) -> FmtStr \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None\n) -> str:\n",
    "target_code": "<DED>def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
    "warning_line": "    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exclude is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 108,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/cli/info.py",
    "target_filename": "spacy/cli/info.py",
    "source_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979^",
    "target_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979",
    "predictions": [
      "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "1": "<DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "2": "<IND> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "3": "\n <DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "4": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "5": "<DED> def get_markdown( \n data: Optional[dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "6": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str]] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "7": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title, Optional[str]] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "8": "<DED> def get_markdown( <IND> data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "9": "<DED> def get_markdown( <DED> data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "10": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: <IND>",
      "11": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None <IND> ) -> str: \n",
      "12": "<DED> def get_markdown( \n data: Optional[Dict[str, Any]], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "13": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: <DED>",
      "14": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None <DED> ) -> str: \n",
      "15": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], Title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "16": "\n <IND> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "17": "<IND> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "18": "\n <DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "19": "<DED> def get_markdown( \n data: Optional[Div Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "20": "\n \n def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "21": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str] = None \n ) -> str: \n",
      "22": "<DED> def get_markdown( \n data: Optional[Dict[str, Any]] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "23": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] | None = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "24": "<IND> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str]] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "25": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ): \n",
      "26": "<DED> def get_markdown( <DED> data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "27": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], \n title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "28": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title = Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "29": "\n <DED> def get_markdown( \n data: Optional[Dict[str, Any], title = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "30": "\n <DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str]] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "31": "<IND> def get_markdown( \n data: Optional[dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "32": "<IND> def get_markdown( \n data: Optional[Dict[str, Any], title, Optional[str]] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "33": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title, Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "34": "<DED> def got_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "35": "\n <DED> def get_markdown( \n data: Optional[Dict[str, Any], title, Optional[str]] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "36": "<DED> def get_markdown( \n data: Optional[Done, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "37": "<IND> def get_markdown( \n data: Optional[Dict[str, Any], title = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "38": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str]) = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "39": "\n <DED> def get_markdown( \n data: Optional[dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "40": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str]=None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "41": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, \n exclude: Optional[List[str]] = None \n ) -> str: \n",
      "42": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[Str] = None \n ) -> str: \n",
      "43": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None \n ) -> str: \n",
      "44": "<DED> def get_markdown( <IND> data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "45": "\n <DED> def get_markdown( <DED> data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "46": "<IND> def get_markdown( <IND> data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "47": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n ): \n",
      "48": "<IND> def get_markdown( <DED> data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "49": "\n <DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None <IND> ) -> str: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: dict=None):\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "target_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_line": "def batch_start(identifier: str, batch_type: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 84,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "1": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "2": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "3": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "4": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "5": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "6": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "7": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "8": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "9": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "10": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "11": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "12": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "13": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "14": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "15": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "16": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "17": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "18": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "19": "\n <IND> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "20": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = None): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "21": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "22": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "23": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "24": "\n \n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "25": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "26": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "27": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n \n return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "28": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "29": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "30": "<DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "31": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine[\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "32": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= ^ } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "33": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: Optional[typing.Dict[str, str]]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "34": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "35": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "36": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = None): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "37": "\n <IND> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "38": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str] = None): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "39": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BODY\", [\"+%s\" % identifier, batch_type], \n",
      "40": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= \\ } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "41": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "42": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine[\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "43": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "44": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "45": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= } } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "46": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = None) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "47": "<IND> <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "48": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine[\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "49": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]] = None): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        <IND>self.validatefunc(func)\n",
    "target_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
    "warning_line": "    def add(self, verb: str, func: Callable, privilege: str=None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " privilege is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "1": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "2": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "3": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "4": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "5": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "6": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "7": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "8": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "9": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "10": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "11": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "12": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "13": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "14": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "15": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "16": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "17": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { { } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "18": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "19": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "20": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "21": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "22": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "23": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "24": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "25": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "26": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "27": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { { } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "28": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "29": "def __init__(self) -> None: \n <DED> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "30": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { { } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "31": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) -> None) \n",
      "32": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]) -> None: \n <IND> self.validatefunc(func) \n",
      "33": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } : Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "34": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "35": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \\ } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "36": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "37": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Optional[Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Optional[Set[str]] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "38": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n \n self.validatefunc(func) \n",
      "39": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "40": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "41": "def __init__(self) -> None: \n <IND> self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "42": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=None) -> None: \n <IND> self.validatefunc(func) \n",
      "43": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) -> None: \n",
      "44": "def __init__(self) -> None: \n <IND> self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "45": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <DED> self.validatefunc(func) \n",
      "46": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) -> None) \n",
      "47": "def __init__(self) -> None: \n <DED> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "48": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "49": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": true,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def unpack_model(model_file: Text, working_directory: Text = None,\n                 subdirectories: bool = False\n",
    "target_code": "\n<DED>def unpack_model(model_file: Text, working_directory: Optional[Text] = None,\n                 subdirectories: bool = False\n",
    "warning_line": "def unpack_model(model_file: Text, working_directory: Text = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " working_directory is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/model.py",
    "target_filename": "rasa/model.py",
    "source_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7^",
    "target_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7",
    "predictions": [
      "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "1": "\n <IND> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "2": "\n \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "3": "\n <DED> def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "4": "<DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "5": "<IND> <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "6": "\n <DED> def unpack_model(model_file: Optional[Text] = None, \n working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "7": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = True \n",
      "8": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n ) -> None: \n",
      "9": "\n <DED> def unpack_model(model_file: Text, working_directory: Text, \n subdirectories: bool = False \n",
      "10": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <IND>",
      "11": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "12": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, <IND> subdirectories: bool = False \n",
      "13": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n",
      "14": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, <DED> subdirectories: bool = False \n",
      "15": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Str] = None, \n subdirectories: bool = False \n",
      "16": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "17": "\n <DED> def unpack_model(model_file: 'Text', working_directory: 'Text', \n subdirectories: bool = False \n",
      "18": "\n <DED> def unpack_model(model_file: Text, working_directory: bool = False \n subdirectories: bool = False \n",
      "19": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "20": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "21": "\n <DED> def unpack_model(model_file: Text, working_directory: typing.Optional[Text] = None, \n subdirectories: bool = False \n",
      "22": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "23": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "24": "\n <DED> def unpack_model(model_file: 'Text', working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "25": "\n <DED> def unpack_model(Model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "26": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> bool = False \n",
      "27": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n ): \n",
      "28": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ): \n",
      "29": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <IND> ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "30": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n ) -> Unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "31": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Optional[Text]] = None, \n subdirectories: bool = False \n",
      "32": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n ) -> None: \n",
      "33": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n ) -> None: \n",
      "34": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Optional[Text], Working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "35": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: Optional[bool] = False \n",
      "36": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, \n",
      "37": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <IND> ) -> None: \n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "38": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> Unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "39": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text], \n subdirectories: bool = False \n",
      "40": "\n <DED> def unpack_model(modell_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "41": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <IND> ) -> None: \n",
      "42": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n",
      "43": "\n \n <IND> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "44": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Optional[Text], Working_directory: Optional[Text] = None, \n",
      "45": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <IND>",
      "46": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED> ) -> None: \n <DED> def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "47": "\n <DED> def unpack_model(model_file: \"Text\", working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "48": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n ) -> None: \n <DED> def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, \n",
      "49": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[str] = None, \n subdirectories: bool = False \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def translateAlgebra(query_algebra: Query = None):\n    <IND>",
    "target_code": "\n<DED>def translateAlgebra(query_algebra: Query):\n    <IND>",
    "warning_line": "def translateAlgebra(query_algebra: Query = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " query_algebra is declared to have type `Query` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 804,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RDFLib/rdflib",
    "source_filename": "rdflib/plugins/sparql/algebra.py",
    "target_filename": "rdflib/plugins/sparql/algebra.py",
    "source_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c^",
    "target_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "predictions": [
      "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND>",
      "1": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "2": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n <IND>",
      "3": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np) \n",
      "4": "\n <DED> def translateAlgebra(query_algebra: Query, None): \n <IND>",
      "5": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.NONE) \n",
      "6": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Arg) \n <DED> def translateAlgebra): \n <IND>",
      "7": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n",
      "8": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.) \n",
      "9": "\n <IND> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "10": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Arg) \n",
      "11": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.s) \n",
      "12": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Argument = {",
      "13": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.A) \n",
      "14": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n",
      "15": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.M) -> None: \n <IND>",
      "16": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND> if isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np): \n",
      "17": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.) \n",
      "18": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np): \n",
      "19": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.M): \n",
      "20": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.G) \n",
      "21": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.NONE) \n <DED> def translateAlgebra): \n <IND>",
      "22": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Date(def translateAlgebra): \n <IND>",
      "23": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Arg): \n",
      "24": "\n <DED> def translateAlgebra(query_algebra: Query) -> None: \n <IND>",
      "25": "\n <IND> def translateAlgebra(query_algebra: Query): \n <IND>",
      "26": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.NONE, \n",
      "27": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n) \n",
      "28": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.M) -> None: \n <DED> def translateAlgebra): \n <IND>",
      "29": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.S) -> None: \n <IND>",
      "30": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Arg) -> None: \n <IND>",
      "31": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.M) if not isinstance(query_algebra): \n <IND>",
      "32": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.P): \n",
      "33": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Arg) \n <DED> def translateAlgebra(query_algebra): \n <IND>",
      "34": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.M) if not isinstance(query_algebra) -> None: \n <IND>",
      "35": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Error) \n",
      "36": "\n \n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "37": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.), \n",
      "38": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Arg) \n <IND>",
      "39": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., \n",
      "40": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.S) \n",
      "41": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.C) \n",
      "42": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.P) -> None: \n <IND>",
      "43": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Str) \n",
      "44": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.NONE",
      "45": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Executor, def translateAlgebra): \n <IND>",
      "46": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND> if isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ): \n",
      "47": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.P5) \n",
      "48": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND> assert isinstance(query_algebra, np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.A) \n",
      "49": "\n <DED> def translateAlgebra(query_algebra: Optional[query_algebra] = None): \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_line": "        checkpointer: Lazy[Checkpointer] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/training/trainer.py",
    "target_filename": "allennlp/training/trainer.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "1": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "2": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "3": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "4": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "5": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[TensorboardWriter] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "6": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "7": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer] = None, \n",
      "8": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "9": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "10": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[TensorboardWriter] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "11": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[TensorboardWriter] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "12": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = [], \n momentum_scheduler: Lazy[MomentumScheduler] = [], \n tensorboard_writer: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = None, \n",
      "13": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = None, \n",
      "14": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n stack_callbacks: List[BatchCallback] = None, \n",
      "15": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "16": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "17": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n ] = None, \n",
      "18": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LanguageScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "19": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = [], \n tensorboard_writer: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = None, \n",
      "20": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n momentum_scheduler: Lazy[LearningRateScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "21": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "22": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "23": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n ): Lazy[Checkpointer] = None, \n",
      "24": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = [], \n momentum_scheduler: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = [], \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "25": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "26": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n momentum_scheduler: Lazy[LearningRateScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "27": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = [], \n momentum_scheduler: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = [], \n checkpointer: Lazy[Checkpointer] = [], \n batch_callbacks: List[BatchCallback] = None, \n",
      "28": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n... \n",
      "29": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "30": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = \"\", \n momentum_scheduler: Lazy[TensorboardWriter] = \"\", \n moving_average: Lazy[MovingAverage] = \"\", \n checkpointer: Lazy[Checkpointer] = \"\", \n batch_callbacks: List[BatchCallback] = None, \n",
      "31": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = [], \n momentum_scheduler: Lazy[MomentumScheduler] = [], \n tensorboard_writer: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "32": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: Optional[BatchCallback] = None, \n",
      "33": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "34": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "35": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[TensorboardWriter] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "36": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = [], \n tensorboard_writer: Lazy[TensorboardWriter] = [], \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "37": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n mix_callbacks: List[BatchCallback] = None, \n",
      "38": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LocationScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "39": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler], \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "40": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = [], \n moving_average: Lazy[MovingAverage] = [], \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "41": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, <IND>",
      "42": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n ) -> None: \n",
      "43": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n factory_callbacks: List[BatchCallback] = None, \n",
      "44": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n label: List[BatchCallback] = None, \n",
      "45": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler], \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "46": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[BatchCallback] = None, \n",
      "47": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, <IND>",
      "48": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n",
      "49": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = \"\", \n momentum_scheduler: Lazy[MomentumScheduler] = \"\", \n tensorboard_writer: Lazy[TensorboardWriter] = \"\", \n moving_average: Lazy[MovingAverage] = None, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,\n",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_line": "        extras: bool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " extras is declared to have type `bool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 46,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trailofbits/pip-audit",
    "source_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "target_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c^",
    "target_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "predictions": [
      "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "1": "version: Version, \n url = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "2": "version: Version, \n url: Optional[str] = None, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "3": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = False, \n",
      "4": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, <IND>",
      "5": "version: Version, \n url: Optional[str] = None, <IND> extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "6": "version: Version, <IND> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "7": "version: Version, \n url: Optional[str] = None, <DED> extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "8": "version: Version, <DED> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "9": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <IND> is_wheel: bool = True, \n",
      "10": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, <DED>",
      "11": "version: Version, \n url = Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "12": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <DED> is_wheel: bool = True, \n",
      "13": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: Optional[bool] = True, \n",
      "14": "version: Version, \n url: Optional[str] = None, \n extras: bool, \n is_wheel: bool = True, \n",
      "15": "version: Version, \n url: Optional[str] = None, \n extras: Optional[ol] = None, \n is_wheel: bool = True, \n",
      "16": "version: Version, \n url: Optional[str] = None, \n extras: Optional[optional[bool] = None, \n is_wheel: bool = True, \n",
      "17": "version: Version, \n url: Optional[str] = None, \n extras: Optional[str] = None, \n is_wheel: bool = True, \n",
      "18": "version: Version, \n url=Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "19": "version: Version, \n url = None, \n extras: Optional[str] = None, \n is_wheel: bool = True, \n",
      "20": "version: Version, \n version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "21": "version: Version, \n url: Optional[str] = None, \n extras: typing.Optional[bool] = None, \n is_wheel: bool = True, \n",
      "22": "version: Version, \n URL: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "23": "version: Version, \n url: Optional[str] = None, \n extras: bool = None, \n is_wheel: bool = True, \n",
      "24": "version: Version, \n str: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "25": "version: Version, \n url: Optional[str] = None, \n extras: Optional[os.bool] = None, \n is_wheel: bool = True, \n",
      "26": "version: Version, \n url=None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "27": "version: Version, \n url: Optional[str] = None, \n extras: Optional[int] = None, \n is_wheel: bool = True, \n",
      "28": "version: Version, \n version: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "29": "version: Version, \n url: Optional[str] = None, \n extras: Optional['bool'] = None, \n is_wheel: bool = True, \n",
      "30": "version: Version, \n url: Optional[str] = None, \n extras: Optional[options[bool] = None, \n is_wheel: bool = True, \n",
      "31": "version: Version, \n url: Optional[str] = None, \n extras: optional[bool] = None, \n is_wheel: bool = True, \n",
      "32": "version: Version, \n url: Optional[str] = None, \n extras: optional[bool] = None, \n is_wheel: bool = True, \n",
      "33": "version: Version, \n url: Optional[str] = None, \n extras: Optional[options.bool] = None, \n is_wheel: bool = True, \n",
      "34": "version: Version, \n url: Optional[str] = None, \n extras: Optional[_bool] = None, \n is_wheel: bool = True, \n",
      "35": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n has_wheel: bool = True, \n",
      "36": "version: Version, \n options: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "37": "version: Version, \n user: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "38": "version: Version, \n url: Optional[str] = None, \n extras: Optional[babel] = None, \n is_wheel: bool = True, \n",
      "39": "version: Version, \n url: Optional[str] = None, \n extras: Optional[binary] = None, \n is_wheel: bool = True, \n",
      "40": "version: Version, \n url: Optional[str] = None, \n extras = None, \n is_wheel: bool = True, \n",
      "41": "version: Version, \n url = None, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "42": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n ): \n",
      "43": "version: Version, \n url: Optional[str] = None, \n extras: Optional[type = None, \n is_wheel: bool = True, \n",
      "44": "version: Version, \n url: Optional[str] = None, \n extras: bool = True, \n is_wheel: bool = True, \n",
      "45": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n ) -> None: \n",
      "46": "version: Version, \n url: Optional[str] = None, \n extras: None, \n is_wheel: bool = True, \n",
      "47": "version: Version, \n url: Optional[str] = None, \n extras: str = None, \n is_wheel: bool = True, \n",
      "48": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: Optional[bool = True, \n",
      "49": "version: Version, \n url: Optional[str] = None, \n extras=None, \n is_wheel: bool = True, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
    "target_code": "    <IND>count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_line": "    seconds %= amount",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " seconds is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 416,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "<IND> count = int(seconds / amount) \n seconds %= int(let float) \n time_comp[label.strip()] = count \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> count = int(seconds / amount) \n seconds %= int(let float) \n time_comp[label.strip()] = count \n",
      "1": "<IND> count = int(seconds / amount) \n seconds %= float \n time_comp[label.strip()] = count \n",
      "2": "<IND> count = int(seconds / amount) \n seconds %= int(t) \n time_comp[label.strip()] = count \n",
      "3": "<IND> count = int(seconds / amount) \n seconds %= int(let amount) \n time_comp[label.strip()] = count \n",
      "4": "<IND> count = int(seconds / amount) \n seconds %= int(time) \n time_comp[label.strip()] = count \n",
      "5": "<IND> count = int(seconds / amount) \n seconds %= int(value) \n time_comp[label.strip()] = count \n",
      "6": "<IND> count = int(seconds / amount) \n seconds %= int(max_seconds) \n time_comp[label.strip()] = count \n",
      "7": "<IND> count = int(seconds / amount) \n seconds %= int(query) \n time_comp[label.strip()] = count \n",
      "8": "<IND> count = int(seconds / amount) \n seconds %= int(label.strip()) \n time_comp[label.strip()] = count \n",
      "9": "<IND> count = int(seconds / amount) \n seconds %= int(moment.duration(moment.duration(moment.duration(moment.duration(moment.duration))) \n time_comp[label.strip()] = count \n",
      "10": "<IND> count = int(seconds / amount) \n seconds %= int(max(max(max(max(max(max)))) \n time_comp[label.strip()] = count \n",
      "11": "<IND> count = int(seconds / amount) \n seconds %= int(max_length) \n time_comp[label.strip()] = count \n",
      "12": "<IND> count = int(seconds / amount) \n seconds %= int(moment.duration(moment.duration(moment.duration(moment.duration))) \n time_comp[label.strip()] = count \n",
      "13": "<IND> count = int(seconds / amount) \n seconds %= int(length) \n time_comp[label.strip()] = count \n",
      "14": "<IND> count = int(seconds / amount) \n seconds %= int(maxTime) \n time_comp[label.strip()] = count \n",
      "15": "<IND> count = int(seconds / amount) \n seconds %= int(int) \n time_comp[label.strip()] = count \n",
      "16": "<IND> count = int(seconds / amount) \n seconds %= int(max(max(max(max(max)))) \n time_comp[label.strip()] = count \n",
      "17": "<IND> count = int(seconds / amount) \n seconds %= int(max(seconds)) \n time_comp[label.strip()] = count \n",
      "18": "<IND> count = int(seconds / amount) \n seconds %= int(max(int)) \n time_comp[label.strip()] = count \n",
      "19": "<IND> count = int(seconds / amount) \n seconds %= int( amount) \n time_comp[label.strip()] = count \n",
      "20": "<IND> count = int(seconds / amount) \n seconds %= int(null) \n time_comp[label.strip()] = count \n",
      "21": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "22": "<IND> count = int(seconds / amount) \n seconds %= int(moment.duration(moment.duration(moment.duration(moment.duration(moment.duration(moment.duration))) \n time_comp[label.strip()] = count \n",
      "23": "<IND> count = int(seconds / amount) \n seconds %= int(menu) \n time_comp[label.strip()] = count \n",
      "24": "<IND> count = int(seconds / amount) \n seconds %= int(min.length) \n time_comp[label.strip()] = count \n",
      "25": "<IND> count = int(seconds / amount) \n seconds %= int(menu(menu)) \n time_comp[label.strip()] = count \n",
      "26": "<IND> count = int(seconds / amount) \n seconds %= int(let name) \n time_comp[label.strip()] = count \n",
      "27": "<IND> count = int(seconds / amount) \n seconds %= int(label[label.strip()]) \n time_comp[label.strip()] = count \n",
      "28": "<DED> count = int(seconds / amount) \n seconds %= int(let float) \n time_comp[label.strip()] = count \n",
      "29": "<IND> count = int(seconds / amount) \n seconds %= int(max(max(max(max(max(max(max))))) \n time_comp[label.strip()] = count \n",
      "30": "<IND> count = int(seconds / amount) \n seconds %= int(max(max(max(max(max max)))) \n time_comp[label.strip()] = count \n",
      "31": "<IND> count = int(seconds / amount) \n seconds %= int(str) \n time_comp[label.strip()] = count \n",
      "32": "<IND> count = int(seconds / amount) \n seconds %= int(label) \n time_comp[label.strip()] = count \n",
      "33": "<IND> count = int(seconds / amount) \n seconds %= total \n time_comp[label.strip()] = count \n",
      "34": "<IND> count = int(seconds / amount) \n seconds %= int(max(max(max(max(max(max max)))) \n time_comp[label.strip()] = count \n",
      "35": "<IND> count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "36": "<IND> count = int(seconds / amount) \n seconds %= int(max(1)) \n time_comp[label.strip()] = count \n",
      "37": "<IND> count = int(seconds / amount) \n seconds %= length \n time_comp[label.strip()] = count \n",
      "38": "<IND> count = int(seconds / amount) \n seconds %= int(max_length, max_length) \n time_comp[label.strip()] = count \n",
      "39": "<IND> count = int(seconds / amount) \n seconds %= int(strip) \n time_comp[label.strip()] = count \n",
      "40": "<IND> count = int(seconds / amount) \n seconds %= int(int, float) \n time_comp[label.strip()] = count \n",
      "41": "<DED> count = int(seconds / amount) \n seconds %= float \n time_comp[label.strip()] = count \n",
      "42": "<IND> count = float(seconds / amount) \n seconds %= float \n time_comp[label.strip()] = count \n",
      "43": "<IND> count = int(seconds / amount) \n seconds %= int(moment.duration(moment.duration(moment.duration(moment.duration(mutation.duration))) \n time_comp[label.strip()] = count \n",
      "44": "<IND> count = int(seconds / amount) \n seconds %= int(max(length)) \n time_comp[label.strip()] = count \n",
      "45": "<DED> count = int(seconds / amount) \n seconds %= int(t) \n time_comp[label.strip()] = count \n",
      "46": "<IND> count = int(seconds / amount) \n seconds %= int(max(max(max(max max))) \n time_comp[label.strip()] = count \n",
      "47": "<IND> count = float(seconds / amount) \n seconds %= int(t) \n time_comp[label.strip()] = count \n",
      "48": "<IND> count = int(seconds / amount) \n seconds %= int(e) \n time_comp[label.strip()] = count \n",
      "49": "<IND> count = int(seconds / amount) \n seconds %= int(summer) \n time_comp[label.strip()] = count \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED>homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "target_code": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/api.py",
    "target_filename": "nio/api.py",
    "source_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0^",
    "target_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "predictions": [
      "\n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "1": "\n <DED> homeserver = str(urlparse(homeserver)) if homeserver else None \n \n",
      "2": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] \n \n",
      "3": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n \n",
      "4": "\n <DED> urlparse(homeserver) if homeserver else None \n \n",
      "5": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "6": "\n <DED> homeserver = urlparse(homeserver) if homeserver else '' \n \n",
      "7": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n",
      "8": "\n <DED> urlparse(homeserver) if homeserver else Optional[\"ParseResult\"]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "9": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n \n",
      "10": "\n <DED> urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] is None \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "11": "\n <DED> urlparse = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "12": "\n <DED> if homeserver is None \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "13": "\n <DED> assert homeserver is not None \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "14": "\n <DED> urlparse(homeserver) if homeserver else Optional[\"ParseResult\"]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[\"Homeserver\"] \n \n",
      "15": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "16": "\n <DED> urlparse = urlparse(homeserver) if homeserver else None \n \n",
      "17": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npx) \n",
      "18": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] = None \n \n",
      "19": "\n <DED> assert isinstance(homeserver, str) \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "20": "\n <DED> homeserver = str(urlparse(homeserver)) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n \n",
      "21": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npcc) \n \n",
      "22": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npx) \n \n",
      "23": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc = if homeserver else None \n \n",
      "24": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.nply) \n",
      "25": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npctr] \n \n",
      "26": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n \n",
      "27": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n \n",
      "28": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np",
      "29": "\n <DED> urlparse: Optional[homeserver] = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "30": "\n <DED> urlparse: Optional[homeserver] = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "31": "\n <DED> urlparse: Optional[homeserver] = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "32": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npy] \n",
      "33": "\n <DED> homeserver = urlparse(homeserver) if homeserver else urllib.parse(homeserver) \n \n",
      "34": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npcs) \n \n",
      "35": "\n <DED> urlparse = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] <DED> \n homeserver = urlparse(homeserver) if homeserver else Optional[\"homeserver\"] \n \n",
      "36": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n <IND>",
      "37": "\n <DED> urlparse = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"Homeserver\"] \n \n",
      "38": "\n <DED> self.homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "39": "\n <DED> homeserver = str(urlparse(homeserver)) if homeserver else Optional[\"ParseResult\"] \n \n",
      "40": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n \n",
      "41": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n <DED>",
      "42": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n <IND>",
      "43": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc=homeserver) \n \n",
      "44": "\n <DED> urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] is None \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[\"Homeserver\"] \n \n",
      "45": "\n <DED> urlparse = urlparse(homeserver) if homeserver else Optional[\"ParseResult\"] <DED> \n homeserver = urlparse(homeserver) if homeserver else Optional[\"Homeserver\"] \n \n",
      "46": "\n <DED> urlparse: Optional[homeserver] = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n \n",
      "47": "\n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[Optional[urllib.parse.ParseResult]] \n <DED> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np",
      "48": "\n <DED> homeserver = urlparse(homeserver) if homeserver else \"\" \n \n",
      "49": "\n <DED> if homeserver else Optional[urllib.parse.ParseResult]: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.no) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
    "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 93,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ReactiveX/RxPY",
    "source_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "target_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "source_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90^",
    "target_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "predictions": [
      "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "1": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, Duetime) \n \n",
      "2": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setTime) \n \n",
      "3": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, scheduledItem) \n \n",
      "4": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, scheduletime) \n \n",
      "5": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, ScheduledItem) \n \n",
      "6": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setTime(duetime)) \n \n",
      "7": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setTimeout) \n \n",
      "8": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, requiredtime) \n \n",
      "9": "duetime = self.to_datetime(duetime) \n status = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, status) \n \n",
      "10": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, result) \n \n",
      "11": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, DueTime) \n \n",
      "12": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setTime()) \n \n",
      "13": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setItem(duetime)) \n \n",
      "14": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, datetime) \n \n",
      "15": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, required) \n \n",
      "16": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, set_duetime) \n \n",
      "17": "duetime = self.to_datetime(duetime) \n si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime) \n \n",
      "18": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, tupletime) \n \n",
      "19": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, expectedtime) \n \n",
      "20": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, set(duetime)) \n \n",
      "21": "duetime = self.to_datetime(duetime) \n if not ScheduledItem: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "22": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, cancelledItem) \n \n",
      "23": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, total) \n \n",
      "24": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, amount) \n \n",
      "25": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, date) \n \n",
      "26": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action,...duetime) \n \n",
      "27": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, expectedTime) \n \n",
      "28": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, expected) \n \n",
      "29": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setTime, setTime) \n \n",
      "30": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, list(duetime)) \n \n",
      "31": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, tid) \n \n",
      "32": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, set()) \n \n",
      "33": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, resulttime) \n \n",
      "34": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, time) \n \n",
      "35": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, requiredTime) \n \n",
      "36": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, plannedItem) \n \n",
      "37": "duetime = self.to_datetime(duetime) \n if not ScheduledItem: ScheduledItem(self, state, action, duetime) \n \n",
      "38": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, scheduledtime) \n \n",
      "39": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setTimes()) \n \n",
      "40": "duetime = self.to_datetime(duetime) \n status = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "41": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n <IND>",
      "42": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, setItem) \n \n",
      "43": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, scheduledTime) \n \n",
      "44": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, tupleTime) \n \n",
      "45": "duetime = self.to_datetime(duetime) <DED> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "46": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, settime) \n \n",
      "47": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, participant) \n \n",
      "48": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, object) \n \n",
      "49": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, equalTime) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,\n",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_line": "    other_indices: dict = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAI",
    "source_filename": "monai/visualize/img2tensorboard.py",
    "target_filename": "monai/visualize/img2tensorboard.py",
    "source_changeid": "718d11abb2310ab74321256032a264488a7883b4^",
    "target_changeid": "718d11abb2310ab74321256032a264488a7883b4",
    "predictions": [
      "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "1": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "2": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "3": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "4": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "5": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "6": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "7": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, \n",
      "8": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "9": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "10": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[dict] = None, \n scale_factor: float = 1, \n",
      "11": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "12": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict] = None, \n scale_factor: float = 1, \n",
      "13": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[sequence, str]] = None, \n scale_factor: float = 1, \n",
      "14": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Dict[Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "15": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Dict[, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "16": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any], None] = None, \n scale_factor: float = 1, \n",
      "17": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[types.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "18": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[typing.Dict[Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "19": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[int], dict] = None, \n scale_factor: float = 1, \n",
      "20": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any], typing.Any]] = None, \n scale_factor: float = 1, \n",
      "21": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Dict, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "22": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[type, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "23": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, <IND>",
      "24": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str] = (), \n scale_factor: float = 1, \n",
      "25": "image_axes: Sequence[int] = (1, 2), \n others_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "26": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[sequence, None] = None, \n scale_factor: float = 1, \n",
      "27": "image_axes: Sequence[int] = (1, 2), <DED> other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "28": "image_axes: Sequence[int] = (1, 2), <IND> other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "29": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "30": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str] = \"\", \n scale_factor: float = 1, \n",
      "31": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[sequence, dict]] = None, \n scale_factor: float = 1, \n",
      "32": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, <IND> scale_factor: float = 1, \n",
      "33": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[sequence], \n scale_factor: float = 1, \n",
      "34": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str] = [], \n scale_factor: float = 1, \n",
      "35": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[typing.Any, typing.Any] = None, \n scale_factor: float = 1, \n",
      "36": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[int]] = None, \n scale_factor: float = 1, \n",
      "37": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, <DED>",
      "38": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[sequence]] = None, \n scale_factor: float = 1, \n",
      "39": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str], \n scale_factor: float = 1, \n",
      "40": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str], \n scale_factor: float = 1, \n",
      "41": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, <DED> scale_factor: float = 1, \n",
      "42": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[int, Any]] = None, \n scale_factor: float = 1, \n",
      "43": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[int], None] = None, \n scale_factor: float = 1, \n",
      "44": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any], dict] = None, \n scale_factor: float = 1, \n",
      "45": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[int, str]] = None, \n scale_factor: float = 1, \n",
      "46": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[sequence], dict] = None, \n scale_factor: float = 1, \n",
      "47": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[typing.Any], typing.Any] = None, \n scale_factor: float = 1, \n",
      "48": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[typing.Any, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "49": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[int], Any] = None, \n scale_factor: float = 1, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2221,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n"
    ],
    "correct": false,
    "top_five": {
      "0": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "1": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "2": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "3": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "4": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "5": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "6": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "7": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "8": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (\"\") \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "9": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "10": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "11": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "12": "timeout: Optional[float] = None, \n metadata: Optional[sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "13": "timeout: Optional[float] = None, \n metadata: Sequence[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "14": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "15": "timeout: Optional[float] = None, \n metadata: str = \"google_cloud_default\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "16": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "17": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = { } \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "18": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "19": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "20": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "21": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), <IND> gcp_conn_id: str = \"google_cloud_default\", \n",
      "22": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "23": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "24": "timeout: Optional[float] = None, <IND> metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "25": "timeout: Optional[float] = None, <DED> metadata: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "26": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "27": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), <DED> gcp_conn_id: str = \"google_cloud_default\", \n",
      "28": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = () \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "29": "timeout: Optional[float] = None, \n metadata=None: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "30": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <DED>",
      "31": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = true, \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "32": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "33": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "34": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = \",\" \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "35": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "36": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]] = { } \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "37": "timeout: Optional[float] = None, \n metadata: Squence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "38": "timeout: Optional[float] = None, \n metadata: () => Optional[Sequence[Tuple[str, str]]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "39": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]) = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "40": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "41": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "42": "timeout: Optional[float] = None, \n metadata: Snequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "43": "timeout: Optional[float] = None, \n metadata:Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "44": "timeout: Optional[float] = None, \n metadata: str = [] \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "45": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = \"\", \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "46": "timeout: Optional[float] = None, \n metadata: Optional[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "47": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = [], \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "48": "timeout: Optional[float] = None, \n metadata: str = \"\", \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "49": "timeout: Optional[float] = None, \n metadata: Optional[Sequence[Tuple[str, str]]] = None, \n gcp_conn_id: str = \"google_cloud_default\", <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):\n        <IND>",
    "target_code": "\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        <IND>",
    "warning_line": "                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rec_len is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "osmocom/pysim",
    "source_filename": "pySim/filesystem.py",
    "target_filename": "pySim/filesystem.py",
    "source_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5^",
    "target_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "predictions": [
      "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "1": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <IND>",
      "2": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "3": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \n <IND>",
      "4": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int = None, size= { 1,None } ): \n <IND>",
      "5": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <IND> parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "6": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <DED>",
      "7": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <DED> parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "8": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF], int=None, size= { 1,None } ): \n <IND>",
      "9": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF] = None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "10": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:CardDF=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "11": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n \n",
      "12": "<DED> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "13": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "14": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { \"1,None } ): \n <IND>",
      "15": "<IND> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "16": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:Int, size= { 1,None } ): \n <IND>",
      "17": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): <IND> <IND>",
      "18": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ) -> None: \n <IND>",
      "19": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1 } ): \n <IND>",
      "20": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=none, size= { 1,None } ): \n <IND>",
      "21": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> Optional[CardDF]: \n <IND>",
      "22": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 31,None } ): \n <IND>",
      "23": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): <DED> <IND>",
      "24": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len=None, size= { 1,None } ): \n <IND>",
      "25": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <IND> parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <IND>",
      "26": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <DED>",
      "27": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <IND>",
      "28": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:CardDF: Optional[int]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "29": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:CardDF, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "30": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1): \n <IND>",
      "31": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ): \n <IND>",
      "32": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1- } ): \n <IND>",
      "33": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None): \n <IND>",
      "34": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=No, size= { 1,None } ): \n <IND>",
      "35": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None), rec_len:int=None, size= { 1,None } ): \n <IND>",
      "36": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <DED> parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <IND>",
      "37": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n \n",
      "38": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 2,None } ): \n <IND>",
      "39": "\n def __init__( \n self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "40": "<DED> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <IND>",
      "41": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len: <DED> =None, size= { 1,None } ): \n <IND>",
      "42": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int, size= { 1,None } ): \n <IND>",
      "43": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None): \n <IND> parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "44": "\n def __init__(self, fid:str, sfid:str=None, names:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "45": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent=Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "46": "\n def __init__( <DED> self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "47": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF], int = None, size= { 1,None } ): \n <IND>",
      "48": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 3,None } ): \n <IND>",
      "49": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,5 } ): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 659,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/channel.py",
    "target_filename": "aiormq/channel.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "1": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "2": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "3": "self, \n destination: str, \n source: str = '', \n routing_key: str = '', \n *, \n",
      "4": "self, \n destination: str = \"\", \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "5": "self, \n destination: str: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "6": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <IND>",
      "7": "self, \n destination: str, \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "8": "self, <IND> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "9": "self, \n destination: str = bool[str] = None, \n source: str = bool[str] = None, \n routing_key: str = \"\", \n *, \n",
      "10": "self, <DED> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "11": "self, \n destination: str = '', <IND> source: str = '', \n routing_key: str = '', \n *, \n",
      "12": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <DED>",
      "13": "self, \n destination: str = '', \n source: str = '', <IND> routing_key: str = '', \n *, \n",
      "14": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <IND> *, \n",
      "15": "self, \n destination: str = '', <DED> source: str = '', \n routing_key: str = '', \n *, \n",
      "16": "self, \n destination_str: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "17": "self, \n destination: str = '', \n source: str = '', <DED> routing_key: str = '', \n *, \n",
      "18": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <DED> *, \n",
      "19": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '\", \n *, \n",
      "20": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"'\", \n *, \n",
      "21": "self, \n destination: str, \n source: str, \n routing_key: str = \"\", \n *, \n",
      "22": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ', \n *, \n",
      "23": "self, \n destination: str: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "24": "self, \n destination: str, \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "25": "self, \n destination: str = (), \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "26": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, <IND>",
      "27": "self, \n destination: Str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "28": "self, \n destination: str = (), \n source: str = (), \n routing_key: str = \"\", \n *, \n",
      "29": "self, \n destination: str = '', \n source = '', \n routing_key: str = '', \n *, \n",
      "30": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", <IND> *, \n",
      "31": "self, \n destination: str = bool, \n source: str = bool, \n routing_key: str = \"\", \n *, \n",
      "32": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, <DED>",
      "33": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ''), \n *, \n",
      "34": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", <DED> *, \n",
      "35": "self, <DED> destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "36": "self, \n destination: str = [], \n source: str = '', \n routing_key: str = '', \n *, \n",
      "37": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, <IND>",
      "38": "self, \n destination : str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "39": "self, \n destination: str = 0, \n source: str = 0, \n routing_key: str = \"\", \n *, \n",
      "40": "self, \n destination: str = bool[str] = None, \n source: str = bool[str], \n routing_key: str = \"\", \n *, \n",
      "41": "self, \n destination: str = '', \n source: str = '', <IND> routing_key: str = \"\", \n *, \n",
      "42": "self, <IND> destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "43": "self, \n destination, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "44": "self, \n destination: str = '', <IND> source: str = '', \n routing_key: str = \"\", \n *, \n",
      "45": "self, \n destination: str = '', <DED> source: str = '', \n routing_key: str = \"\", \n *, \n",
      "46": "self, \n destination: str | None = None, \n source: str | None = None, \n routing_key: str = \"\", \n *, \n",
      "47": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ''\", \n *, \n",
      "48": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", <IND> *, \n",
      "49": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = '', \n *, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):\n",
    "target_code": "    <DED>async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_line": "        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " kwarg2 is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebook/TestSlide",
    "source_filename": "tests/mock_callable_testslide.py",
    "target_filename": "tests/mock_callable_testslide.py",
    "source_changeid": "97c39d89c2a047a3396be659645bd89dab01d859^",
    "target_changeid": "97c39d89c2a047a3396be659645bd89dab01d859",
    "predictions": [
      "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "1": "\n <DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "2": "<IND> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "3": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' \n ): \n",
      "4": "<DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None \n ): \n",
      "5": "<DED> async def async_instance_method( <DED> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "6": "<DED> async def async_instance_method( <IND> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "7": "<DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None, kwarg2: Optional[str] = None \n ): \n",
      "8": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\", kwarg2: str = \"\" \n ): \n",
      "9": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): <IND>",
      "10": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): <DED>",
      "11": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" <IND> ): \n",
      "12": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" <DED> ): \n",
      "13": "\n <IND> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "14": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"): \n",
      "15": "\n <DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' \n ): \n",
      "16": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: Optional[str] = None, kwarg2: Optional[str] = None \n ): \n",
      "17": "\n <DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None, kwarg2: Optional[str] = None \n ): \n",
      "18": "<DED> async def async_instance_method( \n self, arg1: Optional[str], arg2: Optional[str] = None, kwarg1: Optional[str] = None, kwarg2: Optional[str] = None \n ): \n",
      "19": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \",\" \"kwarg2: str = \"\" \n ): \n",
      "20": "<IND> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' \n ): \n",
      "21": "<DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None <DED> kwarg2: Optional[str] = None \n ): \n",
      "22": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ) -> None: \n",
      "23": "\n <DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None \n ): \n",
      "24": "<DED> async def async_instance_method( \n self, arg1: Str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "25": "\n \n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "26": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = False, kwarg2: str = False \n ): \n",
      "27": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "28": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\", \"kwarg2: str = \"\" \n ): \n",
      "29": "<DED> async def async_instance_method( \n self, arg1, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "30": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \",\" kwarg2: str = \"\" \n ): \n",
      "31": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \",\", kwarg2: str = \"\" \n ): \n",
      "32": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' <IND> ): \n",
      "33": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = *none, kwarg2: str = *none \n ): \n",
      "34": "\n <DED> async def async_instance_method( <DED> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "35": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' <DED> ): \n",
      "36": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \",\"\", kwarg2: str = \"\" \n ): \n",
      "37": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\" \n ): \n",
      "38": "<DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None, \n kwarg2: Optional[str] = None \n ): \n",
      "39": "\n <DED> async def async_instance_method( <IND> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "40": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = 0, kwarg2: str = \"\" \n ): \n",
      "41": "<IND> async def async_instance_method( <DED> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "42": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", \"kwarg2: str = \"\" \n ): \n",
      "43": "<DED> async def async_instance_method( \n self, arg1: Optional[str] = None, arg2: Optional[str] = None, kwarg1: Optional[str] = None <IND> ): \n",
      "44": "<DED> async def async_instance_method( <DED> self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' \n ): \n",
      "45": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = 0 \n ): \n",
      "46": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = '' \n ): \n",
      "47": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \",\" \"kwarg2\": str = \"\" \n ): \n",
      "48": "<DED> async def async_instance_method( <IND> self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' \n ): \n",
      "49": "\n <DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               symbol_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " symbol_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "1": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "2": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "3": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "4": "<IND> def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "5": "<IND> def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "6": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "7": "<IND> def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "8": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "9": "<IND> def object(self, \n symbol_name: typing.Optional[str] = None, \n type_name: typing.Optional[str] = None, \n offset: int = None, \n",
      "10": "<IND> def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "11": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "12": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "13": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "14": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ) -> None: \n",
      "15": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED> symbol_name: Optional[str] = None, \n",
      "16": "<IND> def object(self, \n symbolic_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "17": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ): \n",
      "18": "<DED> def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "19": "<DED> def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "20": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "21": "<DED> def object(self, \n symbol_name: typing.Optional[str] = None, \n type_name: typing.Optional[str] = None, \n offset: int = None, \n",
      "22": "<DED> def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "23": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n exports: Optional[str] = None, \n",
      "24": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "25": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "26": "<DED> def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "27": "<IND> def object(self, \n simbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "28": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "29": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED> name: Optional[str] = None, \n",
      "30": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "31": "\n def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "32": "<IND> def object(self, \n symbol_name: Type[str] = None, \n type_name: Type[str] = None, \n offset: int = None, \n",
      "33": "\n def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "34": "<IND> def object(self, \n symbol_name: Formal[str] = None, \n type_name: Formal[str] = None, \n offset: int = None, \n",
      "35": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "36": "<IND> def object(self, \n symbol_name: option.str(None), \n type_name: option.str(None), \n offset: int = None, \n",
      "37": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "38": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "39": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ) -> None: \n",
      "40": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "41": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED> symbol_name: Optional[str] = None, \n",
      "42": "<IND> def object(self, \n symbol_name: str = '', \n type_name: str = '', \n offset: int = None, \n",
      "43": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n name: Optional[str] = None, \n",
      "44": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "45": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int, \n",
      "46": "<IND> def object(self, \n symbol_name, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "47": "\n def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "48": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str] = None, \n offset: int = None, \n",
      "49": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n type_name: Optional[str] = None, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def start(self, caller_frame: types.FrameType = None):\n        <IND>",
    "target_code": "\n    <DED>def start(self, caller_frame: types.FrameType | None = None):\n        <IND>",
    "warning_line": "    def start(self, caller_frame: types.FrameType = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 101,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "joerick/pyinstrument",
    "source_filename": "pyinstrument/profiler.py",
    "target_filename": "pyinstrument/profiler.py",
    "source_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919^",
    "target_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "predictions": [
      "\n <DED> def start(self, caller_frame: Types.FrameType): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def start(self, caller_frame: Types.FrameType): \n <IND>",
      "1": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None): \n <IND>",
      "2": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <IND>",
      "3": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "4": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "5": "\n <DED> def start(self, caller_frame: Types[Type] = None) -> None: \n <IND>",
      "6": "\n <DED> def start(self, caller_frame: options.FrameType): \n <IND>",
      "7": "\n <DED> def start(self, caller_frame: Types[Type] = None): \n <IND>",
      "8": "\n <DED> def start(self, caller_frame: Types[TypeType] = None) -> None: \n <IND>",
      "9": "\n <DED> def start(self, caller_frame: Types[TypeType] = None): \n <IND>",
      "10": "\n <DED> def start(self, caller_frame: Types.FrameType) -> None: \n <IND>",
      "11": "\n <DED> def start(self, caller_frame: Types.FrameType, Optional[types.FrameType] = None) -> None: \n <IND>",
      "12": "\n <DED> def start(self, caller_frame: Types[types.FrameType] = None) -> None: \n <IND>",
      "13": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None) -> None: \n <IND>",
      "14": "\n <IND> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <IND>",
      "15": "\n \n <DED> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <IND>",
      "16": "\n <DED> def start(self, caller_frame: Types.FrameType = None): \n <IND>",
      "17": "\n <DED> def start(self, caller_frame: Types.FrameType, Optional[types.FrameType] = None): \n <IND>",
      "18": "\n <DED> def start(self, caller_frame: Types[types.FrameType] = None): \n <IND>",
      "19": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n ) -> None: \n <IND>",
      "20": "\n <IND> def start(self, caller_frame: Optional[types.FrameType] = None): \n <IND>",
      "21": "\n <DED> def start(self, caller_frame: Types[FrameType] = None) -> None: \n <IND>",
      "22": "\n <DED> def start(self, caller_frame: Types[FrameType] = None): \n <IND>",
      "23": "\n \n <DED> def start(self, caller_frame: Optional[types.FrameType] = None): \n <IND>",
      "24": "\n <DED> def start(self, caller_frame: Types[str] = None) -> None: \n <IND>",
      "25": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <DED>",
      "26": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n ) -> None: \n <IND>",
      "27": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None) -> None: \n <IND>",
      "28": "\n <DED> def start(self, caller_frame: FrameType): \n <IND>",
      "29": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n \n",
      "30": "\n <DED> def start(self, caller_frame: Types['FrameType'] = None) -> None: \n <IND>",
      "31": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None): \n <DED>",
      "32": "\n <DED> def start(self, caller_frame: Types['FrameType'] = None): \n <IND>",
      "33": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n ) -> None: \n <IND>",
      "34": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <IND> start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <IND>",
      "35": "\n <DED> def start(self, caller_frame: options.FrameType) -> None: \n <IND>",
      "36": "\n <DED> def start(self, caller_frame: Types.FrameType = None) -> None: \n <IND>",
      "37": "\n <DED> def start(self, caller_frame: typing.FrameType): \n <IND>",
      "38": "\n <DED> def start(self, caller_frame: Types[str] = None): \n <IND>",
      "39": "\n <DED> def start(self, caller_frame: typings.FrameType): \n <IND>",
      "40": "\n <IND> def start(self, caller_frame: Types.FrameType): \n <IND>",
      "41": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "42": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n caller_frame: Optional[types.FrameType] = None \n caller_frame = None \n",
      "43": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None \n caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "44": "\n \n <DED> def start(self, caller_frame: Types.FrameType): \n <IND>",
      "45": "\n <DED> def start(self, caller_frame: Optional[types.FrameType] = None) -> None: \n <IND> start(self, caller_frame: Optional[types.FrameType] = None): \n <IND>",
      "46": "\n <DED> def start(self, caller_frame: types.FrameType): \n <IND>",
      "47": "\n <DED> def start(self, caller_frame: Types.FrameType, None): \n <IND>",
      "48": "\n <DED> def start(self, caller_frame: Types[Type].FrameType): \n <IND>",
      "49": "\n <DED> def start(self, caller_frame: types.FrameType): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_line": "        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scrapy/scrapy",
    "source_filename": "scrapy/core/downloader/handlers/http2.py",
    "target_filename": "scrapy/core/downloader/handlers/http2.py",
    "source_changeid": "38d361792c02ae2b25323258d070c04d8906495a^",
    "target_changeid": "38d361792c02ae2b25323258d070c04d8906495a",
    "predictions": [
      "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "1": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "2": "self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "3": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, <IND> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "4": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, <DED> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "5": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <IND>",
      "6": "self, context_factory, \n connect_timeout=10, <IND> bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "7": "self, context_factory, \n connect_timeout=10, \n assert self, pool: Optional[H2ConnectionPool] = None, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "8": "self, context_factory, \n connect_timeout=10, <DED> bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "9": "self, context_factory, <IND> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "10": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, <IND> crawler=None \n",
      "11": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, <DED> crawler=None \n",
      "12": "self, context_factory, \n connect_timeout=10, <DED> bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "13": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> ) -> None: \n",
      "14": "self, context_factory, \n connect_timeout=11, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "15": "self, context_factory, <DED> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "16": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "17": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n ) -> None: \n",
      "18": "self, context_factory, \n connect_timeout=10, \n assert self, pool: Optional[H2ConnectionPool] = None, \n bind_address: Optional[bytes] = None, \n crawler=None \n",
      "19": "self, context_factory, <DED> \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "20": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "21": "self, context_factory, \n connect_timeout=20, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "22": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> assert self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "23": "self, context_factory, \n connect_timeout=10, \n assert self, pool, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "24": "self, context_factory, \n connect_timeout=10, \n bind_address = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "25": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, Pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "26": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n assert self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "27": "self, context_factory, \n connect_timeout=10, <IND> bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "28": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n",
      "29": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "30": "self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "31": "self, context_factory, \n connect_timeout=10, \n bind_address=Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "32": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[HT2ConnectionPool] = None, \n crawler=None \n",
      "33": "self, context_factory, \n connect_timeout=10, \n assert self, pool = None, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "34": "self, context_factory, \n connect_timeout= 10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "35": "self, context_factory, \n connect_timeout=10, \n assert self, pool = None, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "36": "self, context_factory, \n connect_timeout=10, <DED> bind_address: Optional[bytes] = None, <IND> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "37": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n",
      "38": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> ): \n",
      "39": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n ): \n",
      "40": "self, context_factory, <IND> connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "41": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "42": "self, context_factory, \n connect_timeout=10, \n bind_address=None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "43": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> assert self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "44": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED> assert self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n",
      "45": "self, context_factory, \n connect_timeout=10, <DED> bind_address: Optional[bytes] = None, <DED> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "46": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, <IND> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "47": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[S2ConnectionPool] = None, \n crawler=None \n",
      "48": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, <DED> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "49": "self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, <IND> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <IND>def __init__(self, rf_path: str=None):\n        <IND>super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3\n",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "1": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "2": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "3": "\n <IND> def __init__(self, rf_path: str=\"\"): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "4": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Fonseca) \n self.number_of_variables = 3 \n",
      "5": "\n <IND> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "6": "\n <IND> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "7": "\n <IND> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "8": "\n <IND> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "9": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "10": "\n <IND> def __init__(): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "11": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=str) \n self.number_of_variables = 3 \n",
      "12": "\n <IND> def __init__(self, rf_path: str=\"\"): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "13": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 3 \n",
      "14": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "15": "\n <IND> def __init__(self, rf_path: Optional[str]=None) -> None: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "16": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "17": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=_path) \n self.number_of_variables = 3 \n",
      "18": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=none) \n self.number_of_variables = 3 \n",
      "19": "\n <IND> def __init__(self, rf_path: Optional[str]=None) -> None: \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "20": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=fonseca) \n self.number_of_variables = 3 \n",
      "21": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=None) \n self.number_of_variables = 3 \n",
      "22": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 3 \n",
      "23": "\n <DED> def __init__(self, rf_path: str=\"\"): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "24": "\n <IND> def __init__(self) -> None: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "25": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "26": "\n <DED> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "27": "\n <DED> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "28": "\n <IND> def __init__(self, rf_path: str): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "29": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Optional[rf_path]) \n self.number_of_variables = 3 \n",
      "30": "\n <IND> def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "31": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Base) \n self.number_of_variables = 3 \n",
      "32": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Fonseca) \n self.number_of_variables = 3 \n",
      "33": "\n <IND> def __init__(self, rf_path: str=\"\"): \n <IND> super(Fonseca, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 3 \n",
      "34": "\n <IND> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Fonseca, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 3 \n",
      "35": "\n <IND> def __init__(self): \n \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "36": "\n <DED> def __init__(self, rf_path: str=\"\"): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "37": "\n \n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "38": "\n <IND> def __init__(self, rf_path: str): \n <IND> super(Fonseca, self).__init__(rf_path=rf_path) \n self.number_of_variables = 3 \n",
      "39": "\n <IND> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Fonseca, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 3 \n",
      "40": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Error) \n self.number_of_variables = 3 \n",
      "41": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=()) \n self.number_of_variables = 3 \n",
      "42": "\n <IND> def __init__(self) -> str: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "43": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=window.rf_path) \n self.number_of_variables = 3 \n",
      "44": "<DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "45": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Str) \n self.number_of_variables = 3 \n",
      "46": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__(rf_path=Field) \n self.number_of_variables = 3 \n",
      "47": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() <IND> self.number_of_variables = 3 \n",
      "48": "\n <IND> def __init__(self): \n <IND> super().__init__(rf_path=Rf_path) \n self.number_of_variables = 3 \n",
      "49": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__() <IND> self.number_of_variables = 3 \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            <IND>style_data = self.data.get(style_class, {})\n",
    "target_code": "\n        for style_class in reversed(style_classes):\n            <IND>style_data = self.data.get(style_class, {})\n",
    "warning_line": "        style_classes = reversed(style_classes)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/gui/ui_style.py",
    "target_filename": "arcade/gui/ui_style.py",
    "source_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b^",
    "target_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "predictions": [
      "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "1": "\n style_classes_reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "2": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "3": "\n style_classes_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "4": "\n style_classes = reversed(style_classes) \n style_data = self.data.get(style_class, { } ) \n",
      "5": "\n style_classes_style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "6": "\n style_classes_s = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "7": "\n style_classes_to_reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "8": "\n style_classes=reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "9": "\n style_classes_classes_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "10": "\n style_classes_list = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "11": "\n style_classes: List[str] = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "12": "\n style_classes = style_classes \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "13": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, { } ) \n",
      "14": "\n style_classes = (reversed(style_classes)) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "15": "\n style_classes = style_classes.reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "16": "\n style_classes_types_classes_reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "17": "\n style_classes = str(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "18": "\n style_classes_classes_classes_class = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "19": "\n style_classes_classes_classes_class = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "20": "\n style_classes_classes_reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "21": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n \n style_data = self.data.get(style_class, { } ) \n",
      "22": "\n style_classes_reversed(style_classes) \n style_data = self.data.get(style_class, { } ) \n",
      "23": "\n style_classes_classes_class_s = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "24": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "25": "\n style_classes_types = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "26": "\n style_classes_classes_class=reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "27": "\n style_classes_list = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "28": "\n style_classes_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "29": "\n style_classes_names = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "30": "<IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "31": "\n style_classes_types_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "32": "\n style_classes_vars = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "33": "\n style_classes_s = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "34": "\n style_classes_classes_class = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "35": "\n styles_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "36": "\n style_classes_reversed(style_classes) \n for style_class in style_classes_reversed(style_classes): \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "37": "\n style_classes_contexts = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "38": "\n style_classes_parameters = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "39": "\n style_classes_called_reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "40": "\n style_classes_radio = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "41": "\n style_classess = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "42": "\n style_classes_reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, { } ) \n",
      "43": "\n style_classes.reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "44": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: <IND> <IND> style_data = self.data.get(style_class, { } ) \n",
      "45": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) <IND>",
      "46": "\n style_classes = reversed(style_classes) \n style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "47": "\n style_classes=style_classes \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "48": "\n style_classes = reversed(style_classes) \n style_data = self.data.get(style_class, { } ) \n",
      "49": "\n style_classes_reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:\n",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_line": "        announcements_to_consume: Set[Announcement] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 387,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Chia-Network/chia-blockchain",
    "source_filename": "chia/wallet/wallet.py",
    "target_filename": "chia/wallet/wallet.py",
    "source_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13^",
    "target_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "predictions": [
      "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "1": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement], None] = None, \n ) -> TransactionRecord: \n",
      "2": "ignore_max_send_amount: bool = False, \n announced_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "3": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: <IND>",
      "4": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Optional[Set[Announcement]]] = None, \n ) -> TransactionRecord: \n",
      "5": "ignore_max_send_amount: bool = False, <IND> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "6": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Secret[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "7": "ignore_max_send_amount: bool = False, <DED> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "8": "ignore_max_send_amount: bool = True, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "9": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, <IND> ) -> TransactionRecord: \n",
      "10": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: <DED>",
      "11": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Schedule[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "12": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, <DED> ) -> TransactionRecord: \n",
      "13": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[\"Set[Announcement]\"] = None, \n ) -> TransactionRecord: \n",
      "14": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Single[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "15": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement], Optional[None]] = None, \n ) -> TransactionRecord: \n",
      "16": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[\"Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "17": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Symbol[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "18": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Status[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "19": "ignore_max_send_amount: bool = False, \n messages_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "20": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = [], \n ) -> TransactionRecord: \n",
      "21": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Mapping[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "22": "ignore_max_send_amount: bool = False, \n announces_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "23": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Annoncement]] = None, \n ) -> TransactionRecord: \n",
      "24": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement], Optional[List]] = None, \n ) -> TransactionRecord: \n",
      "25": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "26": "ignor_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "27": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Location[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "28": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Start[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "29": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Standard[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "30": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Size[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "31": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = (), \n ) -> TransactionRecord: \n",
      "32": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Mock[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "33": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[System[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "34": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[\"Set[Announcement\"]] = None, \n ) -> TransactionRecord: \n",
      "35": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement], None]] = None, \n ) -> TransactionRecord: \n",
      "36": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional['Announcement'] = None, \n ) -> TransactionRecord: \n",
      "37": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Announcement] = None, \n ) -> TransactionRecord: \n",
      "38": "ignore_max_send_amount: bool = False, \n annonc\u00e9s_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "39": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement], Optional[Optional[Symbol]]] = None, \n ) -> TransactionRecord: \n",
      "40": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Optional[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "41": "ignore_max_send_amount: bool = False, \n message_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "42": "ignore_max_send_amount: bool = False, \n announcements_to_conume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "43": "ignore_max_send_amount: bool = False, \n announcements_to_context: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "44": "ignore_max_send_amount: bool = False, \n announcements_to_consume: bool = False, \n ) -> TransactionRecord: \n",
      "45": "ignore_max_send_amount: bool = False, \n statement_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "46": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Anlage] = None, \n ) -> TransactionRecord: \n",
      "47": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[str] = None, \n ) -> TransactionRecord: \n",
      "48": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = \"\", \n ) -> TransactionRecord: \n",
      "49": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Int] = None, \n ) -> TransactionRecord: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def notice(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 334,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target) \n",
      "1": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, tags) \n",
      "2": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, message) \n",
      "3": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags)) \n",
      "4": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, message) \n",
      "5": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(notice) \n",
      "6": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, message, tags) \n",
      "7": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(message) \n",
      "8": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message) \n",
      "9": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message) \n",
      "10": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(target) \n",
      "11": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, messages) \n",
      "12": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, messages) \n",
      "13": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.notice(target, message, tags)) \n",
      "14": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message)) \n",
      "15": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags) \n",
      "16": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target) \n",
      "17": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags)) \n",
      "18": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.notice(target, message)) \n",
      "19": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(mock) \n",
      "20": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n",
      "21": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(target, tags) \n",
      "22": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, messages) \n",
      "23": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message)) \n",
      "24": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= } } ): \n <IND> self._add_line(target) \n",
      "25": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(notice(target, tags)) \n",
      "26": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line.notice(target, message) \n",
      "27": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._line.notice(target, message) \n",
      "28": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, message, tags)) \n",
      "29": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(message, tags) \n",
      "30": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.message.notice(target, message) \n",
      "31": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str,...tags): \n <IND> self._add_line(utils.irc.",
      "32": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice(target, messages)) \n",
      "33": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(line) \n",
      "34": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, message) \n",
      "35": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.notice(target, message) \n",
      "36": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(Message) \n",
      "37": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(target, message) \n",
      "38": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, tags) \n",
      "39": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self._add_line(utils.irc.notice(target, message, tags)) \n",
      "40": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, tag) \n",
      "41": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.",
      "42": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line.notice(target, tags) \n",
      "43": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: Optional[typing.Dict[str, tags)) \n",
      "44": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= \\ } ): \n <IND> self.lines.notice(target, message) \n",
      "45": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.notice(target, messages)) \n",
      "46": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.line.notice(target, message) \n",
      "47": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(target, message, tags) \n",
      "48": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, tags) \n",
      "49": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self.lines.notice(target, messages) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_line": "        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1140,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hikari-py/hikari",
    "source_filename": "hikari/orm/http/base_http_adapter.py",
    "target_filename": "hikari/orm/http/base_http_adapter.py",
    "source_changeid": "cf143052e1228280ed895c06da9177611d8ea088^",
    "target_changeid": "cf143052e1228280ed895c06da9177611d8ea088",
    "predictions": [
      "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "1": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT], \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "2": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "3": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NoRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "4": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (unspecified.Unspecified), \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "5": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT, int, str, unspecified.Unspecified] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "6": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT, int, str] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "7": "] = unspecified.UNSPECIFIED, \n parent_category: Type[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "8": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = '', \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "9": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = Unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "10": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = UNspecified.UNSPECIFIED, \n",
      "11": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.UnRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "12": "] = unspecified.UNSPECIFIED, \n parent_categories: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "13": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "14": "] = unspecified.UNSPECIFIED, \n parent_category: Type[type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "15": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = [] \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "16": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "17": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\" \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "18": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.notRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "19": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n ) -> None: \n",
      "20": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (Unspecified.Unspecified), \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "21": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.None[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "22": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <IND>",
      "23": "] = unspecified.UNSPECIFIED, \n child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "24": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: typing.Optional[type_hints.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "25": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = Unspecified.UNSPECIFIED, \n",
      "26": "] = unspecified.UNSPECIFIED, <IND> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "27": "] = unspecified.UNSPECIFIED, <DED> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "28": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, <IND> nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "29": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: typing.Optional[type_hints.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "30": "] = unspecified.UNSPECIFIED, \n parent_category_type: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "31": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, <DED> nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "32": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\".Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "33": "] = unspecified.UNSPECIFIED, \n parental_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "34": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \".\", \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "35": "] = unspecified.UNSPECIFIED, \n (parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "36": "] = unspecified.UNSPECIFIED, \n _parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "37": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (unspecified.UNspecified), \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "38": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NoRequired[_channels.GuildCategoryLikeT] = unspecified.UNspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "39": "] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "40": "] = unspecified.UNSPECIFIED, \n parent_category: Type[typing.Union[_channels.GuildCategoryLikeT], \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "41": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "42": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.None[_channels.GuildCategoryLikeT], \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "43": "] = unspecified.UNSPECIFIED, \n type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "44": "] = unspecified.UNSPECIFIED, \n parent_category=type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "45": "] = unspecified.UNSPECIFIED, \n label: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "46": "] = unspecified.UNSPECIFIED, \n namespace: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "47": "] = unspecified.UNSPECIFIED, \n parent_category: Type[type_hints.NotRequired[_channels.GuildCategoryLikeT], \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "48": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <DED>",
      "49": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = null, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 208,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "1": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "2": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "3": "self, \n destination: str, \n source: str = '', \n routing_key: str = '', \n *, \n",
      "4": "self, \n destination: str = \"\", \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "5": "self, \n destination: str: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "6": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <IND>",
      "7": "self, \n destination: str, \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "8": "self, <IND> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "9": "self, \n destination: str = bool[str] = None, \n source: str = bool[str] = None, \n routing_key: str = \"\", \n *, \n",
      "10": "self, <DED> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "11": "self, \n destination: str = '', <IND> source: str = '', \n routing_key: str = '', \n *, \n",
      "12": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <DED>",
      "13": "self, \n destination: str = '', \n source: str = '', <IND> routing_key: str = '', \n *, \n",
      "14": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <IND> *, \n",
      "15": "self, \n destination: str = '', <DED> source: str = '', \n routing_key: str = '', \n *, \n",
      "16": "self, \n destination_str: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "17": "self, \n destination: str = '', \n source: str = '', <DED> routing_key: str = '', \n *, \n",
      "18": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <DED> *, \n",
      "19": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '\", \n *, \n",
      "20": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"'\", \n *, \n",
      "21": "self, \n destination: str, \n source: str, \n routing_key: str = \"\", \n *, \n",
      "22": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ', \n *, \n",
      "23": "self, \n destination: str: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "24": "self, \n destination: str, \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "25": "self, \n destination: str = (), \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "26": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, <IND>",
      "27": "self, \n destination: Str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "28": "self, \n destination: str = (), \n source: str = (), \n routing_key: str = \"\", \n *, \n",
      "29": "self, \n destination: str = '', \n source = '', \n routing_key: str = '', \n *, \n",
      "30": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", <IND> *, \n",
      "31": "self, \n destination: str = bool, \n source: str = bool, \n routing_key: str = \"\", \n *, \n",
      "32": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, <DED>",
      "33": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ''), \n *, \n",
      "34": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", <DED> *, \n",
      "35": "self, <DED> destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "36": "self, \n destination: str = [], \n source: str = '', \n routing_key: str = '', \n *, \n",
      "37": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, <IND>",
      "38": "self, \n destination : str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "39": "self, \n destination: str = 0, \n source: str = 0, \n routing_key: str = \"\", \n *, \n",
      "40": "self, \n destination: str = bool[str] = None, \n source: str = bool[str], \n routing_key: str = \"\", \n *, \n",
      "41": "self, \n destination: str = '', \n source: str = '', <IND> routing_key: str = \"\", \n *, \n",
      "42": "self, <IND> destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "43": "self, \n destination, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "44": "self, \n destination: str = '', <IND> source: str = '', \n routing_key: str = \"\", \n *, \n",
      "45": "self, \n destination: str = '', <DED> source: str = '', \n routing_key: str = \"\", \n *, \n",
      "46": "self, \n destination: str | None = None, \n source: str | None = None, \n routing_key: str = \"\", \n *, \n",
      "47": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ''\", \n *, \n",
      "48": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", <IND> *, \n",
      "49": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = '', \n *, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        room_creator: str = None,\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
    "target_code": "        self,\n        room_creator: Optional[str] = None,\n        is_public: bool = True,\n        room_version: Optional[str] = None,\n        tok: Optional[str] = None,\n        expect_code: int = 200,\n",
    "warning_line": "        room_creator: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " room_creator is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "matrix-org/synapse",
    "source_filename": "tests/rest/client/v1/utils.py",
    "target_filename": "tests/rest/client/v1/utils.py",
    "source_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945^",
    "target_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945",
    "predictions": [
      "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "1": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "2": "self, \n room_creator: typing.Optional[str] = None, \n is_public: bool = True, \n room_version: typing.Optional[str] = None, \n tok: typing.Optional[str] = None, \n expect_code: int = 200, \n",
      "3": "self, \n room_creator: Optional[str] = None, \n is_public: bool = False, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "4": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, <IND>",
      "5": "self, <DED> \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "6": "self, <IND> room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "7": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, <IND> room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "8": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, <IND> expect_code: int = 200, \n",
      "9": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, <DED> room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "10": "self, \n room_creator: Optional[str] = None, <IND> is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "11": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, <IND> tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "12": "self, \n room_creator: Optional[str] = None, <DED> is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "13": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, <DED>",
      "14": "self, \n room_creator: int = 200, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "15": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, <DED> tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "16": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, <DED> expect_code: int = 200, \n",
      "17": "self, \n space_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "18": "self, \n room_createator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "19": "self, <DED> \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "20": "self, \n room_creator: str, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "21": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, <IND>",
      "22": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = False, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "23": "self, <IND> room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "24": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, <IND> room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "25": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, <IND> expect_code: int = 200, \n",
      "26": "self, \n room_creator: Union[str, None] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "27": "self, \n room_creator: typing.Optional[str] = None, \n is_public: bool = False, \n room_version: typing.Optional[str] = None, \n tok: typing.Optional[str] = None, \n expect_code: int = 200, \n",
      "28": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, <DED> room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "29": "self, \n room_creator: str = '', \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "30": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, <IND> tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "31": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, <DED>",
      "32": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, <DED> tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "33": "self, \n room_creator: Optional[str] = None, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, <DED> expect_code: int = 200, \n",
      "34": "self, \n room_creator: Optional[str] = None, <IND> is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "35": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n ): \n",
      "36": "self, \n room_creator: Optional[str] = None, <DED> is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "37": "self, \n room_creator: int = 200, \n is_public: Optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "38": "self, \n room_creator: Optional[str] = None, \n has_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "39": "self, \n room_creator: str = \"\", \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "40": "self, \n room_creator: Optional[str] = None, \n is_public: optional[bool] = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "41": "self, \n room_creator: Optional[str] = None, \n is_public: options.bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "42": "self, \n room_creator: str = 0, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "43": "self, \n room_creator: typing.Optional[str] = None, \n is_public: bool = True, \n room_version: typing.Optional[str] = None, \n tok: typing.Optional[str] = None, \n expect_code: int = 200, <IND>",
      "44": "self, \n rooms_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "45": "self, \n room_creator: List[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "46": "self, \n room_creator: int = 0, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "47": "self, \n room_creator: option.str = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: option.str = None, \n expect_code: int = 200, \n",
      "48": "self, \n room_creator: typing.Optional[str] = None, \n is_public: bool = True, \n room_version: typing.Optional[str] = None, \n tok: typing.Optional[str] = None, <IND> expect_code: int = 200, \n",
      "49": "self, \n room_creator: typing.Optional[str] = None, \n is_public: bool = True, \n room_version: typing.Optional[str] = None, \n tok: typing.Optional[str] = None, \n expect_code: int = 200, <DED>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    y: int,\n    channel_id: str = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "target_code": "    y: int,\n    channel_id: Optional[str] = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "warning_line": "    channel_id: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_id is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theislab/squidpy",
    "source_filename": "squidpy/im/crop.py",
    "target_filename": "squidpy/im/crop.py",
    "source_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed^",
    "target_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed",
    "predictions": [
      "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n"
    ],
    "correct": true,
    "top_five": {
      "0": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "1": "y: int, \n channel_id: Optional[str] = None, \n xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "2": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? <IND>",
      "3": "y: int, \n channel_id: typing.Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "4": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? <DED>",
      "5": "y: int, <IND> channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "6": "y: int, \n channel_id: Optional[str] = None, <IND> xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "7": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: Are these defaults reasonable or should no defaults be specified? \n",
      "8": "y: int, <DED> channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "9": "y: int, \n channel_id: Optional[str] = None, \n xs: Int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "10": "y: int, \n channel_id: Optional[str] = None, <DED> xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "11": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, \n # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "12": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: sind these defaults reasonable or should no defaults be specified? \n",
      "13": "y: int, \n channel_id: str, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "14": "y: int, \n channel_id: typing.Optional[str] = None, \n xs: typing.Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "15": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, <IND> # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "16": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, <DED> # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "17": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or shouldn no defaults be specified? \n",
      "18": "y: int, \n channel_id: str = \"\", \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "19": "y: int, \n channel_id: option.str = None, \n xs: option.int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "20": "y: int, \n channel_id: str = '', \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "21": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: \n these defaults reasonable or should no defaults be specified? \n",
      "22": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonably or should no defaults be specified? \n",
      "23": "y: int, \n channel_id: Optional[str] = None, \n xs: Optional[int] = 100, \n # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "24": "y: int, \n channel_id: Optional[str] = None, \n xs: \n int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "25": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: is these defaults reasonable or should no defaults be specified? \n",
      "26": "y: int, \n channel_id_s: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "27": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: \n defaults reasonable or should no defaults be specified? \n",
      "28": "y: int, \n channel_id: option.str = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "29": "y: int, \n channel_id_str: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "30": "y: int, \n channels_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "31": "y: int, \n channel_id: Optional[str] = None, \n xs: typing.Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "32": "y: int, \n channel_id: str = 0, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "33": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: <IND> defaults reasonable or should no defaults be specified? \n",
      "34": "y: int, \n channel_id: Optional[str] = None, \n xs: <DED> int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "35": "y: int, \n channel_id: option.str = None, \n xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "36": "y: int, \n channel_id: Union[str, None] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "37": "y: int, \n channel_id: Optional[str] = None, \n xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified? <IND>",
      "38": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are this defaults reasonable or should no defaults be specified? \n",
      "39": "y: int, \n channel_id: Optional[str] = None \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "40": "y: int, \n channel_id: Optional[str] = None, \n xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified? <DED>",
      "41": "y: int, \n channel_id: bool = False, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "42": "y: int, \n channel_id: str = 0 \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "43": "y: int, \n channel_id: Optional[str] = None, \n xs: int =100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "44": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: <IND> these defaults reasonable or should no defaults be specified? \n",
      "45": "y: int, \n channel_id: Optional[str] = None, \n xs: <IND> 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "46": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults raisonnable or should no defaults be specified? \n",
      "47": "y: int, \n channel_id: Type[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "48": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or Should no defaults be specified? \n",
      "49": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: <DED> these defaults reasonable or should no defaults be specified? \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        user_id:      str,\n        display_name: str  = None,\n        avatar_url:   str  = None,\n        power_level:  int  = 0,\n",
    "target_code": "        user_id:      str,\n        display_name: Optional[str] = None,\n        avatar_url:   Optional[str] = None,\n        power_level:  int  = 0,\n",
    "warning_line": "        display_name: str  = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " display_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 501,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/rooms.py",
    "target_filename": "nio/rooms.py",
    "source_changeid": "54370462a3691387e011912c8450ee062168198a^",
    "target_changeid": "54370462a3691387e011912c8450ee062168198a",
    "predictions": [
      "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "1": "user_id: str, \n display_name: str, \n avatar_url: str, \n power_level: int = 0, \n",
      "2": "user_id: str, \n display_name: typing.Optional[str] = None, \n avatar_url: typing.Optional[str] = None, \n power_level: int = 0, \n",
      "3": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, <IND>",
      "4": "user_id: str, <IND> display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "5": "user_id: str, <DED> display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "6": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, <IND> power_level: int = 0, \n",
      "7": "user_id: str, \n display_name: Optional[str] = None, <IND> avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "8": "user_id: str, \n display_name: str = '', \n avatar_url: str = '', \n power_level: int = 0, \n",
      "9": "user_id: str, \n display_name: Optional[str] = None, <DED> avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "10": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, <DED>",
      "11": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, <DED> power_level: int = 0, \n",
      "12": "user_id: str, \n displayed_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "13": "user_id: str, \n display_name: option.str = None, \n avatar_url: option.str, \n power_level: int = 0, \n",
      "14": "user_id: str, \n display_name: option.str, \n avatar_url: option.str, \n power_level: int = 0, \n",
      "15": "user_id: str, \n displays_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "16": "user_id: str, \n display_name: optional[str] = None, \n avatar_url: optional[str] = None, \n power_level: int = 0, \n",
      "17": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "18": "user_id: str, \n display_name: option.Str(str), \n avatar_url: option.Str(str), \n power_level: int = 0, \n",
      "19": "user_id: str, \n display_name: Type[str] = None, \n avatar_url: Type[str] = None, \n power_level: int = 0, \n",
      "20": "user_id: str, \n display_name: str = \"\", \n avatar_url: str = \"\", \n power_level: int = 0, \n",
      "21": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0 \n",
      "22": "user_id: str, \n show_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "23": "user_id: str, \n display_name: option.Str(str), \n avatar_url: option.Str(str) = None, \n power_level: int = 0, \n",
      "24": "user_id: str, \n displays: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "25": "user_id: str, \n display_name: int = 0, \n avatar_url: int = 0, \n power_level: int = 0, \n",
      "26": "user_id: str, \n display_name: options.str = None, \n avatar_url: options.str, \n power_level: int = 0, \n",
      "27": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: optional[str] = None, \n power_level: int = 0, \n",
      "28": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n ) -> None: \n",
      "29": "user_id: str, \n display_name: option.str(str), \n avatar_url: option.str, \n power_level: int = 0, \n",
      "30": "user_id: str, \n display_name: Form[str] = None, \n avatar_url: Form[str] = None, \n power_level: int = 0, \n",
      "31": "user_id: str, \n display_name: str = \"\", \n avatar_url: str, \n power_level: int = 0, \n",
      "32": "user_id: str, \n display_name: List[str] = None, \n avatar_url: List[str] = None, \n power_level: int = 0, \n",
      "33": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 1, \n",
      "34": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0. \n",
      "35": "user_id: str, \n display_name: int = 0, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "36": "user_id: str, \n display_name: options.str = \"\", \n avatar_url: options.str, \n power_level: int = 0, \n",
      "37": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n ): \n",
      "38": "user_id: str, \n display_name: typing.Optional[str] = None, \n avatar_url: typing.Optional[str] = None, \n power_level: int = 0, <IND>",
      "39": "user_id: str, \n display_name = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "40": "user_id: str, \n display_name: typing.Optional[str] = None, \n avatar_url: typing.Optional[str] = None, <IND> power_level: int = 0, \n",
      "41": "user_id: str, \n display_name: str, \n avatar_url: str, \n power_level: int = 0, \n",
      "42": "user_id: str, \n display_name: option.Str(str), \n avatar_url: option.Str(str), \n power_level: int = 0, \n",
      "43": "user_id: str, \n display_name: str, \n avatar_url: str, \n power_level: int = 0, \n",
      "44": "user_id: str, \n display_name: str = '', \n avatar_url: str, \n power_level: int = 0, \n",
      "45": "user_id: str, \n display_name: typing.Optional[str] = None, \n avatar_url: typing.Optional[str] = None, \n power_level: int = 0, <DED>",
      "46": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: Int = 0, \n",
      "47": "user_id: str, \n display_name: option.Str(str), \n avatar_url: option.Str(str)), \n power_level: int = 0, \n",
      "48": "user_id: str, \n display_name: typing.Optional[str] = None, \n avatar_url: typing.Optional[str] = None, <DED> power_level: int = 0, \n",
      "49": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int + 0, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "target_code": "\n    def __init__(self, chat: 'Chat', *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "warning_line": "    def __init__(self, chat: 'Chat' = None, *,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " chat is declared to have type `Chat` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 243,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/ehForwarderBot",
    "source_filename": "ehforwarderbot/chat.py",
    "target_filename": "ehforwarderbot/chat.py",
    "source_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b^",
    "target_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b",
    "predictions": [
      "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "1": "\n def __init__(self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "2": "\n def __init__( \n self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "3": "\n def __init__( <DED> self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "4": "\n def __init__( <IND> self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "5": "\n def __init__(self, chat: 'Chat', *, \n name: str, alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "6": "\n def __init__(self, chat: 'Chat', *, \n name = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "7": "\n def __init__(self, chat: 'Chat', *, <IND> name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "8": "<DED> def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "9": "\n def __init__(self, chat: 'Chat', *, <DED> name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "10": "\n def __init__( \n chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "11": "<IND> def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "12": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), <IND>",
      "13": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n ) -> None: \n",
      "14": "\n def __init__( <DED> chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "15": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n ): \n",
      "16": "\n def __init__(self, chat, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "17": "\n def __init__(self, chat: 'Chat', *, \n name: str = '', alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "18": "\n def __init__(self, Chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "19": "\n def __init__( \n self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "20": "\n def __init__(self, chat: Optional['Chat'], *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "21": "\n def __init__(self, chat: 'Chat', *, \n name = str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "22": "\n def __init__( \n chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "23": "\n def __init__(self, chat: 'Chat', *, \n name: str = '\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "24": "\n def __init__( <IND> self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "25": "\n def __init__( <IND> self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "26": "\n def __init__( <DED> self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "27": "\n def __init__( <IND> chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "28": "\n def __init__( <DED> self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "29": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID('\"), \n",
      "30": "\n def __init__(self, chat: 'Chat', *: \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "31": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\")), \n",
      "32": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n ) -> ChatID: \n",
      "33": "\n def __init__(self, chat: 'Chat', *, \n name, alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "34": "\n def __init__(self, chat: Optional['Chat'] = None, *, <IND> name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "35": "\n def __init__(self, chat: 'Chat' = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "36": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n ) -> id: \n",
      "37": "\n def __init__(self, chat: 'Chat', *, \n name=\"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "38": "\n def __init__(self, chat: 'Chat' = '', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "39": "\n def __init__(self, chat: 'Chat', *, \n name= \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "40": "\n def __init__(self, chat: 'Chat', *, \n names: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "41": "\n def __init__(self, chat: 'Chat', *, \n name= str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "42": "\n def __init__(self, chat: 'Chat', *, \n name = str, alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "43": "\n def __init__(self, chat: Optional['Chat'] = None, *, \n name = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "44": "\n def __init__(self, chat: 'Chain', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "45": "\n def __init__(self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n ) -> None: \n",
      "46": "\n def __init__(self, chat: 'Chat', **, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "47": "\n def __init__(self, chat: 'Chat', *: \n name = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "48": "\n def __init__(self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), <IND>",
      "49": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n ) -> List[Chat]: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: int = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "target_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "warning_line": "        timestamp: int = cast(float, message.timestamp)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "robinhood/faust",
    "source_filename": "faust/topics.py",
    "target_filename": "faust/topics.py",
    "source_changeid": "08e3003188557cc18bfd085315892beb1d99584c^",
    "target_changeid": "08e3003188557cc18bfd085315892beb1d99584c",
    "predictions": [
      "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "1": "value: bytes = cast(bytes, message.value) \n timestamp: int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "2": "value: bytes = cast(bytes, message.value) \n timestamp: type = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "3": "value: bytes = cast(bytes, message.value) \n timestamp: typing.Optional[int] = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "4": "value: bytes = cast(bytes, message.value) \n timestamp: (int = cast(float, message.timestamp)) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "5": "value: bytes = cast(bytes, message.value) \n timestamp = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "6": "value: bytes = cast(bytes, message.value) \n timestamp: async int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "7": "value: bytes = cast(bytes, message.value) \n timestamp: type float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "8": "value: bytes = cast(bytes, message.value) \n timestamp: str = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "9": "value: bytes = cast(bytes, message.value) \n timestamp: Optional[int] = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "10": "value: bytes = cast(bytes, message.value) \n timestamp: typing.float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "11": "value: bytes = cast(bytes, message.value) \n timestamp: async (int) = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "12": "value: bytes = cast(bytes, message.value) \n timestamp: typing.Optional[float] = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "13": "value: bytes = cast(bytes, message.value) \n timestamp: Type[int] = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "14": "value: bytes = cast(bytes, message.value) \n timestamp: bytes = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "15": "value: bytes = cast(bytes, message.value) \n timestamp: type = int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "16": "value: bytes = cast(bytes, message.value) \n timestamp: options.int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "17": "value: bytes = cast(bytes, message.value) \n timestamp: type = float(message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "18": "value: bytes = cast(bytes, message.value) \n timestamp: option = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "19": "value: bytes = cast(bytes, message.value) \n timestamp=int(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "20": "value: bytes = cast(bytes, message.value) \n timestamp=int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "21": "value: bytes = cast(bytes, message.value) \n timestamp: type = float.timestamp \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "22": "value: bytes = cast(bytes, message.value) \n timestamp: options = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "23": "value: int = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "24": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, messages.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "25": "value: bytes = cast(bytes, message.value) \n timestamp: Optional[float] = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "26": "value: bytes = cast(bytes, message.value) \n timestamp: type=float || int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "27": "value: bytes = cast(bytes, message.value) \n timestamp: type=int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "28": "value: bytes = cast(bytes, message.value) \n timestamp: typing.int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "29": "value: bytes = cast(bytes, message.value) \n timestamp: port = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "30": "value: bytes = cast(bytes, message.value) \n timestamp: Type[float] = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "31": "value: bytes = cast(bytes, message.value) \n timestamp: fort = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "32": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, messagestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "33": "value: bytes = cast(bytes, message.value) \n timestamp: type = int(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "34": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "35": "value: bytes = cast(bytes, message.value) \n timestamp: float.int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "36": "value: bytes = cast(bytes, message.value) \n timestamp: name = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "37": "value: bytes = cast(bytes, message.value) \n timestamp: type = float(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "38": "value: bytes = cast(bytes, message.value) \n timestamp: form.int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "39": "value: bytes = cast(bytes, message.value) \n timestamp=float(message.timestamp)) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "40": "value: bytes = cast(bytes, message.value) \n timestamp=float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "41": "value: bytes = cast(bytes, message.value) \n timestamp: (float = cast(float, message.timestamp)) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "42": "value: bytes = cast(bytes, message.value) \n timestamp: (int) = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "43": "value: bytes = cast(bytes, message.value) \n timestamp: () = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "44": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) <IND> logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "45": "value: bytes = cast(bytes, message.value) <IND> timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "46": "value: bytes = cast(bytes, message.value) <DED> timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "47": "value: bytes = cast(bytes, message.value) \n timestamp: type=int(float, message.timestamp)) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "48": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) <DED> logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "49": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def get(self, key: str, default: Optional = None) -> Any:\n        <IND>try:\n",
    "target_code": "\n    <DED>def get(self, key: str, default: Optional[Any] = None) -> Any:\n        <IND>try:\n",
    "warning_line": "    def get(self, key: str, default: Optional = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " default is declared to have type `Optional[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 119,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ducdetronquito/scalpl",
    "source_filename": "scalpl/scalpl.py",
    "target_filename": "scalpl/scalpl.py",
    "source_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216^",
    "target_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216",
    "predictions": [
      "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "1": "\n <DED> def get(self, key: str, default: Optional[str] = None) -> Any: \n <IND> try: \n",
      "2": "\n <DED> def get(self, key: str, default: Optional[Optional[str]] = None) -> Any: \n <IND> try: \n",
      "3": "\n <DED> def get(self, key: str, default: Optional[typing.Any] = None) -> Any: \n <IND> try: \n",
      "4": "\n <DED> def get(self, key: str, default: Optional[Optional[str] = None) -> Any: \n <IND> try: \n",
      "5": "\n <DED> def get(self, key: str, default: Optional[Any] = None \n ) -> Any: \n <IND> try: \n",
      "6": "\n <DED> def get(self, key: str, default: Optional[Optional[typing.Any]] = None) -> Any: \n <IND> try: \n",
      "7": "\n <DED> def get(self, key: str, default: Optional[Base] = None) -> Any: \n <IND> try: \n",
      "8": "\n <DED> def get(self, key: str, default: Optional[None] = None) -> Any: \n <IND> try: \n",
      "9": "\n <DED> def get(self, key: str, default: Optional[Type] = None) -> Any: \n <IND> try: \n",
      "10": "\n <DED> def get(self, key: str, default: Optional[Optional[str]] = None \n ) -> Any: \n <IND> try: \n",
      "11": "\n <DED> def get(self, key: str, default: Optional[any] = None) -> Any: \n <IND> try: \n",
      "12": "\n <DED> def get(self, key: str, default: Optional[Mapping[str]] = None) -> Any: \n <IND> try: \n",
      "13": "\n <DED> def get(self, key: str, default: Optional[typing.Any] = None \n ) -> Any: \n <IND> try: \n",
      "14": "\n <DED> def get(self, key: str, default: Optional[str] = None \n ) -> Any: \n <IND> try: \n",
      "15": "\n <DED> def get(self, key: str, default: Optional[Str] = None) -> Any: \n <IND> try: \n",
      "16": "\n <DED> def get(self, key: str, default: Optional[Error] = None) -> Any: \n <IND> try: \n",
      "17": "\n <DED> def get(self, key: str, default: Optional[String] = None) -> Any: \n <IND> try: \n",
      "18": "\n <DED> def get(self, key: str, default: Optional[Optional[typing.Any]] = None \n ) -> Any: \n <IND> try: \n",
      "19": "\n <DED> def get(self, key: str, default: Optional[Instance] = None) -> Any: \n <IND> try: \n",
      "20": "\n <DED> def get(self, key: str, default: Optional[int] = None) -> Any: \n <IND> try: \n",
      "21": "\n <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "22": "\n <DED> def get(self, key: str, default: Optional[Type[str]] = None) -> Any: \n <IND> try: \n",
      "23": "\n <DED> def get(self, key: str, default: Optional[All] = None) -> Any: \n <IND> try: \n",
      "24": "\n <DED> def get(self, key: str, default: Optional[Y] = None) -> Any: \n <IND> try: \n",
      "25": "\n \n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "26": "\n <DED> def get(self, key: str, default: Optional[Class] = None) -> Any: \n <IND> try: \n",
      "27": "\n <DED> def get(self, key: str, default: Optional[Any] = None <IND> ) -> Any: \n <IND> try: \n",
      "28": "\n <IND> def get(self, key: str, default: Optional[str] = None) -> Any: \n <IND> try: \n",
      "29": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> None: \n <IND> try: \n",
      "30": "\n <DED> def get(self, key: str, default: Optional[none] = None) -> Any: \n <IND> try: \n",
      "31": "\n <DED> def get(self, key: str, default: Optional[Widget] = None) -> Any: \n <IND> try: \n",
      "32": "\n <DED> def get(self, key: str, default: Optional[List[str]] = None) -> Any: \n <IND> try: \n",
      "33": "\n <DED> def get(self, key: str, default: Optional[Exception] = None) -> Any: \n <IND> try: \n",
      "34": "\n \n <DED> def get(self, key: str, default: Optional[str] = None) -> Any: \n <IND> try: \n",
      "35": "\n <DED> def get(self, key: str, default: Optional[str] = None) -> None: \n <IND> try: \n",
      "36": "\n <DED> def get(self, key: str, default: Optional[One] = None) -> Any: \n <IND> try: \n",
      "37": "\n <DED> def get(self, key: str, default: Optional[type] = None) -> Any: \n <IND> try: \n",
      "38": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <DED> try: \n",
      "39": "\n <DED> def get(self, key: str, default: Optional[str] = None) -> Any: \n <DED> try: \n",
      "40": "\n <DED> def get(self, key: str, default: Optional[optional] = None) -> Any: \n <IND> try: \n",
      "41": "\n <DED> def get(self, key: str, default: Optional[\"Any\"] = None) -> Any: \n <IND> try: \n",
      "42": "\n <DED> def get(self, key: str, default: Optional[Test] = None) -> Any: \n <IND> try: \n",
      "43": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n \n try: \n",
      "44": "\n <DED> def get(self, key: str, default: Optional[Optional[str]] = None) -> Any: \n <DED> try: \n",
      "45": "\n <DED> def get(self, key: str, default: Optional[Node] = None) -> Any: \n <IND> try: \n",
      "46": "\n <DED> def get(self, key: str, default: Optional[True] = None) -> Any: \n <IND> try: \n",
      "47": "\n <DED> def get(self, key: str, default: Optional[...] = None) -> Any: \n <IND> try: \n",
      "48": "\n <DED> def get(self, key: str, default: Optional[Policy] = None) -> Any: \n <IND> try: \n",
      "49": "\n <DED> def get(self, key: str, default: Optional[0] = None) -> Any: \n <IND> try: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        project_id: str,\n        region: str = None,\n        location: Optional[str] = None,\n",
    "target_code": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
    "warning_line": "        region: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " region is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 931,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "1": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <IND>",
      "2": "project_id: str, <IND> region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "3": "project_id: str, <DED> region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "4": "project_id: str, \n region: Optional[str] = None, <IND> location: Optional[str] = None, \n",
      "5": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED>",
      "6": "project_id: str, \n region: Optional[str] = None, <DED> location: Optional[str] = None, \n",
      "7": "project_id: str, \n region_id: Optional[str] = None, \n location: Optional[str] = None, \n",
      "8": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "9": "project_id: str, \n region_str: Optional[str] = None, \n location: Optional[str] = None, \n",
      "10": "project_id: str, \n region: str, \n location: Optional[str] = None, \n",
      "11": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n ): \n",
      "12": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n ) -> None: \n",
      "13": "project_id: str, \n region: typing.Optional[str] = None, \n location: Optional[str] = None, \n",
      "14": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n state: Optional[str] = None, \n",
      "15": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n exports: Optional[str] = None, \n",
      "16": "project_id: str, \n region: str = '', \n location: Optional[str] = None, \n",
      "17": "project_id: str, \n regional: Optional[str] = None, \n location: Optional[str] = None, \n",
      "18": "project_id: str, \n area: Optional[str] = None, \n location: Optional[str] = None, \n",
      "19": "project_id: str, \n region: Optional[str] = None, \n position: Optional[str] = None, \n",
      "20": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n global: Optional[str] = None, \n",
      "21": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> project_id: str, \n region: Optional[str] = None, \n",
      "22": "project_id: str, \n region: option.Optional[str] = None, \n location: Optional[str] = None, \n",
      "23": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> np.ndarray: Optional[str] = None, \n",
      "24": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n region: Optional[str] = None, \n",
      "25": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n project_id: Optional[str] = None, \n",
      "26": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n type: Optional[str] = None, \n",
      "27": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> cleanup_id: Optional[str] = None, \n",
      "28": "project_id: str, \n r\u00e9gion: Optional[str] = None, \n location: Optional[str] = None, \n",
      "29": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> global: Optional[str] = None, \n",
      "30": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> project_id: Optional[str] = None, \n",
      "31": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> label: Optional[str] = None, \n",
      "32": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED> bool: Optional[str] = None, \n",
      "33": "project_id: str, \n region: Union[str, None] = None, \n location: Optional[str] = None, \n",
      "34": "project_id: str, \n region: Optional[str] = None, \n location= Optional[str] = None, \n",
      "35": "project_id: str, \n region: Optional[str] = None \n location: Optional[str] = None, \n",
      "36": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n label: Optional[str] = None, \n",
      "37": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n '': Optional[str] = None, \n",
      "38": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n locale: Optional[str] = None, \n",
      "39": "project_id: str, \n region -> None: Optional[str] = None, \n location: Optional[str] = None, \n",
      "40": "project_id: str, \n region: Optional[str], \n location: Optional[str] = None, \n",
      "41": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n globals: Optional[str] = None, \n",
      "42": "project_id: str, \n region : Optional[str] = None, \n location: Optional[str] = None, \n",
      "43": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n segment: Optional[str] = None, \n",
      "44": "project_id: str, \n region: optional[str] = None, \n location: Optional[str] = None, \n",
      "45": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n project_id: str, \n region: Optional[str] = None, \n",
      "46": "project_id: str, \n region_width: Optional[str] = None, \n location: Optional[str] = None, \n",
      "47": "project_id: str, \n region: str = \"\", \n location: Optional[str] = None, \n",
      "48": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str], \n",
      "49": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n exports = None, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None,\n) -> Any:\n",
    "target_code": "    persistence_store: BasePersistenceLayer,\n    config: Optional[IdempotencyConfig] = None,\n) -> Any:\n",
    "warning_line": "    config: IdempotencyConfig = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " config is declared to have type `IdempotencyConfig` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "target_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "1": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: <IND>",
      "2": "persistence_store: BasePersistenceLayer, \n config: Optional[idempotencyConfig] = None, \n ) -> Any: \n",
      "3": "persistence_store: BasePersistenceLayer, <IND> config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "4": "persistence_store: BasePersistenceLayer, <DED> config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "5": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, <IND> ) -> Any: \n",
      "6": "persistence_store: BasePersistenceLayer, \n config = None, \n ) -> Any: \n",
      "7": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: <DED>",
      "8": "persistence_store: BasePersistenceLayer, \n configuration: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "9": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, <DED> ) -> Any: \n",
      "10": "persistence_store: BasePersistenceLayer, \n config: typing.Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "11": "persistence_store: BasePersistenceLayer, \n config=IdempotencyConfig, \n ) -> Any: \n",
      "12": "persistence_store: BasePersistenceLayer, \n config: Optional[Optional[IdempotencyConfig]] = None, \n ) -> Any: \n",
      "13": "persistence_store: BasePersistenceLayer, \n config=None, \n ) -> Any: \n",
      "14": "persistence_store: BasePersistenceLayer, \n config_: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "15": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ): \n",
      "16": "persistence_store: BasePersistenceLayer, \n config: Union[IdempotencyConfig, None] = None, \n ) -> Any: \n",
      "17": "persistence_store: BasePersistenceLayer, \n config=Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "18": "persistence_store: BasePersistenceLayer, \n config: Union[IdempotencyConfig] = None, \n ) -> Any: \n",
      "19": "persistence_store: BasePersistenceLayer, \n config: option.Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "20": "persistence_store: BasePersistenceLayer, \n config: Optional[SymbolicConfig] = None, \n ) -> Any: \n",
      "21": "persistence_store: BasePersistenceLayer, \n config: Optional[IDIdempotencyConfig] = None, \n ) -> Any: \n",
      "22": "persistence_store: BasePersistenceLayer, \n configure: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "23": "persistence_store: BasePersistenceLayer, \n config: Optional['IdempotencyConfig'] = None, \n ) -> Any: \n",
      "24": "persist_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "25": "persistence_store: BasePersistenceLayer, \n config: Optional[InstanceConfig] = None, \n ) -> Any: \n",
      "26": "persistence_store: BasePersistenceLayer, \n config: Optional[SymbolpotencyConfig] = None, \n ) -> Any: \n",
      "27": "persistence_store: BasePersistenceLayer, \n config: Optionale[IdempotencyConfig] = None, \n ) -> Any: \n",
      "28": "persistence_store: BasePersistenceLayer, \n config = Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "29": "persistence_store: BasePersistenceLayer, \n config | None: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "30": "persistence_store: BasePersistenceLayer, \n configs: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "31": "persistence_store: BasePersistenceLayer, \n config: Versions[IdempotencyConfig] = None, \n ) -> Any: \n",
      "32": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig, None] = None, \n ) -> Any: \n",
      "33": "persistence_store: BasePersistenceLayer, \n config: Optional[\"IdempotencyConfig\"] = None, \n ) -> Any: \n",
      "34": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig[0]] = None, \n ) -> Any: \n",
      "35": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "36": "persistence_store: BasePersistenceLayer, \n config: Type[IdempotencyConfig] = None, \n ) -> Any: \n",
      "37": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] | None = None, \n ) -> Any: \n",
      "38": "persistence_store: BasePersistenceLayer, \n setup: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "39": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig]=None, \n ) -> Any: \n",
      "40": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig], \n ) -> Any: \n",
      "41": "persistence_store: BasePersistenceLayer, \n config: IdempotencyConfig, \n ) -> Any: \n",
      "42": "persistence_store: BasePersistenceLayer, \n config: optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "43": "persistence_store: BasePersistenceLayer, \n options: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "44": "persistence_store: BasePersistenceLayer, \n config: 'IdempotencyConfig', \n ) -> Any: \n",
      "45": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "46": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ), -> Any: \n",
      "47": "persistence_store: BasePersistenceLayer, \n config: config, \n ) -> Any: \n",
      "48": "persistence_store: BasePersistenceLayer, \n config: Any, \n ) -> Any: \n",
      "49": "persistence_store: BasePersistenceLayer, \n config: BasePersistenceConfig, \n ) -> Any: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_line": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "alibaba/TinyNeuralNetwork",
    "source_filename": "tinynn/converter/operators/tflite/transformable.py",
    "target_filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1^",
    "target_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "predictions": [
      "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "1": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "2": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "3": "\n def __init__( <IND> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "4": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = [], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "5": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "6": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "7": "\n def __init__(self, outputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "8": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "9": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = \"\", \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "10": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "11": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, <DED> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "12": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = [], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "13": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "14": "\n def __init__( <IND> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "15": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n ) -> None: \n",
      "16": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE), \n",
      "17": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = [], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "18": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "19": "\n def __init__(self, inputs, outputs, eps, quantization: Optional[typing.List['Tensor'], eps, float, quantization: Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "20": "\n def __init__( <IND> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = [], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "21": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "22": "\n def __init__(self, inputs, outputs, eps, quantization: typing.List['Tensor'], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "23": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = [], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "24": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = 0, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "25": "\n def __init__(self, inputs, outputs, eps, quantization: Optional[typing.List['Tensor'], eps: float, quantization: Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "26": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "27": "\n def __init__(self, inputs, outputs, eps, quantization: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "28": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QUANTizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "29": "\n def __init__( <IND> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "30": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "31": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None) -> None: \n <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "32": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters, None] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "33": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "34": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): <IND>",
      "35": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QUALizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "36": "\n def __init__(self, inputs, outputs, eps, quantization: Optional[typing.List['Tensor']] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "37": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[quantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "38": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = \"\", \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "39": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE,...): \n",
      "40": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "41": "\n def __init__( <IND> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "42": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "43": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n ): \n",
      "44": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) = None) -> None: \n",
      "45": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, <IND> ) -> None: \n",
      "46": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, <DED> eps): \n",
      "47": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n",
      "48": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None, \n",
      "49": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        exchange: str = None,\n        *,\n",
    "target_code": "        self,\n        exchange: str = '',\n        *,\n",
    "warning_line": "        exchange: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exchange is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, \n exchange: str = '', \n *, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n exchange: str = '', \n *, \n",
      "1": "self, \n exchange: str, \n *, \n",
      "2": "self, \n exchange: Optional[str] = None, \n *, \n",
      "3": "self, \n exchange: str = \"\", \n *, \n",
      "4": "self, \n exchange: str: Optional[str] = None, \n *, \n",
      "5": "self, \n exchange: typing.Optional[str] = None, \n *, \n",
      "6": "self, \n exchange: str: typing.Optional[str] = None, \n *, \n",
      "7": "self, \n exchange: str = (), \n *, \n",
      "8": "self, \n exchanges: Optional[str] = None, \n *, \n",
      "9": "self, \n exchange: str = '', \n *, <IND>",
      "10": "self, <DED> exchange: str = '', \n *, \n",
      "11": "self, \n swap: Optional[str] = None, \n *, \n",
      "12": "self, \n exchange: str.Optional[str] = None, \n *, \n",
      "13": "self, \n exchanges: str = '', \n *, \n",
      "14": "self, <IND> exchange: str = '', \n *, \n",
      "15": "self, \n exchange: str: str = '', \n *, \n",
      "16": "self, \n exchange: Optional[str] = None, \n *, <IND>",
      "17": "self, \n exchange: Str = '', \n *, \n",
      "18": "self, \n exchange: Union[str, None] = None, \n *, \n",
      "19": "self, \n exchange: str = '', <IND> *, \n",
      "20": "self, \n exchange_: str = '', \n *, \n",
      "21": "self, <IND> exchange: Optional[str] = None, \n *, \n",
      "22": "self, \n swap: str = '', \n *, \n",
      "23": "self, <DED> exchange: Optional[str] = None, \n *, \n",
      "24": "self, \n exchange: str = '', \n *, <DED> \n",
      "25": "self, \n exchange: str = '', <DED> *, \n",
      "26": "self, \n exchange: Optional[str] = None, \n *, <DED>",
      "27": "self, \n exchange: Optional[str] = None, <IND> *, \n",
      "28": "self, \n exchange: Optional[str] = None, <DED> *, \n",
      "29": "self, \n exchange: str | None = None, \n *, \n",
      "30": "self, \n exchange: str: str, \n *, \n",
      "31": "self, \n exchange: str = str, \n *, \n",
      "32": "self, \n exchange: str: Optional[str] = None, \n *, <IND>",
      "33": "self, \n exchange: str = '', \n *, <DED>",
      "34": "self, \n exchange: str = self._str, \n *, \n",
      "35": "self, \n exchange: str | None = '', \n *, \n",
      "36": "self, \n exchange: str = bool(None), \n *, \n",
      "37": "self, \n exchange: str: Optional[str] = None, \n *, <DED>",
      "38": "self, \n exchange: str = [], \n *, \n",
      "39": "self, \n exchange: typing.Optional[str] = None, \n *, <IND>",
      "40": "self, \n exchange: str(str) = '', \n *, \n",
      "41": "self, \n exchange: str = bool(Tuple), \n *, \n",
      "42": "self, \n exchange: str = '', \n *, \n ) -> None: \n",
      "43": "self, \n exchange: str: Optional[str] = None, <IND> *, \n",
      "44": "self, \n exchange: str = 0 \n *, \n",
      "45": "self, \n exchange: str = self, \n *, \n",
      "46": "self, \n exchanges: str, \n *, \n",
      "47": "self, \n exchange : str = '', \n *, \n",
      "48": "self, \n exchange: Optional[str] = None, \n *, \n ): \n",
      "49": "self, \n exchange: Optional[str] = None, \n *, <DED> \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: int = 1.0,\n                 ):\n",
    "target_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
    "warning_line": "                 noise_variance: int = 1.0,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " noise_variance is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "GPflow/GPflow",
    "source_filename": "gpflow/models/sgpr.py",
    "target_filename": "gpflow/models/sgpr.py",
    "source_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb^",
    "target_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb",
    "predictions": [
      "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, \n ): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, \n ): \n",
      "1": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): \n",
      "2": "num_latent: Optional[int] = None, \n noise_variance: Optional[int] = 1.0, \n ): \n",
      "3": "num_latent: Optional[int] = None, \n noise_variance: (int) = 1.0, \n ): \n",
      "4": "num_latent: Optional[int] = None, \n noise_variance: options.int = 1.0, \n ): \n",
      "5": "num_latent: Optional[int] = None, \n noise_variance: Optional[float] = 1.0, \n ): \n",
      "6": "num_latent: Optional[int] = None, \n noise_variance: async int = 1.0, \n ): \n",
      "7": "num_latent: Optional[int] = None, \n noise_variance: int = int = 1.0, \n ): \n",
      "8": "num_latent: Optional[int] = None, \n noise_variance: type float = 1.0, \n ): \n",
      "9": "num_latent: Optional[int] = None, \n noise_variance: int = 1, \n ): \n",
      "10": "num_latent: Optional[int] = None, \n noise_variance: optional[int] = 1.0, \n ): \n",
      "11": "num_latent: Optional[int] = None, \n noise_variance: variable = 1.0, \n ): \n",
      "12": "num_latent: Optional[int] = None, \n noise_variance: optional[float] = 1.0, \n ): \n",
      "13": "num_latent: Optional[int] = None, \n noise_variance: array = 1.0, \n ): \n",
      "14": "num_latent: Optional[int] = None, \n noise_variance: typing.Optional[int] = 1.0, \n ): \n",
      "15": "num_latent: Optional[int] = None, \n noise_variance: int, \n ): \n",
      "16": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, \n ): <IND>",
      "17": "num_latent: Optional[int] = None, \n noise_variance: str = 1.0, \n ): \n",
      "18": "num_latent: Optional[int] = None, \n noise_variance: (int, float) = 1.0, \n ): \n",
      "19": "num_latent: Optional[int] = None, \n noise_variance: class int = 1.0, \n ): \n",
      "20": "num_latent: Optional[int] = None, \n noise_variance: fort = 1.0, \n ): \n",
      "21": "num_latent: Optional[int] = None, <IND> noise_variance: int = 1.0, \n ): \n",
      "22": "num_latent: Optional[int] = None, \n noise_variance: optional[int] = 1.0, \n ): \n",
      "23": "num_latent: Optional[int] = None, \n noise_variance: binary[int] = 1.0, \n ): \n",
      "24": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, <IND> ): \n",
      "25": "num_latent: Optional[int] = None, <DED> noise_variance: int = 1.0, \n ): \n",
      "26": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, \n ): <DED>",
      "27": "num_latent: Optional[int] = None, \n noise_variance: floating = 1.0, \n ): \n",
      "28": "num_latent: Optional[int] = None, \n noise_variance: mode.int = 1.0, \n ): \n",
      "29": "num_latent: Optional[int] = None, \n noise_variance: int = 0, \n ): \n",
      "30": "num_latent: Optional[int] = None, \n noise_variance: with_int = 1.0, \n ): \n",
      "31": "num_latent: Optional[int] = None, \n noise_variance: Variable[float] = 1.0, \n ): \n",
      "32": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, <DED> ): \n",
      "33": "num_latent: Optional[int] = None, \n noise_variance = float = 1.0, \n ): \n",
      "34": "num_latent: Optional[int] = None, \n noise_variance: type = float, \n ): \n",
      "35": "num_latent: Optional[int] = None, \n noise_variance: variable = int = 1.0, \n ): \n",
      "36": "num_latent: Optional[int] = None, \n noise_variance=float = 1.0, \n ): \n",
      "37": "num_latent: Optional[int] = None, \n noise_variance: Int = 1.0, \n ): \n",
      "38": "num_latent: Optional[int] = None, \n noise_variance: \"float\" = 1.0, \n ): \n",
      "39": "num_latent: Optional[int] = None, \n sound_variance: int = 1.0, \n ): \n",
      "40": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, \n ) -> None: \n",
      "41": "num_latent: Optional[int] = None, \n noise_variance: () = 1.0, \n ): \n",
      "42": "num_latent: Optional[int] = None, \n noise_variance : int = 1.0, \n ): \n",
      "43": "num_latent: Optional[int] = None, \n noise_variance: variable = float = 1.0, \n ): \n",
      "44": "num_latent: Optional[int] = None, \n noise_variance: option = float = 1.0, \n ): \n",
      "45": "num_latent: Optional[int] = None, \n noise_variance: class float = 1.0, \n ): \n",
      "46": "num_latent: Optional[int] = None, \n noise_variance: int = (1.0), \n ): \n",
      "47": "num_latent: Optional[int] = None, \n noise_variance: (float = 1.0, \n ): \n",
      "48": "num_latent: Optional[int] = None, \n noise_variance: option = float, \n ): \n",
      "49": "num_latent: Optional[int] = None, \n noise_variance: options = 1.0, \n ): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",\n",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_line": "        organization_id: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " organization_id is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mapillary/mapillary_tools",
    "source_filename": "mapillary_tools/upload_api_v4.py",
    "target_filename": "mapillary_tools/upload_api_v4.py",
    "source_changeid": "79159001d365c75215f0c05ba3b7937180563026^",
    "target_changeid": "79159001d365c75215f0c05ba3b7937180563026",
    "predictions": [
      "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n"
    ],
    "correct": false,
    "top_five": {
      "0": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "1": "entity_size: int, \n organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "2": "entity_size: int, \n organizational_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "3": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <IND>",
      "4": "entity_size: int, \n organization_id: Optional[str] = None, \n file_type: FileType = \"zip\", \n",
      "5": "entity_size: int, \n organization_id: int, \n file_type: FileType = \"zip\", \n",
      "6": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <DED>",
      "7": "entity_size: int, <IND> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "8": "entity_size: int, <DED> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "9": "entity_size: int, \n organization_id: Optional[int] = None, <IND> file_type: FileType = \"zip\", \n",
      "10": "entity_size: int, \n organization_id: Optional[int] = None, <DED> file_type: FileType = \"zip\", \n",
      "11": "entity_size: int, \n organization_id: bool = False, \n file_type: FileType = \"zip\", \n",
      "12": "entity_size: int, \n organization_id: Type[int] = None, \n file_type: FileType = \"zip\", \n",
      "13": "entity_size: int, \n organization_id: option.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "14": "entity_size: Int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "15": "entity_size: int, \n organization_id: Optional[Int] = None, \n file_type: FileType = \"zip\", \n",
      "16": "entity_size: int, \n organisation_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "17": "entity_size: int, \n organization_id: Optional[np.ndarray] = None, \n file_type: FileType = \"zip\", \n",
      "18": "entity_size: int, \n organization_id: optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "19": "entity_size: int, \n organization_id: FileType, \n file_type: FileType = \"zip\", \n",
      "20": "entity_size: int, \n organization_id: Type[str] = None, \n file_type: FileType = \"zip\", \n",
      "21": "entity_size: int, \n organization_id: options.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "22": "entity_size: int, \n organization_id: Union[int, None] = None, \n file_type: FileType = \"zip\", \n",
      "23": "entity_size: int, \n organization_id: option = None, \n file_type: FileType = \"zip\", \n",
      "24": "entity_size: int, \n organization_id: Int, \n file_type: FileType = \"zip\", \n",
      "25": "entity_size: int, \n organizational_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "26": "entity_size: int, \n organization_id: System.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "27": "entity_size: int, \n organization_id: Optional[int], \n file_type: FileType = \"zip\", \n",
      "28": "entity_size: int, \n organization_id: Position[int] = None, \n file_type: FileType = \"zip\", \n",
      "29": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <DED> \n",
      "30": "entity_size: int, <DED> organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "31": "entity_size: int, \n organization_id: List[int] = None, \n file_type: FileType = \"zip\", \n",
      "32": "entity_size: int, \n organization_id: Form[int] = None, \n file_type: FileType = \"zip\", \n",
      "33": "entity_size: int, \n organization_id: id = 0, \n file_type: FileType = \"zip\", \n",
      "34": "entity_size: int, \n organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", <IND>",
      "35": "entity_size: int, \n organization_id: 0, \n file_type: FileType = \"zip\", \n",
      "36": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n ) -> None: \n",
      "37": "entity_size: int, \n group_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "38": "entity_size: int, \n organization_id: Optional[none] = None, \n file_type: FileType = \"zip\", \n",
      "39": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n type: Optional[int] = None, \n",
      "40": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n ): \n",
      "41": "entity_size: int, \n organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", <DED>",
      "42": "entity_size: int, \n organization_id: Definition[int] = None, \n file_type: FileType = \"zip\", \n",
      "43": "entity_size: int, \n organization_id: Optional[inel] = None, \n file_type: FileType = \"zip\", \n",
      "44": "entity_size: int, \n organization_id: Union[int] = None, \n file_type: FileType = \"zip\", \n",
      "45": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n if fileType: Optional[int] = None, \n",
      "46": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n exports: Optional[int] = None, \n",
      "47": "entity_size: int, \n organization_id: Class[int] = None, \n file_type: FileType = \"zip\", \n",
      "48": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n global_id: Optional[int] = None, \n",
      "49": "entity_size: int, \n organization_id=None, \n file_type: FileType = \"zip\", \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        <IND>result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        <IND>result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_line": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/extensions/base.py",
    "target_filename": "pystac/extensions/base.py",
    "source_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752^",
    "target_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "predictions": [
      "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "1": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "2": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "3": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "4": "\n def _get_property(self, prop_name: str, typ: Type[P] = []) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "5": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = []) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "6": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = []) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "7": "\n def _get_property(self, prop_name: str, typ: Type[P] = []) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "8": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = [Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "9": "\n def _get_property(self, prop_name: str, typ: Optional[Type[Any]] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "10": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "11": "\n def _get_property(self, prop_name: str, typ: Type[P] = \"\") -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "12": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = [Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "13": "\n def _get_property(self, prop_name: str, typ: Optional[Type[Any]] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "14": "\n def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "15": "\n def _get_property(self, prop_name: str, typ: Optional[P] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "16": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "17": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <DED> result = self.properties.get(prop_name) \n if result is not None: \n",
      "18": "\n def _get_property(self, prop_name: str, typ: Type[P] = \"\") -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "19": "\n def _get_property(self, prop_name: str, typ: Type[P] = [Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "20": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[P]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "21": "\n def _get_property(self, prop_name: str, typ: Optional[type[P]] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "22": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result=optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "23": "\n def _get_property(self, prop_name: str, typ: Optional[type[P]] = Optional[Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "24": "\n def _get_property(self, prop_name: str, typ: Optional[P] = Optional[Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "25": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n <DED> result = self.properties.get(prop_name) \n if result is not None: \n",
      "26": "\n def _get_property(self, prop_name: str, typ: Optional[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "27": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result = self.properties[prop_name] \n if result is not None: \n",
      "28": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n <IND> result = self.properties[prop_name] \n if result is not None: \n",
      "29": "\n def _get_property(self, prop_name: str, typ: Optional[type[P]] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "30": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n <IND> result=optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "31": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None \n ) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "32": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n \n result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "33": "\n def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "34": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "35": "\n def _get_property(self, prop_name: str, typ: Type[P] = \"\") -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "36": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n \n result = self.properties.get(prop_name) \n if result is not None: \n",
      "37": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = \"\") -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "38": "\n def _get_property(self, prop_name: str, typ: Type[P] = [Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "39": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "40": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n \n result = self.properties.get(prop_name) \n if result is not None: \n",
      "41": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = \"\") -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "42": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "43": "\n def _get_property(self, prop_name: str, typ: Type[P] = \"\") -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "44": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None | None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "45": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "46": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "47": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = All) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "48": "\n def _get_property(self, prop_name: str, typ: Optional[Str] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "49": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "target_code": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " network_max_retries is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 206,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nabla-c0d3/sslyze",
    "source_filename": "sslyze/utils/ssl_connection.py",
    "target_filename": "sslyze/utils/ssl_connection.py",
    "source_changeid": "761c458b2207abc530b430e56d26bced6e4b9714^",
    "target_changeid": "761c458b2207abc530b430e56d26bced6e4b9714",
    "predictions": [
      "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "1": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "2": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "3": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "4": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: () -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "5": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "6": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "7": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "8": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n # type: (int, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "9": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "10": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "11": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (None, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "12": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (type, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "13": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (options.int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "14": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (None, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "15": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (options.int, option.int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "16": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (options.int, options.int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "17": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Int, Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "18": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n # type: (int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "19": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (none) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "20": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: ('int', int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "21": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (...int, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "22": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: ((int, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "23": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (None, Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "24": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (str, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "25": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (!int, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "26": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (...args) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "27": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (...int,...int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "28": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n # type: (int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "29": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: Optional[int, int] -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "30": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (none, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "31": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: ( (int, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "32": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (type, Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "33": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "34": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int,...) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "35": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "36": "<IND> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "37": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (.int,.int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "38": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (str, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "39": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (...none, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "40": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int), Optional[int] -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "41": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "42": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (int, None) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "43": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: Optional[int] -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "44": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "45": "<DED> def connect(self, network_timeout=None, network_max_retries=None) -> Optional[int]: \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "46": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (, int) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "47": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (options) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "48": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (None) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "49": "\n <DED> def connect(self, network_timeout=None, network_max_retries=None) -> None: \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n\n",
    "target_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_line": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 309,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/federated",
    "source_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "target_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119^",
    "target_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "predictions": [
      "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "1": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "2": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "3": "\n <DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "4": "<IND> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "5": "<DED> <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "6": "<DED> <DED> _intern_pool: Optional[Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "7": "<DED> \n _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "8": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <IND>",
      "9": "<DED> <DED> _intern_pool: Optional[Dict[typing.Type[Any], Dict[Any, Any]]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "10": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n <IND>",
      "11": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED>",
      "12": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( <IND> collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "13": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n <DED>",
      "14": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda)) \n \n",
      "15": "<DED> <DED> _intern_pool: Dict[type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "16": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda)) \n \n",
      "17": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda)) \n \n",
      "18": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections[defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "19": "\n <DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "20": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( <DED> collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "21": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) <IND> \n",
      "22": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "23": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda) \n \n",
      "24": "<IND> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "25": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) <IND> \n",
      "26": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "27": "<DED> <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "28": "\n <DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "29": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n",
      "30": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )) \n \n",
      "31": "<DED> \n _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "32": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda = weakref.WeakValueDictionary( { } ))) \n \n",
      "33": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda), weakref.WeakValueDictionary( { } )) \n \n",
      "34": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, WeakValueDictionary( { } )) \n \n",
      "35": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, WeakValueDictionary( { } ))) \n \n",
      "36": "<DED> \n _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "37": "\n <DED> <DED> _intern_pool: Optional[Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "38": "<DED> <DED> _intern_pool: Dict = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "39": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n <IND>",
      "40": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )) \n \n",
      "41": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary[ { } )) \n \n",
      "42": "<IND> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "43": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n <IND>",
      "44": "<DED> <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n \n",
      "45": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) <DED> \n",
      "46": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) \n <DED>",
      "47": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda -> WeakValueDictionary( { } ))) \n \n",
      "48": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )) \n",
      "49": "<DED> <DED> _intern_pool: Optional[Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_line": "    fold_method_args: Tuple[Any] = (),",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 789,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unitaryfund/mitiq",
    "source_filename": "mitiq/zne/scaling.py",
    "target_filename": "mitiq/zne/scaling.py",
    "source_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc^",
    "target_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "predictions": [
      "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "1": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "2": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "3": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any]], Circuit] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "4": "scale_factor: float, \n fold_method: Optional[Circuit] = None, \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "5": "scale_factor: float, \n fold_method: Optional[Circuit], float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "6": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: bool = (), \n **kwargs, \n",
      "7": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "8": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args:... = (), \n **kwargs, \n",
      "9": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: tuple[Any] = (), \n **kwargs, \n",
      "10": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: 'Tuple[Any]' = (), \n **kwargs, \n",
      "11": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "12": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "13": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: (), \n **kwargs, \n",
      "14": "scale_factor: float, \n fold_method: Optional[Circuit], float, Tuple[Any]], Circuit] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "15": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "16": "scale_factor: float, \n fold_method: Optional[Circuit], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "17": "scale_factor: float, \n fold_method: Optional[Circuit], float, Tuple[Any], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "18": "scale_factor: float, \n fold_method_args: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "19": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: float = (), \n **kwargs, \n",
      "20": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any], Circuit] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "21": "scale_factor: float, \n fold_method: Callable[[Circuit], float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "22": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n folded_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "23": "scale_factor: float, \n folded_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "24": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, <IND>",
      "25": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: 0 = (), \n **kwargs, \n",
      "26": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Union[Tuple[Any]] = (), \n **kwargs, \n",
      "27": "scale_factor: float, <IND> fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "28": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: [Tuple[Any]] = (), \n **kwargs, \n",
      "29": "scale_factor: float, <DED> fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "30": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], <IND> fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "31": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), <IND> **kwargs, \n",
      "32": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: List[Tuple[Any]] = (), \n **kwargs, \n",
      "33": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "34": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, <DED>",
      "35": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any]] = (), \n **kwargs, \n",
      "36": "scale_factor: float, \n fold_method: Optional[Circuit], float, Tuple[Any]] = (), \n **kwargs, \n",
      "37": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n folding_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "38": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), <DED> **kwargs, \n",
      "39": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: _.Tuple[Any] = (), \n **kwargs, \n",
      "40": "scale_factor: float, \n fold_method: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: float = (), \n **kwargs, \n",
      "41": "scale_factor: float, \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "42": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "43": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any], \n **kwargs, \n",
      "44": "scale_factor: float, \n fold_method: Optional[Circuit], Circuit] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "45": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: str = (), \n **kwargs, \n",
      "46": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: '' = (), \n **kwargs, \n",
      "47": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any,...] = (), \n **kwargs, \n",
      "48": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit] = (), \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "49": "scale_factor: float, \n fold_method: Optional[Circuit, float], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_line": "        gw: \"Gateway\" = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " gw is declared to have type `Gateway` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rytilahti/python-miio",
    "source_filename": "miio/gateway/devices/subdevice.py",
    "target_filename": "miio/gateway/devices/subdevice.py",
    "source_changeid": "6453bfee512150e3f062670e890533fcd67067ea^",
    "target_changeid": "6453bfee512150e3f062670e890533fcd67067ea",
    "predictions": [
      "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "1": "self, \n gw: Optional[\"Gateway\", None] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "2": "self, \n gw: Optional[[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "3": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "4": "self, \n gw: Optional[\"Gateway\", Optional[SubDeviceInfo]] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "5": "self, \n gw: typing.Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "6": "self, \n gw: Optional['Gateway'] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "7": "self, \n self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "8": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "9": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo], \n model_info: Optional[Dict] = None, \n",
      "10": "self, \n self.gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "11": "self, \n gw: Optional[\"Gateway\", Optional[Dict]] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "12": "self, \n gw_: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "13": "self, \n gw: Optional[Gateway] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "14": "self, <DED> gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "15": "self, \n gw: Optional[\"Gateway\"\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "16": "self, <IND> gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "17": "self, \n assert self.None, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "18": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <IND>",
      "19": "self, \n gw: Optional[\"Gateway\"] = None, <IND> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "20": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, <IND> model_info: Optional[Dict] = None, \n",
      "21": "self, \n type: Optional[Gateway] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "22": "self, \n gw: Optional[\"Gateway\"] = None, <DED> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "23": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, <DED> model_info: Optional[Dict] = None, \n",
      "24": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <DED>",
      "25": "self, \n assert self.Gateway is not None, gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "26": "self, \n gw: typing.Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "27": "self, \n gw: Optional[\"Gateway\", \"SubDeviceInfo\", None] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "28": "self, \n gw: Optional[[Gateway]] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "29": "self, \n gw: Optional[\"Gateway\"\" = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "30": "self, \n gw: Optional[\"Gateway\", None] = None, \n dev_info: Optional[SubDeviceInfo], \n model_info: Optional[Dict] = None, \n",
      "31": "self, \n gw: Optional[\"Gateway\") = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "32": "self, \n gw: \"Gateway\", \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "33": "self, \n gw: typing.Optional[\"Gateway\", None] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "34": "self, \n gw: Optional[4\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "35": "self, \n gws: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "36": "self, \n gw: Optional[\"Dict\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "37": "self, \n gw: Optional[\"Gateway\", None] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "38": "self, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "39": "self, \n ga: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "40": "self, \n gw: Optional[\"Gateway\", None] = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "41": "self, \n gw: Type[\"Gateway\", None] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "42": "self, \n gw: Optional[False] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "43": "self, \n gw: Optional[\"Gateway\"], \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "44": "self, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "45": "self, \n gw: 'Gateway', \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "46": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n ): \n",
      "47": "self, \n gw: \"Gateway\", \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "48": "self, \n gw: Type[\"Gateway\"] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "49": "self, \n gw: Optional[\"Gateway\", None] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": true,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        dev: FlairDataset = DataPairDataset(\n            dev_file,\n",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_line": "        dev: FlairDataset = DataPairDataset(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 282,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/datasets/text_text.py",
    "target_filename": "flair/datasets/text_text.py",
    "source_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f^",
    "target_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "predictions": [
      "\n dev: DataPairDataset = DataPairDataset( \n dev_file, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "1": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "2": "\n dev: typing.Optional[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "3": "\n dev: typing.Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "4": "\n dev: 'FlairDataset' = DataPairDataset( \n dev_file, \n",
      "5": "\n dev: Type[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "6": "\n dev: Typing.Optional[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "7": "\n dev: Expression[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "8": "\n dev: p.FlairDataset = DataPairDataset( \n dev_file, \n",
      "9": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "10": "\n dev: DataPairDataset[\"FlairDataset\"] = DataPairDataset( \n dev_file, \n",
      "11": "\n dev: DataPairDataset( \n dev_file, \n",
      "12": "\n dev: \"FlairDataset\" = DataPairDataset( \n dev_file, \n",
      "13": "\n dev_: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "14": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "15": "\n dev: Type[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "16": "\n dev: DataPairDataset.FlairDataset = DataPairDataset( \n dev_file, \n",
      "17": "\n dev: FlairDataset = DataPairDataset( \n dev_file, \n",
      "18": "\n dev: flairDataset = DataPairDataset( \n dev_file, \n",
      "19": "\n dev: cls.FlairDataset = DataPairDataset( \n dev_file, \n",
      "20": "\n dev: Typing.DataPairDataset = DataPairDataset( \n dev_file, \n",
      "21": "\n dev: Position[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "22": "\n dev: DataPairDataset() = DataPairDataset( \n dev_file, \n",
      "23": "\n dev: _FlairDataset = DataPairDataset( \n dev_file, \n",
      "24": "\n dev: (FlairDataset) = DataPairDataset( \n dev_file, \n",
      "25": "\n dev: dataPairDataset = DataPairDataset( \n dev_file, \n",
      "26": "\n dev: os.FlairDataset = DataPairDataset( \n dev_file, \n",
      "27": "\n dev: Standard[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "28": "\n dev: FileDataset = DataPairDataset( \n dev_file, \n",
      "29": "\n dev: DoneDataPairDataset = DataPairDataset( \n dev_file, \n",
      "30": "\n dev: TypeDataPairDataset = DataPairDataset( \n dev_file, \n",
      "31": "<DED> dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "32": "\n dev: PostDataPairDataset = DataPairDataset( \n dev_file, \n",
      "33": "\n dev: CardDataset = DataPairDataset( \n dev_file, \n",
      "34": "\n dev: bool = DataPairDataset( \n dev_file, \n",
      "35": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, <IND>",
      "36": "\n dev: ModelDataPairDataset = DataPairDataset( \n dev_file, \n",
      "37": "\n dev: Optional[FlairDataset] = DataPairDataset( <IND> dev_file, \n",
      "38": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, <DED>",
      "39": "\n dev: Optional[FlairDataset] = DataPairDataset( <DED> dev_file, \n",
      "40": "\n dev: BaseDataPairDataset = DataPairDataset( \n dev_file, \n",
      "41": "\n dev: typing.Optional[DataPairDataset] = DataPairDataset( \n dev_file, <IND>",
      "42": "\n dev: DataPairDataset = DataPairDataset( <IND> dev_file, \n",
      "43": "\n dev: DataPairDataset = DataPairDataset( <DED> dev_file, \n",
      "44": "\n dev: typing.Optional[DataPairDataset] = DataPairDataset( <DED> dev_file, \n",
      "45": "\n dev: Vector = DataPairDataset( \n dev_file, \n",
      "46": "\n dev: typing.Optional[DataPairDataset] = DataPairDataset( <IND> dev_file, \n",
      "47": "\n dev: typing.Optional[DataPairDataset] = DataPairDataset( \n dev_file, <DED>",
      "48": "\n dev: ImagePairDataset = DataPairDataset( \n dev_file, \n",
      "49": "<IND> dev: DataPairDataset = DataPairDataset( \n dev_file, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_line": "        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/web3.py",
    "source_filename": "web3/providers/auto.py",
    "target_filename": "web3/providers/auto.py",
    "source_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1^",
    "target_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "predictions": [
      "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "1": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "2": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "3": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]]=None \n ) -> None: \n",
      "4": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( \n ) -> None: \n",
      "5": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]] = None \n ) -> None: \n",
      "6": "self, \n possible_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "7": "self, \n potentiel_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "8": "self, \n potentially_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "9": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "10": "self, \n possible_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "11": "self, \n possible_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "12": "self, \n prospective_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "13": "self, \n potentiel_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "14": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None <IND> ) -> None: \n",
      "15": "self, \n potentially_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "16": "self, \n potentiel_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "17": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None <DED> ) -> None: \n",
      "18": "self, \n pot_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "19": "self, <IND> potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "20": "self, \n self, potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "21": "self, <DED> potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "22": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "23": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: <IND>",
      "24": "self, \n potentially_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "25": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = { } \n ) -> None: \n",
      "26": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None \n ) -> None: \n",
      "27": "self, \n prospective_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "28": "self, \n prospective_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "29": "self, \n potential_providers: Optional[sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "30": "self, \n potential_providers: Union[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "31": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]: \n <IND> ) -> None: \n",
      "32": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: <DED> <IND>",
      "33": "self, \n options: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "34": "self, \n prospects: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "35": "self, \n self, potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "36": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None <IND> ) -> None: \n",
      "37": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]][0]] = None \n ) -> None: \n",
      "38": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider]]]=None \n ) -> None: \n",
      "39": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]) -> None: \n <IND> ) -> None: \n",
      "40": "self, \n possible_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( \n ) -> None: \n",
      "41": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] | None \n ) -> None: \n",
      "42": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None <DED> ) -> None: \n",
      "43": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]*, \n ) -> None: \n",
      "44": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None <IND> ) -> None: \n",
      "45": "self, <DED> potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "46": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ): \n",
      "47": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: <IND>",
      "48": "self, \n potential_providers: Sequence[UE[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "49": "self, \n options: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def __get__(self, instance: object, owner: type = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
    "target_code": "\n    <DED>def __get__(self, instance: Any, owner: Any = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_line": "    def __get__(self, instance: object, owner: type = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 66,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pgjones/quart",
    "source_filename": "src/quart/config.py",
    "target_filename": "src/quart/config.py",
    "source_changeid": "c6905c0abe702031e79520c1474f2996657bd245^",
    "target_changeid": "c6905c0abe702031e79520c1474f2996657bd245",
    "predictions": [
      "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "1": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "2": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "3": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "4": "\n <DED> def __get__(self, instance: object, owner: Type[str, None] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "5": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "6": "\n <DED> def __get__(self, instance: object, owner: Type[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "7": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if self.instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "8": "\n <DED> def __get__(self, instance: object, owner: type = \"\") -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "9": "\n <DED> def __get__(self, instance: object, owner: Type[type] = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "10": "\n <DED> def __get__(self, instance: object, owner: Optional[typing.Type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "11": "\n <DED> def __get__(self, instance: object, owner: Type[str] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "12": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "13": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "14": "\n <DED> def __get__(self, instance: object, owner: Type[str, None] = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "15": "\n <DED> def __get__(self, instance: object, owner: Type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "16": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "17": "\n <IND> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "18": "\n <DED> def __get__(self, instance: object, owner: Type = []) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "19": "\n <DED> def __get__(self, instance: object, owner: Type[instance, None] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "20": "\n <DED> def __get__(self, instance: object, owner: type = '') -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "21": "\n <DED> def __get__(self, instance: object, owner: type = []) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "22": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if self.instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "23": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "24": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "25": "\n \n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "26": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "27": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "28": "\n <DED> def __get__( \n self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "29": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> None: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "30": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "31": "\n <DED> def __get__(self, instance: object, owner: type) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "32": "\n <DED> def __get__(self, instance: object, owner: type = \"\") -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "33": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[typing.Type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "34": "\n <DED> def __get__(self, instance: object, owner: Optional[typing.Any] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "35": "\n <DED> def __get__(self, instance: object, owner: Type[type] = None) -> Any: \n <IND> if self.instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "36": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "37": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] \n if self.converter is not None: \n",
      "38": "\n <IND> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "39": "\n <DED> def __get__(self, instance: object, owner: Type = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "40": "\n <DED> def __get__(self, instance: object, owner: Type[instance, None] = None) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "41": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignor \n if self.converter is not None: \n",
      "42": "\n <DED> def __get__(self, instance: object, owner: Optional[instance] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "43": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "44": "\n <DED> def __get__(self, instance, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "45": "\n <DED> def __get__(self, instance: object, owner: type = '') -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "46": "\n <DED> def __get__(self, instance: object, owner: Type[instance] = None) -> Any: \n <IND> if case is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "47": "\n <DED> def __get__(self, instance: object, owner: Type = []) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "48": "\n <DED> def __get__(self, instance: object, owner: type = []) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "49": "\n <DED> def __get__(self, instance: object, owner: type) -> Any: \n <IND> if self is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator\n\n",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_line": "OVERLAYS = None  # type: Generator",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BEEmod/BEE2.4",
    "source_filename": "src/texturing.py",
    "target_filename": "src/texturing.py",
    "source_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6^",
    "target_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "predictions": [
      "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] \n \n",
      "1": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "2": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "3": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n \n",
      "4": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None \n \n",
      "5": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] \n \n",
      "6": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None \n \n",
      "7": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "8": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "9": "# These can just be looked up directly. \n SPECIAL: None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "10": "# These can just be looked up directly. \n SPECIAL: Optional[[Generator]] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "11": "# These can just be looked up directly. <IND> SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "12": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] <DED> \n \n",
      "13": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None <IND> OVERLAYS: Optional[Generator] \n \n",
      "14": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] <DED> \n \n",
      "15": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None <DED> OVERLAYS: Optional[Generator] \n \n",
      "16": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] <IND> \n",
      "17": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] <DED> \n \n",
      "18": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] <IND> \n",
      "19": "# These can just be looked up directly. \n SPECIAL: None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None \n \n",
      "20": "# These can just be looked up directly. <DED> \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] \n \n",
      "21": "# These can just be looked up directly. \n SPECIAL: Optional[Error] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "22": "# These can just be looked up directly. \n SPECIAL: Type[Generator] \n OVERLAYS: Type[Generator] \n \n",
      "23": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n <IND>",
      "24": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] <IND> \n",
      "25": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "26": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "27": "# These can just be looked up directly. <DED> \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "28": "# These can just be looked up directly. \n SPECIAL: None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "29": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n <DED>",
      "30": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] <DED> OVERLAYS: Optional[Generator] \n \n",
      "31": "# These can just be looked up directly. \n SPECIAL: Optional[GENerator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "32": "# These can just be looked up directly. \n SPECIAL: typing.Optional[Generator] \n OVERLAYS: typing.Optional[Generator] \n \n",
      "33": "# These can just be looked up directly. \n SPECIAL = None # type: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "34": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] \n <IND>",
      "35": "# These can just be looked up directly. <DED> \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "36": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None <IND> \n",
      "37": "# These can just be looked up directly. <IND> SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "38": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] <IND> OVERLAYS: Optional[Generator] \n \n",
      "39": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None <DED> \n \n",
      "40": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] <DED> OVERLAYS = None # type: Optional[Generator] \n \n",
      "41": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] <IND> OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "42": "# These can just be looked up directly. <DED> \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n \n",
      "43": "# These can just be looked up directly. <IND> SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None \n \n",
      "44": "# These can just be looked up directly. \n SPECIAL = None # type: typing.Optional[Generator] \n OVERLAYS: typing.Optional[Generator] \n \n",
      "45": "# These can just be looked up directly. \n SPECIAL: Optional[[Generator]] = None \n OVERLAYS: Optional[Generator] \n \n",
      "46": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] \n OVERLAYS: Optional[Generator] = None \n \n",
      "47": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] \n <DED>",
      "48": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n <IND>",
      "49": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None <IND> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               type_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 121,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "1": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "2": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "3": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "4": "<IND> def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "5": "<IND> def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "6": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "7": "<IND> def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "8": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "9": "<IND> def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "10": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "11": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "12": "<IND> def object(self, \n symbol_name: typing.Optional[str] = None, \n type_name: typing.Optional[str] = None, \n offset: int = None, \n",
      "13": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "14": "<IND> def object(self, \n symbolic_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "15": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ) -> None: \n",
      "16": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ): \n",
      "17": "<IND> def object(self, \n simbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "18": "<IND> def object(self, \n symbol_name, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "19": "<DED> def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "20": "<DED> def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "21": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "22": "<DED> def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "23": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "24": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED> type_name: Optional[str] = None, \n",
      "25": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n exports: Optional[str] = None, \n",
      "26": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n type_name: Optional[str] = None, \n",
      "27": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED> name: Optional[str] = None, \n",
      "28": "<DED> def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "29": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "30": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int, \n",
      "31": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "32": "\n def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "33": "\n def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "34": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n name: Optional[str] = None, \n",
      "35": "<IND> def object(self, \n symbol_name: option.str(str), \n type_name: option.str(str), \n offset: int = None, \n",
      "36": "<IND> def object(self, \n symbol_name: Formal[str] = None, \n type_name: Formal[str] = None, \n offset: int = None, \n",
      "37": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "38": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "39": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED> symbol_name: Optional[str] = None, \n",
      "40": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ) -> None: \n",
      "41": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "42": "\n def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "43": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "44": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "45": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "46": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "47": "<IND> def object(self, \n symbol_name: option.str(None), \n type_name: option.str(None), \n offset: int = None, \n",
      "48": "\n def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "49": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n ): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,   # type: int\n    max_size=None  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,   # type: None\n    max_size=None  # type: int\n",
    "warning_line": "    average_size=None,   # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 940,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n"
    ],
    "correct": false,
    "top_five": {
      "0": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "1": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int \n",
      "2": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "3": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None # type: int \n",
      "4": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: Optional[int] \n",
      "5": "min_size=0, # type: Int \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "6": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None # type: Optional[int] \n",
      "7": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: Int \n",
      "8": "min_size=0, # type: None \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "9": "min_size=0, # type: int \n average_size=None, # type: Optional[int] <DED> max_size=None # type: int \n",
      "10": "min_size=0, # type: int <IND> average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "11": "min_size=0, # type: int \n average_size=None, # type: Optional[int] <IND> max_size=None # type: int \n",
      "12": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: int <IND>",
      "13": "min_size=0, # type: int <DED> average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "14": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: int <DED>",
      "15": "min_size=0, # type: int \n average_size=None, # type: Int \n max_size=None # type: int \n",
      "16": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "17": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None, # type: int \n",
      "18": "min_size=0, # type: int \n average_sized=None, # type: Optional[int] \n max_size=None # type: int \n",
      "19": "min_size=0, # type: Int \n average_size=None, # type: None \n max_size=None # type: int \n",
      "20": "min_size=0, # type: 0 \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "21": "min_size=0, # type: int \n average_size=None, # type: optional[int] \n max_size=None # type: int \n",
      "22": "min_size=0, # type: int \n average_size=None, # type:None \n max_size=None # type: int \n",
      "23": "min_size=0, # type: None \n average_size=None, # type: None \n max_size=None # type: int \n",
      "24": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int \n",
      "25": "min_size=0, # type: Optional[int] <DED> average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "26": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: Optional[int] \n",
      "27": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] <DED> max_size=None # type: int \n",
      "28": "min_size=0, # type: Int \n average_size=None, # type: Optional[int] \n max_size=None # type: Optional[int] \n",
      "29": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None # type: Int \n",
      "30": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "31": "min_size=0, # type: 0 \n average_size=None, # type: int \n max_size=None # type: int \n",
      "32": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None # type: Optional[int] \n",
      "33": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None # type: int <IND>",
      "34": "min_size=0, # type: int \n average_size=None, # type: Optional[Int] \n max_size=None # type: int \n",
      "35": "min_size=0, # type: Optional[int] \n average_size=None, # type: Optional[int] \n max_size=None # type: int <DED>",
      "36": "min_size=0, # type: int \n average_size=None, # type: none \n max_size=None # type: int \n",
      "37": "min_size=0, # type: Int \n average_size=None, # type: int \n max_size=None # type: int \n",
      "38": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: Int \n",
      "39": "min_size=0, # type: int \n average_size=None, # type: Optional[str] \n max_size=None # type: int \n",
      "40": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None \n",
      "41": "min_size=0, # type: Optional[int] \n average_size=None, # type: int \n max_size=None # type: int \n",
      "42": "min_size=0, # type: int \n average_size=none, # type: Optional[int] \n max_size=None # type: int \n",
      "43": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None \n",
      "44": "min_size=0, # type: int \n average_size=None, # type: NONE \n max_size=None # type: int \n",
      "45": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None # type: Int \n",
      "46": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int \n",
      "47": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None <IND> type: int \n",
      "48": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: None \n",
      "49": "min_size=0, # type: int <IND> average_size=None, # type: None \n max_size=None # type: int \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_line": "            embeddings = cached_path(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " embeddings is declared to have type `str` but is used as type `Path`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2082,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/embeddings/token.py",
    "target_filename": "flair/embeddings/token.py",
    "source_changeid": "0b834f5167d11f06037398fcbe1554f244167e18^",
    "target_changeid": "0b834f5167d11f06037398fcbe1554f244167e18",
    "predictions": [
      ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n"
    ],
    "correct": true,
    "top_five": {
      "0": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "1": ") \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "2": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / ^ embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "3": ") \n embeddings = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "4": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "5": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings \\ / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "6": ") \n embeddings_path_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "7": ") \n embeddings_path = cached_path( <DED> f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "8": ") \n embeddings_path = cached_path( <IND> f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "9": ") <IND> embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "10": ") \n embeddings_path = cached_path( \n f\" ^ base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "11": ") \n embeddeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "12": ") <DED> embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "13": ") \n embeddings_paths = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "14": ") \n embeddingss_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "15": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <DED> \n",
      "16": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <IND>",
      "17": ") \n embeddedings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "18": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <IND> \"\" \n",
      "19": ") \n embeddings_path = cached_path( \n f\" { base_path \\ { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "20": ") \n embedding_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "21": ") \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "22": ") \n embeddings_path=base_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "23": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size \\.zip\", cache_dir=cache_dir \n",
      "24": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "25": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size } \".zip\", cache_dir=cache_dir \n",
      "26": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n ) \n",
      "27": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <DED> \"\" \n",
      "28": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "29": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddedings } _s { size }.zip\", cache_dir=cache_dir \n",
      "30": ") \n embeddings_step = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "31": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <IND> \"\" <DED> embeddings_path = cached_path( \n",
      "32": ") \n embeddings_path=Cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "33": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <IND> \"\" <IND> embeddings_path = cached_path( \n",
      "34": ") \n embeddings_path = cached_path( \n f \" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "35": ") \n embeddings_base_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "36": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\".zip\", cache_dir=cache_dir \n",
      "37": ") \n embeddings_map = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "38": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n \") \n",
      "39": ") \n embeddings: Optional[str] = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "40": ") \n embeddings_array_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "41": ") \n embeddings_pat = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "42": ") \n embeddings_list = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "43": ") \n embeddings_path, cached_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "44": ") \n embeddings_file = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "45": ") \n embeddings_path= cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "46": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings { / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "47": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir <IND> \" \n",
      "48": ") \n embeddings_s = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "49": ") \n embeddings=cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n            usd_volume: float = [\n                (\n",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_line": "            usd_volume: float = [",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 97,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hummingbot/hummingbot",
    "source_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "target_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1^",
    "target_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "predictions": [
      "\n usd_volume: float = [ \n ( \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n usd_volume: float = [ \n ( \n",
      "1": "\n usd_volume: List[float] = [ \n ( \n",
      "2": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "3": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8')] \n ( \n",
      "4": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "5": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8') ] \n ( \n",
      "6": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "7": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "8": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float) = [ \n ( \n",
      "9": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "10": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']') ] = [ \n ( \n",
      "11": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'] \n ( \n",
      "12": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8')] \n \n",
      "13": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8') ] \n ( \n",
      "14": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "15": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8')] \n ( \n",
      "16": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8']] \n usd_volume: float) = [ \n ( \n",
      "17": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8')] \n usd_volume: float = [ \n ( \n",
      "18": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']', 'utf-8', 'utf-8')] = [ \n ( \n",
      "19": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n",
      "20": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] = [ \n ( \n",
      "21": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8', 'wf-8') ] \n ( \n",
      "22": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] <DED> \n usd_volume: float = [ \n ( \n",
      "23": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8', 'wf-8')] \n ( \n",
      "24": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'): \n",
      "25": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8'] = [ \n ( \n",
      "26": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'u')] = [ \n ( \n",
      "27": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']', 'utf-8', 'utf-8'))) \n",
      "28": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float = [ \n ( \n",
      "29": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8')] \n usd_volume: float = [ \n ( \n",
      "30": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] = [ \n ( \n",
      "31": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8')] \n usd_volume: float = [ \n ( \n",
      "32": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n",
      "33": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'u', 'utf-8')) \n",
      "34": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']', 'utf-8')] = [ \n ( \n",
      "35": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']', 'utf-8')) \n",
      "36": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8']] = [ \n ( \n",
      "37": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8')] \n",
      "38": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']', 'utf-8', 'utf-8')) \n",
      "39": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] = [ \n ( \n",
      "40": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n usd_volume: float] = [ \n ( \n",
      "41": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8', 'wf-8', 'wf-8')] \n ( \n",
      "42": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8'] \n ['wf-8', 'wf-8', 'wf-8', 'wf-8']'] \n ( \n",
      "43": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'] ] \n ( \n",
      "44": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8'], 'wf-8', 'wf-8', 'wf-8') ] \n ( \n",
      "45": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] = [ \n ( \n",
      "46": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8') ] = [ \n ( \n",
      "47": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n 'wf-8'] = [ \n ( \n",
      "48": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] <IND> usd_volume: float = [ \n ( \n",
      "49": "\n ['utf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8', 'wf-8']] \n 'wf-8']: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, reason: str = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "warning_line": "    def __init__(self, reason: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " reason is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 28,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theacodes/nox",
    "source_filename": "nox/command.py",
    "target_filename": "nox/command.py",
    "source_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62^",
    "target_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "predictions": [
      "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "1": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "2": "\n def __init__(self, reason: Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__(reason) \n",
      "3": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__(reason) \n",
      "4": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "5": "\n def __init__(self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "6": "<DED> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "7": "<IND> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "8": "\n def __init__(self, reason: Optional[str] = None) -> None: <IND> <IND> super(CommandFailed, self).__init__(reason) \n",
      "9": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <IND>",
      "10": "\n def __init__(self, reason: Type[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "11": "\n def __init__(self, reason: Optional[str] = None) -> None: <DED> <IND> super(CommandFailed, self).__init__(reason) \n",
      "12": "\n def __init__(self, reason: Optional[str] = None <IND> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "13": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__(reason) \n",
      "14": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__(reason) \n",
      "15": "\n def __init__(self, reason: option.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "16": "\n def __init__(self, reason: typing.Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "17": "\n def __init__( \n self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "18": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "19": "\n def __init__( <DED> self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "20": "\n def __init__(self, reason: Optional[str] = None <DED> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "21": "\n def __init__(self, reason: str) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "22": "\n def __init__(self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "23": "\n def __init__(self, reason: Optional[str] = None): \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "24": "<DED> def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "25": "\n def __init__( <IND> self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "26": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "27": "<IND> def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "28": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <DED> \n",
      "29": "\n def __init__(self, reasons: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "30": "\n def __init__(self, motive: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "31": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: <IND> <IND> super(CommandFailed, self).__init__(reason) \n",
      "32": "\n def __init__(self, reason: Optional[str] = None <DED> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "33": "\n def __init__(self, reason: typing.Optional[str] = None <IND> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "34": "\n def __init__() -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "35": "\n def __init__(self, reason: method.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "36": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <IND>",
      "37": "\n def __init__(self, reason: options.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "38": "\n def __init__ (self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "39": "\n def __init__(self, reason: useable.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "40": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: <DED> <IND> super(CommandFailed, self).__init__(reason) \n",
      "41": "\n def __init__(self, reason: UseError) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "42": "\n def __init__(self, reason: typing.Optional[str] = None <DED> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "43": "\n def __init__(self, reasoning: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "44": "\n def __init__( \n self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "45": "\n def __init__(self, reason: System.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "46": "\n def __init__(self, reason: Argument.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "47": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n ) \n",
      "48": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <DED> self.__init__() \n",
      "49": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <DED> __init__() \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_line": "        path_scope: irast.ScopeTreeNode=None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/pathctx.py",
    "target_filename": "edb/edgeql/compiler/pathctx.py",
    "source_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa^",
    "target_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "predictions": [
      "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "1": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "2": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "3": "ir_set: irast.Set, *, \n path_scope=edb.ir.ScopeTreeNode, \n optional: bool=False, \n",
      "4": "ir_set: irast.Set, *, \n path_scope=Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "5": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=False, \n optional: bool=False, \n",
      "6": "ir_set: irast.Set, *, \n path_scope: Optional[edb.ir.scopetree.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "7": "ir_set: irast.Set, *, \n path_scope: Optional[edb.ir.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "8": "ir_set: irast.Set, *, \n path_scope=Edb.ir.ScopeTreeNode, \n optional: bool=False, \n",
      "9": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, \n optional=False, \n",
      "10": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode=False, \n optional: bool=False, \n",
      "11": "ir_set: irast.Set, *, \n path_scope=ScopeTreeNode, \n optional: bool=False, \n",
      "12": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode=None, \n optional: bool=False, \n",
      "13": "ir_set: irast.Set, *, \n path_scope= irast.ScopeTreeNode, \n optional: bool=False, \n",
      "14": "ir_set: irast.Set, *, \n path_scope: Optional[edb.ir.scopeTreeNode]=None, \n optional: bool=False, \n",
      "15": "ir_set: irast.Set, *, \n path_scope: Optional[edb.ir.scopetree.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "16": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode], \n optional: bool=False, \n",
      "17": "ir_set: irast.Set, *, \n path_scope=Optional[edb.ir.scopetree.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "18": "ir_set: irast.Set, *, <IND> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "19": "ir_set: irast.Set, *, \n path_scope= Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "20": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, <IND>",
      "21": "ir_set: irast.Set, *, \n path_scope = irast.ScopeTreeNode, \n optional: bool=False, \n",
      "22": "ir_set: irast.Set, *, \n path_scope=irast.ScopeTreeNode, \n optional: bool=False, \n",
      "23": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Undefined, \n optional: bool=False, \n",
      "24": "ir_set: irast.Set, *, \n path_scope: edb.ir.ScopeTreeNode, \n optional: bool=False, \n",
      "25": "ir_set: irast.Set, *, <DED> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "26": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=TreeNode, \n optional: bool=False, \n",
      "27": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, <IND> optional: bool=False, \n",
      "28": "ir_set: irast.Set, *, \n path_scope=options.Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "29": "ir_set: irast.Set, *, \n path_scope: Optional[edb.ir.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "30": "ir_set: irast.Set, *, \n path_scope=str(irast.ScopeTreeNode), \n optional: bool=False, \n",
      "31": "ir_set: irast.Set, *, \n path_scope: typing.Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "32": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Optional[0], \n optional: bool=False, \n",
      "33": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, <DED> optional: bool=False, \n",
      "34": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, <DED>",
      "35": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Null, \n optional: bool=False, \n",
      "36": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Optional[0], \n optional: bool=False, \n",
      "37": "ir_set: irast.Set, *, \n path_scope=edb.ir.scopetree.ScopeTreeNode, \n optional: bool=False, \n",
      "38": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Optional[str], \n optional: bool=False, \n",
      "39": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Token, \n optional: bool=False, \n",
      "40": "ir_set: irast.Set, *, \n path_scope=edb.ir.scopeTreeNode, \n optional: bool=False, \n",
      "41": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=Playground, \n optional: bool=False, \n",
      "42": "ir_set: irast.Set, *, \n path_scope=edb.ir.ScopeTreeNode, \n optional=bool=False, \n",
      "43": "ir_set: irast.Set, *, <DED> path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "44": "ir_set: irast.Set, *, <IND> path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "45": "ir_set: irast.Set, *, \n path_scope=None, \n optional: bool=False, \n",
      "46": "ir_set: irast.Set, *, \n path_scope='irast.ScopeTreeNode', \n optional: bool=False, \n",
      "47": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional=False, \n",
      "48": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, \n optional: bool=False, <IND>",
      "49": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode=[], \n optional: bool=False, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
    "target_code": "\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
    "warning_line": "        signer_key = SignerKey.ed25519_public_key(signer_key)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 912,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/transaction_builder.py",
    "target_filename": "stellar_sdk/transaction_builder.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "1": "\n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "2": "\n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "3": "\n assert signer_key is not None \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "4": "\n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "5": "\n player_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, player_key, source) \n return self.append_operation(op) \n",
      "6": "\n assert signer_key is not None \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "7": "\n name = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, name, source) \n return self.append_operation(op) \n",
      "8": "\n key_ = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_, source) \n return self.append_operation(op) \n",
      "9": "\n key = SignerKey.ed25519_public_key(key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "10": "\n loger_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, loger_key, source) \n return self.append_operation(op) \n",
      "11": "\n def signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, def signer_key, source) \n return self.append_operation(op) \n",
      "12": "\n signeder_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "13": "\n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "14": "\n assert isinstance(signer_key, signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "15": "\n type = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, type, source) \n return self.append_operation(op) \n",
      "16": "\n signinger_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "17": "\n user_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, user_key, source) \n return self.append_operation(op) \n",
      "18": "\n self.append_operation(op) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, self.signer_key, source) \n return self.append_operation(op) \n",
      "19": "\n signeder_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signeder_key, source) \n return self.append_operation(op) \n",
      "20": "\n key = Key.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "21": "\n self.append_operation(op) \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, self.signer_key, source) \n return self.append_operation(op) \n",
      "22": "\n signature_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signature_key, source) \n return self.append_operation(op) \n",
      "23": "\n assert self.append_operation(op) \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "24": "\n icon_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, icon_key, source) \n return self.append_operation(op) \n",
      "25": "\n use_signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, use_signer_key, source) \n return self.append_operation(op) \n",
      "26": "\n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, op, source) \n return self.append_operation(op) \n",
      "27": "<DED> key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "28": "\n no_signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, no_signer_key, source) \n return self.append_operation(op) \n",
      "29": "\n def signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, def, source) \n return self.append_operation(op) \n",
      "30": "\n key = SignatureKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "31": "<IND> key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "32": "\n key = signerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "33": "\n keyboard = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "34": "\n value = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, value, source) \n return self.append_operation(op) \n",
      "35": "\n str = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, str, source) \n return self.append_operation(op) \n",
      "36": "\n switch_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, switch_key, source) \n return self.append_operation(op) \n",
      "37": "\n label_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, label_key, source) \n return self.append_operation(op) \n",
      "38": "\n assert signer_key is not None \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, self.signer_key, source) \n return self.append_operation(op) \n",
      "39": "\n key_ = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_source) \n return self.append_operation(op) \n",
      "40": "\n signature_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) \n return self.append_operation(op) \n",
      "41": "\n self.append_operation(op) \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, self.append_operation(op)) \n return self.append_operation(op) \n",
      "42": "\n key_ = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key__, source) \n return self.append_operation(op) \n",
      "43": "\n port_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, port_key, source) \n return self.append_operation(op) \n",
      "44": "\n icon = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, icon, source) \n return self.append_operation(op) \n",
      "45": "\n key=signerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "46": "\n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, source) \n return self.append_operation(op) \n",
      "47": "\n assert signer_key is not None \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, op, source) \n return self.append_operation(op) \n",
      "48": "\n assert self.append_operation(op) \n signer_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, self.signer_key, source) \n return self.append_operation(op) \n",
      "49": "\n keyboard = SignerKey.ed25519_public_key(key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "warning_line": "    def __init__(self, format: str = None, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " format is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/fields.py",
    "target_filename": "src/marshmallow/fields.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "1": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "2": "\n def __init__( \n self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "3": "\n def __init__( <DED> self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "4": "\n def __init__(self, format: typing.Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "5": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <DED> super().__init__(**kwargs) \n",
      "6": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n \n super().__init__(**kwargs) \n",
      "7": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "8": "\n def __init__(self, format: str, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "9": "<DED> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "10": "\n def __init__( \n self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "11": "<IND> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "12": "\n def __init__(self, format: Optional[str] = None, **kwargs): <IND> <IND> super().__init__(**kwargs) \n",
      "13": "\n def __init__( <DED> self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "14": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "15": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n \n super().__init__(**kwargs) \n",
      "16": "\n def __init__(self, format: Optional[str] = None, **kwargs \n ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "17": "\n def __init__(self, format: typing.Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "18": "\n def __init__(self, format: Optional[str] = None, **kwargs): <DED> <IND> super().__init__(**kwargs) \n",
      "19": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__() \n",
      "20": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <IND>",
      "21": "\n def __init__(self, format: Optional[str] = None, **kwargs]: \n <IND> super().__init__(**kwargs) \n",
      "22": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <DED> super().__init__(**kwargs) \n",
      "23": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__( **kwargs) \n",
      "24": "<DED> def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "25": "<IND> def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "26": "\n def __init__(self, format: Optional[str] = None, **kwargs \n ): \n <IND> super().__init__(**kwargs) \n",
      "27": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> Optional[str]: \n <IND> super().__init__(**kwargs) \n",
      "28": "\n def __init__(self, format: Optional[str] = None, **kwargs <DED> ): \n <IND> super().__init__(**kwargs) \n",
      "29": "\n def __init__(self, format: Optional[str] = None, **kwargs <IND> ): \n <IND> super().__init__(**kwargs) \n",
      "30": "\n def __init__( \n self, format: Optional[str] = None, \n **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "31": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__( **kwargs) \n",
      "32": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: <IND> <IND> super().__init__(**kwargs) \n",
      "33": "\n def __init__( self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "34": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <DED> \n",
      "35": "\n def __init__(self, format: str = \"\", **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "36": "\n def __init__(self, formatting: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "37": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) <IND>",
      "38": "\n def __init__(self, format: Optional[str] = None, **kwargs <DED> ): \n <IND> super().__init__(**kwargs) \n",
      "39": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__ (**kwargs) \n",
      "40": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: <DED> <IND> super().__init__(**kwargs) \n",
      "41": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs \n",
      "42": "\n def __init__(self, format: str: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "43": "\n def __init__ (self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "44": "\n def __init__( \n self, format: typing.Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "45": "\n def __init__(self, format: Optional[str] = None, \n **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "46": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__() \n",
      "47": "\n def __init__(self, format: Optional[str] = None, **kwargs <IND> ): \n <IND> super().__init__(**kwargs) \n",
      "48": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <DED> __init__() \n",
      "49": "\n def __init__(self, form: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <IND>def __init__(self, rf_path: str=None):\n        <IND>super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1\n",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "1": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "2": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "3": "\n <IND> def __init__(self, rf_path: str=\"\"): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "4": "\n <IND> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "5": "\n <IND> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "6": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=str) \n self.number_of_variables = 1 \n",
      "7": "\n <IND> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "8": "\n <IND> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "9": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "10": "\n <IND> def __init__(self, rf_path: str=\"\"): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "11": "\n <IND> def __init__(): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "12": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "13": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 1 \n",
      "14": "\n <IND> def __init__(self, rf_path: Optional[str]=None) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "15": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "16": "\n <IND> def __init__(self, rf_path: Optional[str]=None) -> None: \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "17": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=none) \n self.number_of_variables = 1 \n",
      "18": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=None) \n self.number_of_variables = 1 \n",
      "19": "\n <IND> def __init__(self) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "20": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Base) \n self.number_of_variables = 1 \n",
      "21": "\n <DED> def __init__(self, rf_path: str=\"\"): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "22": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Error) \n self.number_of_variables = 1 \n",
      "23": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=False) \n self.number_of_variables = 1 \n",
      "24": "\n <DED> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "25": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 1 \n",
      "26": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Schaffer) \n self.number_of_variables = 1 \n",
      "27": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Optional[rf_path]) \n self.number_of_variables = 1 \n",
      "28": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Str) \n self.number_of_variables = 1 \n",
      "29": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=String) \n self.number_of_variables = 1 \n",
      "30": "\n <DED> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "31": "\n <DED> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "32": "\n <IND> def __init__(self, rf_path: str): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "33": "\n <DED> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "34": "\n <IND> def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "35": "\n <IND> def __init__(self, rf_path: str=\"\"): \n <IND> super(Schaffer, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 1 \n",
      "36": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Buffer) \n self.number_of_variables = 1 \n",
      "37": "\n <IND> def __init__(self, rf_path: Optional[str] = None) -> None: \n <IND> super(Schaffer, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 1 \n",
      "38": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "39": "\n <DED> def __init__(self, rf_path: str=\"\"): \n <IND> super(Schaffer, self).__init__(rf_path=rf_path) \n self.number_of_variables = 1 \n",
      "40": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=str) \n self.number_of_variables = 1 \n",
      "41": "\n <IND> def __init__(self): \n \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "42": "\n \n def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "43": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=_path) \n self.number_of_variables = 1 \n",
      "44": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=List[1]) \n self.number_of_variables = 1 \n",
      "45": "\n <IND> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Schaffer, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 1 \n",
      "46": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__(rf_path=Argument) \n self.number_of_variables = 1 \n",
      "47": "\n <IND> def __init__(self) -> None: \n <IND> super(Schaffer, self).__init__(rf_path=Rf_path) \n self.number_of_variables = 1 \n",
      "48": "<DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "49": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() <IND> self.number_of_variables = 1 \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED><DED>def run(self, host: str = None, port: int = None, *args, **kwargs):\n        <IND>host = host or self.config.HOST\n",
    "target_code": "\n    <DED><DED>def run(self, host: Optional[str] = None, port: Optional[int] = None,\n            *args, **kwargs) -> None:\n        <IND>host = host or self.config.HOST\n",
    "warning_line": "    def run(self, host: str = None, port: int = None, *args, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " host is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nonebot/nonebot",
    "source_filename": "none/__init__.py",
    "target_filename": "none/__init__.py",
    "source_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd^",
    "target_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd",
    "predictions": [
      "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "1": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "2": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "3": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <DED> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "4": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "5": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "6": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "7": "\n \n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "8": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <DED> *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "9": "\n <IND> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "10": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "11": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> Optional[str]: \n <IND> host = host or self.config.HOST \n",
      "12": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n \n host = host or self.config.HOST \n",
      "13": "<DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "14": "<IND> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "15": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST <IND>",
      "16": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "17": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "18": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: <IND> <IND> host = host or self.config.HOST \n",
      "19": "\n \n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "20": "\n <DED> <DED> def run( \n self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "21": "\n <IND> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "22": "\n <IND> <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "23": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST <DED>",
      "24": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs \n ) -> None: \n <IND> host = host or self.config.HOST \n",
      "25": "\n <IND> <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "26": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: <DED> <IND> host = host or self.config.HOST \n",
      "27": "\n <DED> <DED> def run( <DED> self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "28": "<DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "29": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <DED> host = host or self.config.HOST \n",
      "30": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None : \n <IND> host = host or self.config.HOST \n",
      "31": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "32": "\n <DED> <DED> def run( <IND> self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "33": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "34": "\n \n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "35": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n \n host = host or self.config.HOST \n",
      "36": "<IND> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "37": "\n <IND> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "38": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs]: \n <IND> host = host or self.config.HOST \n",
      "39": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "40": "\n <IND> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "41": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs <DED> ) -> None: \n <IND> host = host or self.config.HOST \n",
      "42": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "43": "\n <DED> <DED> def run(self, host: None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "44": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, <DED> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "45": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, <DED> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "46": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host oder self.config.HOST \n",
      "47": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n \n host = host or self.config.HOST \n",
      "48": "<DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "49": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host ou self.config.HOST \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>return capability in self.agreed_capabilities\n    <DED>def available_capability(self, capability: utils.irc.Capability) -> bool:\n        <IND>return capability.available(self.agreed_capabilities)\n",
    "target_code": "        <IND>return capability in self.agreed_capabilities\n    <DED>def available_capability(self, capability: utils.irc.Capability) -> str:\n        <IND>return capability.available(self.agreed_capabilities)\n",
    "warning_line": "        return capability.available(self.agreed_capabilities)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/IRCServer.py",
    "target_filename": "src/IRCServer.py",
    "source_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd^",
    "target_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "predictions": [
      "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "1": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability): \n <IND> return capability.available(self.agreed_capabilities) \n",
      "2": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> bool: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "3": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "4": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "5": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "6": "<IND> return capability in self.agreed_capabilities \n \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "7": "\n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "8": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "9": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "10": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> assert self.agreed_capabilities is not None \n return capability.available(self.agreed_capabilities) \n",
      "11": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "12": "<IND> return capabilities in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "13": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability, self.agreed_capabilities) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "14": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> bool: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "15": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "16": "<IND> assert self.agreed_capabilities is not None \n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "17": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability): \n <IND> return capability.available(self.agreed_capabilities) \n",
      "18": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> bool: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "19": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> stabbing: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "20": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability): \n <IND> assert self.agreed_capabilities is not None \n return capability.available(self.agreed_capabilities) \n",
      "21": "<IND> return capability in self.agreed_capabilities <IND> <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "22": "<IND> return capability in self.agreed_capabilities <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "23": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability): \n <IND> return capability.available(self.agreed_capabilities) \n",
      "24": "<IND> return capability in self.agreed_capabilities \n \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "25": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "26": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capabilities) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "27": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) <IND>",
      "28": "<IND> return capability in self.agreed_capabilities \n \n <DED> def available_capability(self, capability: utils.irc.Capability): \n <IND> return capability.available(self.agreed_capabilities) \n",
      "29": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> if self.agreed_capabilities is None: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "30": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> tuple: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "31": "<IND> return capacity in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "32": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability, bool) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "33": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> if self.agreed_capabilities is not None: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "34": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: <IND> <IND> return capability.available(self.agreed_capabilities) \n",
      "35": "<IND> return capability in self.agreed_capabilities \n \n <DED> def available_capability(self, capability: utils.irc.Capability) -> bool: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "36": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "37": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability,...) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "38": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: <DED> <IND> return capability.available(self.agreed_capabilities) \n",
      "39": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) <DED>",
      "40": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "41": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capabilities.available(self.agreed_capabilities) \n",
      "42": "<IND> return capability in self.agreed_capabilities \n \n \n def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "43": "<IND> self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "44": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> \"\": \n <IND> return capability.available(self.agreed_capabilities) \n",
      "45": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: capabilities.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "46": "<DED> return capability in self.agreed_capabilities \n \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "47": "\n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability): \n <IND> return capability.available(self.agreed_capabilities) \n",
      "48": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: capability.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "49": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability): \n <DED> return capability.available(self.agreed_capabilities) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0\n\n",
    "target_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_line": "        return plans and len(plans) > 0",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "synek/git-plan",
    "source_filename": "git_plan/service/plan.py",
    "target_filename": "git_plan/service/plan.py",
    "source_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc^",
    "target_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "predictions": [
      "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "1": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return bool(pl\u00e4nes) > 0 \n \n",
      "2": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return bool(plans) > 0 \n \n",
      "3": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return bool(pl\u00e4ne) > 0 \n \n",
      "4": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return new Plans(plans) > 0 \n \n",
      "5": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "6": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir).decode(plans) \n \n return plans and len(plans) > 0 \n \n",
      "7": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return len(plans) > 0 \n \n",
      "8": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and list(plans) > 0 \n \n",
      "9": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "10": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return Plans and len(plans) > 0 \n \n",
      "11": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return lists and len(plans) > 0 \n \n",
      "12": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return (plans) > 0 \n \n",
      "13": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "14": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and bool(plans) > 0 \n \n",
      "15": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "16": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans \n \n",
      "17": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return \"\" and len(plans) > 0 \n \n",
      "18": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans > 0 \n \n",
      "19": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return bool(pl\u00e4nes) > 0 \n \n",
      "20": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return bool(plans) > 0 \n \n",
      "21": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return (plans) and len(plans) > 0 \n \n",
      "22": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and (plans) > 0 \n \n",
      "23": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return list(plans) > 0 \n \n",
      "24": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return projects and len(plans) > 0 \n \n",
      "25": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return return plans and len(plans) > 0 \n \n",
      "26": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir).decode(pl\u00e4ne) \n \n return plans and len(plans) > 0 \n \n",
      "27": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans, len(plans) > 0 \n \n",
      "28": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return \"\" and return plans and len(plans) > 0 \n \n",
      "29": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return str(pl\u00e4ne) > 0 \n \n",
      "30": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans <DED> bool(plans) > 0 \n \n",
      "31": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans & len(plans) > 0 \n \n",
      "32": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return bool(pl\u00e4nes) > 0 \n \n",
      "33": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return bool(pl\u00e4ne) > 0 \n \n",
      "34": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and (len(plans) > 0 \n \n",
      "35": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return options and len(plans) > 0 \n \n",
      "36": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return bool(plans) > 0 \n \n",
      "37": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n <IND>",
      "38": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return \"\" and bool(plans) > 0 \n \n",
      "39": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return routes and len(plans) > 0 \n \n",
      "40": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir).decode(plans) \n \n return len(plans) > 0 \n \n",
      "41": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return [] \n \n",
      "42": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return proposals and len(plans) > 0 \n \n",
      "43": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans_ = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "44": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return new Plans(pl\u00e4ne) > 0 \n \n",
      "45": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return str(plans) > 0 \n \n",
      "46": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return \"\" and (plans) > 0 \n \n",
      "47": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return (pl\u00e4nes) > 0 \n \n",
      "48": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(pl\u00e4nes) > 0 \n \n",
      "49": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return packages > 0 \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>@classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        <IND>return [choice for choice in cls]\n",
    "target_code": "    <IND>@classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        <IND>return [choice for choice in cls]\n",
    "warning_line": "        return [choice for choice in cls]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 11,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SectorLabs/django-postgres-extra",
    "source_filename": "psqlextra/types.py",
    "target_filename": "psqlextra/types.py",
    "source_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813^",
    "target_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "predictions": [
      "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "1": "<IND> @classmethod \n def all(cls) -> list[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "2": "<IND> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "3": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "4": "<IND> @classmethod \n def all(cls) -> List[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "5": "<IND> @classmethod \n def all(cls, options) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "6": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in choice in cls] \n",
      "7": "<IND> @classmethod \n def all(cls, choice) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in choice in cls] \n",
      "8": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "9": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return str(choice for choice in cls) \n",
      "10": "<IND> @classmethod \n def all(cls, picks) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "11": "<IND> @classmethod \n def all(cls, choice) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in choice in choice in cls] \n",
      "12": "\n <IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "13": "<IND> @classmethod \n def all(cls, choice) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "14": "<IND> @classmethod \n def all(cls) -> List[List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "15": "<IND> @classmethod \n def all(cls, list[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "16": "<IND> @classmethod \n def all(cls, postgresPartitioningMethod) -> List[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "17": "<IND> @classmethod \n def all(cls, list[\"PostgresPartitioningMethod\"]): \n <IND> return [choice for choice in cls] \n",
      "18": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n \n return [choice for choice in cls] \n",
      "19": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return list(choice for choice in cls) \n",
      "20": "<DED> @classmethod \n def all(cls) -> list[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "21": "<IND> @classmethod \n def all(cls) -> str: \n <IND> return [choice for choice in cls] \n",
      "22": "<DED> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "23": "<IND> @classmethod \n def all(cls, choices) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "24": "<IND> @classmethod \n def all(cls, choice) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return choice(choice for choice in cls) \n",
      "25": "<IND> @classmethod \n def all(cls(cls)) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "26": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return choice(choice for choice in cls) \n",
      "27": "<IND> @classmethod \n def all(cls) -> list[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "28": "<IND> @classmethod \n def all(cls -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "29": "<IND> @classmethod \n def all(cls) -> List[List[\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "30": "<IND> @classmethod \n def all(cls, choice) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return choice(choice for choice in choice) \n",
      "31": "<IND> @classmethod \n def all(cls) -> List[[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "32": "<IND> @classmethod \n def all(cls, opts) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "33": "<IND> @classmethod \n def all(cls) -> list[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "34": "<IND> @classmethod <DED> \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "35": "<IND> @classmethod \n def all(cls()) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "36": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] <IND>",
      "37": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: <IND> <IND> return [choice for choice in cls] \n",
      "38": "\n <DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "39": "<IND> @classmethod <IND> def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "40": "<IND> @classmethod \n def all(cls, options) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in options] \n",
      "41": "<IND> @classmethod \n def all(cls) -> \"PostgresPartitioningMethod\": \n <IND> return [choice for choice in cls] \n",
      "42": "<IND> @classmethod \n def all(cls, choice) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in choice in choice in choice in cls] \n",
      "43": "<IND> @classmethod \n def all(cls) -> list[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in choice in cls] \n",
      "44": "<IND> @classmethod \n def all(cls, postgresPartitioningMethod): \n <IND> return [choice for choice in cls] \n",
      "45": "<IND> @classmethod \n def all(cls) -> \"List[PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "46": "<IND> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in choice in cls] \n",
      "47": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in options] \n",
      "48": "<IND> @classmethod \n def all(cls, choice) -> list[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in choice in cls] \n",
      "49": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return cls[choice for choice in cls] \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>return {\"resistance\": voltage / current}\n\n",
    "target_code": "        <IND>return {\"resistance\": voltage / current}\n    <DED>else:\n        <IND>raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_line": "        return {\"resistance\": voltage / current}",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "electronics/ohms_law.py",
    "target_filename": "electronics/ohms_law.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "<IND> return { \"resistance\": voltage / current } \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> return { \"resistance\": voltage / current } \n \n",
      "1": "<DED> return { \"resistance\": voltage / current } \n \n",
      "2": "\n return { \"resistance\": voltage / current } \n \n",
      "3": "<IND> return { \"resistance\": voltage / current } \n <IND>",
      "4": "<IND> assert isinstance(resistance, Dict) -> None: \n <IND> return { \"resistance\": voltage / current } \n \n",
      "5": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float]\") \n \n",
      "6": "<IND> return { \"resistance\": voltage / current } <IND> \n \n",
      "7": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Dict[str, float]\") \n \n",
      "8": "<IND> return { \"dict[str, float]\": \n <IND> return { \"resistance\": voltage / current } \n \n",
      "9": "<IND> return { \"resistance\": voltage / current } <DED> \n \n",
      "10": "<IND> return { \"resistance\": voltage / current } \n <DED> \n",
      "11": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, floating]\") \n \n",
      "12": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Dict[str, float]\") \n \n",
      "13": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, Dict[str, float]\") \n \n",
      "14": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, float]]) \n \n",
      "15": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, Dict[str, float]]) \n \n",
      "16": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> <DED> return { \"resistance\": voltage / current } \n \n",
      "17": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Dict[str, floating]\") \n \n",
      "18": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Dict[str, Dict[str, float]\") \n \n",
      "19": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, float]\") \n \n",
      "20": "<IND> return { \"resistance\": tension / current } \n \n",
      "21": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Dict[str, floating]\") \n \n",
      "22": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, float]) \n \n",
      "23": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, Dict[str, float]]) \n \n",
      "24": "<IND> return { \"resistance\": current / current } \n \n",
      "25": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, Dict[str, Dict[str, float]]) \n \n",
      "26": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Dict[str, Dict[str, float]\") \n \n",
      "27": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, floating], Dict[str, float]) \n \n",
      "28": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Dict[str, Dict[str, float]]) \n \n",
      "29": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError \n \n",
      "30": "<IND> assert current is not None \n return { \"resistance\": voltage / current } \n \n",
      "31": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, Dict[str, float]]) \n <DED> raise ValueError(\"Dict[str, float]\") \n \n",
      "32": "<IND> return { \"str\": voltage / current } \n \n",
      "33": "<IND> return { \"dict[str, float]\": voltage / current } \n \n",
      "34": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, float]\") \n \n",
      "35": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, Dict[str, float]]\") \n \n",
      "36": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float]\") \n <DED> <IND> return { \"resistance\": voltage / current } \n \n",
      "37": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, float]]) \n <DED> <IND> return { \"resistance\": voltage / current } \n \n",
      "38": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, float]\") \n <DED> raise ValueError(\"Dict[str, float]\") \n \n",
      "39": "<IND> assert voltage is not None \n return { \"resistance\": voltage / current } \n \n",
      "40": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]]) \n \n",
      "41": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, Dict]]) \n \n",
      "42": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, Dict[str, Dict]]) \n \n",
      "43": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, float]]).decode(\"Dict[str, Dict[str, float]\") \n \n",
      "44": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, float], Dict[str, Dict[str, float]]).decode(\"Dict[str, float]\") \n \n",
      "45": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError(\"Dict[str, floating], Dict[str, float]\") \n \n",
      "46": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Dict[str, Dict[str, float]]\") \n \n",
      "47": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Dict[str, Dict[str, float]]) \n \n",
      "48": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError \n \n",
      "49": "<IND> return { \"resistance\": voltage / current } \n <DED> <IND> raise ValueError \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
    "target_code": "    <DED>origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_line": "    return origin and issubclass(origin, Collection)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 71,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "konradhalas/dacite",
    "source_filename": "dacite/types.py",
    "target_filename": "dacite/types.py",
    "source_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708^",
    "target_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "predictions": [
      "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "1": "<DED> origin = extract_origin_collection(t) \n return bool(origin) \n \n",
      "2": "<DED> origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "3": "<DED> origin = extract_origin_collection(t) \n return bool(origin), bool(origin)) \n \n",
      "4": "<DED> origin = extract_origin_collection(t) \n return bool(origin,...) \n \n",
      "5": "<IND> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "6": "\n <DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "7": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin) \n \n",
      "8": "<DED> origin = extract_origin_collection(t) \n return bool(origin, t) \n \n",
      "9": "<DED> origin = extract_origin_collection(t) \n return bool(origin, '') \n \n",
      "10": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "11": "<DED> origin = extract_origin_collection(t) \n return origin_collection and issubclass(origin, Collection) \n \n",
      "12": "<DED> origin = extract_origin_collection(t) \n return origin_collection(origin, bool) \n \n",
      "13": "<DED> origin = extract_origin_collection(t) \n return origin(origin) \n \n",
      "14": "<DED> origin = extract_origin_collection(t) \n return origin_collection(origin) \n \n",
      "15": "<DED> origin = extract_origin_collection(t) \n assert isinstance(origin, Collection) \n return origin and issubclass(origin, Collection) \n \n",
      "16": "<DED> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n \n",
      "17": "<IND> origin = extract_origin_collection(t) \n return bool(origin) \n \n",
      "18": "\n <DED> origin = extract_origin_collection(t) \n return bool(origin) \n \n",
      "19": "<DED> origin = extract_origin_collection(t) \n return bool(origin), bool(origin) \n \n",
      "20": "<DED> origin = extract_origin_collection(t) \n return bool(origin, []) \n \n",
      "21": "<DED> origin = extract_origin_collection(t) \n return origin \n \n",
      "22": "<DED> origin = extract_origin_collection(t) \n return source and issubclass(origin, Collection) \n \n",
      "23": "<DED> origin = extract_origin_collection(t) \n return bool(origin, Any) \n \n",
      "24": "<DED> origin = extract_origin_collection(t) \n return bool(origin), bool(origin), Collection) \n \n",
      "25": "<DED> origin = extract_origin_collection(t) \n return bool(origin, origin) \n \n",
      "26": "<DED> origin = extract_origin_collection(t) \n return bool(origine), issubclass(origin, Collection) \n \n",
      "27": "<DED> origin = extract_origin_collection(t) \n return bool and issubclass(origin, Collection) \n \n",
      "28": "<DED> origin = extract_origin_collection(t) \n return bool(origin), bool(origin, Collection)) \n \n",
      "29": "<DED> origin = extract_origin_collection(t) \n return origin <DED> issubclass(origin, Collection) \n \n",
      "30": "<DED> origin = extract_origin_collection(t) \n return bool(origin), origin \n \n",
      "31": "<DED> origin = extract_origin_collection(t) \n return origin(origin, bool) \n \n",
      "32": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n <IND>",
      "33": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, t) \n \n",
      "34": "<DED> origin = extract_origin_collection(t) \n return bool(origin, bool) \n \n",
      "35": "<DED> origin = extract_origin_collection(t) \n return \"\" and issubclass(origin, Collection) \n \n",
      "36": "<DED> origin = extract_origin_collection(t) \n return t.bool(origin) \n \n",
      "37": "<DED> origin = extract_origin_collection(t) \n return 0 \n \n",
      "38": "<DED> origin = extract_origin_collection(t) \n return bool(origin), bool) \n \n",
      "39": "\n <DED> origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "40": "<DED> origin = extract_origin_collection(t) \n return bool(item, origin) \n \n",
      "41": "<DED> origin = extract_origin_collection(t) \n return bool(origin) <DED> \n \n",
      "42": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) <DED> \n \n",
      "43": "<DED> origin = extract_origin_collection(t) \n return origin(origin, Collection) \n \n",
      "44": "<DED> origin = extract_origin_collection(t) \n return bool(items, origin) \n \n",
      "45": "<DED> origin = extract_origin_collection(t) \n return bool(origin, \"\") \n \n",
      "46": "<DED> origin = extract_origin_collection(t) \n return origin, issubclass(origin, Collection) \n \n",
      "47": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) <IND> \n",
      "48": "<IND> origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "49": "<DED> origin = extract_origin_collection(t) \n if not isinstance(origin, Collection): \n <IND> return origin \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None\n\n",
    "target_code": "        <IND>click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "sensepost/objection",
    "source_filename": "objection/commands/ios/hooking.py",
    "target_filename": "objection/commands/ios/hooking.py",
    "source_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf^",
    "target_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "predictions": [
      "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] \n \n",
      "1": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return \"\" \n \n",
      "2": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "3": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return '' \n \n",
      "4": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return False \n \n",
      "5": "<DED> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] \n \n",
      "6": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Type(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n \n",
      "7": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "8": "<DED> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return \"\" \n \n",
      "9": "<DED> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "10": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "11": "\n click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] \n \n",
      "12": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return null \n \n",
      "13": "\n click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "14": "\n click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return \"\" \n \n",
      "15": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return list(None) \n \n",
      "16": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Type(None) \n \n",
      "17": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return fg \n \n",
      "18": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return type [] \n \n",
      "19": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return -1 \n \n",
      "20": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] \n <IND>",
      "21": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return * None \n \n",
      "22": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "23": "<DED> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return '' \n \n",
      "24": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Nonce(None) \n \n",
      "25": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return (None) \n \n",
      "26": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return True \n \n",
      "27": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n raise TypeError(fg='red') \n \n",
      "28": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Undefined \n \n",
      "29": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return result \n \n",
      "30": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return NONE \n \n",
      "31": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Number(None) \n \n",
      "32": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return *none \n \n",
      "33": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n raise ValueError(f'Unknown class failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "34": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n raise TypeError(f'Unknown class failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "35": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [], None \n \n",
      "36": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return typing.List(None) \n \n",
      "37": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return \"red\" \n \n",
      "38": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] <DED> \n \n",
      "39": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return list(none) \n \n",
      "40": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return False \n \n",
      "41": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return None \n <IND>",
      "42": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return \"\" \n <IND>",
      "43": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Any \n \n",
      "44": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return true \n \n",
      "45": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] <IND> \n",
      "46": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n raise TypeError(f'Unknown class failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return \"\" \n \n",
      "47": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return Type(Failed to list classes with error: { 0.0 } '.format(response.error_reason), fg='red') \n \n",
      "48": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') <DED> return None \n \n",
      "49": "<IND> click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n return [] \n <DED> raise TypeError(f'Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return None\n\n",
    "target_code": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return \"\"\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 245,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/player.py",
    "target_filename": "tale/player.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return \"\" \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return \"\" \n \n",
      "1": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(None) \n \n",
      "2": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return \"\" \n \n",
      "3": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return [] \n \n",
      "4": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return str(None) \n \n",
      "5": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return '' \n \n",
      "6": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(null, str) \n \n",
      "7": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return str(null, str) \n \n",
      "8": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return '' \n \n",
      "9": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str \n \n",
      "10": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(null) \n \n",
      "11": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return [] \n \n",
      "12": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(Absolute) \n \n",
      "13": "<IND> return desc \n <DED> <DED> <DED> \n return \"\" \n \n",
      "14": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> <DED> return \"\" \n \n",
      "15": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return String(None) \n \n",
      "16": "<IND> return desc \n <DED> \n <DED> <DED> <DED> <DED> return str(None) \n \n",
      "17": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> return \"\" \n \n",
      "18": "<IND> return desc \n <DED> <DED> <DED> \n return str(None) \n \n",
      "19": "<IND> return desc \n \n <DED> <DED> <DED> <DED> <DED> return str(None) \n \n",
      "20": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(NONE) \n \n",
      "21": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> \n return \"\" \n \n",
      "22": "<IND> return desc \n \n <DED> <DED> <DED> <DED> <DED> return \"\" \n \n",
      "23": "<IND> return desc \n <DED> <DED> \n <DED> return str(None) \n \n",
      "24": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return str(str) \n \n",
      "25": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return str(null) \n \n",
      "26": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return None \n \n",
      "27": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return List(None) \n \n",
      "28": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> <DED> return str(None) \n \n",
      "29": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return () -> None \n \n",
      "30": "<IND> return desc \n <DED> <DED> \n <DED> return \"\" \n \n",
      "31": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(Queue) \n \n",
      "32": "<IND> return desc \n <DED> \n <DED> <DED> <DED> <DED> return \"\" \n \n",
      "33": "<IND> return desc \n <DED> <DED> <DED> \n return str(null, str) \n \n",
      "34": "<IND> return desc \n <DED> <DED> <DED> <DED> \n return String(None) \n \n",
      "35": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str('') \n \n",
      "36": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> <DED> return str(None) \n \n",
      "37": "<DED> return desc \n <DED> <DED> <DED> <DED> <DED> return \"\" \n \n",
      "38": "<DED> return desc \n <DED> <DED> <DED> <DED> <DED> return str(None) \n \n",
      "39": "<IND> return desc \n <DED> <DED> <DED> \n return '' \n \n",
      "40": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(NullstoneError) \n \n",
      "41": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> return [] \n \n",
      "42": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> \n return str(null, str) \n \n",
      "43": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return 0 \n \n",
      "44": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> \n return '' \n \n",
      "45": "<IND> return desc \n <DED> <DED> <DED> <DED> <DED> return str(null, []) \n \n",
      "46": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> <DED> return str(null, str) \n \n",
      "47": "<IND> return desc \n \n <DED> <DED> <DED> <DED> <DED> return str(null, str) \n \n",
      "48": "<IND> return desc \n <DED> <DED> <DED> <DED> <IND> return '' \n \n",
      "49": "<IND> return desc \n <DED> <DED> <DED> \n return [] \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>if unit in units:\n        <IND>return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    <DED>else:\n",
    "target_code": "    <DED>if unit in units:\n        <IND>return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    <DED>else:\n",
    "warning_line": "        return int(amount[:-1]) * 100_000_000_000 / units[unit]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 144,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/bolt11.py",
    "target_filename": "lnbits/bolt11.py",
    "source_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2^",
    "target_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "predictions": [
      "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "1": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "2": "<DED> if unit in units: \n <IND> return float(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "3": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / unit[unit] \n <DED> else: \n",
      "4": "<DED> if unit in units: \n <IND> return async (amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "5": "<DED> if unit in units: \n <IND> return str(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "6": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / unit[unit] \n <DED> else: \n",
      "7": "<DED> if unit in units: \n <IND> return (int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "8": "<DED> if unit in units: \n <IND> return float(int(amount[:-1])) * 100_000_000_000 / unit[unit] \n <DED> else: \n",
      "9": "<DED> if unit in units: \n <IND> assert isinstance(unit, float) \n return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "10": "<DED> if unit in units: \n <IND> return (amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "11": "<DED> if unit in units: \n <IND> return float <DED> int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "12": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "13": "<DED> if unit in units: \n <IND> return assert isinstance(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "14": "<DED> if unit in units: \n <IND> return float(int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "15": "<DED> if unit in units: \n <IND> return float(int(amount[:-1]) * 100_000_000_000) / units[unit] \n <DED> else: \n",
      "16": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n <DED> else: \n",
      "17": "<IND> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "18": "<DED> if unit in units: \n <IND> return async int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "19": "<DED> if unit in units: \n <IND> return float int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "20": "<DED> if unit in units: \n <IND> int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "21": "<DED> if unit in units: \n <IND> return; int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "22": "\n <DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "23": "<DED> if unit in units: \n <IND> assert isinstance(unit, int) \n return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "24": "<DED> if unit in units: \n <IND> return float(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "25": "<IND> if unit in units: \n <IND> return float(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "26": "<DED> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "27": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "28": "<DED> if unit in units: \n <IND> return isinstance(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "29": "<DED> if unit in units: \n <IND> return self.append(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "30": "<DED> if unit in units: \n <IND> return float(int(amount[:-1]) * 100_000_000_000 / units[unit]) \n <DED> else: \n",
      "31": "<DED> if unit in units: \n <IND> return, int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "32": "<DED> if unit in units: \n <IND> return float(int(amount[:-1])) * 100_000_000_000 / units[unit] \n \n <DED> else: \n",
      "33": "<DED> if unit in units: \n <IND> return float.int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "34": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "35": "<DED> if unit in units: \n <IND> return Int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "36": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n <DED> else: \n",
      "37": "\n <DED> if unit in units: \n <IND> return float(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "38": "<DED> if unit in units: \n <IND> return str(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "39": "<DED> if unit in units: \n <IND> return int(amount[:-1], 100) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "40": "<DED> if unit in units: \n <IND> assert isinstance(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "41": "<DED> if unit in units: \n <IND> return range(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "42": "<DED> if unit in units: \n <IND> get int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "43": "<DED> if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "44": "<DED> if unit in units: \n <IND> assert isinstance(unit, float) \n return int(amount[:-1]) * 100_000_000_000 / unit[unit] \n <DED> else: \n",
      "45": "<DED> if unit in units: \n <IND> return (int(amount[:-1]) * 100_000_000_000) / units[unit] \n <DED> else: \n",
      "46": "\n <DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "47": "<DED> if unit in units: \n <IND> return: int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "48": "<DED> if unit in units: \n <IND> return str(amount[:-1]) * 100_000_000_000 / unit[unit] \n <DED> else: \n",
      "49": "<DED> if unit in units: \n <IND> return async (amount[:-1]) * 100_000_000_000 / unit[unit] \n <DED> else: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
    "target_code": "\n    <DED>new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_line": "    return subdomain",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/extensions/subdomains/crud.py",
    "target_filename": "lnbits/extensions/subdomains/crud.py",
    "source_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d^",
    "target_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "predictions": [
      "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "1": "\n <DED> return await get_subdomain(payment_hash) \n \n",
      "2": "\n <DED> if payment_hash is not None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "3": "\n <DED> new_subdomain = await get_subdomain(payment_hash) \n return new_subdomain \n \n",
      "4": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "5": "\n <DED> msg = await get_subdomain(payment_hash) \n return msg \n \n",
      "6": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return new Subdomain \n \n",
      "7": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return \"\" \n \n",
      "8": "\n <DED> os.subdomain = await get_subdomain(payment_hash) \n return os.subdomain \n \n",
      "9": "\n <DED> _subdomain = await get_subdomain(payment_hash) \n return _Subdomain \n \n",
      "10": "\n <DED> assert payment_hash is not None \n subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "11": "\n <DED> _subdomain = await get_subdomain(payment_hash) \n return _subdomain \n \n",
      "12": "\n <DED> python = await get_subdomain(payment_hash) \n return python \n \n",
      "13": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert payment_hash is not None \n return subdomain \n \n",
      "14": "\n <DED> if payment_hash is None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "15": "\n <DED> var subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "16": "\n <DED> self.subdomain = await get_subdomain(payment_hash) \n return self.subdomain \n \n",
      "17": "\n <DED> id = await get_subdomain(payment_hash) \n return id \n \n",
      "18": "\n <DED> if payment_hash is not None: \n <IND> return subdomain \n \n",
      "19": "\n <DED> module.exports = await get_subdomain(payment_hash) \n return module.exports \n \n",
      "20": "\n <DED> self = await get_subdomain(payment_hash) \n return self.subdomain \n \n",
      "21": "\n <DED> cls = await get_subdomain(payment_hash) \n return cls.subdomain \n \n",
      "22": "\n <DED> if payment_hash is not None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "23": "\n <DED> ret = await get_subdomain(payment_hash) \n return ret \n \n",
      "24": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "25": "\n <DED> subdomain = await get_subdomain(payment_hash) \n if payment_hash is not None: \n <IND> return subdomain \n \n",
      "26": "\n <DED> if payment_hash is not None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return '' \n \n",
      "27": "\n <DED> assert payment_hash is not None \n return subdomain \n \n",
      "28": "\n <DED> wait subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "29": "\n <DED> let subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "30": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return [] \n \n",
      "31": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return msg(subdomain) \n \n",
      "32": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "33": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return cls.subdomain \n \n",
      "34": "\n <DED> if payment_hash is None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return '' \n \n",
      "35": "\n <DED> msg = await get_subdomain(payment_hash) \n return Msg \n \n",
      "36": "\n <DED> subdomain = await get_subdomain(payment_hash) \n if payment_hash is None: \n <IND> return subdomain \n \n",
      "37": "\n <DED> subdomain_ = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "38": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return self.subdomain \n \n",
      "39": "\n <DED> option = await get_subdomain(payment_hash) \n return option \n \n",
      "40": "\n <DED> if payment_hash is not None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return _subdomain \n \n",
      "41": "\n <DED> int = await get_subdomain(payment_hash) \n return int \n \n",
      "42": "\n <DED> module.exports = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "43": "\n \n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "44": "\n <DED> if payment_hash is not None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return \"\" \n \n",
      "45": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return super() \n \n",
      "46": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return '' \n \n",
      "47": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n <IND>",
      "48": "\n <DED> if payment_hash is None: \n <IND> subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "49": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return return subdomain \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n\n",
    "target_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_line": "        return ImageData(self._dto[\"profileiconmax\"])",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `ImageData`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "meraki-analytics/cassiopeia",
    "source_filename": "cassiopeia/core/staticdata/realms.py",
    "target_filename": "cassiopeia/core/staticdata/realms.py",
    "source_changeid": "a26127b190f398137c4cf92469c5de573ce2a018^",
    "target_changeid": "a26127b190f398137c4cf92469c5de573ce2a018",
    "predictions": [
      "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "1": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "2": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "3": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "4": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "5": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n <IND>",
      "6": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID identification that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "7": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n <DED>",
      "8": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" <DED> return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "9": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" <IND> return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "10": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax]) \n \n",
      "11": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return imageData(self._dto[\"profileiconmax\"]) \n \n",
      "12": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon ID that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "13": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n if not ImageData: \n <IND> return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "14": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) <IND> \n",
      "15": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between these number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "16": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert self._dto[\"profileiconmax\"] is not None \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "17": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID number that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "18": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(str(self._dto[\"profileiconmax\"])) \n \n",
      "19": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "20": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) <DED> \n \n",
      "21": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData() \n \n",
      "22": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(_dto[\"profileiconmax\"]) \n \n",
      "23": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImagesData(self._dto[\"profileiconmax\"]) \n \n",
      "24": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]]) \n \n",
      "25": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n returns ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "26": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can \n Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "27": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between these numbers and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "28": "\n \"\"\"Special behavior number identifying the largest profile icon ID ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "29": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID of the profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "30": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n imageData = ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "31": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"].decode()) \n \n",
      "32": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "33": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can <IND> used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "34": "<IND> \"\"\"Special behavior number identifying the largest profile iconID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "35": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "36": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "37": "<IND> \"\"\"Special behavior number identifying the biggest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "38": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n raise ValueError(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "39": "<IND> \"\"\"Special behaviour number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "40": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n backend(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "41": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(imageData(self._dto[\"profileiconmax\"])) \n \n",
      "42": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number to 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "43": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n returned ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "44": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n <IND>",
      "45": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax']) \n \n",
      "46": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n <IND>",
      "47": "<IND> \"\"\"Special behavior numberidentifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "48": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\") \n \n",
      "49": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(this._dto[\"profileiconmax\"]) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
    "target_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.left is self.parent.left is self\n\n",
    "warning_line": "        return self.parent and self.parent.left is self",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Optional[bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 435,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/red_black_tree.py",
    "target_filename": "data_structures/binary_tree/red_black_tree.py",
    "source_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2^",
    "target_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "predictions": [
      "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "1": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n \n",
      "2": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left) \n \n",
      "3": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is not None: \n <IND> return self.parent and self.parent.left is self \n \n",
      "4": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None \n return self.parent and self.parent.left is self \n \n",
      "5": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self \n \n",
      "6": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not bool: \n <IND> return self.parent and self.parent.left is self \n \n",
      "7": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.right is self \n \n",
      "8": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n \n",
      "9": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "10": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and return self.parent and self.parent.left is self \n \n",
      "11": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return assert self.parent is not None and self.parent.left is self \n \n",
      "12": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not isinstance(self, bool): \n <IND> return self.parent and self.parent.left is self \n \n",
      "13": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not self.parent: \n <IND> return bool(self.parent and self.parent.left) \n \n",
      "14": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is None: \n <IND> return self.parent and self.parent.left is self \n \n",
      "15": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n <IND>",
      "16": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n <IND>",
      "17": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not self.parent: \n <IND> return self.parent and self.parent.left is self \n \n",
      "18": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not bool: \n <IND> return bool(self.parent and self.parent.left is self \n \n",
      "19": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "20": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not isinstance(parent, bool): \n <IND> return self.parent and self.parent.left is self \n \n",
      "21": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return type(self.parent) and self.parent.left is self \n \n",
      "22": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent <IND> self.parent.left is self \n \n",
      "23": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not isinstance(self): \n <IND> return self.parent and self.parent.left is self \n \n",
      "24": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n self.parent is not None and return self.parent and self.parent.left is self \n \n",
      "25": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is not None: \n \n return self.parent and self.parent.left is self \n \n",
      "26": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left) \n \n",
      "27": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not isinstance(self, parent): \n <IND> return self.parent and self.parent.left is self \n \n",
      "28": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n \n",
      "29": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.right is self \n \n",
      "30": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is not None: \n <IND> return self.parent and self.parent.left is self \n \n",
      "31": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not bool: \n <IND> return bool(self.parent and self.parent.left) \n \n",
      "32": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "33": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return \"\" and self.parent.left is self \n \n",
      "34": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n <DED>",
      "35": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left.is self) \n \n",
      "36": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not bool: \n <IND> return bool(self.parent) and self.parent.left is self \n \n",
      "37": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent <DED> self.parent.left is self \n \n",
      "38": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.right) \n \n",
      "39": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self \n <IND>",
      "40": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) \u015fi self.parent.left is self \n \n",
      "41": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is not None: \n <IND> return self.parent and self.parent.right is self \n \n",
      "42": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return (self.parent and self.parent.left is self \n \n",
      "43": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) und self.parent.left is self \n \n",
      "44": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is not None: \n <IND> return bool(self.parent and self.parent.left is self \n \n",
      "45": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if not self.parent: \n <IND> return bool(self.parent) and self.parent.left is self \n \n",
      "46": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n if self.parent is not None: \n <IND> return self.parent and self.parent.left \n \n",
      "47": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n <DED>",
      "48": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and return self.parent.left is self \n \n",
      "49": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def __str__(self) -> None:\n        <IND>return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n\n",
    "target_code": "\n    <DED>def __str__(self) -> str:\n        <IND>return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_line": "        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `typing.List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 122,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "target_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298^",
    "target_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "predictions": [
      "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "1": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "2": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "3": "\n <DED> def __str__(self) -> \"\": \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "4": "\n <DED> def __str__(self): \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "5": "\n <DED> def __str__(self) -> typing.Optional[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "6": "\n <DED> def __str__(self) -> List[List[int]]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "7": "\n <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "8": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size) + 1)] \n \n",
      "9": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <DED> \n \n",
      "10": "\n \n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "11": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <IND> \n",
      "12": "\n <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "13": "\n <DED> def __str__(self) -> '': \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "14": "\n <DED> def __str__(self) -> typing.List[int], \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "15": "\n <DED> def __str__(self) -> List[Int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "16": "\n <DED> def __str__(self) -> typing.Optional[List[int]]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "17": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n <IND>",
      "18": "\n <DED> def __str__(self) -> False: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "19": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size+ 1)] \n \n",
      "20": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> assert self.query is not None \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "21": "\n <DED> def __str__(self) -> typing.List[int], None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "22": "\n <DED> def __str__(self) -> typing.List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "23": "\n <DED> def __str__(self) -> Typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "24": "\n <DED> def __str__(self) -> [int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "25": "\n <DED> def __str__(self) -> Type[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "26": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size) + 1)] \n \n",
      "27": "\n <DED> def __str__(self) -> typing.Optional[None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "28": "\n <DED> def __str__(self) -> Undefined: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "29": "\n <DED> def __str__(self) -> str: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "30": "\n <DED> def __str__(self) -> typing.List[Int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "31": "<DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "32": "\n <DED> def __str__(self) -> bool: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "33": "\n <DED> def __str__(self) -> List[None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "34": "\n <DED> def __str__(self) -> Writing: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "35": "\n <DED> def __str__(self) -> typing.List[int, i]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "36": "\n <DED> def __str__(self) -> List[List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "37": "\n <DED> def __str__(self) -> Number: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "38": "<IND> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "39": "\n <IND> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "40": "\n <DED> def __str__(self) -> list[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "41": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size) + 1)] \n \n",
      "42": "\n <DED> def __str__(self) -> typing.List: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "43": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <DED> \n \n",
      "44": "\n <DED> def __str__(self) -> typing.List[int], <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "45": "\n <DED> def __str__(self) -> typing.None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "46": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <DED> \n \n",
      "47": "\n <DED> def __str__(self) -> typing.Address: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "48": "\n <DED> def __str__(self) -> typing.List[int], \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "49": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <IND> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if file_hash == \"\":\n            <IND>return False\n        <DED>try:\n",
    "target_code": "        if file_hash == \"\":\n            <IND>return \"\"\n        <DED>try:\n",
    "warning_line": "            return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/Trust.py",
    "target_filename": "UM/Trust.py",
    "source_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41^",
    "target_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "predictions": [
      "if file_hash == \"\": \n <IND> return str(False) \n <DED> try: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if file_hash == \"\": \n <IND> return str(False) \n <DED> try: \n",
      "1": "if file_hash == \"\": \n <IND> return \"\" \n <DED> try: \n",
      "2": "if file_hash == \"\": \n <IND> return False \n <DED> try: \n",
      "3": "if file_hash == \"\": \n <IND> return String(False) \n <DED> try: \n",
      "4": "if file_hash == \"\": \n <IND> return str(False) \n \n <DED> try: \n",
      "5": "if file_hash == \"\": \n <IND> assert file_hash is not None \n <DED> try: \n",
      "6": "if file_hash == \"\": \n <IND> return [] \n <DED> try: \n",
      "7": "if file_hash == \"\": \n <IND> return bool \n <DED> try: \n",
      "8": "if file_hash == \"\": \n <IND> return str(False) \n <IND> try: \n",
      "9": "if file_hash == \"\": \n <IND> return str(f\"\") \n <DED> try: \n",
      "10": "if file_hash == \"\": \n <DED> return str(False) \n <DED> try: \n",
      "11": "if file_hash == \"\": \n <IND> return str(f\"\" \n <DED> try: \n",
      "12": "if file_hash == \"\": \n <IND> return str(f\"?\") \n <DED> try: \n",
      "13": "if file_hash == \"\": \n <IND> return True \n <DED> try: \n",
      "14": "if file_hash == \"\": \n <IND> return str(false) \n <DED> try: \n",
      "15": "if file_hash == \"\": \n <IND> return \"\" \n \n <DED> try: \n",
      "16": "if file_hash == \"\": \n <IND> return String(false) \n <DED> try: \n",
      "17": "if file_hash == \"\": \n <IND> return str(f\"Not found\") \n <DED> try: \n",
      "18": "if file_hash == \"\": \n <IND> return Str(False) \n <DED> try: \n",
      "19": "if file_hash == \"\": \n <IND> return false \n <DED> try: \n",
      "20": "if file_hash == \"\": \n <IND> return str(f\"If file_hash return { file_hash } \") \n <DED> try: \n",
      "21": "if file_hash == \"\": \n <IND> return str(f\"didn't have a string\") \n <DED> try: \n",
      "22": "if file_hash == \"\": \n <IND> return str(str) \n <DED> try: \n",
      "23": "if file_hash == \"\": \n <IND> bool = False \n <DED> try: \n",
      "24": "if file_hash == \"\": \n <IND> return str(f\"Not implemented\") \n <DED> try: \n",
      "25": "if file_hash == \"\": \n <IND> return List[str] \n <DED> try: \n",
      "26": "if file_hash == \"\": \n <IND> return \"\" \n <IND> try: \n",
      "27": "if file_hash == \"\": \n <IND> return str(f\"unknown\") \n <DED> try: \n",
      "28": "if file_hash == \"\": \n <IND> return Set[str] \n <DED> try: \n",
      "29": "if file_hash == \"\": \n <IND> assert file_hash is not None \n <IND> return False \n <DED> try: \n",
      "30": "if file_hash == \"\": \n <IND> return str(f \"\" \n <DED> try: \n",
      "31": "if file_hash == \"\": \n \n return str(False) \n <DED> try: \n",
      "32": "if file_hash == \"\": \n <IND> return String(False) \n \n <DED> try: \n",
      "33": "if file_hash == \"\": \n <IND> return str(f \"\") \n <DED> try: \n",
      "34": "if file_hash == \"\": \n <IND> return None \n <DED> try: \n",
      "35": "if file_hash == \"\": \n <IND> return str(f\"\") \n <DED> try: \n",
      "36": "if file_hash == \"\": \n <IND> assert file_hash is not None \n \n <DED> try: \n",
      "37": "if file_hash == \"\": \n <IND> return str(f\"change\", str) \n <DED> try: \n",
      "38": "if file_hash == \"\": \n <IND> return str(f\"If file_hash is not None\") \n <DED> try: \n",
      "39": "if file_hash == \"\": \n <IND> return str(False) \n <DED> try: <IND>",
      "40": "if file_hash == \"\": \n <IND> return False \n \n <DED> try: \n",
      "41": "if file_hash == \"\": \n <IND> return '' \n <DED> try: \n",
      "42": "if file_hash == \"\": \n <IND> return str(False) \n \n <IND> try: \n",
      "43": "if file_hash == \"\": \n <IND> return str(f\"attr\") \n <DED> try: \n",
      "44": "if file_hash == \"\": \n <IND> return String(False) \n <IND> try: \n",
      "45": "if file_hash == \"\": \n <IND> return str(False \n <DED> try: \n",
      "46": "if file_hash == \"\": \n <IND> return str(f\" \\ n } \") \n <DED> try: \n",
      "47": "if file_hash == \"\": \n <IND> return str(False) \n \n \n <DED> try: \n",
      "48": "if file_hash == \"\": \n <IND> return str(f\"Unknown string\", str) \n <DED> try: \n",
      "49": "if file_hash == \"\": \n <IND> return str(f\"Can't find str\") \n <DED> try: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <DED>if target.is_ammo_depot:\n                <IND>yield target\n",
    "target_code": "            <DED>if target.is_ammo_depot:\n                <IND>assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_line": "                yield target",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dcs-liberation/dcs_liberation",
    "source_filename": "game/commander/theaterstate.py",
    "target_filename": "game/commander/theaterstate.py",
    "source_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3^",
    "target_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "predictions": [
      "<DED> if target.is_ammo_depot: \n <IND> yield target \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "1": "<IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "2": "\n <DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "3": "<DED> if target.is_ammo_depot: \n <IND> yield target <IND>",
      "4": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "5": "<DED> if target.is_ammo_depot: \n <DED> yield target \n",
      "6": "<DED> if target.is_ammo_depot: \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "7": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> assert isinstance(target, TheaterGroundObject) \n <DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "8": "<DED> if target.is_ammo_depot: \n <IND> assert isinstance(target, TheaterGroundObject) \n yield target \n",
      "9": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> isinstance(target, TheaterGroundObject) \n <DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "10": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> assert isinstance(target, TheaterGroundObject) \n \n",
      "11": "<DED> if target.is_ammo_depot: \n <IND> assert isinstance(target, TheaterGroundObject, None) \n yield target \n",
      "12": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND>",
      "13": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> isinstance(target, TheaterGroundObject) \n",
      "14": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND>",
      "15": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> TheaterGroundObject.create(target) \n",
      "16": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> yield target \n",
      "17": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "18": "<DED> if target.is_ammo_depot: \n <IND> yield target: \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "19": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.is_ammo_depot(elif isinstance(target, TheaterGroundObject, None)) \n \n",
      "20": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif target.is_ammo_depot is not None: \n <IND> elif target.is_ammo_depot is None: \n <IND> elif target.is_ammo_depot is None: \n <IND> elif target.is_ammo_depot is None: \n <IND> yield target \n",
      "21": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> yield target \n",
      "22": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> isinstance(target, TheaterGroundObject): \n <IND>",
      "23": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n",
      "24": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND>",
      "25": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.isinstance(target, elif isinstance(target, TheaterGroundObject)) \n \n",
      "26": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "27": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.isinstance(target, elif isinstance(target, TheaterGroundObject, None)) \n \n",
      "28": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> assert isinstance(target, TheaterGroundObject) \n <DED> if target.is_ammo_depot: \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "29": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject, None): \n <IND>",
      "30": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.is_ammo_depot(elif isinstance(target, TheaterGroundObject)) \n \n",
      "31": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.isinstance(target, elif isinstance(target, TheaterGroundObject), elif isinstance(target): \n <IND>",
      "32": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> yield target \n",
      "33": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> isinstance(target, TheaterGroundObject) \n <DED> if target.is_ammo_depot: \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "34": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND>",
      "35": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> isinstance(target, TheaterGroundObject): \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "36": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif target.is_ammo_depot is not None: \n <IND> elif target.is_ammo_depot is None: \n <IND> elif target.is_ammo_depot is None: \n <IND> yield target \n",
      "37": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND>",
      "38": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <DED> if target.is_ammo_depot: \n <IND> return elif isinstance(target, TheaterGroundObject): \n <IND>",
      "39": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> assert isinstance(target, TheaterGroundObject): \n <IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "40": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.is_ammo_depot(elif isinstance(target, TheaterGroundObject)) \n \n",
      "41": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.isinstance(target, elif isinstance(target, TheaterGroundObject) && target.isinstance(target): \n <IND>",
      "42": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> isinstance(target, TheaterGroundObject) \n <DED> if target.is_ammo_depot: \n <IND>",
      "43": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> return elif target.is_ammo_depot(elif isinstance(target, TheaterGroundObject, None)) \n",
      "44": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> TheaterGroundObject.protocol = new TheaterGroundObject() \n",
      "45": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject, None): \n <IND> elif isinstance(target, TheaterGroundObject): \n",
      "46": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject, None): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND>",
      "47": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject): \n <IND> elif isinstance(target, TheaterGroundObject, None): \n <IND>",
      "48": "<DED> if target.is_ammo_depot: \n <IND> assert isinstance(target, TheaterGroundObject, None, None) \n yield target \n",
      "49": "<DED> if target.is_ammo_depot: \n <IND> yield target <DED> if target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> elif target.is_ammo_depot: \n <IND> yield target \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            <IND>return self.error.to_string()\n        <DED>else:\n            <IND>check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>else:\n            <IND>return self.error.to_string()\n\n",
    "warning_line": "            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 107,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dagster-io/dagster",
    "source_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "target_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84^",
    "target_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "predictions": [
      "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "1": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <IND>",
      "2": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "3": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n \n elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "4": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "5": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None and self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "6": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <DED> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "7": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "8": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n \n check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "9": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n \n",
      "10": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "11": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n \n return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "12": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "13": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <DED>",
      "14": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() <IND> <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "15": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <DED> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "16": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: <IND> <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "17": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None or self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "18": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <DED> return self.error.message.strip() \n",
      "19": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() <IND> <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "20": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "21": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") <IND> \n",
      "22": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: <DED> <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "23": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: <IND> <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "24": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: <DED> <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "25": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") <DED> \n",
      "26": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None, self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "27": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "28": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \"\") \n \n",
      "29": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <DED> else: \n",
      "30": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <IND>",
      "31": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <DED> return self.error.message.strip() \n \n",
      "32": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <DED> return false \n \n",
      "33": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None and self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <IND>",
      "34": "return self.error.message.strip() and \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "35": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source!= ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "36": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n \n elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <IND>",
      "37": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None and self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "38": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None and self.error_source is not None and self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "39": "return self.error.message.strip() + \": \\ n ^ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "40": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n \n elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "41": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <IND>",
      "42": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR(): \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "43": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None but self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "44": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "45": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR() \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "46": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> assert self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "47": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "48": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return f\"Unexpected error setting: { self.error_source } \") \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "49": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n <DED> elif self.error_source is not None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            # threading library\n            <IND>return None\n        <DED>frames: List[Tuple[FrameType, int]] = [\n",
    "target_code": "            # threading library\n            <IND>return []\n        <DED>frames: List[Tuple[FrameType, int]] = [\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 796,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "plasma-umass/scalene",
    "source_filename": "scalene/scalene_profiler.py",
    "target_filename": "scalene/scalene_profiler.py",
    "source_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58^",
    "target_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "predictions": [
      "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "1": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "2": "# threading library \n <IND> return List[Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "3": "# threading library \n <IND> return None \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "4": "# threading library \n <IND> return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "5": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "6": "# threading library \n <DED> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "7": "# threading library \n <IND> returns [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "8": "# threading library \n <IND> return List[Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "9": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "10": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] <IND> <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "11": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "12": "# threading library \n <IND> return \"\" \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "13": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] <DED> <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "14": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <IND> frames: List[Tuple[FrameType, int]] = [ \n",
      "15": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[Type, int, FrameType]] = [ \n",
      "16": "# threading library \n <DED> returns [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "17": "# threading library \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "18": "# threading library \n <IND> return [Tuple[FrameType, int]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "19": "# threading library \n <DED> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "20": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType], None] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "21": "# threading library \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "22": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, frameType]] = [ \n",
      "23": "# threading library \n <IND> returns [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "24": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, Optional[FrameType]] = [ \n",
      "25": "# threading library \n <IND> return [Tuple[FrameType, int], FrameType] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "26": "# threading library \n <IND> return tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "27": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "28": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int], Optional[FrameType]] = [ \n",
      "29": "# threading library \n <IND> return List[Tuple[FrameType, int, FrameType]] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "30": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: Optional[List[Tuple[FrameType, int]]] = [ \n",
      "31": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "32": "# threading library \n <IND> return [Tuple[FrameType, int], FrameType] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "33": "# threading library \n <IND> return [Tuple[FrameType, int]] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "34": "# threading library \n <IND> return [tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "35": "# threading library \n <IND> return [Tuple[FrameType, Int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "36": "# threading library \n <DED> return List[Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "37": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frame: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "38": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, Int, FrameType]] = [ \n",
      "39": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int,...]] = [ \n",
      "40": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] <DED> \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "41": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[List[Tuple[FrameType, int, FrameType]] = [ \n",
      "42": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: Optional[List[Tuple[FrameType, int, FrameType]]] = [ \n",
      "43": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] <IND> <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "44": "# threading library \n <IND> return False \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "45": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] <DED> <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "46": "# threading library \n <IND> return List[Tuple[FrameType, int, FrameType]] <IND> <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "47": "# threading library \n <IND> return List[Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "48": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] <DED> <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "49": "# threading library \n <IND> return [Tuple[FrameType, int, FrameType]] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n\n",
    "target_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_line": "        return self._mem_slot",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 112,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Qiskit/qiskit-terra",
    "source_filename": "qiskit/pulse/instructions/acquire.py",
    "target_filename": "qiskit/pulse/instructions/acquire.py",
    "source_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23^",
    "target_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "predictions": [
      "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "1": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n \n",
      "2": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return \"\" \n \n",
      "3": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mesm_slot \n \n",
      "4": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self.mem_slot: \n <IND> return self.mem_slot \n \n",
      "5": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "6": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self._mem_slot \n \n",
      "7": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self._mem_slot: \n <IND> return self.mem_slot \n \n",
      "8": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(self._mem_slot): \n <IND> return self.mem_slot \n \n",
      "9": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(self._mem_slot): \n <IND> return self._mem_slot \n \n",
      "10": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self.mem_slot: \n <IND> return self._mem_slot \n \n",
      "11": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self._mem_slot: \n <IND> return self._mem_slot \n \n",
      "12": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = [] \n return self.mem_slot \n \n",
      "13": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert \"MemorySlot\" is not None \n return self._mem_slot \n \n",
      "14": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return [] \n \n",
      "15": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "16": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n \n",
      "17": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self.mem_slot \n \n",
      "18": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(self.mem_slot): \n <IND> return self.mem_slot \n \n",
      "19": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not!Optional[MemorySlot]: \n <IND> return self._mem_slot \n \n",
      "20": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "21": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not!Optional[MemorySlot]: \n <IND> return self.mem_slot \n \n",
      "22": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(self.mem_slot): \n <IND> return self._mem_slot \n \n",
      "23": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return (MemorySlot) \n \n",
      "24": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot <DED> \n \n",
      "25": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return this._mem_slot \n \n",
      "26": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = [] \n return self._mem_slot \n \n",
      "27": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "28": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot <DED> \n \n",
      "29": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self._mem_slot = [] \n return self.mem_slot \n \n",
      "30": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return _mem_slot \n \n",
      "31": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self.mem_slot: \n <IND> return \"\"The classical memory slot which will store the classified readout result.\"\"\" \n \n",
      "32": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self._mem_slot: \n <IND> return \"\"The classical memory slot which will store the classified readout result.\"\"\" \n \n",
      "33": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self.mem_slot: \n <IND> return self.mesm_slot \n \n",
      "34": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert \"MemorySlot is not None \n return self._mem_slot \n \n",
      "35": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return '' \n \n",
      "36": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not!MemorySlot: \n <IND> return self._mem_slot \n \n",
      "37": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self._mem_slot = [] \n return self._mem_slot \n \n",
      "38": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self._mem_slot: \n <IND> return self.mesm_slot \n \n",
      "39": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not!MemorySlot: \n <IND> return self.mem_slot \n \n",
      "40": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(mem_slot, MemorySlot): \n <IND> return self.mem_slot \n \n",
      "41": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(self._mem_slot): \n <IND> return self.mesm_slot \n \n",
      "42": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self.mesm_slot: \n <IND> return self.mem_slot \n \n",
      "43": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mimem_slot \n \n",
      "44": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not this is not None: \n <IND> return self._mem_slot \n \n",
      "45": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot is not None \n return self._mem_slot \n \n",
      "46": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n <IND>",
      "47": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot is not None \n return self.mem_slot \n \n",
      "48": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return (Mem_slot) \n \n",
      "49": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not isinstance(mem_slot, MemorySlot): \n <IND> return self._mem_slot \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return None\n        <DED>else:\n",
    "target_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return self\n        <DED>else:\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `TimeSeries` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "u8timeseries/timeseries.py",
    "target_filename": "u8timeseries/timeseries.py",
    "source_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c^",
    "target_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "predictions": [
      "<IND> self._confidence_hi.update(conf_hi) \n <DED> else: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> self._confidence_hi.update(conf_hi) \n <DED> else: \n",
      "1": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries) \n <DED> else: \n",
      "2": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries() \n <DED> else: \n",
      "3": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return '' \n <DED> else: \n",
      "4": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "5": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return [] \n <DED> else: \n",
      "6": "<IND> self._confidence_hi.update(conf_hi) \n <DED> isinstance(TimeSeries, TimeSeries) \n <DED> else: \n",
      "7": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return True \n <DED> else: \n",
      "8": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return False \n <DED> else: \n",
      "9": "<IND> self._confidence_hi.update(conf_hi) \n \n <DED> else: \n",
      "10": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n <DED> else: \n",
      "11": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return true \n <DED> else: \n",
      "12": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries) \n \n <DED> else: \n",
      "13": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries) \n <DED> else: \n",
      "14": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries), None \n <DED> else: \n",
      "15": "<DED> self._confidence_hi.update(conf_hi) \n <DED> else: \n",
      "16": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries) \n <IND> else: \n",
      "17": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return Optional[TimeSeries] \n <DED> else: \n",
      "18": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return TimeSeries(TimeSeries) \n <DED> else: \n",
      "19": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return SetTimeSeries(TimeSeries) \n <DED> else: \n",
      "20": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return None \n <DED> else: \n",
      "21": "<IND> self._confidence_hi.update(conf_hi) \n \n <DED> return TimeSeries(TimeSeries) \n <DED> else: \n",
      "22": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(null, TimeSeries) \n <DED> else: \n",
      "23": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return Set() \n <DED> else: \n",
      "24": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries()) \n <DED> else: \n",
      "25": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(TimeSeries, TimeSeries): \n <IND> self._confidence_hi.update(conf_hi) \n <DED> else: \n",
      "26": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return Number(TimeSeries) \n <DED> else: \n",
      "27": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(TimeSeries, conf_hi): \n <IND> self._confidence_hi.update(conf_hi) \n <DED> else: \n",
      "28": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries[0] \n <DED> else: \n",
      "29": "<IND> self._confidence_hi.update(conf_hi) \n <DED> raise ValueError(\"TimeSeries: { } \") \n <DED> else: \n",
      "30": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(None) \n <DED> else: \n",
      "31": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if not self._TimeSeries is None: \n <IND> self._confidence_hi.update(conf_hi) \n <DED> else: \n",
      "32": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(TimeSeries, TimeSeries): \n <IND> return \"\" \n <DED> else: \n",
      "33": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries() \n \n <DED> else: \n",
      "34": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(TimeSeries, TimeSeries): \n <IND> return True \n <DED> else: \n",
      "35": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries, TimeSeries) \n <DED> else: \n",
      "36": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return '' \n \n <DED> else: \n",
      "37": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return Set(TimeSeries) \n <DED> else: \n",
      "38": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return '' \n <DED> else: \n",
      "39": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries() \n <DED> else: \n",
      "40": "<IND> self._confidence_hi.update(conf_hi) \n <DED> isinstance(TimeSeries, TimeSeries) <DED> return isinstance(TimeSeries) \n <DED> else: \n",
      "41": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries).decode(\"TimeSeries\", \"TimeSeries\") \n <DED> else: \n",
      "42": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return -1 \n <DED> else: \n",
      "43": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "44": "<IND> self._confidence_hi.update(conf_hi) \n <DED> isinstance(TimeSeries, TimeSeries) \n <IND> else: \n",
      "45": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(TimeSeries(TimeSeries)) \n <DED> else: \n",
      "46": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n \n <DED> else: \n",
      "47": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return TimeSeries() \n <DED> else: \n",
      "48": "<IND> self._confidence_hi.update(conf_hi) \n <DED> isinstance(TimeSeries, TimeSeries) \n \n <DED> else: \n",
      "49": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n <DED> else: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return None\n\n",
    "target_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return {}\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "tests/models/test_modelmanager.py",
    "target_filename": "tests/models/test_modelmanager.py",
    "source_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb^",
    "target_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "predictions": [
      "<DED> def _get_params(self, **kwargs) -> Optional[dict]: \n <IND> return None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def _get_params(self, **kwargs) -> Optional[dict]: \n <IND> return None \n \n",
      "1": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "2": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return None \n \n",
      "3": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return \"\" \n \n",
      "4": "<DED> def _get_params(self, **kwargs) -> None: \n <IND> return None \n \n",
      "5": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return False \n \n",
      "6": "<DED> def _get_params(self, **kwargs) -> None: \n <IND> return \"\" \n \n",
      "7": "<DED> def _get_params(self, **kwargs) -> None: \n <IND> return [] \n \n",
      "8": "<DED> def _get_params(self, **kwargs) -> Optional[dict]: \n <IND> return [] \n \n",
      "9": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return 0 \n \n",
      "10": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return [] \n \n",
      "11": "<DED> def _get_params(self, **kwargs) -> None: \n <IND> return False \n \n",
      "12": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[Any, typing.Any]]: \n <IND> return None \n \n",
      "13": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return None \n \n",
      "14": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[Any, typing.Any]]: \n <IND> return [] \n \n",
      "15": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[str, str]]: \n <IND> return [] \n \n",
      "16": "<DED> def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[Any, typing.Any]]: \n <IND> return None \n \n",
      "17": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return '' \n \n",
      "18": "<DED> def _get_params(self, **kwargs) -> Optional[dict]: \n <IND> return \"\" \n \n",
      "19": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return \"\" \n \n",
      "20": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[str, str]]: \n <IND> return [] \n \n",
      "21": "<DED> def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[Any, typing.Any]]: \n <IND> return [] \n \n",
      "22": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[Any, typing.Any]]: \n <IND> return None \n \n",
      "23": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[Any, typing.Any]]: \n <IND> return [] \n \n",
      "24": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[typing.Any, typing.Any]]: \n <IND> return None \n \n",
      "25": "<DED> def _get_params(self, **kwargs) -> None: \n <IND> return '' \n \n",
      "26": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[str, str], str]]: \n <IND> return [] \n \n",
      "27": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[Any, typing.Any]]]: \n <IND> return None \n \n",
      "28": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[typing.Any, typing.Any]]: \n <IND> return [] \n \n",
      "29": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict, typing.Any]]: \n <IND> return None \n \n",
      "30": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return True \n \n",
      "31": "<DED> def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[typing.Dict[str, str]]: \n <IND> return [] \n \n",
      "32": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict, typing.Any]]: \n <IND> return [] \n \n",
      "33": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Any, typing.Any]]: \n <IND> return None \n \n",
      "34": "<DED> def _get_params(self, **kwargs) -> Optional[dict]: \n <IND> return typing.Dict[str, str] \n \n",
      "35": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[str, str]]: \n <IND> return None \n \n",
      "36": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[str, str]]: \n <IND> return None \n \n",
      "37": "<DED> def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[str, str]]: \n <IND> return [] \n \n",
      "38": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[Any, typing.Any]]]: \n <IND> return [] \n \n",
      "39": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Any, typing.Any]]: \n <IND> return [] \n \n",
      "40": "<DED> def _get_params(self, **kwargs): \n <IND> return None \n \n",
      "41": "<DED> def _get_params(self, **kwargs) -> typing.Dict[str, Any]: \n <IND> return [] \n \n",
      "42": "<DED> def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[typing.Dict[Any, typing.Any]]: \n <IND> return None \n \n",
      "43": "<DED> def _get_params(self, **kwargs) -> typing.Dict[Any, typing.Any]: \n <IND> return [] \n \n",
      "44": "<DED> def _get_params(self, **kwargs) -> Optional[dict]: \n <IND> return False \n \n",
      "45": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[Any, typing.Any]]: \n <IND> return \"\" \n \n",
      "46": "<DED> def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[typing.Dict[Any, typing.Any]]]: \n <IND> return None \n \n",
      "47": "<DED> def _get_params(self, **kwargs) -> Optional[typing.Dict[typing.Dict[str, str]]]: \n <IND> return [] \n \n",
      "48": "<DED> def _get_params(self, **kwargs) -> None: \n <IND> return 0 \n \n",
      "49": "<DED> def _get_params(self, **kwargs) -> typing.Dict[Any, typing.Any]: \n <IND> return None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text\n\n",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_line": "        return text",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Text` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 169,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "willmcgugan/rich",
    "source_filename": "rich/text.py",
    "target_filename": "rich/text.py",
    "source_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06^",
    "target_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "predictions": [
      "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "1": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n \n",
      "2": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.justify \n \n",
      "3": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "4": "\n text = render(text, style, emoji=emoji) \n text.justify = emoji.justify \n return text \n \n",
      "5": "\n _text = render(text, style, emoji=emoji) \n _text.justify = justify \n return _text \n \n",
      "6": "\n render(text, style, emoji=emoji) \n render(text.justify) = justify \n return render(text) \n \n",
      "7": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.justify \n \n",
      "8": "\n emoji = render(text, style, emoji=emoji) \n emoji.justify = justify \n return emoji.justify \n \n",
      "9": "\n msg = render(msg, style, emoji=emoji) \n msg.justify = justify \n return msg \n \n",
      "10": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return Text(text) \n \n",
      "11": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n return rendered_text \n \n",
      "12": "\n assert isinstance(text, style, emoji=emoji) \n text.justify = justify \n return render(text, style, emoji) \n \n",
      "13": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji \n \n",
      "14": "\n assert isinstance(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "15": "\n emoji = render(text, style, emoji=emoji) \n text.justify = emoji.justify \n return emoji.justify \n \n",
      "16": "\n text = render(text, style, emoji=emoji) \n text.justify = justified \n return text \n \n",
      "17": "\n use_text = render(text, style, emoji=emoji) \n use_text.justify = justify \n return use_text \n \n",
      "18": "\n t.text = render(text, style, emoji=emoji) \n t.justify = justify \n return t.text \n \n",
      "19": "\n ctx = render(text, style, emoji=emoji) \n ctx.justify = justify \n return ctx \n \n",
      "20": "\n var text = render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "21": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n <IND>",
      "22": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, style) \n \n",
      "23": "\n text = render(text, style, emoji=emoji) \n emoji.justify = justify \n return emoji.justify \n \n",
      "24": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, text) \n \n",
      "25": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return [] \n \n",
      "26": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return '' \n \n",
      "27": "\n text = render(text, style, emoji=emoji) \n text.justify = just \n return text \n \n",
      "28": "\n render(text, style, emoji=emoji) \n render.justify = justify \n return render(text) \n \n",
      "29": "\n text = render(text, style, emoji=emoji) \n emoji.justify = justify \n return text \n \n",
      "30": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return text <IND> \n",
      "31": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.preventDefault() \n \n",
      "32": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.join('') \n \n",
      "33": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return text <DED> \n \n",
      "34": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "35": "\n assert isinstance(text, style, emoji=emoji) \n text.justify = justify \n return render(text, style, emoji=emoji) \n \n",
      "36": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return tuple(text) \n \n",
      "37": "\n text = render(text, style, emoji=emoji) \n text.justify = [] \n return text \n \n",
      "38": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text), style=emoji) \n \n",
      "39": "\n render(text, style, emoji=emoji) \n return render(text, justify) \n \n",
      "40": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "41": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.justify \n <IND>",
      "42": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "43": "\n text = render(text, style, emoji=emoji) \n if not text.justify: \n <IND> return text \n \n",
      "44": "\n text = render(text, style, emoji=emoji) \n text.justify= justify \n return text \n \n",
      "45": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.str(text) \n \n",
      "46": "\n emoji = render(text, style, emoji=emoji) \n text.justify = justify \n return emoji.resolve(text) \n \n",
      "47": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, style, emoji=emoji) \n \n",
      "48": "\n ret = render(text, style, emoji=emoji) \n text.justify = justify \n return ret \n \n",
      "49": "\n text = render(text, style, emoji=emoji) \n text.justify = justify \n return \"\" \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": true,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return matrix1, matrix2\n\n",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return [matrix1, matrix2]\n\n",
    "warning_line": "        return matrix1, matrix2",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 124,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "target_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n",
      "1": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1] is not None \n return matrix1, matrix2 \n \n",
      "2": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <DED> return matrix1, matrix2 \n \n",
      "3": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension1[1] is not None \n return matrix1, matrix2 \n \n",
      "4": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n \n return matrix1, matrix2 \n \n",
      "5": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2) \n return matrix1, matrix2 \n \n",
      "6": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension1[0] is not None \n return matrix1, matrix2 \n \n",
      "7": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[str] is not None \n return matrix1, matrix2 \n \n",
      "8": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n <IND>",
      "9": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[0] is not None \n return matrix1, matrix2 \n \n",
      "10": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2 \n \n",
      "11": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 <DED> \n \n",
      "12": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: <IND> <IND> return matrix1, matrix2 \n \n",
      "13": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 <IND> \n",
      "14": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: <DED> <IND> return matrix1, matrix2 \n \n",
      "15": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2 \n <IND> assert isinstance(matrix1, matrix2) \n return matrix1, matrix2 \n \n",
      "16": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> if dimension2[0] == matrix1, matrix2 \n \n",
      "17": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1, matrix2 \n return matrix1, matrix2 \n \n",
      "18": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1] is not None <IND> return matrix1, matrix2 \n \n",
      "19": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n <DED>",
      "20": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1] is not None <DED> return matrix1, matrix2 \n \n",
      "21": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[str, matrix2 \n return matrix1, matrix2 \n \n",
      "22": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[str, matrix2] is not None \n return matrix1, matrix2 \n \n",
      "23": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension1[str] is not None \n return matrix1, matrix2 \n \n",
      "24": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2) \n return matrix1, matrix2 \n \n",
      "25": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> if dimension2[0] is not None: \n <IND> return matrix1, matrix2 \n \n",
      "26": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[matrix2[1] is not None \n return matrix1, matrix2 \n \n",
      "27": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> value = matrix1, matrix2 \n \n",
      "28": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1], matrix2 \n return matrix1, matrix2 \n \n",
      "29": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> raise ValueError(matrix1, matrix2) \n \n",
      "30": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension1[str, matrix2 \n return matrix1, matrix2 \n \n",
      "31": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2 \n <DED> return matrix1, matrix2 \n \n",
      "32": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[str] = matrix1, matrix2 \n \n",
      "33": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> if dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n",
      "34": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> if dimension1[0] == matrix1, matrix2 \n \n",
      "35": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1] is not None and matrix2 is not None \n return matrix1, matrix2 \n \n",
      "36": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[Math2[1] is not None \n return matrix1, matrix2 \n \n",
      "37": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> returns matrix1, matrix2 \n \n",
      "38": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2 \n <IND> assert isinstance(matrix1, matrix2) \n return matrix1, matrix2 \n \n",
      "39": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[str, matrix2 is not None \n return matrix1, matrix2 \n \n",
      "40": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension1[1] is not None <IND> return matrix1, matrix2 \n \n",
      "41": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2 \n <IND> return matrix1, matrix2 \n \n",
      "42": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[int = matrix1, matrix2 \n \n",
      "43": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension1[1] is not None <DED> return matrix1, matrix2 \n \n",
      "44": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2) \n return matrix1, matrix2 \n \n",
      "45": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> raise ValueError(mime1, matrix2) \n \n",
      "46": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert dimension2[1, matrix2 is not None \n return matrix1, matrix2 \n \n",
      "47": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> if dimension1[0] is not None: \n <IND> return matrix1, matrix2 \n \n",
      "48": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert value is not None \n return matrix1, matrix2 \n \n",
      "49": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> raise ValueError(Math1[1]) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>return count_label + short_label\n",
    "target_code": "        <IND>return count_label + short_label\n\n  <DED><DED><DED>raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_line": "        return count_label + short_label",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 582,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "<IND> return count_label + short_label \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> return count_label + short_label \n \n",
      "1": "<IND> return count_label + short_label \n <IND> raise ValueError \n",
      "2": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n",
      "3": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n \n",
      "4": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n",
      "5": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n \n",
      "6": "<IND> return count_label + short_label \n <IND> raise ValueError \n \n",
      "7": "<IND> return count_label + short_label \n",
      "8": "<IND> return count_label + short_label \n <DED> \n",
      "9": "<IND> return count_label(count_label) + short_label \n <IND> raise ValueError \n",
      "10": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n <IND>",
      "11": "<IND> return count_label + short_label \n <IND> if not count_label: \n <IND> raise ValueError \n \n",
      "12": "<IND> return count_label(count_label) + short_label \n \n",
      "13": "<IND> return count_label + short_label \n <IND> raise ValueError \n <IND>",
      "14": "<IND> return count_label + short_label \n <IND> if not count_label: \n <IND> return False \n",
      "15": "<IND> return count_label + short_label \n <IND> if not count_label: \n <IND> raise ValueError \n",
      "16": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n <IND>",
      "17": "<IND> return count_label + short_label \n <IND> if short_label is not None: \n <IND> raise ValueError \n \n",
      "18": "<IND> return count_label + short_label \n <IND> raise ValueError <IND> raise ValueError \n \n",
      "19": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError <DED> raise ValueError \n \n",
      "20": "<IND> return count_label + short_label \n <IND> if short_label is not None: \n <IND> raise ValueError \n",
      "21": "<IND> return count_label(count_label) + short_label \n <DED> <IND> raise ValueError \n",
      "22": "<IND> return count_label + short_label \n <IND> raise ValueError <IND> raise ValueError \n",
      "23": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n <IND> raise ValueError \n",
      "24": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n <DED> <IND> raise ValueError \n \n",
      "25": "<IND> return count_label + short_label \n <IND> return \"\" \n",
      "26": "<IND> return count_label + short_label \n <IND> if short_label is None: \n <IND> raise ValueError \n",
      "27": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n <DED> <IND> raise ValueError \n \n",
      "28": "<IND> return count_label + short_label \n <IND> raise ValueError \n <DED> <IND> raise ValueError \n \n",
      "29": "<IND> return count_label + short_label \n <IND> raise ValueError <DED> raise ValueError \n",
      "30": "<IND> return count_label(count_label) + short_label \n <DED> <IND> raise ValueError \n \n",
      "31": "<IND> return count_label + short_label \n <IND> if short_label is None: \n <IND> raise ValueError \n \n",
      "32": "<IND> return count_label(count_label) + short_label \n <DED> <DED> raise ValueError \n \n",
      "33": "<DED> return count_label + short_label \n <IND> raise ValueError \n",
      "34": "<IND> return count_label + short_label \n <IND> raise ValueError \n <DED> <IND> raise ValueError \n",
      "35": "<IND> return count_label <DED> short_label \n <IND> raise ValueError \n",
      "36": "<IND> return count_label(count_label) + short_label \n <IND> raise ValueError \n \n",
      "37": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n <DED> <DED> raise ValueError \n \n",
      "38": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n <DED> <IND> raise ValueError \n",
      "39": "<IND> return count_label + short_label \n <IND> raise ValueError \n <DED> <DED> raise ValueError \n",
      "40": "<IND> return count_label + short_label \n <IND> raise ValueError <DED> raise ValueError \n \n",
      "41": "<IND> return count_label + short_label \n <DED> <IND> if short_label is not None: \n <IND> raise ValueError \n \n",
      "42": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n <DED> <DED> raise ValueError \n \n",
      "43": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError \n <DED> <DED> raise ValueError \n",
      "44": "<IND> return count_label(count_label) + short_label \n",
      "45": "<IND> return count_label + short_label \n <DED> raise ValueError \n",
      "46": "<IND> return count_label + short_label \n <IND> if not count_label: \n <DED> raise ValueError \n \n",
      "47": "<IND> return count_label + short_label \n <IND> raise ValueError \n <DED> <DED> raise ValueError \n \n",
      "48": "<IND> return count_label + short_label \n <DED> <IND> raise ValueError <IND> raise ValueError \n \n",
      "49": "<IND> return count_label + short_label \n <DED> <DED> raise ValueError \n <IND> raise ValueError \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> bytes:\n    <IND>",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    <IND>",
    "warning_line": "    \"\"\"",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bytes` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trezor/trezor-firmware",
    "source_filename": "core/mocks/generated/trezorconfig.pyi",
    "target_filename": "core/mocks/generated/trezorconfig.pyi",
    "source_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058^",
    "target_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "predictions": [
      "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "1": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> Bytes: \n <IND>",
      "2": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool] = None) -> bytes: \n <IND>",
      "3": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool] = False) -> bytes: \n <IND>",
      "4": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = False]) -> bytes: \n <IND>",
      "5": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = True) -> bytes: \n <IND>",
      "6": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = False) -> bytes: \n <IND>",
      "7": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: bytes, public: bool = False) -> bytes: \n <IND>",
      "8": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "9": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "10": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool] = None) -> Bytes: \n <IND>",
      "11": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> None: \n <IND>",
      "12": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool] = False) -> Bytes: \n <IND>",
      "13": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = False]) -> Bytes: \n <IND>",
      "14": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = False) -> Bytes: \n <IND>",
      "15": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n \n",
      "16": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <DED>",
      "17": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: Int, key: int, public: bool = False) -> bytes: \n <IND>",
      "18": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: \"bool = False) -> bytes: \n <IND>",
      "19": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: Bytes, public: bool = False) -> bytes: \n <IND>",
      "20": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: Int, public: bool = False) -> bytes: \n <IND>",
      "21": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = True) -> Bytes: \n <IND>",
      "22": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get(app: int, key: int, public: Optional[bool] = None) -> bytes: \n <IND>",
      "23": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: bytes, public: bool = False) -> Bytes: \n <IND>",
      "24": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool] = True) -> bytes: \n <IND>",
      "25": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n <DED> def get(app: int, key: int, public: bool = False) -> Bytes: \n <IND>",
      "26": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get(app: int, key: int, public: bool = False) -> Bytes: \n <IND>",
      "27": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n <DED> def get(app: int, key: int, public: Optional[bool] = None) -> bytes: \n <IND>",
      "28": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get(app: int, key: int, public: Optional[bool] = False) -> bytes: \n <IND>",
      "29": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get(app: int, key: int, public: Optional[bool = False]) -> bytes: \n <IND>",
      "30": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n <DED> def get(app: int, key: int, public: Optional[bool = False]) -> bytes: \n <IND>",
      "31": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: False) -> bytes: \n <IND>",
      "32": "# extmod/modtrezorconfig/modtrezorconfig.c <IND> <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "33": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n <DED> def get(app: int, key: int, public: Optional[bool] = False) -> bytes: \n <IND>",
      "34": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False <IND> ) -> bytes: \n <IND>",
      "35": "# extmod/modtrezorconfig/modtrezorconfig.c <DED> <DED> <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "36": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> \"\"\": \n <IND>",
      "37": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: int = False) -> bytes: \n <IND>",
      "38": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> params: \n <IND>",
      "39": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = None) -> bytes: \n <IND>",
      "40": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = False) -> None: \n <IND>",
      "41": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( <DED> app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "42": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>",
      "43": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False \n ) -> bytes: \n <IND>",
      "44": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: Optional[bool = True) -> bytes: \n <IND>",
      "45": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False) -> bytes: <IND> <IND>",
      "46": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: bool = False <DED> ) -> bytes: \n <IND>",
      "47": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: int, key: int, public: return None) -> bytes: \n <IND>",
      "48": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get(app: Int, key: int, public: bool = False) -> Bytes: \n <IND>",
      "49": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n <IND> def get(app: int, key: int, public: bool = False) -> bytes: \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        print()\n        return\n    <DED>for i in range(len(board)):\n",
    "target_code": "        print()\n        return True\n    <DED>for i in range(len(board)):\n",
    "warning_line": "        return",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 56,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "backtracking/n_queens.py",
    "target_filename": "backtracking/n_queens.py",
    "source_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1^",
    "target_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "predictions": [
      "print() \n <DED> for i in range(len(board)): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "print() \n <DED> for i in range(len(board)): \n",
      "1": "print() \n \n <DED> for i in range(len(board)): \n",
      "2": "print() \n <IND> return False \n <DED> for i in range(len(board)): \n",
      "3": "print() \n <IND> return [] \n <DED> for i in range(len(board)): \n",
      "4": "print() \n <IND> return \"\" \n <DED> for i in range(len(board)): \n",
      "5": "print() \n <IND> return None \n <DED> for i in range(len(board)): \n",
      "6": "print() \n <DED> bool = bool(i in range(len(board))): \n",
      "7": "print() \n <DED> return False \n <DED> for i in range(len(board)): \n",
      "8": "print() \n <IND> return True \n <DED> for i in range(len(board)): \n",
      "9": "print() \n <IND> return False \n \n <DED> for i in range(len(board)): \n",
      "10": "print() \n <DED> for i in range(list(len(board))): \n",
      "11": "print() \n \n \n <DED> for i in range(len(board)): \n",
      "12": "print() \n <DED> bool: \n <IND> for i in range(len(board)): \n",
      "13": "print() \n <IND> return bool(print) \n <DED> for i in range(len(board)): \n",
      "14": "print() \n \n <IND> for i in range(len(board)): \n",
      "15": "print() \n # is not None \n <DED> for i in range(len(board)): \n",
      "16": "print() \n <IND> return False \n <IND> for i in range(len(board)): \n",
      "17": "print() \n <DED> bool: \n <DED> for i in range(len(board)): \n",
      "18": "print() \n <DED> return [] \n <DED> for i in range(len(board)): \n",
      "19": "print() \n <IND> return [] \n \n <DED> for i in range(len(board)): \n",
      "20": "print() \n <DED> bool = i in range(len(board)): \n",
      "21": "print() \n <IND> <IND> return False \n <DED> for i in range(len(board)): \n",
      "22": "print() \n <IND> if not print: \n <IND> return \n <DED> for i in range(len(board)): \n",
      "23": "print() \n <DED> bool = False \n <DED> for i in range(len(board)): \n",
      "24": "print() \n <IND> return () \n <DED> for i in range(len(board)): \n",
      "25": "print() \n return False \n <DED> for i in range(len(board)): \n",
      "26": "print() \n <IND> <IND> return [] \n <DED> for i in range(len(board)): \n",
      "27": "print() \n <IND> return [] \n <IND> for i in range(len(board)): \n",
      "28": "print() \n \n <DED> for i in range(list(len(board))): \n",
      "29": "print() \n <IND> for i in range(len(board)): \n",
      "30": "print() \n <IND> if not print: \n <DED> for i in range(len(board)): \n",
      "31": "print() <IND> return False \n <DED> for i in range(len(board)): \n",
      "32": "print() \n <DED> return \"\" \n <DED> for i in range(len(board)): \n",
      "33": "print() \n <DED> return None \n <DED> for i in range(len(board)): \n",
      "34": "print() \n <IND> return False \n <DED> for i in range(list(len(board))): \n",
      "35": "print() \n <IND> <DED> for i in range(len(board)): \n",
      "36": "print() \n <DED> for i in range(list(len(board)): \n",
      "37": "print() \n <IND> \n <DED> for i in range(len(board)): \n",
      "38": "print() \n <DED> bool = bool(i in range(len(board))) \n return False \n",
      "39": "print() \n <DED> for i in range(len(board)): \n <IND> return False \n",
      "40": "print() \n <DED> for i in range(len(board)): <IND>",
      "41": "print() \n <DED> for i in range(len(board)): \n <IND>",
      "42": "print() \n <DED> for i in range(len(board)): \n \n",
      "43": "print() \n <DED> return bool(i in range(len(board))) \n",
      "44": "print() \n <DED> for i in range(len(board)): \n <IND> return \"\" \n",
      "45": "print() \n <DED> for i in range(len(board, bool)): \n",
      "46": "print() \n <DED> for i in range(len(board)): \n <IND> return [] \n",
      "47": "print() \n \n <DED> for i in range(list(len(board)): \n",
      "48": "print() \n <IND> return False \n <DED> for i in range(len(board)): \n <IND>",
      "49": "print() \n <DED> for i in line(len(board)): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
    "target_code": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_line": "    return unicodedata.normalize(",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "oppia/oppia",
    "source_filename": "utils.py",
    "target_filename": "utils.py",
    "source_changeid": "72937725a323b0cc1ccec150c81b041abeacb575^",
    "target_changeid": "72937725a323b0cc1ccec150c81b041abeacb575",
    "predictions": [
      "\n return str(unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return str(unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "1": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "2": "\n return str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "3": "\n str = unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "4": "\n return normalized_string( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "5": "\n return normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "6": "\n str = unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "7": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "8": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "9": "\n assert isinstance(python_utils.UNICODE(input_string)) is not None \n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "10": "\n assert isinstance(python_utils.UNICODE(input_string)) return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "11": "\n return str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "12": "\n return normalized_string( unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "13": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n <IND>",
      "14": "\n write_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "15": "\n return str( unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "16": "\n encoded_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "17": "\n return str(unicodedata.normalize( <IND> 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "18": "\n assert isinstance(python_utils.UNICODE(input_string)) \n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "19": "\n if not python_utils.UNICODE(input_string): \n <IND> return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "20": "\n str = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "21": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "22": "\n computed_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "23": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "24": "\n return str(unicodedata.normalize('NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "25": "\n return normalized_strings( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "26": "\n return normalized.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "27": "\n return str( unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "28": "\n return normalized_string( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "29": "\n encoded = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "30": "\n return str(unicodedata.normalize( <DED> 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "31": "\n return normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "32": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(str(input_string))).encode('ascii', 'ignore') \n \n",
      "33": "\n code = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "34": "\n return normalized( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "35": "\n return normalized_string.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "36": "\n unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "37": "\n get unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "38": "\n return str('NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "39": "\n return normalization.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "40": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n <IND>",
      "41": "\n string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "42": "\n str = unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n <IND>",
      "43": "\n return normalization_bytes( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "44": "\n write_strings = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "45": "\n python_utils.UNICODE(input_string) = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(string)).encode('ascii', 'ignore') \n \n",
      "46": "\n return str(unicodedata.normalize(Str('NFKD'), python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n",
      "47": "\n return normalized_string( <IND> 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "48": "\n return str(unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "49": "\n return str(unicodedata.normalize( <DED> python_utils.UNICODE(input_string))).encode('ascii', 'ignore') \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <IND>def __iter__(self) -> \"SuperclassesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "target_code": "\n    <IND>def __iter__(self) -> \"SuperpropertiesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_line": "        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 197,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/logic/lineage.py",
    "target_filename": "pronto/logic/lineage.py",
    "source_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327^",
    "target_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "predictions": [
      "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "1": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "2": "\n <IND> def __iter__(self) -> \"SuperpropertiesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "3": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "4": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "5": "\n <IND> def __iter__(self) -> \"SuperpropertiesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "6": "\n <IND> def __iter__(self) -> \"SuperpropertiesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "7": "\n <IND> def __iter__(self) -> 'SuperclassesIterator': \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "8": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "9": "<IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "10": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "11": "<DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "12": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "13": "\n <DED> def __iter__(self) -> \"SuperpropertiesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "14": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> if self.entity is None: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "15": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "16": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "17": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return this.propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "18": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "19": "\n \n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "20": "\n <IND> def __iter__(self) -> Optional[\"SuperclassesIterator\"]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "21": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "22": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> get SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "23": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return self.propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "24": "\n <IND> def __iter__(self) -> 'SuperclassesIterator': \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "25": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": <IND> <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "26": "\n <IND> def __iter__(self) -> \"Executor\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "27": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "28": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "29": "\n <IND> def __iter__(self) -> \"SuperpropertiesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "30": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": <DED> <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "31": "\n <IND> def __iter__(self) -> Type[\"SuperclassesIterator\"]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "32": "<IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "33": "<DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "34": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return Self.propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "35": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) <IND>",
      "36": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return \"\" <DED> superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "37": "\n <IND> def __iter__(self) -> \"ProfessionsIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "38": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> make SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "39": "\n <IND> def __iter__(self) -> None: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "40": "\n <IND> def __iter__(self): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "41": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return _superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "42": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) <DED> \n",
      "43": "\n <IND> def __iter__(self) -> Iterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "44": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self.with_self) \n",
      "45": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator( <DED> self.entity, distance=self.distance, with_self=self.with_self) \n",
      "46": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator( \n self.entity, distance=self.distance, with_self=self.with_self) \n",
      "47": "\n <IND> def __iter__(self) -> this.properties: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "48": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return _superpropertiesIterator(self.entity, distance=self.distance, with_self=_.with_self) \n",
      "49": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> self.entity = super().propertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": ") -> JsonSchema:\n    <IND>if schema is False:\n        <IND>return False\n    <DED>if \"anyOf\" in schema:\n",
    "target_code": ") -> JsonSchema:\n    <IND>if is_true_schema(schema) or is_false_schema(schema):\n        <IND>return schema\n    <DED>if \"anyOf\" in schema:\n",
    "warning_line": "        return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, typing.Any]` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 988,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "IBM/lale",
    "source_filename": "lale/schema_simplifier.py",
    "target_filename": "lale/schema_simplifier.py",
    "source_changeid": "b38267abe490e869338f212179b03521e89013ee^",
    "target_changeid": "b38267abe490e869338f212179b03521e89013ee",
    "predictions": [
      ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n"
    ],
    "correct": false,
    "top_five": {
      "0": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "1": ") -> JsonSchema: \n <IND> if schema is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "2": ") -> JsonSchema: \n <IND> if schema is not None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "3": ") -> JsonSchema: \n <IND> if schema is None is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "4": ") -> JsonSchema: \n <IND> if schema is not None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "5": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n \n <DED> if \"anyOf\" in schema: \n",
      "6": ") -> JsonSchema: \n <IND> if schema is None in schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "7": ") -> JsonSchema: \n <IND> if schema is not None in schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "8": ") -> JsonSchema: \n <IND> if schema is None is None: \n <IND> return None \n \n <DED> if \"anyOf\" in schema: \n",
      "9": ") -> JsonSchema: \n <IND> if schema is None is None and schema is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "10": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "11": ") -> JsonSchema: \n <IND> if schema is Not None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "12": ") -> JsonSchema: \n <IND> if schema is None is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "13": ") -> JsonSchema: \n <IND> if schema is None is None and schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "14": ") -> JsonSchema: \n <IND> if schema is None is None in schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "15": ") -> JsonSchema: \n <IND> if schema is None else False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "16": ") -> JsonSchema: \n <IND> if schema is None is None is None is None \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "17": ") -> JsonSchema: \n <DED> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "18": ") -> JsonSchema: \n <IND> if schema is None is None is None and schema is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "19": ") -> JsonSchema: \n <IND> if schema in schema: \n <IND> return [] \n <DED> if \"anyOf\" in schema: \n",
      "20": ") -> JsonSchema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "21": ") -> JsonSchema: \n <IND> if schema is None: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "22": ") -> JsonSchema: \n <IND> if schema is None is None is None \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "23": ") -> JsonSchema: \n <DED> if schema is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "24": ") -> JsonSchema: \n <IND> if schema is None is None is None and schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "25": ") -> JsonSchema: \n <IND> if schema is not None and schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "26": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "27": ") -> JsonSchema: \n <IND> if schema is not None: \n <IND> return None \n \n <DED> if \"anyOf\" in schema: \n",
      "28": ") -> JsonSchema: \n <IND> if schema is None is None: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "29": ") -> JsonSchema: \n <IND> if schema is None is None else False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "30": ") -> JsonSchema: \n <IND> if schema is None is None or schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "31": ") -> JsonSchema: \n <IND> if schema is None, schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "32": ") -> JsonSchema: \n <IND> if schema is None or schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "33": ") -> JsonSchema: \n \n if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "34": ") -> JsonSchema: \n <IND> if schema is None is None is None in schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "35": ") -> JsonSchema: \n <IND> if schema is not None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "36": ") -> JsonSchema: \n <IND> return [] \n <DED> if \"anyOf\" in schema: \n",
      "37": ") -> JsonSchema: \n <IND> if schema in schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "38": ") -> JsonSchema: \n <IND> if schema is None: \n \n return None \n <DED> if \"anyOf\" in schema: \n",
      "39": ") -> JsonSchema: \n <IND> if schema in schema: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "40": ") -> JsonSchema: \n <IND> if schema is None is None is None: \n <IND> return None \n \n <DED> if \"anyOf\" in schema: \n",
      "41": ") -> JsonSchema: \n <IND> if schema is None is None: \n \n return None \n <DED> if \"anyOf\" in schema: \n",
      "42": ") -> JsonSchema: \n <IND> if schema is not None is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "43": ") -> JsonSchema: \n <IND> if schema is None is None is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "44": ") -> JsonSchema: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "45": ") -> JsonSchema: \n <IND> if schema is Not None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "46": ") -> JsonSchema: \n <IND> if schema in schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "47": ") -> JsonSchema: \n \n if schema is None is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "48": ") -> JsonSchema: \n <IND> if schema in schema: \n <IND> return \"\" \n <DED> if \"anyOf\" in schema: \n",
      "49": ") -> JsonSchema: \n <IND> if schema is None is None and schema is None is None: \n <IND> return None \n \n <DED> if \"anyOf\" in schema: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\t\t\t<IND>se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException\n\n",
    "target_code": "\t\t\t<IND>se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException.code\n\n",
    "warning_line": "\t\t\treturn se.InvalidSeEbookException",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 738,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/executables.py",
    "target_filename": "se/executables.py",
    "source_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0^",
    "target_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "predictions": [
      "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int) \n \n",
      "1": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n assert se.InvalidSeEbookException is not None \n return se.InvalidSeEbookException \n \n",
      "2": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, \"\") \n \n",
      "3": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, int) \n \n",
      "4": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, 'InvalidSeEbookException') \n \n",
      "5": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n assert se.InvalidSeEbookException is not None \n return se.InvalidSeEbookException(int) \n \n",
      "6": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int,...) \n \n",
      "7": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, '') \n \n",
      "8": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int(se.InvalidSeEbookException)) \n \n",
      "9": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int) \n \n",
      "10": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.append(se.InvalidSeEbookException) \n \n",
      "11": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, se.InvalidSeEbookException) \n \n",
      "12": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, invalidSeEbookException) \n \n",
      "13": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not isinstance(se.InvalidSeEbookException): \n <IND> return se.InvalidSeEbookException \n \n",
      "14": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, xhtml file.\") \n \n",
      "15": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, isinstance(se.InvalidSeEbookException)) \n \n",
      "16": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, \"\") \n \n",
      "17": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not se.InvalidSeEbookException: \n <IND> return se.InvalidSeEbookException \n \n",
      "18": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(se.InvalidSeEbookException) \n \n",
      "19": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not se.InvalidSeEbookException: \n <IND> return se.InvalidSeEbookException(int) \n \n",
      "20": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, 'int') \n \n",
      "21": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, null) \n \n",
      "22": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.typing.Type[se.InvalidSeEbookException] \n \n",
      "23": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n isinstance(se.InvalidSeEbookException) \n return isinstance(se.InvalidSeEbookException) \n \n",
      "24": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException[int] \n \n",
      "25": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, invalid) \n \n",
      "26": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, isinstance(str, int)) \n \n",
      "27": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int); \n \n",
      "28": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return Se.InvalidSeEbookException(int) \n \n",
      "29": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "30": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, 'Unable to find endnotes.xhtml file.') \n \n",
      "31": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, []) \n \n",
      "32": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(InvalidSeEbookException) \n \n",
      "33": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, xhtml file) \n \n",
      "34": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not se.InvalidSeEbookException: \n <IND> raise ValueError(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "35": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, e) \n \n",
      "36": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, endnotes.xhtml file.\") \n \n",
      "37": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, 'Invalid') \n \n",
      "38": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n assert se.InvalidSeEbookException is not None \n return se.InvalidSeEbookException <IND> \n",
      "39": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n assert se.InvalidSeEbookException is not None \n return se.InvalidSeEbookException(int, invalidSeEbookException) \n \n",
      "40": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, xhtml) \n \n",
      "41": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not isinstance(se.InvalidSeEbookException): \n <IND> raise ValueError(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "42": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not isinstance(se.InvalidSeEbookException, int): \n <IND> return se.InvalidSeEbookException \n \n",
      "43": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookExceptionException(int) \n \n",
      "44": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not se.InvalidSeEbookException: \n <IND> return Se.InvalidSeEbookException(int) \n \n",
      "45": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n if not isinstance(se.InvalidSeEbookException): \n <IND> raise TypeError(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "46": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, xml) \n \n",
      "47": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str) \n \n",
      "48": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, func) \n \n",
      "49": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int, \"\"); \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": true,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@property\n    def layer_name(self) -> str:\n        <IND>return self._layer_name\n",
    "target_code": "    <DED>@property\n    def layer_name(self) -> typing.Optional[str]:\n        <IND>return self._layer_name\n",
    "warning_line": "        return self._layer_name",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/layers.py",
    "target_filename": "volatility/framework/interfaces/layers.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "1": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "2": "<DED> @property \n def layer_name(self) -> Typing.Optional[str]: \n <IND> return self._layer_name \n",
      "3": "\n <DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "4": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <DED> return self._layer_name \n",
      "5": "<DED> @property \n def layer_name(self): \n <IND> return self._layer_name \n",
      "6": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n \n return self._layer_name \n",
      "7": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> assert self._layer_name is not None \n return self._layer_name \n",
      "8": "<DED> @property \n def layer_name(self, str) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "9": "<DED> @property \n def layer_name(self) -> typing[typing.Optional[str]]: \n <IND> return self._layer_name \n",
      "10": "<DED> @property \n def layer_name(str) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "11": "<DED> @property \n def layer_name(self) -> Typing[str]: \n <IND> return self._layer_name \n",
      "12": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name <IND>",
      "13": "<DED> @property <DED> def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "14": "<DED> @property <IND> def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "15": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: <IND> <IND> return self._layer_name \n",
      "16": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: <DED> <IND> return self._layer_name \n",
      "17": "<DED> @property \n def layer_name(self) -> typing.Optional[typing.Optional[str]]: \n <IND> return self._layer_name \n",
      "18": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> if self._layer_name is None: \n <IND> return self._layer_name \n",
      "19": "<DED> @property \n def layer_name(self) -> typing[str]: \n <IND> return self._layer_name \n",
      "20": "\n <IND> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "21": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> if self._layer_name is not None: \n <IND> return self._layer_name \n",
      "22": "<DED> @property \n def layer_name(self,...) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "23": "<DED> @property \n def layer_name(self, typing.Optional[str]): \n <IND> return self._layer_name \n",
      "24": "<DED> @property \n def layer_name(self) += typing.Optional[str]: \n <IND> return self._layer_name \n",
      "25": "<DED> @property \n def layer_name(self) -> typing[Optional[str]]: \n <IND> return self._layer_name \n",
      "26": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name <DED>",
      "27": "<DED> @property \n def layer_name(self = { } ) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "28": "<DED> @property \n def layer_name(self) > typing.Optional[str]: \n <IND> return self._layer_name \n",
      "29": "<IND> @property \n def layer_name(self) -> Typing.Optional[str]: \n <IND> return self._layer_name \n",
      "30": "\n <DED> @property \n def layer_name(self) -> Typing.Optional[str]: \n <IND> return self._layer_name \n",
      "31": "<DED> @property \n def layer_name(self._layer_name) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "32": "<DED> @property \n def layer_name(self) -> typing(Optional[str]): \n <IND> return self._layer_name \n",
      "33": "<DED> @property \n def layer_name(self, typing.Optional[str]): \n <IND> return self._layer_name \n",
      "34": "<DED> @property \n def layers_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "35": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name <DED> assert self._layer_name is not None \n",
      "36": "<DED> @property \n def layer_name(self) -> typing[typing.Optional[str]: \n <IND> return self._layer_name \n",
      "37": "<DED> @property \n <IND> def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "38": "<DED> @property \n def layer_name(self) ->typing.Optional[str]: \n <IND> return self._layer_name \n",
      "39": "\n <DED> @property <DED> def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "40": "<DED> @property \n def layer_name(self) -> Typing.Optional[str]: \n <DED> return self._layer_name \n",
      "41": "<DED> @property \n def layer_name(self -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "42": "\n \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "43": "<DED> @property \n def layer_name(this) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "44": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n <DED> return self._layer_name \n",
      "45": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> if self._layer_name is None: \n <DED> return self._layer_name \n",
      "46": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> if self._layer_name else str: \n <IND> return self._layer_name \n",
      "47": "<DED> @property \n def layer_name(self): \n <IND> assert self._layer_name is not None \n return self._layer_name \n",
      "48": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> if self._layer_name is None: \n \n return self._layer_name \n",
      "49": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name <DED> ) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def escape(expr: str) -> None:\n    <IND>return expr.replace(\"'\", \"''\")\n",
    "target_code": "\n<DED>def escape(expr: str) -> str:\n    <IND>return expr.replace(\"'\", \"''\")\n",
    "warning_line": "    return expr.replace(\"'\", \"''\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 118,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Shougo/deoplete.nvim",
    "source_filename": "rplugin/python3/deoplete/util.py",
    "target_filename": "rplugin/python3/deoplete/util.py",
    "source_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7^",
    "target_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7",
    "predictions": [
      "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "1": "\n <DED> def escape(expr: str): \n <IND> return expr.replace(\"'\", \"''\") \n",
      "2": "\n <DED> def escape(expr: Optional[str]) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "3": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"'') \n",
      "4": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"'\") \n",
      "5": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "6": "\n <IND> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "7": "\n \n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "8": "\n <DED> def escape(expr: str) -> str: \n <DED> return expr.replace(\"'\", \"''\") \n",
      "9": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"'\"\") \n",
      "10": "\n <DED> def escape(expr: Optional[str] = None) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "11": "<DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "12": "\n <DED> def escape(expr: str) -> str: \n \n return expr.replace(\"'\", \"''\") \n",
      "13": "\n <DED> def escape(expr: str) -> \"\": \n <IND> return expr.replace(\"'\", \"''\") \n",
      "14": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(str(\"'\", \"'')) \n",
      "15": "\n <DED> def escape(expr: str: Optional[str]) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "16": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"'\") \n",
      "17": "<IND> <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "18": "\n <DED> def escape(expr: str) -> Str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "19": "\n <DED> def escape(expr: str) -> Scenarios: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "20": "\n <DED> def escape(expr: str) -> Str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "21": "\n <DED> def escape(expr: str) -> Optional[str]: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "22": "\n <DED> def escape(expr: str) -> Abstr: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "23": "\n <DED> def escape(expr: Str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "24": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") <IND>",
      "25": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "26": "\n <DED> def escape(expr: str) -> Structure: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "27": "\n <DED> def escape(expr: str) -> str: \n <IND> return exr.replace(\"'\", \"''\") \n",
      "28": "\n <DED> def escape(expr: Expr) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "29": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(replace(\"'\", \"''\") \n",
      "30": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(str(\"'\", \"''\")) \n",
      "31": "\n <DED> def escape(expr: str) -> str: <IND> <IND> return expr.replace(\"'\", \"''\") \n",
      "32": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(''\", \"''\") \n",
      "33": "\n <DED> def escape(expr: str) -> str: <DED> <IND> return expr.replace(\"'\", \"''\") \n",
      "34": "\n <DED> def escape(expr: str, str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "35": "\n <DED> def escape(expr: str) -> List[str]: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "36": "\n <DED> def escape(expr: str) -> Abs: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "37": "\n <DED> def escape(expr: Optional[str]): \n <IND> return expr.replace(\"'\", \"''\") \n",
      "38": "\n <DED> def escape(expr: str) -> str: \n <IND> def return expr.replace(\"'\", \"''\") \n",
      "39": "\n <DED> def escape(expr: Optional[str]: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "40": "\n <DED> def escape(expr: str) -> str: \n <IND> return str(exr.replace(\"'\", \"''\")) \n",
      "41": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(str) \n",
      "42": "\n <DED> def escape(expr: Optional[str]) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "43": "\n <DED> def escape(expr: str) -> Stigma: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "44": "\n <DED> def escape(expr: str): \n <IND> return expr.replace(\"'\", \"'') \n",
      "45": "\n <DED> def escape(expr: str): \n <IND> return expr.replace(\"'\", \"''\") \n",
      "46": "\n <DED> def escape(expr: str): \n <IND> return expr.replace(\"'\", \"'\") \n",
      "47": "\n \n <DED> def escape(expr: str): \n <IND> return expr.replace(\"'\", \"''\") \n",
      "48": "\n <DED> def escape(expr: \"\") -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "49": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(f\"'\", \"''\") \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                <IND>vty = v.type\n",
    "target_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                <IND>vty = v.type\n",
    "warning_line": "            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 445,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/Expr.py",
    "target_filename": "WDL/Expr.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "1": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "2": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "3": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "4": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "5": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "6": "<IND> k.typecheck(kty) \n <DED> if vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "7": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "8": "<IND> k.typecheck(kty) \n <DED> if vty == t.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "9": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "10": "<DED> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "11": "<IND> k.typecheck(kty) \n <DED> if vty or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "12": "<IND> k.typecheck(kty) \n <DED> if vty or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "13": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == t.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "14": "<IND> k.typecheck(kty) \n <DED> if vty == t.Array(T.Any()) or vty == t.Map(None): \n <IND> vty = v.type \n",
      "15": "<IND> k.typecheck(kty) \n <DED> if vty == T.Map(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "16": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty: \n <IND> vty = v.type \n",
      "17": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == t.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "18": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "19": "<IND> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "20": "<IND> k.typecheck(kty) \n \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "21": "<IND> k.typecheck(kty) \n \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "22": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(T.Any()): \n <IND> vty = v.type \n",
      "23": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "24": "<IND> k.typecheck(kty) \n <IND> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "25": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "26": "<IND> k.typecheck(kty) \n <IND> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "27": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(...): \n <IND> vty = v.type \n",
      "28": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map((T.Any())) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "29": "\n k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "30": "<IND> k.typecheck(kty) \n <DED> if vty == t.Array(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "31": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "32": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "33": "<IND> k.typecheck(kty) \n <DED> if vty is None or T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "34": "<IND> k.typecheck(kty) \n \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "35": "<DED> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(One): \n <IND> vty = v.type \n",
      "36": "<IND> k.typecheck(kty) \n <DED> if vty <DED> is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "37": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty: \n <IND> vty = v.type \n",
      "38": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == t.Array(T.Any()) or vty == t.Map(None): \n <IND> vty = v.type \n",
      "39": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(T.Any()): \n <IND> vty = v.type \n",
      "40": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Map(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "41": "<IND> k.typecheck(kty) \n <DED> if vty <DED> is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "42": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(none): \n <IND> vty = v.type \n",
      "43": "<IND> k.typecheck(kty) \n <DED> if vty: \n <IND> vty = v.type \n",
      "44": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(T.NONE): \n <IND> vty = v.type \n",
      "45": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any()): \n <IND> vty = v.type \n",
      "46": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "47": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.NONE): \n <IND> vty = v.type \n",
      "48": "<DED> k.typecheck(kty) \n <DED> if vty == T.Map(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "49": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
    "target_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_line": "                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 433,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libp2p/py-libp2p",
    "source_filename": "libp2p/pubsub/gossipsub.py",
    "target_filename": "libp2p/pubsub/gossipsub.py",
    "source_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397^",
    "target_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "predictions": [
      "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "1": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "2": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, num_mesh[topic], [] \n ) \n",
      "3": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], Any) \n ) \n",
      "4": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "5": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, [] \n ) \n",
      "6": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], None) \n ) \n",
      "7": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Any) \n ) \n",
      "8": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, _.mesh[topic], [] \n ) \n",
      "9": "<IND> selected_peers = gossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "10": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "11": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [], Any] \n ) \n",
      "12": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], '') \n ) \n",
      "13": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, this.mesh[topic], [] \n ) \n",
      "14": "<IND> selected_peers = GossipSub[sequence[typing.Any]]( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "15": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - Self.degree, self.mesh[topic], [] \n ) \n",
      "16": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, (self.mesh[topic], []) \n ) \n",
      "17": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - this.degree, this.mesh[topic], [] \n ) \n",
      "18": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - _self.degree, _self.mesh[topic], [] \n ) \n",
      "19": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "20": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, (self.mesh[topic], [] \n ) \n",
      "21": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic] \n ) \n",
      "22": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, select_from_minus(self.mesh[topic], []) \n ) \n",
      "23": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], () \n ) \n",
      "24": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic],...) \n ) \n",
      "25": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, __self.mesh[topic], [] \n ) \n",
      "26": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,...self.mesh[topic], [] \n ) \n",
      "27": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[ID] \n ) \n",
      "28": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic, [] \n ) \n",
      "29": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[ID]) \n ) \n",
      "30": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, Self.mesh[topic], [] \n ) \n",
      "31": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[Any]) \n ) \n",
      "32": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] <IND> ) \n",
      "33": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, num_mesh[topic], [] \n ) \n",
      "34": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, t.degree, t.mesh[topic], [] \n ) \n",
      "35": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], Any)) \n ) \n",
      "36": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]) \n ) \n",
      "37": "<IND> selected_peers = GossipSub.select_from_minus( <DED> num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "38": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] <DED> ) \n",
      "39": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, _.meh[topic], [] \n ) \n",
      "40": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], Any) \n ) \n",
      "41": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), [] \n ) \n",
      "42": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [], Any) \n ) \n",
      "43": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], Any) <IND> ) \n",
      "44": "<IND> selected_peers = GossipSub.select_from_minus( <IND> num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "45": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, elif (self.mesh[topic]) \n ) \n",
      "46": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, List[topic], [] \n ) \n",
      "47": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], Any) <DED> ) \n",
      "48": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, elif isinstance(self.mesh[topic], []) \n ) \n",
      "49": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": true,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],\n",
    "target_code": "        <IND>restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_line": "            expiration=int(data['expiration']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "1": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "2": "\n restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "3": "<IND> restored = cls( \n expiration=BlockExpiration(), \n balance_proof=data['balance_proof'], \n",
      "4": "<IND> restored = cls( \n expiration=blockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "5": "<IND> restored = cls( \n expiration=False(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "6": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['expiration'])), \n",
      "7": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration']), \n balance_proof=data['balance_proof'], \n",
      "8": "<IND> restored = cls( \n expired=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "9": "<IND> restored = cls( \n assert data['expiration'] is not None \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "10": "<IND> restored = cls( <DED> expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "11": "<IND> restored = cls( <IND> expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "12": "<IND> restored = cls( \n assert data['expiration'] is not None, \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "13": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <IND>",
      "14": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), <IND> balance_proof=data['balance_proof'], \n",
      "15": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration']]), \n balance_proof=data['balance_proof'], \n",
      "16": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), <DED> balance_proof=data['balance_proof'], \n",
      "17": "<IND> restored = cls( \n expiration=ContractSendChannelUpdateTransfer.__init__, \n balance_proof=data['balance_proof'], \n",
      "18": "<IND> restored = cls( \n expiration=ContractSendChannelUpdateTransfer(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "19": "<IND> restored = cls( \n expiration=SecretExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "20": "<IND> restored = cls( \n expiration=int(data['expiration']), \n balance_proof=data['balance_proof'], \n",
      "21": "<IND> restored = cls( \n expiration==BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "22": "<IND> restored = cls( \n expiration=List[int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "23": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['balance_proof'])), \n",
      "24": "<IND> restored = cls( \n expiration=MockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "25": "<IND> restored = cls( \n expiration=DictExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "26": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'], '')), \n balance_proof=data['balance_proof'], \n",
      "27": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration''])), \n balance_proof=data['balance_proof'], \n",
      "28": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['already_proof'])), \n",
      "29": "<IND> restored = cls( \n expiration=AbsoluteExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "30": "<IND> restored = cls( \n expiration=Expiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "31": "<IND> restored = cls( \n expiration=blockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "32": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['expiration'])), \n",
      "33": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])) \n balance_proof=data['balance_proof'], \n",
      "34": "<IND> restored = cls( \n expiration=BaseExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "35": "<IND> restored = cls( \n expiration=BlockExpiration, \n balance_proof=data['balance_proof'], \n",
      "36": "<IND> restored = cls( \n expiration=ContractSendChannelUpdateTransfer.__init__), \n balance_proof=data['balance_proof'], \n",
      "37": "<IND> restored = cls( \n expiration=Int(data['expiration']), \n balance_proof=data['balance_proof'], \n",
      "38": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['expiration'])), \n ) \n",
      "39": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration']])), \n balance_proof=data['balance_proof'], \n",
      "40": "<IND> restored = cls( \n expiration=Internal[int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "41": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['alignment'])), \n",
      "42": "<IND> restored = cls( \n expiration=Address(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "43": "<IND> restored = cls( \n expiration=Expiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "44": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'))), \n balance_proof=data['balance_proof'], \n",
      "45": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['always'])), \n",
      "46": "<IND> restored = cls( \n expiration=secret(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "47": "\n restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['expiration'])), \n",
      "48": "<IND> restored = cls( \n expiration=list(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "49": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED> expiration=BlockExpiration(int(data['expiration']), \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )\n",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_line": "        InitializationData(unit_data={}, shared=annotation[\"inputs\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 128,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "target_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "1": "assignment.write_assignment_data( \n InitializationData= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "2": "assignment.write_assignment_data( \n InitializationData = InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "3": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\")) \n ) \n",
      "4": "assignment.write_assignment_data( \n initializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "5": "assignment.write_assignment_data( \n InitializationData[str, Any]] = { } \n ) \n",
      "6": "assignment.write_assignment_data( \n InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]) \n ) \n",
      "7": "assignment.write_assignment_data( <DED> InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "8": "assignment.write_assignment_data( \n InitializationData[str, Any]] = InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "9": "assignment.write_assignment_data( \n InitializationData[unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "10": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) <IND> ) \n",
      "11": "assignment.write_assignment_data( \n InitializationData(unit_data= { } ) \n ) \n",
      "12": "assignment.write_assignment_data( \n InitializationData[str, Any]] = None \n ) \n",
      "13": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation['inputs']) \n ) \n",
      "14": "assignment.write_assignment_data( \n InitializationData = initializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "15": "assignment.write_assignment_data( <IND> InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "16": "assignment.write_assignment_data( \n InitializationData.push(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "17": "assignment.write_assignment_data( \n InitializationData[List[str, Any]] = { }, \n shared=annotation[\"inputs\"]) \n ) \n",
      "18": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) <IND>",
      "19": "assignment.write_assignment_data( \n InitializationData[InitializationData[str, Any]] = { }, \n shared=annotation[\"inputs\"]) \n ) \n",
      "20": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) <DED> ) \n",
      "21": "assignment.write_assignment_data( \n InitializationData[typing.Dict[str, typing.Any]] = { }, \n shared=annotation[\"inputs\"]) \n ) \n",
      "22": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "23": "assignment.write_assignment_data( \n InitializationData[str, Any] = { }, shared=annotation[\"inputs\"]) \n ) \n",
      "24": "assignment.write_assignment_data( \n InitializationData.Protocol= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "25": "assignment.write_assignment_data( \n InitializationData[str, Any]] = [], \n shared=annotation[\"inputs\"] \n ) \n",
      "26": "assignment.write_assignment_data( \n InitializationData.init(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "27": "assignment.write_assignment_data( \n InitializationData[typing.Dict[str, typing.Any]] = { } \n ) \n",
      "28": "assignment.write_assignment_data( \n InitializationData[str, None] = { }, shared=annotation[\"inputs\"]) \n ) \n",
      "29": "assignment.write_assignment_data( \n InitializationData[List[str, Any]] = { }, shared=annotation[\"inputs\"]) \n ) \n",
      "30": "assignment.write_assignment_data( \n InitializationData[List[typing.Dict[str, typing.Any]]] = { } \n ) \n",
      "31": "assignment.write_assignment_data( \n InitializationData.list[typing.Dict[str, typing.Any]] = { } \n ) \n",
      "32": "assignment.write_assignment_data( \n InitializationData.None(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "33": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "34": "assignment.write_assignment_data( \n initializationData= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "35": "assignment.write_assignment_data( \n InitializationData.protocol= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "36": "assignment.write_assignment_data( \n InitializationData[inputs[\"Any\"]] = { }, \n shared=annotation[\"inputs\"]) \n ) \n",
      "37": "assignment.write_assignment_data( \n InitializationData[str, Any]] = { }, \n shared=annotation[\"inputs\"] \n ) \n",
      "38": "assignment.write_assignment_data( \n InitializationData.set(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "39": "assignment.write_assignment_data( \n InitializationData.set(unit_data= { }, shared=annotation[\"inputs\"])) \n ) \n",
      "40": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs]) \n ) \n",
      "41": "assignment.write_assignment_data( \n InitializationData.List[typing.Dict[str, typing.Any]] = { } \n ) \n",
      "42": "assignment.write_assignment_data( \n InitializationData[str, typing.Any]] = { } \n ) \n",
      "43": "assignment.write_assignment_data( \n InitializationData[List[str, Any]] = { }, \n shared=annotation[\"inputs\"]] \n ) \n",
      "44": "assignment.write_assignment_data( \n InitializationData(int, shared=annotation[\"inputs\"]) \n ) \n",
      "45": "assignment.write_assignment_data( \n InitializationData[unit_data= { }, shared=annotation[\"inputs\"]]) \n ) \n",
      "46": "assignment.write_assignment_data( \n InitializationData[str, Any]] = [] \n ) \n",
      "47": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs']) \n ) \n",
      "48": "assignment.write_assignment_data( \n InitializationData[[str, Any]] = { }, shared=annotation[\"inputs\"]) \n ) \n",
      "49": "assignment.write_assignment_data( \n InitializationData.None(unit_data= { }, shared=annotation[\"inputs\"])) \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "target_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        <IND>raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    <DED>hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_line": "                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 267,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/automagic/windows.py",
    "target_filename": "volatility/framework/automagic/windows.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "1": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "2": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(progress_callback, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "3": "<DED> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "4": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(sub_config_path, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "5": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(str, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "6": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(context, str) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "7": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback is not None <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "8": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not str: \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "9": "<DED> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "10": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_layer is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "11": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_path is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "12": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_cache is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "13": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(context, str), progress_callback) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "14": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(context, str, str) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "15": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert str is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "16": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(context, str, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "17": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_str is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "18": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback is not None <DED> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "19": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(context, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "20": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, pageMapScanner(useful), progress_callback) \n",
      "21": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback(str, str) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "22": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(str, str) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "23": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(progress, str) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "24": "\n physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "25": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits=interfaces.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "26": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "27": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "28": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert it is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "29": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_columns is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "30": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n strikes = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "31": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback is not None \n strikes = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "32": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert assert progress_callback is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "33": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n names = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "34": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert progress_callback: \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "35": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n pitches = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "36": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n scores = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "37": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.mesmory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "38": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n releases = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "39": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits_ = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "40": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n requests = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "41": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n ) \n",
      "42": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "43": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n claims = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "44": "<IND> physically_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "45": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = interfaces.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "46": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n calls = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "47": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n launches = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "48": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(userful), progress_callback) \n",
      "49": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n updates = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    return bool(name) and name != '_' and len(name) < min_length\n",
    "target_code": "\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_line": "    return bool(name) and name != '_' and len(name) < min_length",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/wemake-python-styleguide",
    "source_filename": "wemake_python_styleguide/helpers/variables.py",
    "target_filename": "wemake_python_styleguide/helpers/variables.py",
    "source_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9^",
    "target_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "predictions": [
      "\n return bool(name) and name!= '_' and len(name)  min_length \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return bool(name) and name!= '_' and len(name)  min_length \n",
      "1": "\n return str(bool(name)) and name!= '_' and len(name)  min_length \n",
      "2": "\n assert bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "3": "\n assert isinstance(name, len, bool) \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "4": "\n return bool(name) and name!= \"_\" and len(name)  min_length \n",
      "5": "\n assert isinstance(name, len, len) -> min_length \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "6": "\n assert bool(name, name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "7": "\n if not bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "8": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "9": "\n return bool(name) and name!= '_' and len(name)  min_length \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "10": "\n return bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "11": "\n return bool(name) and name!= '_' and len(name)  min_length <DED> <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "12": "\n if not bool: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "13": "\n assert name is not None \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "14": "\n return bool(name) and name!= '_' and len(name)  min_length \n <DED> return bool(name) and name!= '_' and len(name)  min_length \n",
      "15": "\n assert isinstance(name, str) \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "16": "\n return bool(name) and name!= '_' and len(name)  min_length <DED> return bool(name) and name!= '_' and len(name)  min_length \n",
      "17": "\n return bool(name) and name!== '_' and len(name)  min_length \n",
      "18": "\n return bool(name) and name!= '_' and len(name)  min_length \n if name is None: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "19": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "20": "\n return bool(name) and name!= ('_' and len(name))  min_length \n",
      "21": "\n assert isinstance(name, len, len) \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "22": "\n return bool(bool(name)) and name!= '_' and len(name)  min_length \n",
      "23": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> <DED> return bool(name) and name!= '_' and len(name)  min_length \n",
      "24": "<DED> return bool(name) and name!= '_' and len(name)  min_length \n",
      "25": "<IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "26": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> if name is None: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "27": "\n assert bool is not None \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "28": "\n return bool(name) and name!= '_' and len(name)  min_length \n if not bool: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "29": "\n callback(bool(name)) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "30": "\n if not bool: \n \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "31": "\n return bool(name) and name!= '_' and len(name)  min_length \n if name is not None: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "32": "\n return bool(name) and name!= '_' and len(name)  min_length <DED> <IND> if not bool: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "33": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> if not bool: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "34": "\n assert bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name))  min_length \n",
      "35": "\n return (bool(name)) and name!= '_' and len(name)  min_length \n",
      "36": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> return bool(name) and name!= '_' and len(name))  min_length \n",
      "37": "\n assert bool(name, name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name))  min_length \n",
      "38": "\n assert bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!== '_' and len(name)  min_length \n",
      "39": "\n assert bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and str(name)  min_length \n",
      "40": "\n return bool(str(name)) and name!= '_' and len(name)  min_length \n",
      "41": "\n return bool(name) and name!= '_' and len(name)  min_length \n return bool(name) and name!= '_' and len(name))  min_length \n",
      "42": "\n return bool(name) and name!= ('_' and len(name)  min_length \n",
      "43": "\n return bool(name) and name!= '_' and len(name)  min_length \n <IND> return bool(name) and name!= '_' and len(name))  min_length \n",
      "44": "\n return bool(name) and name!= '_' and len(name)  min_length \n <IND> return bool(name) and name!= '_' and str(name)  min_length \n",
      "45": "\n return bool(name) and name!= '_' and len(name)  min_length <IND> return bool(name) <DED> name!= '_' and len(name)  min_length \n",
      "46": "\n try: \n <IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "47": "\n return bool(name) and name!= '_' and len(name)  min_length \n <IND> return bool(name) and name!= '_' and min_length \n",
      "48": "\n assert isinstance(name, len, len) -> min_length \n return bool(name) and name!== '_' and len(name)  min_length \n",
      "49": "\n callback(bool(name)) and name!= '_' and len(name)  min_length \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        results = self.fit(model)\n        self._set_running_stage(None, model)\n\n",
    "target_code": "        results = self.fit(model)\n        self._running_stage = None\n\n",
    "warning_line": "        self._set_running_stage(None, model)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `LightningEnum` for 1st positional only parameter to call `Trainer._set_running_stage` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1036,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PyTorchLightning/pytorch-lightning",
    "source_filename": "pytorch_lightning/trainer/trainer.py",
    "target_filename": "pytorch_lightning/trainer/trainer.py",
    "source_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b^",
    "target_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b",
    "predictions": [
      "results = self.fit(model) \n self._running_stage = None \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "results = self.fit(model) \n self._running_stage = None \n \n",
      "1": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage = None \n \n",
      "2": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage(None, model) \n \n",
      "3": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage.set_running_stage(None, model) \n \n",
      "4": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage = self._running_stage(None, model) \n \n",
      "5": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage(None, Model) \n \n",
      "6": "results = self.fit(model) \n self._running_stage(None, Model) \n \n",
      "7": "results = self.fit(model) \n self._running_stage(None, model) \n \n",
      "8": "results = self.fit(model) \n if model is None: \n <IND> self._running_stage = None \n \n",
      "9": "results = self.fit(model) \n assert isinstance(model, 'LightningEnum', None) \n self._running_stage(None, model) \n \n",
      "10": "results = self.fit(model) \n self._running_stage = 0 \n \n",
      "11": "results = self.fit(model) \n assert self._running_stage is not None <DED> self._running_stage(None, model) \n \n",
      "12": "results = self.fit(model) \n self._running_stage(LightningEnum(None, model)) \n \n",
      "13": "results = self.fit(model) \n assert isinstance(model, 'LightningEnum', None) \n self._running_stage(None, Model) \n \n",
      "14": "results = self.fit(model) \n assert self._running_stage is not None \n self._set_running_stage(None, model) \n \n",
      "15": "results = self.fit(model) \n assert self._running_stage is not None <IND> self._running_stage(None, model) \n \n",
      "16": "results = self.fit(model) \n assert isinstance(model, LightningEnum, None) \n self._running_stage(None, Model) \n \n",
      "17": "results = self.fit(model) \n self._running_stage.set_running_stage(None, model) \n \n",
      "18": "results = self.fit(model) \n self._running_stage: Optional[LightningEnum] = None \n \n",
      "19": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage.append(None, model) \n \n",
      "20": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage is not None \n \n",
      "21": "results = self.fit(model) \n assert isinstance(model, 'LightningEnum', None) \n self._running_stage = None \n \n",
      "22": "results = self.fit(model) \n self._running_stage.append(None, Model) \n \n",
      "23": "results = self.fit(model) \n assert isinstance(model, LightningEnum, None) \n self._running_stage(None, model) \n \n",
      "24": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage.set_running_stage(None, Model) \n \n",
      "25": "results = self.fit(model) \n assert isinstance(model, 'LightningEnum') \n self._running_stage(None, model) \n \n",
      "26": "results = self.fit(model) \n assert isinstance(model, 'LightningEnum') \n self._running_stage = None \n \n",
      "27": "results = self.fit(model) \n self._running_stage = None \n <IND>",
      "28": "results = self.fit(model) \n assert isinstance(model, LightningEnum) \n self._running_stage(None, Model) \n \n",
      "29": "results = self.fit(model) \n assert isinstance(model, LightningEnum, None) \n self._running_stage = None \n \n",
      "30": "results = self.fit(model) \n assert isinstance(model, LightningEnum) \n self._running_stage = None \n \n",
      "31": "results = self.fit(model) \n self._running_stage.append(None, model) \n \n",
      "32": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage.result(None, model) \n \n",
      "33": "results = self.fit(model) \n assert isinstance(model, 'LightningEnum') \n self._running_stage(None, Model) \n \n",
      "34": "results = self.fit(model) \n assert isinstance(model, LightningEnum), None \n self._running_stage(None, Model) \n \n",
      "35": "results = self.fit(model) \n self._running_stage.set_running_stage(None, Model) \n \n",
      "36": "results = self.fit(model) \n assert model is not None \n self._running_stage = None \n \n",
      "37": "results = self.fit(model) \n assert isinstance(model, LightningEnum), None) \n self._running_stage(None, Model) \n \n",
      "38": "results = self.fit(model) \n assert isinstance(model, LightningEnum), None) \n self._running_stage = None \n \n",
      "39": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage.get(\"LightningEnum\", None, Model) \n \n",
      "40": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage = None \n <IND>",
      "41": "results = self.fit(model) \n assert isinstance(model, LightningEnum) \n self._running_stage(None, model) \n \n",
      "42": "results = self.fit(model) \n assert isinstance(model, LightningEnum), None) \n self._running_stage(None, model) \n \n",
      "43": "results = self.fit(model) \n self._running_stage.start(None, Model) \n \n",
      "44": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage \n \n",
      "45": "results = self.fit(model) \n assert self._running_stage is not None \n <IND> self._running_stage = None \n \n",
      "46": "results = self.fit(model) \n if not Model: \n <IND> self._running_stage = None \n \n",
      "47": "results = self.fit(model) \n assert self._running_stage is not None \n self._running_stage = self._running_stage(None, Model) \n \n",
      "48": "results = self.fit(model) \n self._running_stage = [] \n \n",
      "49": "results = self.fit(model) \n assert model is not None \n self._running_stage(None, model) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "target_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_line": "        self.query_ethereum_tokens(tokens, self.balances[S_ETH])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 131,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rotki/rotki",
    "source_filename": "rotkehlchen/blockchain.py",
    "target_filename": "rotkehlchen/blockchain.py",
    "source_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282^",
    "target_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "predictions": [
      "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances,"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "1": "<DED> self.owned_eth_tokens.extend(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "2": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "3": "\n <DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "4": "<DED> self.owned_eth_tokens.extend(tokens) \n assert self.balances[S_ETH] is not None \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "5": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], []) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "6": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "7": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH],...]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "8": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], [], Dict[Union[str, EthToken, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "9": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) <IND> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "10": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } <IND>",
      "11": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "12": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], [], Dict[Union[str, EthToken, typing.NonEthTokenBlockchainAsset], FVal]] = { 'per_account': self.balances, 'totals': self.totals } \n",
      "13": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens( <DED> tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "14": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) <DED> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "15": "\n <IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "16": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens( <IND> tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "17": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], bool) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "18": "<DED> self.owned_eth_tokens.extend(tokens) <IND> self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "19": "<DED> self.owned_eth_tokens.extend(tokens) <DED> self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "20": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } <DED> \n",
      "21": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "22": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances.S_ETH) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "23": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n <IND> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "24": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(...self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "25": "<DED> self.owned_eth_tokens.extend(tokens) \n assert self.balances[S_ETH] is not None \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "26": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(str, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "27": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens (tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "28": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n assert self.balances is not None \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "29": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(values, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "30": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(eths, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "31": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens( <DED> tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "32": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, str(self.balances[S_ETH])) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "33": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals \\ \n",
      "34": "<DED> self.own_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "35": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], elif isinstance(tokens, elif isinstance(tokens))) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "36": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH])) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "37": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n <DED> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "38": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': Self.balances, 'totals': self.totals } \n",
      "39": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n if not self.balances is None: \n <IND> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "40": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens( <DED> tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "41": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(int, tokens.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "42": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], elif isinstance(tokens)) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "43": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } <DED> <IND>",
      "44": "<DED> self.owned_eth_tokens.extend(tokens) \n assert self.balances[S_ETH] is not None \n self.query_ethereum_tokens(tokens, self.balances) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "45": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': Self.totals } \n",
      "46": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { \"per_account': self.balances, 'totals': self.totals } \n",
      "47": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], [], Dict[Union[str, EthToken, typing.NonEthTokenBlockchainAsset], FVal]]] = { 'per_account': self.balances, 'totals': self.totals } \n",
      "48": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH], tuple) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "49": "<IND> self.owned_eth_tokens.extend(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>assert {} == load_data(\n        datadir='',\n        pairs=[],\n",
    "target_code": "    <IND>assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_line": "        datadir='',",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 373,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "tests/data/test_history.py",
    "target_filename": "tests/data/test_history.py",
    "source_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf^",
    "target_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "predictions": [
      "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs=[], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "1": "<DED> assert { } == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "2": "\n assert { } == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "3": "<IND> assert { } == load_data( <DED> datadir=Path(''), \n pairs=[], \n",
      "4": "<IND> assert { } == load_data( \n datadir=Path('')), \n pairs=[], \n",
      "5": "<IND> assert { } == load_data( <IND> datadir=Path(''), \n pairs=[], \n",
      "6": "<IND> assert { } == load_data( \n datadir=Path('', pairs=[], \n",
      "7": "<IND> assert { } == load_data( \n datadir=Path(''), <IND> pairs=[], \n",
      "8": "<IND> assert { } == load_data( \n datadir=Path(), \n pairs=[], \n",
      "9": "<IND> assert { } == load_data( \n Datadir=Path(''), \n pairs=[], \n",
      "10": "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs=[], <IND>",
      "11": "<IND> assert { } == load_data( \n datadir=Path(\", ''), \n pairs=[], \n",
      "12": "<IND> assert { } == load_data( \n datadir=Path(''), <DED> pairs=[], \n",
      "13": "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs=[], <DED>",
      "14": "<IND> assert { } == load_data( \n _datadir=Path(''), \n pairs=[], \n",
      "15": "<IND> assert { } == load_data( \n datadir=Path('', [], \n pairs=[], \n",
      "16": "<IND> assert { } == load_data( \n self.datadir=Path(''), \n pairs=[], \n",
      "17": "<IND> assert { } == load_data( \n datadir=Path( { } ), \n pairs=[], \n",
      "18": "<IND> assert { } == load_data( \n datadir=Path( { } )), \n pairs=[], \n",
      "19": "<IND> assert { } == load_data( \n datadir = '', \n pairs=[], \n",
      "20": "<IND> assert { } == loading_data( \n datadir=Path(''), \n pairs=[], \n",
      "21": "<IND> assert { } == load_data( \n datadir=Path()= { }, \n pairs=[], \n",
      "22": "<IND> assert { } == loaded_data( \n datadir=Path(''), \n pairs=[], \n",
      "23": "<IND> assert { } == load_data( \n datadir==Path(''), \n pairs=[], \n",
      "24": "<IND> assert { } == run_data( \n datadir=Path(''), \n pairs=[], \n",
      "25": "<IND> assert { } == load_data( \n datadir=Path('', ''), \n pairs=[], \n",
      "26": "<IND> assert { } == buffer_data( \n datadir=Path(''), \n pairs=[], \n",
      "27": "<IND> assert { } == load_data( \n datadir=Path(' { } ), \n pairs=[], \n",
      "28": "<IND> assert { } == load_data( \n datadir=Path(this, ''), \n pairs=[], \n",
      "29": "<IND> assert { } =load_data( \n datadir=Path(''), \n pairs=[], \n",
      "30": "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs= [], \n",
      "31": "<IND> assert { } == load_data( \n datadir=Path(, ''), \n pairs=[], \n",
      "32": "<IND> assert { } == load_data( \n (datadir=Path(''), \n pairs=[], \n",
      "33": "<IND> assert { } == load_data( \n datadir=Path([], ''), \n pairs=[], \n",
      "34": "<IND> assert { } == load_data( \n str=Path(''), \n pairs=[], \n",
      "35": "<IND> assert { } == load_data( \n datadir= Path(''), \n pairs=[], \n",
      "36": "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs=[], <DED> \n",
      "37": "<IND> assert { } == load_data( \n datadir=Path(' } ), \n pairs=[], \n",
      "38": "<IND> assert { } == load_data( \n datadir=Path([], ''], \n pairs=[], \n",
      "39": "<IND> assert { } == load_data( \n datadir=Path[''], \n pairs=[], \n",
      "40": "<IND> assert { } == load_data( \n datadir=Path(*), \n pairs=[], \n",
      "41": "<IND> assert { } == load_data( \n filename=Path(''), \n pairs=[], \n",
      "42": "<IND> assert { } == load_data( \n files=Path(''), \n pairs=[], \n",
      "43": "<DED> assert { } == load_data( <DED> datadir=Path(''), \n pairs=[], \n",
      "44": "<IND> assert { } == load_data( \n datadir=Path( { }, '' } ), \n pairs=[], \n",
      "45": "<IND> assert { } == load_data( \n datadir=Path(''), \n pairs=[]), \n",
      "46": "<DED> assert { } == load_data( \n datadir=Path('', pairs=[], \n",
      "47": "<IND> assert { } == load_data( \n set=Path(''), \n pairs=[], \n",
      "48": "<IND> assert { } == load_data( \n key=Path(''), \n pairs=[], \n",
      "49": "<IND> assert { } == load_data( \n datadir=Path, \n pairs=[], \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
    "target_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_line": "        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/cli/simple_table.py",
    "target_filename": "airflow/cli/simple_table.py",
    "source_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3^",
    "target_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "predictions": [
      "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "1": "<DED> rows = [d.values() for d in data] \n output: Union[Dict[str, str], typing.Sequence[str], str] = [rows, tablefmt=\"plain\", headers=data[0].keys()] \n print(output) \n",
      "2": "<IND> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "3": "<DED> rows = [d.values() for d in data] \n output = tabulate(str, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "4": "<DED> rows = [d.values() for d in data] \n output: Union[dict[str, str], typing.Sequence[str], str] = [rows, tablefmt=\"plain\", headers=data[0].keys()] \n print(output) \n",
      "5": "<DED> rows = [d.values() for d in data] \n output = tablefmt(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "6": "<DED> rows = [d.values() for d in data] \n output: Union[Dict[str, str], typing.Sequence[str], str] = (rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "7": "<DED> rows = [d.values() for d in data] \n output = tabulate(int(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "8": "<DED> rows = [d.values() for d in data] \n output: Union[Dict[str, str], typing.Sequence[str], str] = [rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "9": "<DED> rows = [d.values() for d in data] \n output = tabulate((rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "10": "<DED> rows = [d.values() for d in data] \n output = [dict[str, str], typing.Sequence[str], str](rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "11": "<DED> rows = [d.values() for d in data] \n output = [dict[str, str], typing.Sequence[str], str] \n print(output) \n",
      "12": "<DED> rows = [d.values() for d in data] \n output = tabulate(types, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "13": "<DED> rows = [d.values() for d in data] \n output = tabulate(list(rows), tablefmt=\"plain\", headers=list(data[0].keys())) \n print(output) \n",
      "14": "<DED> rows = [d.values() for d in data] \n output = tabulate(headers, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "15": "<DED> rows = [d.values() for d in data] \n output = column(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "16": "<DED> rows = [d.values() for d in data] \n output = [dict[str, str], typing.Sequence[str], str](rows) \n print(output) \n",
      "17": "<DED> rows = [d.values() for d in data] \n output = Tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "18": "<DED> rows = [d.values() for d in data] \n output = tabulate(list(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "19": "<DED> rows = [d.values() for d in data] \n output: Union[dict[str, str], typing.Sequence[str], str] = [rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "20": "<DED> rows = [d.values() for d in data] \n output = tabulate(logs, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "21": "<DED> rows = [d.values() for d in data] \n output = tabulate(global[rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "22": "<DED> rows = [d.values() for d in data] \n output = tabulate(rs, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "23": "<DED> rows = [d.values() for d in data] \n output = [dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "24": "<DED> rows = [d.values() for d in data] \n output = tabulate(int(rows), tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "25": "<DED> rows = [d.values() for d in data] \n output = tabulate(this.rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "26": "<DED> rows = [d.values() for d in data] \n output = tabulate(list(rows), tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "27": "<DED> columns = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "28": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=data[0].keys()]) \n print(output) \n",
      "29": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=d.keys()) \n print(output) \n",
      "30": "<DED> rows = [d.values() for d in data] \n output = tabulate(keys, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "31": "<DED> rows = [d.values() for d in data] \n output= tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "32": "<DED> rows = [d.values() for d in data] \n output = d.keys(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "33": "<DED> rows = [d.values() for d in data] \n output = tabulate(sheets, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "34": "<DED> rows = [d.values() for d in data] \n output = tabulate(dict(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "35": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, column(tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "36": "<DED> rows for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "37": "<DED> rows = [d.values() for d in data] \n output = tabulate(token, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "38": "<DED> rows = [d.values() for d in data] \n output = tabulate(mocks, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "39": "\n <DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "40": "<DED> rows = [d.values() for d in data] \n output = tabulate(all(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "41": "<DED> rows = [d.values() for d in data] \n output = [dict[str, str], typing.Sequence[str], str][0].keys()] \n print(output) \n",
      "42": "<DED> rows = [d.values() for d in data] \n output = tabulate(items, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "43": "<DED> rows = [d.values() for d in data] \n output = tabulate(quotes, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "44": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=typing.Keys()) \n print(output) \n",
      "45": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys()) \n print(output) \n",
      "46": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) <IND> print(output) \n",
      "47": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) <IND>",
      "48": "<DED> rows = [d.values() for d in data] \n output = tabulate(tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "49": "<DED> rows = [d.values() for d in data] \n output: Union[Dict[str, str], typing.Sequence[str], str] = [d.rows(), d.values()] \n print(output) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(item))\n        <DED><DED>return frozenset(intersection_of)\n",
    "target_code": "                <IND>r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(typing.cast(str, item)))\n        <DED><DED>return frozenset(intersection_of)\n",
    "warning_line": "                intersection_of.append(ont.get_term(item))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 441,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/term.py",
    "target_filename": "pronto/term.py",
    "source_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8^",
    "target_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "predictions": [
      "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "1": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "2": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(t.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "3": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "4": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "5": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> <DED> return frozenset(intersection_of) \n",
      "6": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> \n return frozenset(intersection_of) \n",
      "7": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "8": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(intersection_of)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "9": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "10": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> <DED> return frozenset(intersection_of) \n",
      "11": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "12": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n \n intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "13": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(t)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "14": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(item) \n <DED> <DED> return frozenset(intersection_of) \n",
      "15": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(str(ont.get_term(item))) \n <DED> <DED> return frozenset(intersection_of) \n",
      "16": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(intersection_of) \n <DED> <DED> return frozenset(intersection_of) \n",
      "17": "\n <IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "18": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "19": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(t.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "20": "\n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "21": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> <IND> return frozenset(intersection_of) \n",
      "22": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "23": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) <IND> <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "24": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "25": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont[t.get_term(item)]) \n <DED> <DED> return frozenset(intersection_of) \n",
      "26": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "27": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> <DED> return frozenset(intersection_of) \n",
      "28": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(str, item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "29": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "30": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> \n return frozenset(intersection_of) \n",
      "31": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term()) \n <DED> <DED> return frozenset(intersection_of) \n",
      "32": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) <DED> <DED> return frozenset(intersection_of) \n",
      "33": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "34": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term[item]) \n <DED> <DED> return frozenset(intersection_of) \n",
      "35": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(intersection_of)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "36": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) <IND> <DED> <DED> return frozenset(intersection_of) \n",
      "37": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) <DED> <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "38": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(t.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "39": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: <IND> <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "40": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "41": "<IND> r, t = item <IND> intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "42": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(t.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "43": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> \n return frozenset(intersection_of) \n",
      "44": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) <IND>",
      "45": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> <IND> return frozenset(intersection_of) \n",
      "46": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(Intersection_of) \n",
      "47": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont[str, t]) \n <DED> <DED> return frozenset(intersection_of) \n",
      "48": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: <DED> <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "49": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(t.get_term(item)) \n \n <DED> <DED> return frozenset(intersection_of) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>target1, target2 = _get_targets(var, get_players(var), player)\n\n",
    "target_code": "\n    <DED>target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_line": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/roles/madscientist.py",
    "target_filename": "src/roles/madscientist.py",
    "source_changeid": "3b3870c9f365944134225c5b7364430c5bce0158^",
    "target_changeid": "3b3870c9f365944134225c5b7364430c5bce0158",
    "predictions": [
      "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "1": "\n <DED> target1, target2 = _get_targets(var, get_users(var), player) \n \n",
      "2": "\n <DED> target1, target2 = _get_targets(var, get_get_players(var), player) \n \n",
      "3": "\n <DED> target1, target2 = _get_targets(var, get_targets(var), player) \n \n",
      "4": "\n <DED> target1, target2 = _get_targets(var, get_get_targets(var), player) \n \n",
      "5": "\n <DED> target1, target2 = _get_targets(var, get_list(var), player) \n \n",
      "6": "\n <DED> target1, target2 = _get_targets(var, get_to_players(var), player) \n \n",
      "7": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "8": "\n <DED> target1, target2 = _get_targets(var, get_actors(var), player) \n \n",
      "9": "\n <DED> target2, target2 = _get_targets(var, get_players(var), player) \n \n",
      "10": "\n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "11": "\n <DED> target1, target2 = _get_targets(var, get__players(var), player) \n \n",
      "12": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n if _get_targets is not None: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "13": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "14": "\n <DED> target1, target2 = _get_targets(var, get_append_players(var), player) \n \n",
      "15": "\n \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "16": "\n <DED> target1, target2 = _get_targets(var, get_attr(var), player) \n \n",
      "17": "\n <DED> target1, target2 = _get_targets(var, get_players(var), _get_targets()) \n \n",
      "18": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_get_players(var), player) \n \n",
      "19": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n <IND>",
      "20": "\n <DED> target1, target2 = _get_targets(var, get_vars(var), player) \n \n",
      "21": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n if _get_targets: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "22": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n if _get_targets is None: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "23": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> if _get_targets is not None: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "24": "\n <DED> target1, target2 = _get_targets(var, get_players(var)) \n \n",
      "25": "\n <DED> target1, target2 = _get_targets(var, get_instances(var), player) \n \n",
      "26": "\n <DED> target1, target2 = _get_targets(var, get_slots(var), player) \n \n",
      "27": "<DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "28": "\n <DED> target1, target2 = _get_targets(var, get_msg(var), player) \n \n",
      "29": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n if not _get_targets: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "30": "\n <DED> target1, target2 = _get_targets(var, get_from_players(var), player) \n \n",
      "31": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_users(var), player) \n \n",
      "32": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "33": "\n <DED> target1, target2 = _get_targets(var, get_players(var), _get_targets(var), player) \n \n",
      "34": "\n <DED> target1, target2 = _get_targets(var, get_players(var), _get_targets(player)) \n \n",
      "35": "\n <DED> target1, target2 = _get_targets(var, get_players(var, player)) \n \n",
      "36": "\n <DED> target1, target2 = _get_targets(var, get_proxy_players(var), player) \n \n",
      "37": "\n <DED> target1, target2 = _get_targets(var, get_clients(var), player) \n \n",
      "38": "\n <DED> target1, target2 = _get_targets(var, get_set_players(var), player) \n \n",
      "39": "\n <DED> target1, target2 = _get_targets(var, get_types(var), player) \n \n",
      "40": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n if _get_targets: \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "41": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_targets(var), player) \n \n",
      "42": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n if not target2: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "43": "\n <DED> target1, target2 = _get_targets(var, get_of_players(var), player) \n \n",
      "44": "\n <DED> target1, target2 = _get_targets(var, get_metadata(var), player) \n \n",
      "45": "\n <DED> target1, target2 = _get_targets(var, get_values(var), player) \n \n",
      "46": "\n <DED> target1, target2 = _get_targets(var, get_self.players(var), player) \n \n",
      "47": "\n <DED> target1, target2 = _get_targets(var, get_mocks(var), player) \n \n",
      "48": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n target1, target2 = _get_targets(var, get_get_players(var), player) \n \n",
      "49": "\n <DED> target1, target2 = _get_targets(var, get_players(var), _get_targets(var)) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED><DED>binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "target_code": "    <DED><DED>binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_line": "    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 115,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "datatheorem/strongarm",
    "source_filename": "tests/utils.py",
    "target_filename": "tests/utils.py",
    "source_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36^",
    "target_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "predictions": [
      "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "1": "\n <DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "2": "<IND> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "3": "<DED> \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "4": "<DED> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "5": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, 'MachoBinary') \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "6": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, MachoBinary) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "7": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "8": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyticzer.get_analyzer(binary) \n",
      "9": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyser = MachoAnalyzer.get_analyzer(binary) \n",
      "10": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, MachoAnalyzer) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "11": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, MasoAnalyzer) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "12": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, Kasper) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "13": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, MachoBinary) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "14": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer: MachoAnalyzer.get_analyzer(binary) \n",
      "15": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "16": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, assert) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "17": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n evaluater = MachoAnalyzer.get_analyzer(binary) \n",
      "18": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, Kafala) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "19": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() <IND> analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "20": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analysisr = MachoAnalyzer.get_analyzer(binary) \n",
      "21": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert 'MachoBinary' is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "22": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) <DED> \n",
      "23": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, Musk) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "24": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, mast) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "25": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert isinstance(binary, Model) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "26": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "27": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n \n",
      "28": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer= MachoAnalyzer.get_analyzer(binary) \n",
      "29": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary,...) \n",
      "30": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() <DED> analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "31": "\n <DED> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "32": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) <IND>",
      "33": "\n <DED> \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "34": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = TakoAnalyzer.get_analyzer(binary) \n",
      "35": "\n <IND> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "36": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer[binary].get_analyzer(binary) \n",
      "37": "<IND> \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "38": "<IND> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "39": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalysiszer.get_analyzer(binary) \n",
      "40": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n if not compiled_code_bin_path: \n",
      "41": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n ) \n",
      "42": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(bbinary) \n",
      "43": "\n \n <DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "44": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n <IND>",
      "45": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary, []) \n",
      "46": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary:binary) \n",
      "47": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer() \n",
      "48": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary).get_analyzer(binary) \n",
      "49": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer=MachoBinary.get_analyzer(binary) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>continue\n            <DED>self.__check_destination_memo(account_resp, index, destination)\n",
    "target_code": "                <IND>continue\n            <DED>assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_line": "            self.__check_destination_memo(account_resp, index, destination)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 410,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/server.py",
    "target_filename": "stellar_sdk/server.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "1": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "2": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "3": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n ) \n",
      "4": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict, Dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "5": "<IND> continue \n <IND> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "6": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "7": "<IND> continue \n <IND> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "8": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict), \n self.__check_destination_memo(account_resp, index, destination) \n",
      "9": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n if not isinstance(destination, Dict): \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "10": "<IND> continue \n <DED> self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "11": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n if isinstance(destination, Dict): \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "12": "<IND> continue \n <DED> assert account_resp is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "13": "<IND> continue \n <DED> assert (account_resp, index, destination) \n assert isinstance(destination, Dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "14": "<IND> continue \n <IND> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "15": "<IND> continue \n <DED> assert self.__check_destination_memo is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "16": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict) \n self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "17": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo(index, destination) \n",
      "18": "<DED> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "19": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict, Dict) \n self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "20": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if not isinstance(destination, Dict): \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "21": "<DED> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "22": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination, Dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "23": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n \n",
      "24": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict), \n self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "25": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n <IND>",
      "26": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict) \n self.__check_destination_memo(account_resp, index, Destination) \n",
      "27": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n <DED> if not isinstance(destination, Dict): \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "28": "<IND> continue \n <DED> self.__check_destination_memo(self.account_resp, index, destination) \n",
      "29": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n if isinstance(destination, Dict): \n <IND> self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "30": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo(int, Dict[str, Any]) \n",
      "31": "<IND> continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "32": "<IND> continue \n <DED> assert index is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "33": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n <DED> assert isinstance(destination, Dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "34": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n return self.__check_destination_memo(index, destination) \n",
      "35": "<IND> continue \n <IND> assert account_resp is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "36": "<IND> continue \n <DED> self.__check_destination_memo( <DED> account_resp, index, destination) \n",
      "37": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n if not isinstance(destination, Dict): \n <IND> self.__check_destination_memo = self.__check_destination_memo(account_resp, index, destination) \n",
      "38": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo = self.__check_destination_memo(int, Dict[str, Any]) \n",
      "39": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n assert isinstance(destination, Dict, Dict) \n self.__check_destination_memo(account_resp, index, Destination) \n",
      "40": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n return self.__check_destination_memo(account_resp, index, destination) \n",
      "41": "\n <IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "42": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, Destination) \n",
      "43": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "44": "<IND> continue \n <DED> self.__check_destination_memo( <DED> account_resp, index, destination) \n",
      "45": "<IND> continue \n <DED> self.__check_destination_memo( <IND> account_resp, index, destination) \n",
      "46": "<IND> continue \n \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "47": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if not isinstance(destination, Dict): \n <IND> return \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "48": "<IND> continue \n <DED> assert isinstance(account_resp, index, destination) \n self.__check_destination_memo = self.__check_destination_memo(index, destination) \n",
      "49": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, Destination) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_line": "                    else is_true(simplify(condition))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1357,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "1": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(simplify(condition))) \n ) \n",
      "2": "if type(condition) == bool \n else is_true(condition) \n ) \n",
      "3": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(condition)) \n ) \n",
      "4": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression())) \n ) \n",
      "5": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression.simplify(condition)) \n ) \n",
      "6": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression()) \n ) \n",
      "7": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression)) \n ) \n",
      "8": "if type(condition) == bool \n else assert condition is not None \n ) \n",
      "9": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(context)) \n ) \n",
      "10": "if type(condition) == bool \n else async is_true(simplify(condition)) \n ) \n",
      "11": "if type(condition) == bool \n else is_true('mythril.laser.smt.expression.Expression')) \n ) \n",
      "12": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression[str, condition]) \n ) \n",
      "13": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression[str]) \n ) \n",
      "14": "if type(condition) == bool \n else is_true(self.condition) \n ) \n",
      "15": "if type(condition) == bool \n else is_true(f\"mythril.laser.smt.expression.Expression\")) \n ) \n",
      "16": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(simplify[condition])) \n ) \n",
      "17": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(ctx, condition)) \n ) \n",
      "18": "if type(condition) == bool \n else is_true(f\"mythril.laser.smt.expression.Expression\") \n ) \n",
      "19": "if type(condition) == bool \n else * is_true(simplify(condition)) \n ) \n",
      "20": "if type(condition) == bool \n assert condition is not None else is_true(simplify(condition)) \n ) \n",
      "21": "if type(condition) == bool \n else is_true(...condition) \n ) \n",
      "22": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression[simplify(condition)]) \n ) \n",
      "23": "if type(condition) == bool \n is_true(simplify(condition)) \n ) \n",
      "24": "if type(condition) == bool \n else assert condition condition is not None \n ) \n",
      "25": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(context, condition)) \n ) \n",
      "26": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(simplify(condition))) \n ) <IND>",
      "27": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(test(condition))) \n ) \n",
      "28": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(str, condition)) \n ) \n",
      "29": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression[0]) \n ) \n",
      "30": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(ctx)) \n ) \n",
      "31": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.expression(simplify(condition))) \n ) \n",
      "32": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(simplify(condition))) <IND> ) \n",
      "33": "if type(condition) == bool \n else async is_true(str(mythril.laser.smt.expression.Expression))) \n ) \n",
      "34": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression[str, condition)) \n ) \n",
      "35": "if type(condition) == bool \n else is_true(instance(condition)) \n ) \n",
      "36": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(condition)) \n ) \n",
      "37": "if type(condition) == bool \n else express(mythril.laser.smt.expression.Expression(simplify(condition))) \n ) \n",
      "38": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(simplify(condition))) <DED> ) \n",
      "39": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(str(condition))) \n ) \n",
      "40": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression[simplify(condition))) \n ) \n",
      "41": "if type(condition) == bool \n else is_true(f\"mythril.laser.smt.expression.Expression\", condition)) \n ) \n",
      "42": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression, condition)) \n ) \n",
      "43": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(), condition) \n ) \n",
      "44": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression('simplify')) \n ) \n",
      "45": "if type(condition) == bool \n else if condition is not None: \n <IND> is_true(mythril.laser.smt.expression.Expression)) \n ) \n",
      "46": "if type(condition) == bool \n else express(mythril.laser.smt.expression.Expression(condition)) \n ) \n",
      "47": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(subscription)) \n ) \n",
      "48": "if type(condition == bool \n else is_true(simplify(condition)) \n ) \n",
      "49": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression')) \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "target_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_line": "                    cmd [\"singularity\", \"build\", name,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/singularity.py",
    "target_filename": "cwltool/singularity.py",
    "source_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61^",
    "target_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "predictions": [
      "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "1": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "2": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "3": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "4": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", \"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "5": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "6": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", build, name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "7": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "8": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "9": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "10": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = (Tuple[str, str, str, str]) \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"]) \n",
      "11": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "12": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = \"build\", name \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "13": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "14": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd (\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "15": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", build], name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "16": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = [\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "17": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd (\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "18": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = (Tuple[str, str, str, str]) \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "19": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "20": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "21": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "22": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "23": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "24": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"]) \n",
      "25": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "26": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd(\"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "27": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", \"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "28": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "29": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", build], name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "30": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "31": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = build(\"singularity\", \"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "32": "<IND> name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "33": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "34": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "35": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", build, name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "36": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd (\"singularity\", build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "37": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd ['singularity', \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "38": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd (\"singularity\", build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "39": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "40": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"singularity\", \"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"]) \n",
      "41": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(\"build\", name), \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "42": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"build\", name,... \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "43": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = \"build\", name \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"]) \n",
      "44": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "45": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(Tuple[str, str, str, str]) \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "46": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd=list(Tuple[str, str, str, str]) \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "47": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "48": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", name, <IND> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "49": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = str(Tuple[str, str, str, str]) \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"]) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order.encode('utf8')+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "target_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "warning_line": "        outfile.write(order.encode('utf8')+'\\n')",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 82,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "psychopy/psychopy",
    "source_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "target_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3^",
    "target_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "predictions": [
      "if '--out' in sys.argv: \n <IND> outfile.write(str(order)+' \\ n') \n <DED> elif not order+' \\ n' in target: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if '--out' in sys.argv: \n <IND> outfile.write(str(order)+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "1": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "2": "if '--out' in sys.argv: \n <IND> outfile.write(str(order+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "3": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8'))+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "4": "if '--out' in sys.argv: \n <IND> outfile.write(str(order).encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "5": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n \n <DED> elif not order+' \\ n' in target: \n",
      "6": "if '--out' in sys.argv: \n <IND> outfile.write(outfile.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "7": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <IND> elif not order+' \\ n' in target: \n",
      "8": "if '--out' in sys.argv: \n <IND> outfile.write(str(order, 'utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "9": "if '--out' in sys.argv: \n <DED> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "10": "if '--out' in sys.argv: \n <IND> outfile.write(str(order)+' \\ n') \n \n <DED> elif not order+' \\ n' in target: \n",
      "11": "if '--out' in sys.argv: \n <IND> outfile.write(str('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "12": "if '--out' in sys.argv: \n <IND> outfile.write(str(order)+' \\ n') \n <IND> elif not order+' \\ n' in target: \n",
      "13": "if '--out' in sys.argv: \n <IND> outfile.write(order+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "14": "if '--out' in sys.argv: \n <IND> outfile.write(outfile.write('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "15": "if '--out' in sys.argv: \n <IND> str(outfile.write(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "16": "if '--out' in sys.argv: \n <IND> outfile.write(str(order),'\\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "17": "if '--out' in sys.argv: \n \n outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "18": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8'))+' \\ n') \n \n <DED> elif not order+' \\ n' in target: \n",
      "19": "if '--out' in sys.argv: \n <DED> outfile.write(str(order)+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "20": "if '--out' in sys.argv: <DED> <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "21": "if '--out' in sys.argv: <IND> <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "22": "if '--out' in sys.argv: \n <IND> outfile.write(io.TextIOBase.write('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "23": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8'))+' \\ n') \n <IND> elif not order+' \\ n' in target: \n",
      "24": "if '--out' in sys.argv: \n <IND> outfile.write(str(order['utf8']+' \\ n']) \n <DED> elif not order+' \\ n' in target: \n",
      "25": "if '--out' in sys.argv: \n <IND> outfile.write(argv+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "26": "if '--out' in sys.argv: \n <IND> outfile.write(isinstance('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "27": "if '--out' in sys.argv: \n <IND> outfile.write(str(order+' \\ n')) \n \n <DED> elif not order+' \\ n' in target: \n",
      "28": "if '--out' in sys.argv: \n <IND> outfile.write(text.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "29": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: <IND>",
      "30": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "31": "if '--out' in sys.argv: \n <IND> outfile.write(str(1)+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "32": "if '--out' in sys.argv: \n <IND> outfile.write(str(order+' \\ n')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "33": "if '--out' in sys.argv: \n <IND> outfile.write(str(order('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "34": "if '--out' in sys.argv: \n \n outfile.write(str(order)+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "35": "if '--out' in sys.argv: \n <IND> str(outfile.write(str('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "36": "if '--out' in sys.argv: \n <IND> outfile.write(str+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "37": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: <DED>",
      "38": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n \n <IND> elif not order+' \\ n' in target: \n",
      "39": "if '--out' in sys.argv: \n <IND> outfile.write(str(order+' \\ n')) \n <IND> elif not order+' \\ n' in target: \n",
      "40": "if '--out' in sys.argv: \n <IND> str(outfile.write(order+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "41": "if '--out' in sys.argv: \n <IND> outfile.write(str(order +'\\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "42": "if '--out' in sys.argv: \n <IND> outfile.write(write.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "43": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' ^ n' in target: \n",
      "44": "if '--out' in sys.argv: \n <IND> outfile.write(str(order) +'\\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "45": "if '--out' in sys.argv: \n <IND> outfile.write(decode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "46": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n \n \n elif not order+' \\ n' in target: \n",
      "47": "if '--out' in sys.argv: \n <IND> outfile.write(str(order)+' \\ n') \n <DED> elif not order+' \\ n' in target: <IND>",
      "48": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not ordered+' \\ n' in target: \n",
      "49": "if '--out' in sys.argv: \n <IND> outfile.write(str(order +' \\ n')) \n <DED> elif not order+' \\ n' in target: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": true,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n\n",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            <IND>state[config.url_id] = scrapper_stat\n\n",
    "warning_line": "        state[config.url_id] = scrapper_stat",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "obsei/obsei",
    "source_filename": "obsei/source/reddit_scrapper.py",
    "target_filename": "obsei/source/reddit_scrapper.py",
    "source_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c^",
    "target_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "predictions": [
      "last_index = since_id \n state[config.url_id] = scrapper_stat \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "1": "last_index = since_id \n assert isinstance(str, config.url_id) \n state[config.url_id] = scrapper_stat \n \n",
      "2": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n state[config.url_id] = scrapper_stat \n \n",
      "3": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "4": "last_index = since_id \n assert scrapper_stat is not None \n state[config.url_id] = scrapper_stat \n \n",
      "5": "last_index = since_id \n assert last_str is not None \n state[config.url_id] = scrapper_stat \n \n",
      "6": "last_index = since_id \n assert isinstance(str, scrapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "7": "last_index = since_id \n assert isinstance(str, str) \n state[config.url_id] = scrapper_stat \n \n",
      "8": "last_index = since_id \n state[config.url_id] = (str, scrapper_stat) \n \n",
      "9": "last_index = since_id \n assert isinstance(str, config.url_id, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "10": "last_index = since_id \n state[config.url_id] = dict.__setitem__ \n \n",
      "11": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n assert isinstance(str, str) \n state[config.url_id] = scrapper_stat \n \n",
      "12": "last_index = since_id \n assert that isinstance(str, config.url_id) \n state[config.url_id] = scrapper_stat \n \n",
      "13": "last_index = since_id \n assert has_stat is not None \n state[config.url_id] = scrapper_stat \n \n",
      "14": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n assert isinstance(str, scrapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "15": "last_index = since_id \n if not state: \n <IND> state[config.url_id] = scrapper_stat \n \n",
      "16": "last_index = since_id \n assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "17": "last_index = since_id \n state[config.url_id] = scrapper_stat \n <IND>",
      "18": "last_index = since_id \n assert isinstance(str, scrapper_stat, config) \n state[config.url_id] = scrapper_stat \n \n",
      "19": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n if not state[config.url_id] = scrapper_stat \n \n",
      "20": "last_index = since_id \n assert isinstance(str, config.url_id): \n <IND> state[config.url_id] = scrapper_stat \n \n",
      "21": "last_index = since_id \n assert last_id is not None \n state[config.url_id] = scrapper_stat \n \n",
      "22": "last_index = since_id \n assert \"str\" is not None \n state[config.url_id] = scrapper_stat \n \n",
      "23": "last_index = since_id \n state[config.url_id] = Scrapper_stat \n \n",
      "24": "last_index = since_id \n assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "25": "last_index = since_id \n assert it is not None \n state[config.url_id] = scrapper_stat \n \n",
      "26": "last_index = since_id \n state[config.url_id] = str(str, scrapper_stat) \n \n",
      "27": "last_index = since_id \n assert isinstance(str, config.url_id) \n if not state[config.url_id] = scrapper_stat \n \n",
      "28": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n state[config.url_id, scrapper_stat] = scrapper_stat \n \n",
      "29": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n ) \n state[config.url_id] = scrapper_stat \n \n",
      "30": "last_index = since_id \n assert last_config.url_id is not None \n state[config.url_id] = scrapper_stat \n \n",
      "31": "last_index = since_id \n assert'str' is not None \n state[config.url_id] = scrapper_stat \n \n",
      "32": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n assert isinstance(str, scrapper_stat, dict.__setitem__) \n state[config.url_id] = scrapper_stat \n \n",
      "33": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "34": "last_index = since_id \n state[config.url_id, scrapper_stat] = scrapper_stat \n \n",
      "35": "last_index = since_id \n assert str is not None \n state[config.url_id] = scrapper_stat \n \n",
      "36": "last_index = since_id \n assert isinstance(str, config) \n state[config.url_id] = scrapper_stat \n \n",
      "37": "last_index = since_id \n assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat, config.url_id) \n state[config.url_id] = scrapper_stat \n \n",
      "38": "last_index = since_id \n assert isinstance(str, config.url_id) \n state[config.url_id, scrapper_stat] = scrapper_stat \n \n",
      "39": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n state[config.url_id] = scrapper_stat \n <IND>",
      "40": "last_index = since_id \n state[config.url_id] = list(str, scrapper_stat) \n \n",
      "41": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n if not state[config.url_id] = scrapper_stat \n <IND> assert isinstance(str, str) \n state[config.url_id] = scrapper_stat \n \n",
      "42": "last_index = since_id \n positional[config.url_id] = scrapper_stat \n \n",
      "43": "last_index = since_id \n assert isinstance(str, config.url_id) <DED> \n state[config.url_id] = scrapper_stat \n \n",
      "44": "last_index = since_id \n assert isinstance(str, config.url_id) and scrapper_stat \n state[config.url_id] = scrapper_stat \n \n",
      "45": "last_index = since_id \n assert current_stat is not None \n state[config.url_id] = scrapper_stat \n \n",
      "46": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n if not state[config.url_id] = scrapper_stat \n <DED> assert isinstance(str, str) \n state[config.url_id] = scrapper_stat \n \n",
      "47": "last_index = since_id \n assert isinstance(str, scrapper_stat, config.url_id) \n if not state[config.url_id] = scrapper_stat \n <IND>",
      "48": "last_index = since_id \n assert isinstance(str, config.url_id) \n if not state[config.url_id] = scrapper_stat \n <IND> assert isinstance(str, str) \n state[config.url_id] = scrapper_stat \n \n",
      "49": "last_index = since_id \n assert isinstance(str, scrapper_stat), config.url_id = scrapper_stat \n state[config.url_id] = scrapper_stat \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            data,\n            1337,\n            'promote',\n",
    "target_code": "            data,\n            UserID(1337),\n            'promote',\n",
    "warning_line": "            1337,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `UserID` for 2nd positional only parameter to call `JubeatProp._modify_profile` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/tests/test_JubeatProp.py",
    "target_filename": "bemani/tests/test_JubeatProp.py",
    "source_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7^",
    "target_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7",
    "predictions": [
      "data, \n UserID(1337), \n 'promote', \n"
    ],
    "correct": true,
    "top_five": {
      "0": "data, \n UserID(1337), \n 'promote', \n",
      "1": "data, \n UserID(1337), \n 'promote', \n",
      "2": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n 'promote', \n",
      "3": "data, \n UserID(1347), \n 'promote', \n",
      "4": "data, \n UserID(1337), \n assert UserID(promote, UserID) is not None, \n 'promote', \n",
      "5": "data, \n UserID(1337), \n assert UserID is not None, \n 'promote', \n",
      "6": "data, \n UserID(1337), \n assert UserID(promote) -> UserID(1337), \n 'promote', \n",
      "7": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)), \n 'promote', \n",
      "8": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) is not None, \n 'promote', \n",
      "9": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n 'promote', \n",
      "10": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(promote) && UserID(1337), \n assert UserID(promote) && UserID(promote) && UserID(promote) && UserID(promote): \n",
      "11": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote), \n",
      "12": "data, \n UserID(1337), <IND> 'promote', \n",
      "13": "data, <DED> \n UserID(1337), \n 'promote', \n",
      "14": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(promote) && UserID(1337), \n assert UserID(promote) && UserID(promote) && UserID(promote): \n",
      "15": "data, \n UserID(1337), \n 'promote', <DED> \n",
      "16": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) is not None \n 'promote', \n",
      "17": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(promote) && UserID(1337), \n assert UserID(promote), \n assert UserID(promote) && UserID(promote) && UserID(promote): \n",
      "18": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n 'promote', \n",
      "19": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n 'promote', \n",
      "20": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337).promote', \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote, UserID): \n",
      "21": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)): \n",
      "22": "data, \n UserID(1337), \n assert UserID(promote, UserID) is not None, \n assert UserID is not None, \n 'promote', \n",
      "23": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote), \n assert UserID(promote), \n",
      "24": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote), \n assert UserID(promote), \n assert UserID(1337), \n",
      "25": "data, \n UserID(1337), <DED> 'promote', \n",
      "26": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote), \n assert UserID(promote): \n",
      "27": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) is not None \n 'promote', \n",
      "28": "data, \n UserID(1337), \n assert UserID(promote, UserID) -> UserID(1337), \n 'promote', \n",
      "29": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote, UserID): \n",
      "30": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote), \n",
      "31": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n",
      "32": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote), \n assert UserID(promote), \n",
      "33": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n",
      "34": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)): \n",
      "35": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote), \n assert UserID(promote): \n",
      "36": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) is not None, \n assert UserID(promote, UserID(1337)) \n 'promote', \n",
      "37": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337).promote', \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote, \n",
      "38": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote): \n",
      "39": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote, \n",
      "40": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote, UserID): \n",
      "41": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote) -> UserID(promote), \n",
      "42": "data, \n UserID(1337), \n assert UserID(promote, UserID) is not None \n 'promote', \n",
      "43": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote): \n",
      "44": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote), \n assert UserID(promote, UserID): \n",
      "45": "data, <IND> UserID(1337), \n 'promote', \n",
      "46": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337).promote', \n assert UserID(promote, UserID(1337)) -> UserID(1337), \n assert UserID(promote, UserID(1337)) -> UserID(promote), \n assert UserID(promote), \n assert UserID(promote), \n assert data, \n",
      "47": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(promote) && UserID(1337), \n assert UserID(promote), \n assert UserID(promote, UserID(promote)) && UserID(promote): \n",
      "48": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(promote) && UserID(1337), \n assert UserID(promote) && UserID(promote): \n",
      "49": "data, \n UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(1337), \n assert UserID(promote, UserID(1337)) && UserID(promote) && UserID(1337), \n assert UserID(promote), \n assert UserID(promote) && UserID(promote): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "target_code": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_line": "                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 547,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "electrumsv/electrumsv",
    "source_filename": "examples/applications/restapi/handler_utils.py",
    "target_filename": "examples/applications/restapi/handler_utils.py",
    "source_changeid": "2132e0922ed952c7eb61f639b57182657532a757^",
    "target_changeid": "2132e0922ed952c7eb61f639b57182657532a757",
    "predictions": [
      "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "1": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "2": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "3": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "4": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "5": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "6": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "7": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = derivation_path(unpack_derivation_path(key.derivation_data2)) \n",
      "8": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) <IND>",
      "9": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = tuple_derivation_path(key.derivation_data2) \n",
      "10": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count) -> None: \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "11": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=bytes): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "12": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = derivation_path(key.derivation_data2) \n",
      "13": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): <IND> <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "14": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = str(unpack_derivation_path(key.derivation_data2)) \n",
      "15": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n <IND>",
      "16": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): <DED> <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "17": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n \n",
      "18": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = self.unpack_derivation_path(key.derivation_data2) \n",
      "19": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = 'unpack_derivation_path(key.derivation_data2) \n",
      "20": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n if key.derivation_data is None: \n",
      "21": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = path.unpack_derivation_path(key.derivation_data2) \n",
      "22": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = utils.unpack_derivation_path(key.derivation_data2) \n",
      "23": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n if not key.derivation_data2: \n",
      "24": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n ) \n",
      "25": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=byte_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "26": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) <DED> \n",
      "27": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path=unpack_derivation_path(key.derivation_data2) \n",
      "28": "<IND> key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "29": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert value is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "30": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = utf-8.unpack_derivation_path(key.derivation_data2) \n",
      "31": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = tuple_path(unpack_derivation_path(key.derivation_data2)) \n",
      "32": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = args.unpack_derivation_path(key.derivation_data2) \n",
      "33": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = np.bytes(unpack_derivation_path(key.derivation_data2)) \n",
      "34": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "35": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = list(unpack_derivation_path(key.derivation_data2)) \n",
      "36": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = eval(unpack_derivation_path(key.derivation_data2)) \n",
      "37": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = params.unpack_derivation_path(key.derivation_data2) \n",
      "38": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = ctx.unpack_derivation_path(key.derivation_data2) \n",
      "39": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(derivation_data2) \n",
      "40": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = (unpack_derivation_path(key.derivation_data2)) \n",
      "41": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = bpack_derivation_path(key.derivation_data2) \n",
      "42": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n if key.derivation_data2: \n",
      "43": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = eval_path(unpack_derivation_path(key.derivation_data2)) \n",
      "44": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n if not count: \n",
      "45": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=\"bytes\"): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "46": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n if not key.derivation_data: \n",
      "47": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n assert key.derivation_data2 is not None \n",
      "48": "<IND> in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "49": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(Key.derivation_data2) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED><DED>return Interpreter(self.pipeline, context=init_context, config=self.config)\n\n",
    "target_code": "\n        <DED><DED>return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_line": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 190,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crownpku/Rasa_NLU_Chi",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "1": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "2": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <IND>",
      "3": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.context) \n \n",
      "4": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "5": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.init()) \n \n",
      "6": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.decode()) \n \n",
      "7": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "8": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.encode()) \n \n",
      "9": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.init) \n \n",
      "10": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.int()) \n \n",
      "11": "\n <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "12": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config).decode() \n \n",
      "13": "\n <DED> \n return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "14": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.get(\"pipeline\")) \n \n",
      "15": "\n <IND> <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "16": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.interpreter.__init__) \n \n",
      "17": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "18": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.protocol) \n \n",
      "19": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.override()) \n \n",
      "20": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.int) \n \n",
      "21": "\n \n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "22": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> if not isinstance(context, str): \n <IND> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "23": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.decode()) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.decode()) \n \n",
      "24": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.context) \n \n",
      "25": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context) \n \n",
      "26": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.str()) \n \n",
      "27": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.call(self.pipeline)) \n \n",
      "28": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.context) \n \n",
      "29": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.results) \n \n",
      "30": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <IND>",
      "31": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.instance) \n \n",
      "32": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=Interpreter.__init__) \n \n",
      "33": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.items) \n \n",
      "34": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "35": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Interpreter.config) \n \n",
      "36": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.name) \n \n",
      "37": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.dict()) \n \n",
      "38": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.address) \n \n",
      "39": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.init()) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.init()) \n \n",
      "40": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.init()) \n \n",
      "41": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config) \n \n",
      "42": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.context) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.context) \n \n",
      "43": "<DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "44": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.start) \n \n",
      "45": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.decode()) \n \n",
      "46": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config).decode() \n \n",
      "47": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=str.config) \n \n",
      "48": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.encode()) \n \n",
      "49": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)\n",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_line": "                           scale,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 883,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/draw_commands.py",
    "target_filename": "arcade/draw_commands.py",
    "source_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd^",
    "target_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "predictions": [
      "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n",
      "1": "draw_texture_rectangle(center_x, center_y, \n texture, <IND> angle=angle, alpha=alpha) \n",
      "2": "draw_texture_rectangle(center_x, center_y, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "3": "draw_texture_rectangle(center_x, center_y, <IND> texture, \n angle=angle, alpha=alpha) \n",
      "4": "draw_texture_rectangle(center_x, center_y, <DED> texture, \n angle=angle, alpha=alpha) \n",
      "5": "draw_texture_rectangle(center_x, center_y, \n texture, <DED> alpha=alpha) \n",
      "6": "draw_texture_rectangle(center_x, center_y, \n texture, \n scale, \n angle=angle, alpha=alpha) \n",
      "7": "draw_texture_rectangle(center_x, center_y, \n texture, <DED> alpha=alpha, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "8": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <IND>",
      "9": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "10": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> \n",
      "11": "draw_texture_rectangle(center_x, center_y, \n layer, \n texture, \n angle=angle, alpha=alpha) \n",
      "12": "draw_texture_rectangle(center_x, center_y, \n float, \n texture, \n angle=angle, alpha=alpha) \n",
      "13": "draw_texture_rectangle(center_x, center_y, \n texture, \n angles=angle, alpha=alpha) \n",
      "14": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "15": "draw_texture_rectangle(center_x, center_y, <DED> scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "16": "draw_texture_rectangle(center_x, center_y, \n textures, \n angle=angle, alpha=alpha) \n",
      "17": "draw_texture_rectangle(center_x, center_y, \n curve, \n texture, \n angle=angle, alpha=alpha) \n",
      "18": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n",
      "19": "draw_texture_rectangle(center_x, center_y, \n texture, \n tilt=angle, alpha=alpha) \n",
      "20": "draw_texture_rectangle(center_x, center_y, \n color, \n texture, \n angle=angle, alpha=alpha) \n",
      "21": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "22": "draw_texture_rectangle(center_x, center_y, \n texture, \n value, \n angle=angle, alpha=alpha) \n",
      "23": "draw_texture_rectangle(center_x, center_y, \n 'Texture', \n texture, \n angle=angle, alpha=alpha) \n",
      "24": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "25": "draw_texture_rectangle(center_x, center_y, \n texture, <DED> \n angle=angle, alpha=alpha) \n",
      "26": "draw_texture_rectangle(center_x, center_y, \n texture=angle, alpha=alpha) \n",
      "27": "draw_texture_rectangle(center_x, center_y, \n texture, \n edge, \n angle=angle, alpha=alpha) \n",
      "28": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture, \n angle=angle, alpha=alpha) \n",
      "29": "drawing_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n",
      "30": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n 'Texture', \n texture, \n angle=angle, alpha=alpha) \n",
      "31": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n assert texture is not None \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "32": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=\"angle\", alpha=alpha) \n",
      "33": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n if texture is not None: \n",
      "34": "draw_texture_rectangle(center_x, center_y, \n Texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "35": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, Alpha=alpha) \n",
      "36": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha \n",
      "37": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha, \n ) \n",
      "38": "draw_texture_rectangle(center_x, center_y, <DED> texture, \n scale, \n angle=angle, alpha=alpha) \n",
      "39": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n color, \n texture, \n angle=angle, alpha=alpha) \n",
      "40": "draw_texture_rectangle(center_x, center_y, \n str, \n texture, \n angle=angle, alpha=alpha) \n",
      "41": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha, \n",
      "42": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n curve, \n texture, \n angle=angle, alpha=alpha) \n",
      "43": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n if texture is not None: \n <IND> draw_texture_rectangle(center_x, center_y, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "44": "draw_texture_rectangle(center_x, center_y, \n body, \n texture, \n angle=angle, alpha=alpha) \n",
      "45": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n texture, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "46": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle, alpha=alpha) \n",
      "47": "draw_texture_rectangle(center_x, center_y, \n x, \n texture, \n angle=angle, alpha=alpha) \n",
      "48": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha_) \n",
      "49": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED> <IND> draw_texture_rectangle(center_x, center_y, \n scale, \n texture, \n angle=angle, Alpha=alpha) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelSettled.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 542,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(to_canonical_address(data['block_number'])), \n",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(typing.BlockNumber(int(data['block_number'])), \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']))), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(typing.BlockNumber(int(data['block_number']))), \n",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n ) \n",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <IND>",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <DED>",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])) \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n channel_identifier=typing.BlockNumber(int(data['block_number'])), \n",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_identifier']), \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['canonical_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n ), \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n channel_identifier=typing.BlockNumber(int(data['block_number']), \n",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n return token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number']), \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n block_number=typing.BlockNumber(int(data['block_number']), \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n return token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['])), \n",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <DED> token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n return token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['])), \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n key_identifier=typing.ChannelID(int(data['key_identifier'])), \n block_number=typing.BlockNumber(key_identifier(data['block_number'])), \n",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n return token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['canonical_address']), \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n blocking_number=typing.BlockNumber(int(data['block_number'])), \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <DED> token_network_identifier=to_canonical_address(data['token_identifier']), \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.CallNumber(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n address=to_canonical_address(data['token_network_identifier']), \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['canonical_address']), \n",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier''])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(data['block_number']), \n",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channels_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n route=to_canonical_address(data['route_identifier']), \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n channel_identifier=typing.BlockNumber(int(data['block_number')), \n",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n type=typing.BlockNumber(int(data['type'])), \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['card']), \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <DED> token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n return token_network_identifier=to_canonical_address(data['token_network_identifier=to_canonical_address(data['address']), \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n key_identifier=typing.ChannelID(int(data['key_identifier'])), \n block_number=typing.BlockNumber(key_identifier(data['key_number'])), \n",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n route_identifier=to_canonical_address(data['route_identifier']), \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    )\n                <DED>result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "target_code": "                    )\n                <DED>result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "warning_line": "                result = json_loads(serialized)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `json_loads` but got `bytearray`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 189,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jamesoff/simplemonitor",
    "source_filename": "simplemonitor/Loggers/network.py",
    "target_filename": "simplemonitor/Loggers/network.py",
    "source_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd^",
    "target_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd",
    "predictions": [
      ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n"
    ],
    "correct": true,
    "top_five": {
      "0": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "1": ") \n <DED> byte_result = json_loads(byte_result) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "2": ") \n <DED> result = byte_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "3": ") \n <IND> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "4": ") \n <DED> result = json_loads(bytearray) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "5": ") \n <DED> result = json_loads(bytes) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "6": ") \n <DED> result = json_loads() \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "7": ") \n <DED> result = json_loads(bytes()) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "8": ") \n <DED> byte_array = json_loads(byte_array) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "9": ") \n <DED> result = json_loads(byte_serialized) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "10": ") \n <DED> assert isinstance(serialized, bytes) \n result = json_loads(bytes) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "11": ") \n <DED> assert isinstance(serialized, bytes) \n result = json_loads(bytes) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "12": ") \n <DED> assert str is not None \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "13": ") \n <DED> assert isinstance(serialized, bytes) \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "14": ") \n <DED> result = json_loads(bytes(session)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "15": ") \n \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "16": ") \n <DED> byte_count = json_loads(byte_count) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "17": ") \n <DED> result = bytes(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "18": ") \n <DED> byte_result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "19": ") \n <DED> assert self.simplemonitor.update_remote_monitor(result, addr[0]) \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "20": ") \n <DED> result = json_loads(bytebytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "21": ") \n <DED> assert isinstance(serialized, bytes) \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "22": ") \n <DED> bytes = json_loads(bytes) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "23": ") \n <DED> byte = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "24": ") \n <DED> assert isinstance(serialized, bytes) \n result = json_loads(bytes(simplemonitor)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "25": ") \n <DED> result = json_loads(bytes[0]) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "26": ") \n <DED> return json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "27": ") \n <DED> result = json_loads(byte_array) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "28": ") \n <DED> assert isinstance(serialized, bytes) \n result = json_loads(bytes(simplemonitorized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "29": ") \n <DED> bytes = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "30": ") \n <DED> result = json_loads(bytes(serialized), bytes) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "31": ") \n <DED> byte_array = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "32": ") \n <DED> byte_context = json_loads(byte_context) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "33": ") \n <DED> result = json_loads(bytes(sessionized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "34": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n return self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "35": ") <DED> <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "36": ") \n <DED> result=bytes(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "37": ") <IND> <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "38": ") \n <DED> byte_result = json_loads() \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "39": ") \n <DED> result = json_loads(bytes(rialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "40": ") \n <DED> assert self.simplemonitor.update_remote_monitor(result, addr[0]) \n assert self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "41": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "42": ") \n <DED> result = json_loads(bytes(sessions)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "43": ") \n <DED> result = json_loads(byte(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "44": ") \n <DED> result = json_loads(bytes.serialized) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "45": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) <IND>",
      "46": ") \n <DED> assert isinstance(serialized, result) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "47": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) <DED> self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "48": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr(0])) \n",
      "49": ") \n <DED> result = json_loads(bytelength) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            target_state=data['target_state'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `TargetTask.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 223,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], <IND>",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> target_state=data['target_state'], \n",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], <DED>",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> target_state=data['target_state'], \n",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']])), \n target_state=data['target_state'], \n",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])) \n target_state=data['target_state'], \n",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier''])), \n target_state=data['target_state'], \n",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']]), \n target_state=data['target_state'], \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n ) \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']')), \n target_state=data['target_state'], \n",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channels_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'), \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n return token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'], '')), \n target_state=data['target_state'], \n",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']), \n target_state=data['target_state'], \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n key_network_identifier=typing.ChannelID(int(data['key_network_identifier'])), \n target_state=data['target_state'], \n",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(), \n target_state=data['target_state'], \n",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['canonical_identifier'])), \n target_state=data['target_state'], \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], <DED> token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier'], \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n if not token_network_identifier: \n <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']\")), \n target_state=data['target_state'], \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n exports = token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channels=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n key_network_identifier=typing.ChannelID(int(data['key_identifier'])), \n target_state=data['target_state'], \n",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier =typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n key_identifier=typing.ChannelID(int(data['key_identifier'])), \n target_state=data['target_state'], \n",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n get_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']))), \n target_state=data['target_state'], \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n canal_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n if target_state is not None: \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n address=to_canonical_address(data['token_network_identifier']), \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'))), \n target_state=data['target_state'], \n",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], <DED> channel_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n state=to_canonical_address(data['state'], \n",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])).decode('target_state'), \n target_state=data['target_state'], \n",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])).decode(), \n target_state=data['target_state'], \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n type_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n if data['target_state'] is not None: \n",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier\u2019])), \n target_state=data['target_state'], \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n channel_identifier=typing.ChannelID(int(data['target_identifier'])), \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n return token_network_identifier=to_canonical_address(data['token_network_identifier'], \n",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n if target_state is None: \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n )=to_canonical_address(data['target_state'], \n",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n ) <DED> \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        <IND>super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "target_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "1": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator) \n \n",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__() \n \n",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer) \n \n",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ): \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "8": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, **kwargs) \n \n",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "10": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, NormalizerApplicator) \n \n",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab) \n \n",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, GeneralizerApplicator) \n \n",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer Applicator) \n \n",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <IND>",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), \n routineizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <IND> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <DED> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, *kwargs) \n \n",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), <DED> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), <IND> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator) \n \n",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <IND> <IND> super().__init__(vocab, **kwargs) \n \n",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <DED>",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), \n regularlyizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <IND> \n",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <DED> \n \n",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <DED> <IND> super().__init__(vocab, **kwargs) \n \n",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator) \n \n",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "34": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, LegalizerApplicator) \n \n",
      "35": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \n **kwargs) \n \n",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegionalizerApplicator) \n \n",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs, **kwargs) \n \n",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator()) \n \n",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, RegularizerApplicator) \n \n",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator, **kwargs) \n \n",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), \n periodicizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab,**kwargs) \n \n",
      "45": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, <IND> **kwargs) \n \n",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), \n regelm\u00e4\u00dfigizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "47": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, <DED> **kwargs) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 79,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/graph_parser.py",
    "target_filename": "allennlp/models/graph_parser.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "1": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator) \n \n",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer) \n \n",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__() \n \n",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ): \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "8": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, **kwargs) \n \n",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, **kwargs) \n \n",
      "10": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, NormalizerApplicator) \n \n",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab) \n \n",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer Applicator) \n \n",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, GeneralizerApplicator) \n \n",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), \n routineizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <IND>",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <IND> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <DED> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <IND> <IND> super().__init__(vocab, **kwargs) \n \n",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator) \n \n",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), <DED> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <DED>",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), \n regularlyizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, *kwargs) \n \n",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), <IND> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator) \n \n",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <DED> <IND> super().__init__(vocab, **kwargs) \n \n",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <IND> \n",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <DED> \n \n",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "34": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegionalizerApplicator) \n \n",
      "35": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, LegalizerApplicator) \n \n",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \n **kwargs) \n \n",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator()) \n \n",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs, **kwargs) \n \n",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, RegularizerApplicator) \n \n",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, RegularizerApplicator, **kwargs) \n \n",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer) \n \n",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), \n periodicizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "45": "initializer: InitializerApplicator = InitializerApplicator(), \n regelm\u00e4\u00dfigizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, <IND> **kwargs) \n \n",
      "47": "initializer: InitializerApplicator = InitializerApplicator(), \n **kwargs <IND> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, RegularizerApplicator) \n \n",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": true,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "target_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_line": "        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 103,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/common/logging.py",
    "target_filename": "allennlp/common/logging.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "1": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "2": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "3": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "4": "\n <DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "5": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "6": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n logging._nameToLevel.get(level_name, logging.INFO)]) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "7": "<DED> else: \n <DED> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "8": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\").get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "9": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n logging._nameToLevel.get(level_name, logging.INFO)) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "10": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n logging._nameToLevel[str, logging.INFO]) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "11": "<DED> else: \n <IND> level_name = os.environ.get('ALLENNLP_LOG_LEVEL') \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "12": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = str(logging._nameToLevel.get(level_name, logging.INFO)) \n",
      "13": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO)) \n",
      "14": "<DED> else: \n \n level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "15": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") <IND> LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "16": "<DED> else: <IND> <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "17": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") <DED> LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "18": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]() \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "19": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL_LOG = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "20": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n logging._nameToLevel[str]) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "21": "<DED> else: \n <IND> level_name = str(os.environ.get(\"ALLENNLP_LOG_LEVEL\")) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "22": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL=logging._nameToLevel.get(level_name, logging.INFO) \n",
      "23": "<DED> else: <DED> <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "24": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"](str) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "25": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get(\"ALLENNLP_LOG_LEVEL\") \n",
      "26": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"](str, logging.INFO) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "27": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) <DED> \n",
      "28": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\").decode() \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "29": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n if level_name is None: \n",
      "30": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel[level_name, logging.INFO].get(level_name, logging.INFO) \n",
      "31": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"); LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "32": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO)) \n",
      "33": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, log.INFO) \n",
      "34": "<DED> else: \n <IND> level_name = os.environ().get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "35": "<DED> else: \n <IND> level_name = os.environ(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "36": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n logging._nameToLevel.get(level_name, logging.INFO)]) \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "37": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] <DED> \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "38": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) <IND>",
      "39": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n if level_name: \n",
      "40": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n ) \n",
      "41": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "42": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "43": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "44": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "45": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] <IND> LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "46": "\n <DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "47": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.info) \n",
      "48": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name) \n",
      "49": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]( \n logging._nameToLevel.get(level_name, logging.INFO)) \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
    "target_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_line": "            user_token",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algolia/algoliasearch-client-python",
    "source_filename": "algoliasearch/insights_client_async.py",
    "target_filename": "algoliasearch/insights_client_async.py",
    "source_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395^",
    "target_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "predictions": [
      "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "1": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "2": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "3": "# type: (InsightsClient, Transporter, User_token) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "4": "<IND> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "5": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "6": "<IND> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "7": "<IND> def __init__(self, insights_client, InsightsConfig): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "8": "<IND> def __init__(self, insights_client, insightsConfig): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "9": "<IND> def __init__(self, insights_client, User_token): \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "10": "# type: (InsightsClient, Transporter, User_token) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "11": "<DED> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "12": "<IND> def __init__(self, insights_client, user_token): \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "13": "<DED> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "14": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n ) \n",
      "15": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClientAsync, User).__init__( \n insights_client._transporter, \n user_token \n",
      "16": "<IND> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClientAsync, UserToken).__init__( \n insights_client._transporter, \n user_token \n",
      "17": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token <IND> ) \n",
      "18": "<DED> def __init__(self, insights_client, InsightsConfig): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "19": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insight_client._transporter, \n user_token \n",
      "20": "\n <IND> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "21": "<DED> def __init__(self, insights_client, insightsConfig): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "22": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token <IND> ) \n",
      "23": "<IND> def __init__(self, insights_client, UserToken): \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "24": "<DED> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "25": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token <DED> ) \n",
      "26": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "27": "\n <IND> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "28": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "29": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "30": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClientAsync, UserToken).__init__( \n insights_client._transporter, \n user_token \n",
      "31": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( <IND> insights_client._transporter, \n user_token \n",
      "32": "<IND> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClient.__init__(self, insights_client, UserToken)).__init__( \n insights_client._transporter, \n user_token \n",
      "33": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClient.__init__(self, insights_client, UserToken)).__init__( \n insights_client._transporter, \n user_token \n",
      "34": "<IND> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClient, Transporter, UserToken) \n self.__init__( \n insights_client._transporter, \n user_token \n",
      "35": "<IND> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClient, Transporter, InsightsConfig).__init__( \n insights_client._transporter, \n user_token \n",
      "36": "<IND> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClient.__init__(self, insights_client, UserToken)).__init__( \n insights_client._transporter, \n user_token \n",
      "37": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClient, Transporter).__init__( \n insights_client._transporter, \n user_token \n",
      "38": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClient, Transporter, UserToken) \n self.__init__( \n insights_client._transporter, \n user_token \n",
      "39": "<IND> def __init__(self, insights_client, UserToken): \n <IND> super(UserInsightsClient, Transporter, UserToken) \n user_token \n",
      "40": "<DED> def __init__(self, insights_client, User_token): \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "41": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter, \n user_token \n",
      "42": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClient.__init__(self, insights_client, User_token)).__init__( \n insights_client._transporter, \n user_token \n",
      "43": "<IND> def __init__(self, insights_client, InsightsConfig): \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "44": "<IND> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClient, Transporter).__init__( \n insights_client._transporter, \n user_token \n",
      "45": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token <DED> ) \n",
      "46": "<DED> def __init__(self, insights_client, user_token): \n <IND> super().__init__( \n insights_client._transporter, \n user_token \n",
      "47": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClientAsync, user_token) \n self.__init__( \n insights_client._transporter, \n user_token \n",
      "48": "<IND> def __init__(self, insights_client, User_token): \n <IND> super(UserInsightsClient, Transporter, UserToken) \n user_token \n",
      "49": "# type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client, UserToken \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_line": "FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 29,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quay/quay",
    "source_filename": "test/specs.py",
    "target_filename": "test/specs.py",
    "source_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04^",
    "target_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "predictions": [
      "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n"
    ],
    "correct": false,
    "top_five": {
      "0": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "1": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "2": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "3": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + mmap.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "4": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + tag(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "5": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = str(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "6": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + tag(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "7": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "8": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + tag.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "9": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "10": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + list(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "11": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "12": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "13": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "14": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + params.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "15": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + fake.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "16": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + withhlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "17": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "18": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "19": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + Hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "20": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + mmap.mmap(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "21": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + typing.Any(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "22": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + list(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "23": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + format(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "24": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + grunt(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "25": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() <IND> FAKE_IMAGE_ID = \"fake-image\" \n",
      "26": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + upload(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "27": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + scan(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "28": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = str(\"sha256:\" + str(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "29": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + type(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "30": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + self.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "31": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + tag_hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "32": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + bytearray, bytes, memoryview, mmap.mmap] \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "33": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + \"fake.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "34": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = str(\"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest())) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "35": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + fake:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "36": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + mmap.mmap.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "37": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "38": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + ha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "39": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = str(\"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "40": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (sha256:\" + hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "41": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" <IND>",
      "42": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) <IND> FAKE_IMAGE_ID = \"fake-image\" \n",
      "43": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + mmap.mmap[sha256](\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "44": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" <IND>",
      "45": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + args.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "46": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + grunt.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "47": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + this.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "48": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + mmap.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "49": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) <DED> \n FAKE_IMAGE_ID = \"fake-image\" \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
    "target_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_line": "            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 201,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "borglab/gtsfm",
    "source_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "target_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_changeid": "26f76a40e21bd082123f275404efca964faa59b9^",
    "target_changeid": "26f76a40e21bd082123f275404efca964faa59b9",
    "predictions": [
      "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "1": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n ) \n",
      "2": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <DED> two_view_reports_dict \n ) \n",
      "3": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[i0, i1, i2], two_view_reports_dict \n ) \n",
      "4": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], 2_view_reports_dict \n ) \n",
      "5": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, (i0, i1, i2], two_view_reports_dict \n ) \n",
      "6": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2], two_view_reports_dict \n ) \n",
      "7": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n two_view_reports_dict \n ) \n",
      "8": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "9": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n ), two_view_reports_dict \n ) \n",
      "10": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], 2-view_reports_dict \n ) \n",
      "11": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], bi_view_reports_dict \n ) \n",
      "12": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], [i0, i1, i2], two_view_reports_dict \n ) \n",
      "13": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.append(i0, i1, i2), two_view_reports_dict \n ) \n",
      "14": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, list[i0, i1, i2], two_view_reports_dict \n ) \n",
      "15": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.append(i0, i1, i2), \n two_view_reports_dict \n ) \n",
      "16": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n",
      "17": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2], \n ) \n",
      "18": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2], <DED> two_view_reports_dict \n ) \n",
      "19": "\n cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "20": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> two_view_reports_dict \n ) \n",
      "21": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[i0, i1, i2], \n ) \n",
      "22": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], i2_reports_dict \n ) \n",
      "23": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[i0, i1, i2], <DED> two_view_reports_dict \n ) \n",
      "24": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND>, two_view_reports_dict \n ) \n",
      "25": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, (i0, i1, i2], 2_view_reports_dict \n ) \n",
      "26": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n ), \n",
      "27": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> ) \n",
      "28": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <DED> bi_view_reports_dict \n ) \n",
      "29": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.append(i0, i1, i2), <DED> two_view_reports_dict \n ) \n",
      "30": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> ), two_view_reports_dict \n ) \n",
      "31": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n ) \n",
      "32": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> 2: \n <IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "33": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.append(i0, i1, i2), \n ) \n",
      "34": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.extend((i0, i1, i2), two_view_reports_dict \n ) \n",
      "35": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <IND> ) \n",
      "36": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n ), <DED> two_view_reports_dict \n ) \n",
      "37": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> int = 0 \n ) \n",
      "38": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.append(i0, i1, i2), \n ), two_view_reports_dict \n ) \n",
      "39": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, (i0, i1, i2], \n ) \n",
      "40": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict: List[i0, i1, i2], \n ) \n",
      "41": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> 2: \n <IND> ) \n",
      "42": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) <IND>",
      "43": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict.extend((i0, i1, i2), two_view_reports_dict) \n ) \n",
      "44": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> : List[int] \n ) \n",
      "45": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <DED> 2: \n <IND> ) \n",
      "46": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> : List[int], \n two_view_reports_dict \n ) \n",
      "47": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], [i0, i1, i2], <DED> two_view_reports_dict \n ) \n",
      "48": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> 2: \n <IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], \n",
      "49": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], <IND> 2: \n <IND> cycle_error, \n max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        <IND>minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "target_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        <IND>minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_line": "        return cls(minimum=minimum, maximum=maximum)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 437,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/collection.py",
    "target_filename": "pystac/collection.py",
    "source_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93^",
    "target_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "predictions": [
      "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "1": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "2": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "3": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> maximum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "4": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "5": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, max=maximum)) \n",
      "6": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> maximum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "7": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=minimum)) \n",
      "8": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, maximum=maximum)) \n",
      "9": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) \n return cls(minimum=minimum, max=maximum)) \n",
      "10": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maxim=maximum)) \n",
      "11": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\")), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "12": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> limit: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "13": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\")), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "14": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> limit: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "15": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=minimum)) \n",
      "16": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=minimum)) \n",
      "17": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minim: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "18": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n",
      "19": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), maximum) \n return cls(minimum=minimum, max=maximum)) \n",
      "20": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), max=minimum) \n return cls(minimum=minimum, max=maximum)) \n",
      "21": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "22": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum)) \n",
      "23": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, max=maximum)) \n",
      "24": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minim: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "25": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "26": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) \n return cls(minimum=minimum, max=maximum)) \n",
      "27": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> maximum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=minimum)) \n",
      "28": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(maximum=minimum, max=maximum)) \n",
      "29": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "30": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") <IND> maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "31": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\")), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "32": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, maximum=maximum)) \n",
      "33": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), maximum) \n return cls(minimum=minimum, max=maximum)) \n",
      "34": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, max=minimum)) \n",
      "35": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum=minimum, max=maximum)) \n",
      "36": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) \n return cls(minimum=minimum, max=maximum) \n",
      "37": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximal: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "38": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maxim=maximum)) \n",
      "39": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), max=maximum) \n return cls(minimum=minimum, max=maximum)) \n",
      "40": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), maximum) \n",
      "41": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") <IND> maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "42": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), max=minimum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "43": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") <DED> maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "44": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> maximum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, max=maximum)) \n",
      "45": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(maximum=minimum, maximum=maximum)) \n",
      "46": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, maximal=maximum)) \n",
      "47": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), maximum) \n return cls(minimum=minimum, maximum=maximum)) \n",
      "48": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> max: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum)) \n return cls(minimum=minimum, max=maximum)) \n",
      "49": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum), maxim=minimum) \n return cls(minimum=minimum, max=maximum)) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n\n",
    "target_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_line": "        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 550,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "samschott/maestral",
    "source_filename": "maestral/cli.py",
    "target_filename": "maestral/cli.py",
    "source_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97^",
    "target_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "predictions": [
      "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "1": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "2": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n demands = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "3": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requests = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "4": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n require_extras = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "5": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple(extras)) \n \n",
      "6": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extra_requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "7": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str, \"gui\"]) \n \n",
      "8": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required_dist = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "9": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "10": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple(extras=[\"gui\"])) \n \n",
      "11": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n demands = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "12": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "13": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n needs = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "14": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n require_dist = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "15": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requests = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "16": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n <IND>",
      "17": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required_dist = pkg_dist.requires(extras=[\"gui\"]) \n \n",
      "18": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple()) \n \n",
      "19": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n <IND>",
      "20": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "21": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "22": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "23": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=\"gui\"]) \n \n",
      "24": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n require_dist = pkg_dist.requires(extras=[\"gui\"]) \n \n",
      "25": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n specifications = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "26": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requested_extras = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "27": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "28": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "29": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n if not isinstance(extras, \"gui\"\"): \n <IND> return \n \n",
      "30": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "31": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n demands = maestral_dist.requires(extras=typing.Tuple[str, \"gui\"]) \n \n",
      "32": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n needs = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "33": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_dist.requires(extras=[\"gui\"]) \n \n",
      "34": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple(extras, \"gui\"\")) \n \n",
      "35": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple(extras[\"gui\"])) \n \n",
      "36": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n demands = maestral_dist.requires(extras=typing.Tuple(extras)) \n \n",
      "37": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n if isinstance(extras, \"gui\"\"): \n <IND> return \n \n",
      "38": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n assert isinstance(extras, \"gui\"\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "39": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requests = maestral_dist.requires(extras=typing.Tuple[str, \"gui\"]) \n \n",
      "40": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "41": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str, \"gui\"]) \n <IND>",
      "42": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple(extras, \"gui\"])) \n \n",
      "43": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n demands = maestral_dist.requires(extras=typing.Tuple(extras=[\"gui\"])) \n \n",
      "44": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(exports=[\"gui\"]) \n \n",
      "45": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "46": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n if not isinstance(extras): \n <IND> return \n \n",
      "47": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str, 'gui']) \n \n",
      "48": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n if not isinstance(extras, \"gui\"): \n <IND> return \n \n",
      "49": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],\n",
    "target_code": "        <IND>restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 739,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "1": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "2": "\n restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "3": "<IND> restored = cls( <IND> payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "4": "<IND> restored = cls( <DED> payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "5": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <IND>",
      "6": "<IND> restored = cls( \n PaymentID=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "7": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), <IND> reason=data['reason'], \n",
      "8": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']]), \n reason=data['reason'], \n",
      "9": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> paymentID=PaymentID(int(data['reason'])), \n",
      "10": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']), \n reason=data['reason'], \n",
      "11": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), <DED> reason=data['reason'], \n",
      "12": "<IND> restored = cls( \n payments_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "13": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']))), \n reason=data['reason'], \n",
      "14": "<IND> restored = cls( \n paymentID=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "15": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> payment_identifier=PaymentID(int(data['reason'])), \n",
      "16": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'], '')), \n reason=data['reason'], \n",
      "17": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']])), \n reason=data['reason'], \n",
      "18": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED>",
      "19": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> payment_identifier=PaymentID(int(data['reason'])), \n",
      "20": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']),)), \n reason=data['reason'], \n",
      "21": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'], int(data['reason'])), \n reason=data['reason'], \n",
      "22": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> paid_identifier=PaymentID(int(data['reason'])), \n",
      "23": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n payment_identifier=PaymentID(int(data['reason'])), \n",
      "24": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> paymentID=PaymentID(int(data['reason']), \n",
      "25": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n ) \n",
      "26": "<IND> restored = cls( \n paying_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "27": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> <IND> payment_identifier=PaymentID(int(data['reason'])), \n",
      "28": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> name=PaymentID(int(data['reason'])), \n",
      "29": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n paymentID=PaymentID(int(data['reason'])), \n",
      "30": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier''])), \n reason=data['reason'], \n",
      "31": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n payment_identifier=PaymentID(int(data['reason'])), \n",
      "32": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> reason=data['reason'], \n",
      "33": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> support=PaymentID(int(data['reason'])), \n",
      "34": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n raise FundID(PaymentID(int(data['reason'])), \n",
      "35": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> number=PaymentID(int(data['reason'])), \n",
      "36": "<IND> restored = cls( \n payment_identifier = PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "37": "<IND> restored = cls( \n payment_identifier=PaymentID(Int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "38": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']\")), \n reason=data['reason'], \n",
      "39": "<DED> restored = cls( <DED> payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "40": "<DED> restored = cls( <IND> payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "41": "<IND> restored = cls( \n paid_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "42": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> \n",
      "43": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> helpers=PaymentID(int(data['reason'])), \n",
      "44": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <IND>",
      "45": "<IND> restored = cls( \n payment_identifier=PaymentID(), \n reason=data['reason'], \n",
      "46": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n state=PaymentID(int(data['state'])), \n",
      "47": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <DED> raise FundID(PaymentID(int(data['reason'])), \n",
      "48": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier']), <IND> reason=data['reason'], \n",
      "49": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'))), \n reason=data['reason'], \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if expected_failure is not None:\n        <IND>assert_code_snippet_fails(after, state, expected_failure)\n",
    "target_code": "    if expected_failure is not None:\n        <IND>assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_line": "        assert_code_snippet_fails(after, state, expected_failure)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quantumlib/Cirq",
    "source_filename": "cirq/docs/snippets_test.py",
    "target_filename": "cirq/docs/snippets_test.py",
    "source_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995^",
    "target_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "predictions": [
      "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "1": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n \n",
      "2": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure, str) \n",
      "3": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state) \n",
      "4": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state is not None, expected_failure) \n",
      "5": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state is not None \n assert_code_snippet_fails(after, state is not None, expected_failure) \n",
      "6": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "7": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure()) \n",
      "8": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n self.assert_code_snippet_fails(after, state, self.assert_failure) \n",
      "9": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "10": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expect_failure) \n",
      "11": "if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "12": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n <DED> assert_code_snippet_fails(after, state, expected_failure) \n",
      "13": "if expected_failure is not None: \n <IND> assert_code_snippet_fails = assert_code_snippet_fails(after, state, expected_failure) \n",
      "14": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_fails is not None \n",
      "15": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n \n",
      "16": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expect_failure) \n",
      "17": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure, str) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, str) \n",
      "18": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, str) \n",
      "19": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails = assert_code_snippet_fails(after, state, expected_failure) \n",
      "20": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_fails(after, state, expect_failure) \n",
      "21": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "22": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "23": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "24": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails is not None \n <DED> assert_code_snippet_fails(after, state, expected_failure) \n",
      "25": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure, str) \n if expected_failure is None: \n <IND> assert_code_snippet_fails(after, state, str) \n",
      "26": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state) \n",
      "27": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails is not None \n \n",
      "28": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails.call(after, state, expected_failure) \n",
      "29": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails(after, state, expect_failure) \n",
      "30": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails = self.assert_code_snippet_fails(after, state, expected_failure) \n",
      "31": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> \n",
      "32": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state is not None \n assert_code_snippet_fails(after, state is not None) \n",
      "33": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, assert_failure) \n",
      "34": "if expected_failure is not None: \n <DED> assert_code_snippet_fails(after, state, expected_failure) \n",
      "35": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND>",
      "36": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n <DED> assert_code_snippet_fails(after, state, expected_failure) \n",
      "37": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "38": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_fails = assert_code_snippet_fails(after, state, expected_failure) \n",
      "39": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails(after, state, str) \n",
      "40": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails is not None \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "41": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n <DED> assert_code_snippet_fails(after, state, expect_failure) \n",
      "42": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state) \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "43": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is not None: \n <IND> assert_code_snippet_fails = assert_code_snippet_fails(after, state, expect_failure) \n",
      "44": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state) \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "45": "if expected_failure is not None: \n <IND> assert_code_snippet_fails = self.assert_code_snippet_fails(after, state, expected_failure) \n",
      "46": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n if expected_failure is None: \n <IND> assert_code_snippet_fails.call(after, state, expected_failure) \n",
      "47": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> if expected_failure is not None: \n <IND> assert_code_snippet_fails is not None \n \n",
      "48": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_fails(after, state is not None, expected_failure) \n",
      "49": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expect_failure) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n\n",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_line": "        save_pickle(self.ec_data, self.save_path)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "target_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_changeid": "1de404c11bc5f40b766e966573506921980ff524^",
    "target_changeid": "1de404c11bc5f40b766e966573506921980ff524",
    "predictions": [
      "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "1": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data) \n \n",
      "2": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "3": "log.info(f\"Saving model to { self.save_path } \") \n save_pickle(self.ec_data, self.save_path) \n \n",
      "4": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data) \n \n",
      "5": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n <IND>",
      "6": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data), self.save_path) \n \n",
      "7": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n <DED>",
      "8": "log.info(f\"Saving model to { self.save_path } \") \n return self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "9": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n Save_pickle(self.ec_data, self.save_path) \n \n",
      "10": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exists_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "11": "log.info(f\"Saving model to { self.save_path } \") <IND> self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "12": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path, []) \n \n",
      "13": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, str(self.save_path)) \n \n",
      "14": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data) \n <IND>",
      "15": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) <IND> save_pickle(self.ec_data, self.save_path) \n \n",
      "16": "log.info(f\"Saving model to { self.save_path } \") <DED> self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "17": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) <IND> \n",
      "18": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) <DED> save_pickle(self.ec_data, self.save_path) \n \n",
      "19": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle = save_pickle(self.ec_data, self.save_path) \n \n",
      "20": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n <IND>",
      "21": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path.save_path) \n \n",
      "22": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True), List[typing.Any] = { } \n save_pickle(self.ec_data, self.save_path) \n \n",
      "23": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data), self.save_path) \n \n",
      "24": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path()) \n \n",
      "25": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path.list(self.save_path)) \n \n",
      "26": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "27": "log.info(f\"Saving model to { self.save_path } \") \n assert self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "28": "log.info(f\"Saving model to { self.save_path } \") \n save_pickle(self.ec_data, self.save_path.mkdir(parents=True, exist_ok=True)) \n \n",
      "29": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path.mkdir(parents=True, exist_ok=True)) \n \n",
      "30": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n Save_pickle(self.ec_data) \n \n",
      "31": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data) \n <DED>",
      "32": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path.name) \n \n",
      "33": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n <DED> else: \n",
      "34": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n <DED> raise ValueError(f\"Saving model to { self.save_path } \") \n \n",
      "35": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) <DED> \n \n",
      "36": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) <IND> save_pickle(self.ec_data) \n \n",
      "37": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.Mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "38": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path.list) \n \n",
      "39": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(save_data, self.save_path) \n \n",
      "40": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n return save_pickle(self.ec_data, self.save_path) \n \n",
      "41": "log.info(f\"Saving model to { self.save_path } \") <IND> self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data) \n \n",
      "42": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path,...) \n \n",
      "43": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mekdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "44": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.save_path.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "45": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path)) \n \n",
      "46": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle[self.ec_data, self.save_path] \n \n",
      "47": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path, \"\") \n \n",
      "48": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle() \n \n",
      "49": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(save_data) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            <IND>context.add_layer(obj)\n",
    "target_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            <IND>context.add_layer(obj)\n",
    "warning_line": "            context.add_layer(obj)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 635,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/configuration.py",
    "target_filename": "volatility/framework/interfaces/configuration.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "1": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "2": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "3": "\n <DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "4": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.ObjectInterface) \n context.add_layer(obj) \n",
      "5": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "6": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface) \n context.add_layer(obj) \n",
      "7": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "8": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "9": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \n context.add_layer(obj) \n",
      "10": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj = obj._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "11": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.objects.ObjectInterface) \n context.add_layer(obj) \n",
      "12": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj, obj) \n",
      "13": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, obj) \n context.add_layer(obj) \n",
      "14": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj, interfaces.layers.DataLayerInterface) \n",
      "15": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "16": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "17": "<IND> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "18": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface, obj) \n context.add_layer(obj) \n",
      "19": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface), obj = obj._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "20": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.interfaces.layers.ObjectInterface) \n context.add_layer(obj) \n",
      "21": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert context.add_layer is not None \n context.add_layer(obj) \n",
      "22": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface, obj) \n context.add_layer(obj) \n",
      "23": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) <DED> if obj is not None: \n <IND> context.add_layer(obj) \n",
      "24": "\n <DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "25": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, obj, obj) \n context.add_layer(obj) \n",
      "26": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) <IND> if obj is not None: \n <IND> context.add_layer(obj) \n",
      "27": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj = obj._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.Interface) \n context.add_layer(obj) \n",
      "28": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: <IND> <IND> context.add_layer(obj) \n",
      "29": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface), obj: \n <IND> context.add_layer(obj) \n",
      "30": "<DED> obj = self._construct_class(context, config_path, args) \n if obj and obj is not None: \n <IND> context.add_layer(obj) \n",
      "31": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface), obj) \n context.add_layer(obj) \n",
      "32": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) <IND>",
      "33": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), \n context.add_layer(obj) \n",
      "34": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.ObjectInterface, obj) \n context.add_layer(obj) \n",
      "35": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: <DED> <IND> context.add_layer(obj) \n",
      "36": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.Interface)) \n context.add_layer(obj) \n",
      "37": "<DED> assert self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "38": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface), context.add_layer(obj) \n",
      "39": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj = obj._construct_class(context, config_path, args) \n assert isinstance(obj, obj) \n context.add_layer(obj) \n",
      "40": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) <IND> assert isinstance(obj, interfaces.layers.Interface) \n context.add_layer(obj) \n",
      "41": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.interface.layers.ObjectInterface) \n context.add_layer(obj) \n",
      "42": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj: \n <IND> context.add_layer(obj) \n",
      "43": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) <IND> assert isinstance(obj, interfaces.layers.ObjectInterface) \n context.add_layer(obj) \n",
      "44": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.objects.Interface) \n context.add_layer(obj) \n",
      "45": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.Interface), obj, obj) \n context.add_layer(obj) \n",
      "46": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, obj, interfaces.layers.ObjectInterface) \n context.add_layer(obj) \n",
      "47": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n assert isinstance(obj, interfaces.layers.ObjectInterface), obj: \n <IND> context.add_layer(obj) \n",
      "48": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface), obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, obj) \n context.add_layer(obj) \n",
      "49": "<DED> obj = self._construct_class(context, config_path, args) <IND> if obj is not None: \n <IND> context.add_layer(obj) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, {})\n        # put delegation last by default\n",
    "target_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_line": "            delegator.delegations = Delegations({}, {})",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 354,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theupdateframework/python-tuf",
    "source_filename": "tests/repository_simulator.py",
    "target_filename": "tests/repository_simulator.py",
    "source_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3^",
    "target_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "predictions": [
      "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "1": "if delegator.delegations is None: \n <IND> DelegatedDict[str, DelegatedRole] = Delegations( { }, { } ) \n # put delegation last by default \n",
      "2": "if delegator.delegations is None: \n <DED> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "3": "if delegator.delegations is None: \n <IND> delegator.delegations = delegations( { }, { } ) \n # put delegation last by default \n",
      "4": "if delegator.delegations is None: \n <IND> DelegatedDict.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "5": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegatedRole]] = { } \n # put delegation last by default \n",
      "6": "if delegator.delegations is None: \n <IND> Delegations.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "7": "if delegator.delegations is None: \n <IND> DelegatedRole = Delegations( { }, { } ) \n # put delegation last by default \n",
      "8": "if delegator.delegations is None: \n <IND> DelegatedDict[str, OrderedDict[str, DelegatedRole]] = Delegations( { }, { } ) \n # put delegation last by default \n",
      "9": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, orderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "10": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, orderedDict[str, DelegatedRole]] = { } \n # put delegation last by default \n",
      "11": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "12": "if delegator.delegations is None: \n <IND> delegator.delegations=Delegations( { }, { } ) \n # put delegation last by default \n",
      "13": "if delegator.delegations is None: \n \n delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "14": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(properties.__init__, DelegatedRole) \n # put delegation last by default \n",
      "15": "if delegator.delegations is None: \n <IND> delegator.delegations_ = Delegations( { }, { } ) \n # put delegation last by default \n",
      "16": "if delegator.delegations is None: \n <IND> DelegatedRole.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "17": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(props, { } ) \n # put delegation last by default \n",
      "18": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( ^ }, { } ) \n # put delegation last by default \n",
      "19": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default <IND>",
      "20": "if delegator.delegations is None: <DED> <IND> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "21": "if delegator.delegations is None: <IND> <IND> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "22": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, orderedDict[str, OrderedDict[str, DelegatedRole]]) \n # put delegation last by default \n",
      "23": "if delegator.delegations is None: \n <IND> DelegatedDict = Delegations( { }, { } ) \n # put delegation last by default \n",
      "24": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) \n # puts delegation last by default \n",
      "25": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) <IND> # put delegation last by default \n",
      "26": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(properties, { } ) \n # put delegation last by default \n",
      "27": "if delegator.delegations is None: \n <IND> DelegatedDict.Delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "28": "if delegator.delegations is None: \n <IND> Delegations.Delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "29": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegationsRole]] = { } \n # put delegation last by default \n",
      "30": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, orderedDict[str, DelegatedRole]]) \n # put delegation last by default \n",
      "31": "if delegator.delegations is None: \n <IND> delegator.delegations=OrderedDict[str, DelegatedRole]( { }, { } ) \n # put delegation last by default \n",
      "32": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) <DED> # put delegation last by default \n",
      "33": "if delegator.delegations is None: \n <IND> DelegatedDict[str, OrderedDict[str, DelegatedRole]] = None \n # put delegation last by default \n",
      "34": "if delegator.delegations is None: \n <IND> Delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "35": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegationsRole]) \n # put delegation last by default \n",
      "36": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegatedRole]]) \n # put delegation last by default \n",
      "37": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegatedRole]] = None \n # put delegation last by default \n",
      "38": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegatedRole]] = } ) \n # put delegation last by default \n",
      "39": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { } ) \n # put delegation last by default <DED> \n",
      "40": "if delegator.delegations is None: \n <IND> DelegatedDict[str, OrderedDict[str, DelegatedRole]] = delegator.delegations( { }, { } ) \n # put delegation last by default \n",
      "41": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, OrderedDict[str, DelegatedDict[str, DelegatedRole]]) \n # put delegation last by default \n",
      "42": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, orderedDict[str, DelegatedRole]] = } ) \n # put delegation last by default \n",
      "43": "if delegator.delegations is None: \n <IND> DelegatedDict[str, OrderedDict[str, DelegatedRole]] = delegations( { }, { } ) \n # put delegation last by default \n",
      "44": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(properties) \n # put delegation last by default \n",
      "45": "if delegator.delegations is None: \n <IND> DelegatedDict().delegations = Delegations( { }, { } ) \n # put delegation last by default \n",
      "46": "if delegator.delegations is None: \n <IND> delegator.delegations.call(Delegations( { }, { } )) \n # put delegation last by default \n",
      "47": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, DelegatedRole) \n # put delegation last by default \n",
      "48": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { }, { }, orderedDict[str, DelegationsRole]] = { } \n # put delegation last by default \n",
      "49": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( { } ) \n # put delegation last by default \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                        if isinstance(loss, Tuple):\n                            <IND>average_over += loss[1]\n",
    "target_code": "\n                        if isinstance(loss, tuple):\n                            <IND>average_over += loss[1]\n",
    "warning_line": "                        if isinstance(loss, Tuple):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing._SpecialForm`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 472,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/trainers/trainer.py",
    "target_filename": "flair/trainers/trainer.py",
    "source_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054^",
    "target_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054",
    "predictions": [
      "\n if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n",
      "1": "\n if isinstance(loss, Tuple): \n <IND> average_over += loss[1] \n",
      "2": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.): \n <IND> average_over += loss[1] \n",
      "3": "\n if isinstance(loss, tuple[typing.Type[typing.Any], tuple[typing.Type[typing.Any],...]]: \n <IND> average_over += loss[1] \n",
      "4": "\n if isinstance(loss, Optional[Tuple]): \n <IND> average_over += loss[1] \n",
      "5": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n <IND> average_over += loss[1] \n",
      "6": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.)) \n <IND> average_over += loss[1] \n",
      "7": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.'): \n <IND> average_over += loss[1] \n",
      "8": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.]) \n <IND> average_over += loss[1] \n",
      "9": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., \n",
      "10": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.-): \n <IND> average_over += loss[1] \n",
      "11": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.json): \n <IND> average_over += loss[1] \n",
      "12": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.type): \n <IND> average_over += loss[1] \n",
      "13": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., <DED> average_over += loss[1] \n",
      "14": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n): \n <IND> average_over += loss[1] \n",
      "15": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n \n average_over += loss[1] \n",
      "16": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n <DED> average_over += loss[1] \n",
      "17": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.)) \n \n average_over += loss[1] \n",
      "18": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.)) \n <DED> average_over += loss[1] \n",
      "19": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.]]: \n <IND> average_over += loss[1] \n",
      "20": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.type]: \n <IND> average_over += loss[1] \n",
      "21": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ]) \n <IND> average_over += loss[1] \n",
      "22": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.a)) \n <IND> average_over += loss[1] \n",
      "23": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., <IND> )) \n <IND> average_over += loss[1] \n",
      "24": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.]) \n <DED> average_over += loss[1] \n",
      "25": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.]) \n \n average_over += loss[1] \n",
      "26": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.s): \n <IND> average_over += loss[1] \n",
      "27": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., <IND> average_over += loss[1] \n",
      "28": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n",
      "29": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.c): \n <IND> average_over += loss[1] \n",
      "30": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.')) \n <IND> average_over += loss[1] \n",
      "31": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.js)) \n <IND> average_over += loss[1] \n",
      "32": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.a)) \n",
      "33": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.js = [] \n <IND> average_over += loss[1] \n",
      "34": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. )) \n <IND> average_over += loss[1] \n",
      "35": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ]) \n",
      "36": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.-1) \n <IND> average_over += loss[1] \n",
      "37": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., <IND>",
      "38": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ]) \n <DED> average_over += loss[1] \n",
      "39": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.): \n <DED> average_over += loss[1] \n",
      "40": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) <DED> <IND> average_over += loss[1] \n",
      "41": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ]) \n \n average_over += loss[1] \n",
      "42": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ), \n",
      "43": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.type(*): \n <IND> average_over += loss[1] \n",
      "44": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.type(*)): \n <IND> average_over += loss[1] \n",
      "45": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., <IND> )) \n <DED> average_over += loss[1] \n",
      "46": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., <IND> )) \n \n average_over += loss[1] \n",
      "47": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) <IND> <IND> average_over += loss[1] \n",
      "48": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Any]) \n <IND> average_over += loss[1] \n",
      "49": "\n if isinstance(loss, Union[Tuple[typing.Type[typing.Any], Tuple[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            deposit_transaction=data['deposit_transaction'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelNewBalance.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], <IND>",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> deposit_transaction=data['deposit_transaction'], \n",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], <DED>",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> deposit_transaction=data['deposit_transaction'], \n",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']])), \n deposit_transaction=data['deposit_transaction'], \n",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposits_transaction=data['deposit_transaction'], \n",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier''])), \n deposit_transaction=data['deposit_transaction'], \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])) \n deposit_transaction=data['deposit_transaction'], \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n ) \n",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']]), \n deposit_transaction=data['deposit_transaction'], \n",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(), \n deposit_transaction=data['deposit_transaction'], \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n if not token_network_identifier: \n <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channels_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']')), \n deposit_transaction=data['deposit_transaction'], \n",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['canonical_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n canal_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n return token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']))), \n deposit_transaction=data['deposit_transaction'], \n",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']), \n deposit_transaction=data['deposit_transaction'], \n",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']\")), \n deposit_transaction=data['deposit_transaction'], \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], <DED> token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=typing.ChannelID(int(data['token_network_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'], '')), \n deposit_transaction=data['deposit_transaction'], \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n if not token_network_identifier: \n \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier =typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n network_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n key_network_identifier=typing.ChannelID(int(data['key_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n type_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier'], \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channels=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=typing.ChannelID(int(data['canonical_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n ), \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n return token_network_identifier=to_canonical_address(data['token_network_identifier'], \n",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_id=typing.ChannelID(int(data['channel_id'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n return token_network_identifier(to_canonical_address(data['token_network_identifier']), \n",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'))), \n deposit_transaction=data['deposit_transaction'], \n",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelId(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n address=to_canonical_address(data['token_network_identifier']), \n",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], <DED> channel_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelIDID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_address=typing.ChannelID(int(data['channel_address'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n return token_network_identifier(data['token_network_identifier']), \n",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier\u2019])), \n deposit_transaction=data['deposit_transaction'], \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID.call(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(idx, conf.item()))\n        <DED>return label_probs\n",
    "target_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(str(idx), conf.item()))\n        <DED>return label_probs\n",
    "warning_line": "            label_probs.append(Label(idx, conf.item()))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "target_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402^",
    "target_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "predictions": [
      "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n"
    ],
    "correct": false,
    "top_five": {
      "0": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "1": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx)) \n <DED> return label_probs \n",
      "2": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "3": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), conf.item())) \n <DED> return label_probs \n",
      "4": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \n return label_probs \n",
      "5": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "6": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(str(idx), conf.item())) \n <DED> return label_probs \n",
      "7": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(str(idx, conf.item()))) \n <DED> return label_probs \n",
      "8": "for idx, conf in enumerate(softmax): \n \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "9": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "10": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item(), str)) \n <DED> return label_probs \n",
      "11": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) <IND> <DED> return label_probs \n",
      "12": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append((Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "13": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item()), int) \n <DED> return label_probs \n",
      "14": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, int(conf.item()))) \n <DED> return label_probs \n",
      "15": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), int(conf.item())) \n <DED> return label_probs \n",
      "16": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, statement.item())) \n <DED> return label_probs \n",
      "17": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(String(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "18": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "19": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(int(idx, conf.item()))) \n <DED> return label_probs \n",
      "20": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> assert label_probs is not None \n label_probs.append(Label(idx, conf.item())) \n",
      "21": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(label(idx, conf.item()))) \n <DED> return label_probs \n",
      "22": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) <DED> return label_probs \n",
      "23": "for idx, conf in enumerate(softmax): <IND> <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "24": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item()).append(Label(idx))) \n <DED> return label_probs \n",
      "25": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Text(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "26": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(int(idx), conf.item())) \n <DED> return label_probs \n",
      "27": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(Idx, conf.item())) \n <DED> return label_probs \n",
      "28": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs <DED> \n",
      "29": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(str(idx)), conf.item())) \n <DED> return label_probs \n",
      "30": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(label(idx, conf.item())) \n <DED> return label_probs \n",
      "31": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs <IND>",
      "32": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, softmax)) \n <DED> return label_probs \n",
      "33": "for idx, conf in enumerate(softmax): <DED> <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "34": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item()).append(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "35": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(str(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "36": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), conf.item())) \n <IND> return label_probs \n",
      "37": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, Softmax(conf.item()))) \n <DED> return label_probs \n",
      "38": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Int(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "39": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, Softmax())) \n <DED> return label_probs \n",
      "40": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> if label_probs is not None: \n <IND> label_probs.append(Label(idx, conf.item())) \n",
      "41": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> if label_probs is None: \n <IND> label_probs.append(Label(idx, conf.item())) \n",
      "42": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> assert label_probs is not None \n label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "43": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())).append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "44": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \n if label_probs is None: \n <IND> label_probs.append(Label(idx, conf.item())) \n",
      "45": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx)) \n <IND> return label_probs \n",
      "46": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item()), int)) \n <DED> return label_probs \n",
      "47": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item()),...) \n <DED> return label_probs \n",
      "48": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \n if label_probs is not None: \n <IND> label_probs.append(Label(idx, conf.item())) \n",
      "49": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, Softmax)) \n <DED> return label_probs \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=int(data['channel_identifier']),\n        )\n",
    "target_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n        )\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `RouteState.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 679,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "1": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) <IND>",
      "2": "node_address=to_canonical_address(data['node_address']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "3": "node_address=to_canonical_address(data['node_address']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "4": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) <DED> \n",
      "5": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])) \n ) \n",
      "6": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> ) \n",
      "7": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']])), \n ) \n",
      "8": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> ) \n",
      "9": "node_address=to_canonical_address(data['node_address']), \n channels=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "10": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']), \n ) \n",
      "11": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']]), \n ) \n",
      "12": "node_address=to_canonical_address(data['node_address']), \n channels_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "13": "node_address=to_canonical_address(data['node_address']), \n key_typing.ChannelID(int(data['key_identifier'])), \n ) \n",
      "14": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(), \n ) \n",
      "15": "node_address=to_canonical_address(data['node_address']), \n type=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "16": "node_address=to_canonical_address(data['node_address'], \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "17": "node_address=to_canonical_address(data['node_address']), \n key_canonical_address=typing.ChannelID(int(data['key_canonical_address'])), \n ) \n",
      "18": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']))), \n ) \n",
      "19": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']')), \n ) \n",
      "20": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier''])), \n ) \n",
      "21": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'], '')), \n ) \n",
      "22": "node_address=to_canonical_address(data['node_address']), \n signal_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "23": "node_address=to_canonical_address(data['node_address']), \n key_id=typing.ChannelID(int(data['key_id'])), \n ) \n",
      "24": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['canonical_identifier'])), \n ) \n",
      "25": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']\")), \n ) \n",
      "26": "node_address=to_canonical_address(data['node_address']), \n key_identifier=key_identifier(int(data['key_identifier'])), \n ) \n",
      "27": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ), \n",
      "28": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(Data['channel_identifier'])), \n ) \n",
      "29": "node_address=to_canonical_address(data['node_address']), \n name=typing.ChannelID(int(data['name_identifier'])), \n ) \n",
      "30": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'] )), \n ) \n",
      "31": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'))), \n ) \n",
      "32": "node_address=to_canonical_address(data['node_address']), \n route_identifier=typing.ChannelID(int(data['route_identifier'])), \n ) \n",
      "33": "node_address=to_canonicical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "34": "node_address=to_canonical_address(data['node_address']), \n target_channel_identifier=typing.ChannelID(int(data['target_identifier'])), \n ) \n",
      "35": "node_address=to_canonical_address(data['node_address']), \n path_identifier=typing.ChannelID(int(data['path_identifier'])), \n ) \n",
      "36": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n () \n",
      "37": "node_address=to_canonical_address(data['node_address']), \n canal_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "38": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID.call(int(data['channel_identifier'])), \n ) \n",
      "39": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])).decode(), \n ) \n",
      "40": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_address'])), \n ) \n",
      "41": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n",
      "42": "node_address=to_canonical_address(data['node_address']), \n channel_identifier = typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "43": "node_address=to_canonical_address(data['node_address']), \n key_number=typing.ChannelID(int(data['key_number'])), \n ) \n",
      "44": "node_address=to_canonical_address(data['node_address']), \n Channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "45": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier\u2019])), \n ) \n",
      "46": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.PanelID(int(data['channel_identifier'])), \n ) \n",
      "47": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.Dict(int(data['channel_identifier'])), \n ) \n",
      "48": "node_address=to_canonical_address(data['node_address']), \n label=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "49": "node_address=to_canonical_address(data['node_address']), \n key_type=typing.ChannelID(int(data['key_type'])), \n ) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(base.value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "target_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "warning_line": "                new_value = self._handle_Subscript(value)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Instagram/LibCST",
    "source_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "target_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8^",
    "target_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "predictions": [
      "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "1": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "2": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, BaseExpression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "3": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "4": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "5": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "6": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "7": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "8": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "9": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "10": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "11": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_NameOrAttribute(value) \n",
      "12": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, base.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "13": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, base.value): \n <IND> new_value = self._handle_Subscript(value) \n",
      "14": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value): \n <IND> new_value = self._handle_Subscript(value) \n",
      "15": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript) && cst._nodes.expression.BaseExpression: \n <IND> new_value = self._handle_Subscript(value) \n",
      "16": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "17": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript) -> BaseExpression: \n <IND> new_value = self._handle_Subscript(value) \n",
      "18": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> assert value is not None \n new_value = self._handle_Subscript(value) \n",
      "19": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "20": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, Subscript, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "21": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base[value, cst.Subscript]): \n <IND> new_value = self._handle_Subscript(value) \n",
      "22": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript, value): \n <IND> new_value = self._handle_Subscript(value) \n",
      "23": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript)): \n <IND> new_value = self._handle_Subscript(value) \n",
      "24": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "25": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "26": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, base.subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "27": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "28": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, BaseExpression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "29": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, BaseExpression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "30": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, sub_value): \n <IND> new_value = self._handle_Subscript(value) \n",
      "31": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript) && cst._nodes.expression.BaseExpression && cst._nodes.expression.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "32": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = cst._handle_Subscript(value) \n",
      "33": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, expression.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "34": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "35": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "36": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_BaseExpression(value) \n",
      "37": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, base.Expression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "38": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, base.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "39": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript) -> None: \n <IND> new_value = self._handle_Subscript(value) \n",
      "40": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, BaseExpression, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "41": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, sub_type, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "42": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "43": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> assert value is not None \n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, BaseExpression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "44": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_TypeOrAttribute(value) \n",
      "45": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, this.expression.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "46": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, sub_str): \n <IND> new_value = self._handle_Subscript(value) \n",
      "47": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, async.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "48": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): <IND> <IND> new_value = self._handle_Subscript(value) \n",
      "49": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value), cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.loads(json_fp)\n            <DED>for jd in json_data:\n",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.load(json_fp)\n            <DED>for jd in json_data:\n",
    "warning_line": "                json_data = json.loads(json_fp)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "target_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "1": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "2": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads() \n <DED> for jd in json_data: \n",
      "3": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "4": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = str(json_fp) \n <DED> for jd in json_data: \n",
      "5": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_file, str) \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "6": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = bytes(json_fp) \n <DED> for jd in json_data: \n",
      "7": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <DED> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "8": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, json_file) \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "9": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, json_data) \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "10": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, str) \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "11": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "12": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, json_file, str) \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "13": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert json_fp is not None \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "14": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = Bytes(json_fp) \n <DED> for jd in json_data: \n",
      "15": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp).decode() \n <DED> for jd in json_data: \n",
      "16": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp), \n <DED> for jd in json_data: \n",
      "17": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(str(json_fp)) \n <DED> for jd in json_data: \n",
      "18": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, json_file), json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "19": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(JSON_fp) \n <DED> for jd in json_data: \n",
      "20": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(Json_fp) \n <DED> for jd in json_data: \n",
      "21": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(bytes(json_fp)) \n <DED> for jd in json_data: \n",
      "22": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data=bytes(json_fp) \n <DED> for jd in json_data: \n",
      "23": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data_ = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "24": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = str(json.loads(json_fp)) \n <DED> for jd in json_data: \n",
      "25": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(int(json_fp)) \n <DED> for jd in json_data: \n",
      "26": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(byte_fp) \n <DED> for jd in json_data: \n",
      "27": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(bytes(json_fp)) \n <DED> for jd in json_data: \n",
      "28": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(this.json_fp) \n <DED> for jd in json_data: \n",
      "29": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: <IND>",
      "30": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data_number = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "31": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json_loads(json_fp) \n <DED> for jd in json_data: \n",
      "32": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(wson_fp) \n <DED> for jd in json_data: \n",
      "33": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp); <DED> for jd in json_data: \n",
      "34": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: <IND> <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "35": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(io.TextIOWrapper()) \n <DED> for jd in json_data: \n",
      "36": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(io.TextIOWrapper) \n <DED> for jd in json_data: \n",
      "37": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: <DED> <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "38": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_file, str) \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "39": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(join(json_fp)) \n <DED> for jd in json_data: \n",
      "40": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: <DED>",
      "41": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(jason_fp) \n <DED> for jd in json_data: \n",
      "42": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, json_data) \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "43": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> jd in json_data: \n",
      "44": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, json_file) \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "45": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = params(json_fp) \n <DED> for jd in json_data: \n",
      "46": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) <IND> <DED> for jd in json_data: \n",
      "47": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads() \n <IND> for jd in json_data: \n",
      "48": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_file, str) \n json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "49": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, str) \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                <IND>tables[table.name] = table\n\n",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                <IND>tables[name] = table\n\n",
    "warning_line": "                tables[table.name] = table",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "source_filename": "transformers4rec/torch/features/embedding.py",
    "target_filename": "transformers4rec/torch/features/embedding.py",
    "source_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7^",
    "target_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "predictions": [
      "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "1": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> tables[table.name] = table \n \n",
      "2": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "3": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "4": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is None: \n <IND> tables[table.name] = table \n \n",
      "5": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "6": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "7": "features_dim[name] = table.dim \n if table.name is not None and table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "8": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = table \n \n",
      "9": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = str \n \n",
      "10": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert isinstance(table.name, str) \n tables[table.name] = str \n \n",
      "11": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is None: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "12": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "13": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = list(table.dim) \n \n",
      "14": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "15": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = Table \n \n",
      "16": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ <DED> \n \n",
      "17": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "18": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <DED> tables[table.name] = table \n \n",
      "19": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = base \n \n",
      "20": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> table.name not in tables \n \n",
      "21": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> list(table.name) = list(table.dim) \n \n",
      "22": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = \"\" \n \n",
      "23": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "24": "features_dim[name] = table.dim \n if table.name is not None: \n <IND> tables[table.name] = table \n \n",
      "25": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "26": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> if table.name is not None: \n <IND> tables[table.name] = table \n \n",
      "27": "features_dim[name] = table.dim \n if Table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "28": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if tables[table.name] == table \n \n",
      "29": "features_dim[name] = table.dim \n if table.name is not None and table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "30": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> tables[table.name] = [] \n \n",
      "31": "features_dim[name] = table.dim \n if table.name is not None or table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "32": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[Table.name] = table \n \n",
      "33": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ <IND> \n",
      "34": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[Table.name] = dict.__setitem__ \n \n",
      "35": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "36": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = () \n \n",
      "37": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> tables[table.name] = dict.__setitem__ <DED> \n \n",
      "38": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> table.name = dict.__setitem__ \n \n",
      "39": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> if table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "40": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> table.name is not None \n \n",
      "41": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> rows[table.name] = table \n \n",
      "42": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> table.name not in tables \n \n",
      "43": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name does not exist \n tables[table.name] = table \n \n",
      "44": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n \n",
      "45": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> list(table.name) = list(table.name) \n \n",
      "46": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = [] \n \n",
      "47": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> isinstance(table.name) \n \n",
      "48": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is None: \n <IND> tables[table.name] = [] \n \n",
      "49": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> tables[Table.name] = table \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )\n",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_line": "            current_htlc_signatures=[],",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 477,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "spesmilo/electrum",
    "source_filename": "electrum/lnpeer.py",
    "target_filename": "electrum/lnpeer.py",
    "source_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2^",
    "target_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "predictions": [
      "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y"
    ],
    "correct": false,
    "top_five": {
      "0": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "1": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "2": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "3": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "4": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "5": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "6": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "7": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.a",
      "8": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) \n",
      "9": "current_commitment_signature=None, \n current_htlc_signatures=bytes(), \n ) \n",
      "10": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], \n ) \n",
      "11": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "12": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__) <IND> <IND>",
      "13": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.')",
      "14": "current_commitment_signature=None, \n current_htlc_signatures=bytes[0], \n ) \n",
      "15": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__(), \n current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "16": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.) \n",
      "17": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.KNOWN_COMMITMENT_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "18": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[], T.M.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "19": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__ and current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "20": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__ and current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "21": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=B.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "22": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, <IND> current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "23": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.KNOWN_COMMITMENT_signature=None, \n current_htlc_signatures=bytes(bytes(min.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "24": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, <DED> current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "25": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.') \n",
      "26": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[1, T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "27": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[], T.K.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "28": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__(), \n current_htlc_signatures=[], T.M.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "29": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "30": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[], T.E.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "31": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.') ) \n",
      "32": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "33": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.')) \n",
      "34": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.\"]) \n",
      "35": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], def]) \n ) \n",
      "36": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__ and current_htlc_signatures=bytes([], T.M.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.",
      "37": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.0]) \n",
      "38": "current_commitment_signature=None, \n current_htlc_signatures=bytes([]), \n ) \n",
      "39": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.]) \n",
      "40": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.9) \n",
      "41": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.') <IND>",
      "42": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.'): \n",
      "43": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.1) \n",
      "44": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.YAP",
      "45": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.) <IND>",
      "46": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures)=T[0], T.M.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y",
      "47": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.') <DED>",
      "48": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.commitment_signature=LocalConfig.__init__, \n current_htlc_signatures=[], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y'",
      "49": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], T.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.) <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    with proc as nix_env:\n        <IND>return parse_packages_xml(nix_env.stdout)\n",
    "target_code": "    with proc as nix_env:\n        <IND>assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_line": "        return parse_packages_xml(nix_env.stdout)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 258,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Mic92/nixpkgs-review",
    "source_filename": "nixpkgs_review/review.py",
    "target_filename": "nixpkgs_review/review.py",
    "source_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a^",
    "target_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "predictions": [
      "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(nix_env.stdout) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(nix_env.stdout) \n",
      "1": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "2": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "3": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "4": "with proc as nix_env: \n <IND> assert isinstance(nix_env, Any) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "5": "with proc as nix_env: \n <IND> assert isinstance(nix_env, Any) \n return parse_packages_xml(nix_env.stdout) \n",
      "6": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, Any) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "7": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, IO[bytes]) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "8": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "9": "with proc as nix_env: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "10": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "11": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "12": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, Any) \n return parse_packages_xml(nix_env.stdout) \n",
      "13": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "14": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "15": "with proc as nix_env: \n <IND> assert nix_env.IO[bytes] is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "16": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any): \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "17": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(nix_env.stdout, Any) \n",
      "18": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]): \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "19": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, any) \n return parse_packages_xml(nix_env.stdout) \n",
      "20": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any): \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "21": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, IO[bytes]) \n return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "22": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) <DED> return parse_packages_xml(nix_env.stdout) \n",
      "23": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, any) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "24": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) <DED> return parse_packages_xml(nix_env.stdout) \n",
      "25": "with proc as nix_env: \n <IND> assert isinstance(nix_env, Any) \n return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "26": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, Any) \n return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "27": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, OIO[bytes]) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "28": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes) \n return parse_packages_xml(nix_env.stdout) \n",
      "29": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "30": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) <IND> return parse_packages_xml(nix_env.stdout) \n",
      "31": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "32": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) -> None: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "33": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, OIO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "34": "with proc as nix_env: \n <IND> assert isinstance(nix_env[bytes]) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "35": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) <IND> return parse_packages_xml(nix_env.stdout) \n",
      "36": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes) \n return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "37": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) -> None: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "38": "with proc as nix_env: \n <IND> assert nix_env.IO[bytes] is not None \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "39": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "40": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, \"IO[bytes]\") \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "41": "with proc as nix_env: \n <IND> assert isinstance(nix_env.bytes, OIO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "42": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(int(nix_env.stdout)) \n",
      "43": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(bytes[0](nix_env.stdout)) \n",
      "44": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, Any) \n return parse_packages_xml(nix_env[stdout]) \n",
      "45": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]): \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "46": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, all_bytes) \n return parse_packages_xml(nix_env.stdout) \n",
      "47": "with proc as nix_env: \n <IND> if not nix_env: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "48": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(nix_env.stdout, Any) \n",
      "49": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(nix_env[stdout]) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_line": "        player.init_names(self._name, title, self.description, self.short_description)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/charbuilder.py",
    "target_filename": "tale/charbuilder.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "1": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n ) \n",
      "2": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, player.short_description) \n",
      "3": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "4": "player.init_gender(self.gender) \n assert self.title is not None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "5": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, str(self.short_description)) \n",
      "6": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names( <DED> self._name, title, self.description, self.short_description) \n",
      "7": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n return player.init_names(self._name, title, self.description, self.short_description) \n",
      "8": "player.init_gender(self.gender) \n title = None if self.title == self._name else assert self.title is not None \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "9": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(player._name, title, self.description, self.short_description) \n",
      "10": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n ) \n",
      "11": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n return player.init_names(self._name, title, self.description, self.short_description) \n",
      "12": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names( \n self._name, title, self.description, self.short_description) \n",
      "13": "player.init_gender(self.gender) \n title = None if self.title == self._name else str(self.title) \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "14": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n return Player.init_names(self._name, title, self.description, self.short_description) \n",
      "15": "player.init_gender(self.gender) \n name = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "16": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n return Player.init_names(self._name, title, self.description, self.short_description) \n",
      "17": "player.init_gender(self.gender) \n name = None if self.title == self._name else name \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "18": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names( <IND> self._name, title, self.description, self.short_description) \n",
      "19": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description, str) \n",
      "20": "player.init_gender(self.gender) \n player.init_names(self._name, title, self.description, self.short_description) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "21": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, str(self.description), self.short_description) \n",
      "22": "player.init_gender(self.gender) \n player.init_names(self._name, title, self.description, self.short_description) \n title = None if self.title == self._name else player.init_names(self._name, title) \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "23": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <IND> player.init_names(self._name, title, self.description, self.short_description) \n",
      "24": "player.init_gender(self.gender) \n player.init_names(self._name, title, self.description, self.short_description) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n",
      "25": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "26": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(player.init_names(self._name, title, self.description, self.short_description)) \n",
      "27": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <DED> \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "28": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, name, self.description, self.short_description) \n",
      "29": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, str.short_description) \n",
      "30": "player.init_gender(self.gender) \n if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "31": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n assert self.short_description is not None \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "32": "player.init_gender(self.gender) \n self.title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "33": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, str(self.description, self.short_description)) \n",
      "34": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, list(self.short_description)) \n",
      "35": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n",
      "36": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description,...self.short_description) \n",
      "37": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n <IND>",
      "38": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, str, self.short_description) \n",
      "39": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(player._name, title, self.description, player.short_description) \n",
      "40": "player.init_gender(self.gender) \n assert self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "41": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n \n",
      "42": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, self.description, str(self.short_description)) \n",
      "43": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, str(self.description), str(self.short_description)) \n",
      "44": "player.init_gender(self.gender) <DED> title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "45": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n name = player.init_names(self._name, title, self.description, self.short_description) \n",
      "46": "player.init_gender(self.gender) \n title = None if self.title == self._name else str(title) \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "47": "player.init_gender(self.gender) <IND> title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "48": "player.init_gender(self.gender) \n title = None if self.title == self._name else player.init_names(self._name, title, self.description, self.short_description) \n player.init_names(self._name, title, self.description, player.short_description) \n",
      "49": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, this.short_description) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_line": "    op_node = compile_type_check_op(expr, ctx=ctx)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 91,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/expr.py",
    "target_filename": "edb/edgeql/compiler/expr.py",
    "source_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb^",
    "target_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "predictions": [
      "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "1": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "2": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "3": "def compile_IsOp( \n expr: IsOp(qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "4": "def compile_IsOp( \n expr: IsOp(expr, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "5": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "6": "def compile_IsOp( \n expr: List[qlast.Base, *, ctx: context.ContextLevel]) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "7": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "8": "def compile_IsOp( \n expr: qlast.IsOp(), *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "9": "def compile_IsOp( \n expr: Optional[qlast.Base, *, ctx: context.ContextLevel]) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "10": "def compile_IsOp( \n expr: IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "11": "def compile_IsOp( \n expr: qlast.IsOp(expr, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "12": "def compile_IsOp( \n expr: ISO, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "13": "def compile_IsOp( \n expr: IsOp(), *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "14": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, op_node) \n",
      "15": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, op_node) \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "16": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert ctx is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "17": "def compile_IsOp( \n expr: Base[qlast.IsOp], *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "18": "def compile_IsOp( \n expr: IsOp(str, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "19": "def compile_IsOp( <DED> expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "20": "def compile_IsOp( \n expr: Base[qlast.Base, *, ctx: context.ContextLevel]) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "21": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel()) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "22": "def compile_IsOp( <IND> expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "23": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "24": "def compile_IsOp( \n expr: base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "25": "def compile_IsOp( \n expr: Expr.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "26": "def compile_IsOp( \n expr=qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "27": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "28": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel, irast.Set) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "29": "def compile_IsOp( \n expr: qlast.State, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "30": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert it is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "31": "def compile_IsOp( \n expr: import qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "32": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "33": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "34": "def compile_IsOp( \n expr: IsOp(expr), *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "35": "def compile_IsOp( \n expr: ISOp(expr, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "36": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: <IND> <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "37": "def compile_IsOp( \n expr = qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "38": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, op_node) \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "39": "def compile_IsOp( \n expr: List[qlast.Base], *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "40": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: <DED> <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "41": "def compile_IsOp( \n expr: Async.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "42": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "43": "def compile_IsOp( \n expr: qlast.Instance, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "44": "def compile_IsOp( \n expr: ISIS, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "45": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, *, ctx=ctx) \n",
      "46": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "47": "def compile_IsOp( \n expr: index, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "48": "def compile_IsOp( \n expr: ISOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "49": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for component in self.pipeline:\n            <IND>args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)\n",
    "target_code": "        for component in self.pipeline:\n            <IND>args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_line": "            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "1": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.decode()) \n updates = component.pipeline_init(*args) \n",
      "2": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "3": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.name) \n updates = component.pipeline_init(*args) \n",
      "4": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.encode()) \n updates = component.pipeline_init(*args) \n",
      "5": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init()) \n updates = component.pipeline_init(*args) \n",
      "6": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) \n updates = component.pipeline_init(*args) \n",
      "7": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.protocol) \n updates = component.pipeline_init(*args) \n",
      "8": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict()) \n updates = component.pipeline_init(*args) \n",
      "9": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.state) \n updates = component.pipeline_init(*args) \n",
      "10": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get('pipeline_init')) \n updates = component.pipeline_init(*args) \n",
      "11": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.all()) \n updates = component.pipeline_init(*args) \n",
      "12": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.address()) \n updates = component.pipeline_init(*args) \n",
      "13": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.aliases()) \n updates = component.pipeline_init(*args) \n",
      "14": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.utf-8) \n updates = component.pipeline_init(*args) \n",
      "15": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.indexOf('pipeline_init')) \n updates = component.pipeline_init(*args) \n",
      "16": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args) \n updates = component.pipeline_init(*args) \n",
      "17": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.override()) \n updates = component.pipeline_init(*args) \n",
      "18": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.alias()) \n updates = component.pipeline_init(*args) \n",
      "19": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args()) \n updates = component.pipeline_init(*args) \n",
      "20": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str(?)) \n updates = component.pipeline_init(*args) \n",
      "21": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.keys()) \n updates = component.pipeline_init(*args) \n",
      "22": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.indexOf()) \n updates = component.pipeline_init(*args) \n",
      "23": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.context) \n updates = component.pipeline_init(*args) \n",
      "24": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.npy()) \n updates = component.pipeline_init(*args) \n",
      "25": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.debug()) \n updates = component.pipeline_init(*args) \n",
      "26": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.log()) \n updates = component.pipeline_init(*args) \n",
      "27": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.aliases) \n updates = component.pipeline_init(*args) \n",
      "28": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.relationships()) \n updates = component.pipeline_init(*args) \n",
      "29": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline\")) \n updates = component.pipeline_init(*args) \n",
      "30": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str()) \n updates = component.pipeline_init(*args) \n",
      "31": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.result()) \n updates = component.pipeline_init(*args) \n",
      "32": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.context()) \n updates = component.pipeline_init(*args) \n",
      "33": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str()) \n updates = component.pipeline_init(*args) \n",
      "34": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.save()) \n updates = component.pipeline_init(*args) \n",
      "35": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\", Any)) \n updates = component.pipeline_init(*args) \n",
      "36": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.required) \n updates = component.pipeline_init(*args) \n",
      "37": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.assert(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "38": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.encode(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "39": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.decode(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "40": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\", [])) \n updates = component.pipeline_init(*args) \n",
      "41": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.call(component.pipeline_init_args)) \n updates = component.pipeline_init(*args) \n",
      "42": "for component in self.pipeline: \n <IND> args: Dict[str, typing.Any] = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.decode()) \n updates = component.pipeline_init(*args) \n",
      "43": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.indexOf(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "44": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.decode(\"pipeline\")) \n updates = component.pipeline_init(*args) \n",
      "45": "for component in self.pipeline: \n <IND> args: Dict[str, typing.Any] = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "46": "for component in self.pipeline: \n <IND> args: Dict[str, Any] = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.decode()) \n updates = component.pipeline_init(*args) \n",
      "47": "for component in self.pipeline: \n <IND> args: Dict[str, Any] = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "48": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.call(component.pipeline_init_args())) \n updates = component.pipeline_init(*args) \n",
      "49": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                new = Or(new, key_argument != index_argument)\n\n",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_line": "                new = Or(new, key_argument != index_argument)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1374,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "\n new = Or(new, key_argument!= index_argument) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n new = Or(new, key_argument!= index_argument) \n \n",
      "1": "\n new_argument = Or(key_argument!= index_argument) \n \n",
      "2": "\n new_argument = Or(new, key_argument!= index_argument) \n \n",
      "3": "\n new_argument: Optional[mythril.laser.smt.bool.Or] = Or(new, key_argument!= index_argument) \n \n",
      "4": "\n new = Or(key_argument!= index_argument) \n \n",
      "5": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "6": "\n assert key_argument is not None \n new = Or(new, key_argument!= index_argument) \n \n",
      "7": "\n key_argument=mythril.laser.smt.bool.Bool(new, key_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "8": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= key_argument) \n \n",
      "9": "\n new_argument: Optional[mythril.laser.smt.bool.Bool] = Or(new, key_argument!= index_argument) \n \n",
      "10": "\n key_argument = Mythril.laser.smt.bool.Or() \n new = Or(new, key_argument!= index_argument) \n \n",
      "11": "\n key_argument=mythril.laser.smt.bool.Bool() \n new = Or(new, key_argument!= index_argument) \n \n",
      "12": "\n key_argument = Or(new, key_argument!= index_argument) \n \n",
      "13": "\n key_argument = Mythril.laser.smt.bool.Or(key_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "14": "\n new = Or(mythril.laser.smt.bool.Or(new), key_argument!= index_argument) \n \n",
      "15": "\n new_argument=mythril.laser.smt.bool.Or = Or(new, key_argument!= index_argument) \n \n",
      "16": "\n key_argument = Mythril.laser.smt.bool.Bool(new, key_argument!= index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "17": "\n key_argument = Mythril.laser.smt.bool.Bool(new, key_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "18": "\n key_argument = Mythril.laser.smt.bool.Bool() \n new = Or(new, key_argument!= index_argument) \n \n",
      "19": "\n key_argument=mythril.laser.smt.bool.Or = Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "20": "\n key_argument=mythril.laser.smt.bool.Bool(new, key_argument!= index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "21": "\n new = Or(mythril.laser.smt.bool.Or), key_argument!= index_argument) \n \n",
      "22": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= bool) \n \n",
      "23": "\n key_argument = Mythril.laser.smt.bool.Bool(new, key_argument!= index_argument) \n new = Or(new, key_argument!= key_argument) \n \n",
      "24": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument) \n \n",
      "25": "\n new_argument = Or(null, key_argument!= index_argument) \n \n",
      "26": "\n key_argument=mythril.laser.smt.bool.Or = Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= key_argument) \n \n",
      "27": "\n new_argument: Optional[mythril.laser.smt.bool.Or] = Or(new, key_argument:!= index_argument) \n \n",
      "28": "\n key_argument=mythril.laser.smt.bool.Or = new \n new = Or(key_argument!= index_argument) \n \n",
      "29": "\n new_argument: bool = Or(new, key_argument!= index_argument) \n \n",
      "30": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= value) \n \n",
      "31": "\n key_argument=mythril.laser.smt.bool.Bool(new, key_argument!= index_argument) \n new = Or(new, key_argument!= key_argument) \n \n",
      "32": "\n key_argument=mythril.laser.smt.bool.Bool(new, key_argument=index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "33": "\n new = Or(mythril.laser.smt.bool.Or, key_argument!= index_argument) \n \n",
      "34": "\n new_argument: Optional[mythril.laser.smt.bool.Or] = Or(new, key_argument!= index_argument) \n <IND>",
      "35": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= bool_argument) \n \n",
      "36": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= index_argument) \n <IND>",
      "37": "\n key_argument = Or(new, key_argument!= index_argument) \n <DED> new = Or(mythril.laser.smt.bool.Or) \n \n",
      "38": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!== key_argument) \n \n",
      "39": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(key_argument!= index_argument) \n \n",
      "40": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= list(index_argument)) \n \n",
      "41": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= list_argument) \n \n",
      "42": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= []) \n \n",
      "43": "\n key_argument=mythril.laser.smt.bool.Or = Or(new, key_argument!= index_argument) \n \n",
      "44": "\n key_argument=mythril.laser.smt.bool.Bool(new, key_argument) \n new = Or(key_argument!= index_argument) \n \n",
      "45": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(mythril.laser.smt.bool.Or) \n \n",
      "46": "\n new_argument=mythril.laser.smt.bool.Or(key_argument) \n \n",
      "47": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= \"\") \n \n",
      "48": "\n key_argument = Mythril.laser.smt.bool.Or(new, key_argument!= index_argument) \n new = Or(new, key_argument!= target_argument) \n \n",
      "49": "\n key_argument=mythril.laser.smt.bool.Or = Or(new, key_argument!= index_argument) \n new = Or(new, key_argument) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_line": "    (\"read_map\", [T.File()], T.Map(None), _notimpl),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/StdLib.py",
    "target_filename": "WDL/StdLib.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n"
    ],
    "correct": false,
    "top_five": {
      "0": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "1": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(One), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "2": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "3": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "4": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Optional[T.File()], None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "5": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n ) -> None: \n",
      "6": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), <IND> (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "7": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), <IND> (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "8": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(none), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "9": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), <IND>",
      "10": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), <DED> (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "11": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Optional[T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "12": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "13": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()], _notimpl), \n",
      "14": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map, [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "15": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n ): \n",
      "16": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), <DED> (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "17": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n ) \n",
      "18": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", T.File(), T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "19": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(T.NONE), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "20": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File(), T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "21": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "22": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((None), _notimpl)), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "23": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\u201cread_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "24": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n \"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "25": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map('one'), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "26": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(NONE), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "27": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Optional[T.File()], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "28": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "29": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "30": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n ), \n",
      "31": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "32": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", Optional[T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "33": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(_one), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "34": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_line\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "35": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", \"T.File()\", T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "36": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", List[T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "37": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Array(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "38": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File(), T.Array(T.Any()), _notimpl), \n",
      "39": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "40": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\u201cread_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "41": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Noone), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "42": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Path(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "43": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None, _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "44": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([None], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "45": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Count), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "46": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(UnknownOne), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "47": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "48": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(10)), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "49": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map('None'), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_line": "            amount=int(data['amount']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 598,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['initiator']), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['initiator']), \n initiator=to_canonical_address(data['initiator']), \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['initiator'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['initiator']), \n",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['token_identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['token_identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['token_identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_address']), \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['token_identifier'])), \n amount=TokenAmount(int(data['token_network_identifier'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['token_network_identifier'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['token_identifier'])), \n amount=TokenAmount(int(data['initiator'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['initiator'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=Tokenamount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['token_identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token']), \n",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(to_canonical_address['token']), \n",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['token_identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_address']), \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <DED> token_network_identifier=to_canonical_address(data['token_network_address(data['token_network_identifier']), \n",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <IND>",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['initiator'])), \n initiator=to_canonical_address(data['token_network_identifier']), \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <DED> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <IND> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_identifier=to_canonical_address(data['token_network_address(data['token_network_identifier']), \n",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token']), \n",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_address']), \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), <IND> initiator=to_canonical_address(data['initiator']), \n",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiationiator']), \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), <DED> initiator=to_canonical_address(data['initiator']), \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])) \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['initiator']), \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['amount'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_address']), \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['initiator']), \n",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n ) \n",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['token_identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_address['initiator']), \n",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <DED> to_canonical_address(data['token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['token'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_address']), \n",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token'])), \n",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator'], \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['item']), \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <DED> token_network_identifier=to_canonical_address(data['token_network_address(data['token_network_address['token']), \n",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['token_identifier'])), \n amount=to_canonical_address(data['token_network_identifier']), \n initiator=to_canonical_address(data['token']), \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['id']), \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "target_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "warning_line": "        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `frozenset[str]` for 5th parameter `step_metadata_keys` to call `BuilderConfig.__init__` but got `typing.Set[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 210,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/datasets",
    "source_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "target_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "source_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f^",
    "target_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f",
    "predictions": [
      "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n"
    ],
    "correct": true,
    "top_five": {
      "0": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "1": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS], \n ), \n",
      "2": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "3": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <IND>",
      "4": "file_suffix='_medium_expert-v2', <DED> step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "5": "file_suffix='_medium_expert-v2', <IND> step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "6": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), <IND> ), \n",
      "7": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), <DED> ), \n ), \n",
      "8": "file_suffix='_medium_expert-v2', \n steps_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "9": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS, _ACTION_LOG_PROBS]), \n ), \n",
      "10": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n ) \n",
      "11": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED>",
      "12": "file_suffix='_medium_expert-v2', \n ), \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "13": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n get_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "14": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset( [_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "15": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS].decode()), \n ), \n",
      "16": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED> get_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "17": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ) \n",
      "18": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n ), \n",
      "19": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(.extend_metadata_keys([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "20": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(), \n ), \n",
      "21": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n assert isinstance(str, step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "22": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS, ACTION_LOG_PROBS]), \n ), \n",
      "23": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(str([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "24": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(str([_QPOS, _QVEL, _ACTION_LOG_PROBS])), \n ), \n",
      "25": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset[_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "26": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED>'step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "27": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED> ) \n",
      "28": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), <DED> ), \n",
      "29": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_POS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "30": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_ProBS]), \n ), \n",
      "31": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n ) -> StepMetadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "32": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS, '']), \n ), \n",
      "33": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(.extend_metadata_keys([_QPOS, _QVEL, _ACTION_LOG_PROBS])), \n ), \n",
      "34": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(.extend([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "35": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n return self._metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "36": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED> elif isinstance(elif isinstance(elif isinstance(elif elif elif elif elif elif elif elif elif ]): \n",
      "37": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n self._metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "38": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenSet([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "39": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n get_metadata_keys=frozenset([_POS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "40": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS_], \n ), \n",
      "41": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n ) -> Metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "42": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset(int([_QPOS, _QVEL, _ACTION_LOG_PROBS])), \n ), \n",
      "43": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED> get_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "44": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED>'step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "45": "file_suffix='_medium_Expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "46": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED> elif isinstance(elif isinstance(elif elif elif elif elif elif elif elif elif elif elif): \n",
      "47": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n assert isinstance(str, step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n assert isinstance(str, str)), \n",
      "48": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED> get_metadata_keys=frozenset([_POS, _QVEL, _ACTION_LOG_PROBS]), \n",
      "49": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS], <DED> ), \n ), \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED><DED>group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n\n",
    "target_code": "\n<DED><DED>group_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_line": "    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "intel/dffml",
    "source_filename": "dffml/operation/output.py",
    "target_filename": "dffml/operation/output.py",
    "source_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3^",
    "target_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "predictions": [
      "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "1": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=GroupBySpec \n ) \n \n",
      "2": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "3": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n <IND>",
      "4": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\") \n ) \n \n",
      "5": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "6": "\n <DED> \n group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "7": "\n \n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "8": "\n <DED> <DED> group_by_spec = definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "9": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec <DED> \n ) \n \n",
      "10": "\n <DED> <DED> group_by_spec=Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "11": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]), spec=GroupBySpec \n ) \n \n",
      "12": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec <IND> ) \n \n",
      "13": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=\"GroupBySpec\" \n ) \n \n",
      "14": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]], spec=GroupBySpec \n ) \n \n",
      "15": "\n <DED> <DED> group_by_spec = Definition( <DED> name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "16": "<DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "17": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "18": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "19": "\n <DED> <DED> group_by_spec = Definition( <IND> name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "20": "<IND> <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "21": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\") \n \n",
      "22": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"), spec=GroupBySpec \n ) \n \n",
      "23": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n <DED>",
      "24": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "25": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any], spec=GroupBySpec \n ) \n \n",
      "26": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]) \n ) \n \n",
      "27": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", (spec=GroupBySpec \n ) \n \n",
      "28": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" <DED> spec=GroupBySpec \n ) \n \n",
      "29": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=List[GroupBySpec] \n ) \n \n",
      "30": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) <IND> \n",
      "31": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any],\" spec=GroupBySpec \n ) \n \n",
      "32": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=\"GroupBySpec \n ) \n \n",
      "33": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]]\", spec=GroupBySpec \n ) \n \n",
      "34": "\n <DED> <DED> group_by_spec = d\u00e9finition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "35": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GruppeBySpec \n ) \n \n",
      "36": "\n <DED> <DED> group_by_spec = Definition( \n name=\"Group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "37": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple() \n ) \n \n",
      "38": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple(GroupBySpec) \n ) \n \n",
      "39": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) <DED> \n \n",
      "40": "\n <DED> <DED> group_by_spec: Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "41": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.__init__\" \n ) \n \n",
      "42": "\n <DED> <DED> group_by_spec = define( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "43": "\n <DED> <DED> group_by_spec = defined( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "44": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any], spec=GroupBySpec \n ) \n \n",
      "45": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=GroupBySpec \n ) \n <IND>",
      "46": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=Dict[str, Any]), spec=GroupBySpec \n ) \n \n",
      "47": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\" \n ) \n \n",
      "48": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" <IND> ) \n \n",
      "49": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", primitive=GroupBySpec \n ) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        <IND>from_zip_code = ZipCode(from_zip_code)\n        to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "target_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        <IND>from_zip_code = ZipCode.create(from_zip_code)\n        to_zip_code = ZipCode.create(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "warning_line": "        to_zip_code = ZipCode(to_zip_code)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `ZipCode.__init__` but got `Union[ZipCode, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 326,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "olist/correios",
    "source_filename": "correios/client.py",
    "target_filename": "correios/client.py",
    "source_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457^",
    "target_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457",
    "predictions": [
      "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n"
    ],
    "correct": false,
    "top_five": {
      "0": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "1": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.to_zip_code \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "2": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.decode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "3": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode[to_zip_code] \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "4": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.get(\"to_zip_code\") \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "5": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.encode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "6": "to_zip_code: Union[ZipCode, str]) -> str: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "7": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.decode() \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "8": "to_zip_code: Union[ZipCode, str]) -> bool: \n <DED> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "9": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.context(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "10": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "11": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.extend(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "12": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode() \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "13": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.decode(from_zip_code) \n to_zip_code = ZipCode.decode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "14": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.get(from_zip_code) \n to_zip_code = ZipCode.get(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "15": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode[from_zip_code] \n to_zip_code = ZipCode[to_zip_code] \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "16": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "17": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode.to_zip_code \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "18": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.__init__(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "19": "to_zip_code: Union[ZipCode, str]) -> bool: \n \n from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "20": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.code(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "21": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "22": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.get('to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "23": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.on(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "24": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.encode(from_zip_code) \n to_zip_code = ZipCode.encode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "25": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode.get(\"to_zip_code\") \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "26": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.from_zip_code \n to_zip_code = ZipCode.from_zip_code \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "27": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.instance(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "28": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", <IND>",
      "29": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.add(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "30": "to_zip_code: Union[ZipCode, str]) -> bool: <IND> <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "31": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.append(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "32": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode[to_zip_code] \n to_zip_code = ZipCode[to_zip_code] \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "33": "to_zip_code: Union[ZipCode, str]) -> bool: <DED> <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "34": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZIPCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "35": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode() \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "36": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.from_zip_code \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "37": "to_zip_code: Union[ZipCode, str]) -> str: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.to_zip_code \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "38": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", <DED>",
      "39": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) <DED> to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "40": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.call(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "41": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) <IND> to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "42": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) <IND> result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "43": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode.decode() \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "44": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode.decode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "45": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode.encode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "46": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode (from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "47": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode.to_zip_code <IND> result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "48": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode() \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "49": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) <DED> result = self._auth_call(\"verificaDisponibilidadeServico\", \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": true,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not self.check_enable_mode():\n            <IND>output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
    "target_code": "        if not self.check_enable_mode():\n            <IND>new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_line": "            output += self.send_command_timing(",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 65,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ktbyers/netmiko",
    "source_filename": "netmiko/dell/dell_isilon_ssh.py",
    "target_filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8^",
    "target_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "predictions": [
      "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "1": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=100, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "2": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( <DED> cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "3": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( <IND> cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "4": "if not self.check_enable_mode(): \n <DED> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "5": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=flags): \n",
      "6": "if not self.check_enable_mode(): \n <IND> assert self.send_command_timing is not None \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "7": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=False, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "8": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "9": "if not self.check_enable_mode(): \n <IND> output = self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "10": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, self.send_command_timing) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "11": "if not self.check_enable_mode(): \n \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "12": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=0, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "13": "if not self.check_enable_mode(): \n <IND> input += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "14": "if not self.check_enable_mode(): \n <IND> if re.search(pattern, output, flags=re_flags): \n <IND> output += self.send_command_timing( \n strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "15": "if not self.check_enable_mode(): \n <IND> return self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "16": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <IND> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "17": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=pattern, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "18": "if not self.check_enable_mode(): \n <IND> output += re.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "19": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd = 0, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "20": "if not self.check_enable_mode(): <IND> <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "21": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) <IND> if re.search(pattern, output, flags=re_flags): \n",
      "22": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd.prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "23": "if not self.check_enable_mode(): <DED> <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "24": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=None, strip_prompt=False, strip_command=None \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "25": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=None, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "26": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=str(re_flags)): \n",
      "27": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) <DED> if re.search(pattern, output, flags=re_flags): \n",
      "28": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=True \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "29": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): <IND>",
      "30": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=200, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "31": "if not self.check_enable_mode(): \n <IND> output += assert self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "32": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=false, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "33": "if not self.check_enable_mode(): \n <IND> self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "34": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=Absolute, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "35": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=str, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "36": "if not self.check_enable_mode(): \n <IND> output += str.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "37": "if not self.check_enable_mode(): \n <IND> exports = self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "38": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=50, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "39": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <DED> \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "40": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): <DED>",
      "41": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=1, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "42": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=self.check_flags): \n",
      "43": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=str): \n",
      "44": "if not self.check_enable_mode(): \n <IND> yield += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "45": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=True, strip_command=True \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "46": "if not self.check_enable_mode(): \n <IND> input = self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "47": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=str.command_timing): \n",
      "48": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, output=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "49": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=self.flags): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_line": "                cached_trial.distributions[param_name] = dists",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "optuna/optuna",
    "source_filename": "optuna/storages/cached_storage.py",
    "target_filename": "optuna/storages/cached_storage.py",
    "source_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb^",
    "target_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "predictions": [
      "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n"
    ],
    "correct": false,
    "top_five": {
      "0": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "1": "dists[param_name] = distribution <IND> cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "2": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists <IND> updates.params[param_name] = param_value_internal \n",
      "3": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <IND>",
      "4": "dists[param_name] = distribution <DED> \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "5": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists <DED> \n updates.params[param_name] = param_value_internal \n",
      "6": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED> \n",
      "7": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = Dists \n updates.params[param_name] = param_value_internal \n",
      "8": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = (dists) \n updates.params[param_name] = param_value_internal \n",
      "9": "dists[param_name] = distribution \n cached_trial.distributions[param_name,...] = dists \n updates.params[param_name] = param_value_internal \n",
      "10": "dists[param_name] = distribution \n cached_trial.distributions[param_name ] = dists \n updates.params[param_name] = param_value_internal \n",
      "11": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dist \n updates.params[param_name] = param_value_internal \n",
      "12": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = (dists, dists) \n updates.params[param_name] = param_value_internal \n",
      "13": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = distribution \n updates.params[param_name] = param_value_internal \n",
      "14": "dists[param_name] = distribution \n cached_trial.distributions[param_name, dists] = dists \n updates.params[param_name] = param_value_internal \n",
      "15": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dits \n updates.params[param_name] = param_value_internal \n",
      "16": "dists[param_name] = distribution \n cached_trial.distributions[param_name], [] = dists \n updates.params[param_name] = param_value_internal \n",
      "17": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates[params[param_name] = param_value_internal \n",
      "18": "dists[param_name] = distribution \n cached_trial_distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "19": "dists[param_name] = distribution \n cached_trial.distributions[param_name, baseDistribution] = dists \n updates.params[param_name] = param_value_internal \n",
      "20": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n update.params[param_name] = param_value_internal \n",
      "21": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED> <DED> updates.params[param_name] = param_value_internal \n",
      "22": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED> <IND>",
      "23": "dists[param_name] = distribution \n cached_trial.distributions[param_name], dists \n updates.params[param_name] = param_value_internal \n",
      "24": "dists[param_name] = distribution \n cached_trial.distributions[param_name [] = dists \n updates.params[param_name] = param_value_internal \n",
      "25": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = str \n updates.params[param_name] = param_value_internal \n",
      "26": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n upgrades.params[param_name] = param_value_internal \n",
      "27": "dists[param_name] = distribution \n cached_trial.distributions[param_name = dists \n updates.params[param_name] = param_value_internal \n",
      "28": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = diffs \n updates.params[param_name] = param_value_internal \n",
      "29": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n update_params[param_name] = param_value_internal \n",
      "30": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dist <DED> \n updates.params[param_name] = param_value_internal \n",
      "31": "dists[param_name] = distribution \n cached_trial.distributions[param_name].decode() \n updates.params[param_name] = param_value_internal \n",
      "32": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dests \n updates.params[param_name] = param_value_internal \n",
      "33": "dists[param_name] = distribution \n cached_trial.distributions[param_name[]] = dists \n updates.params[param_name] = param_value_internal \n",
      "34": "dists[param_name] = distribution \n cached_trial.distributions[param_name=dists \n updates.params[param_name] = param_value_internal \n",
      "35": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = *dists \n updates.params[param_name] = param_value_internal \n",
      "36": "dists[param_name] = distribution \n cached_trial.distributions[param_name_] = dists \n updates.params[param_name] = param_value_internal \n",
      "37": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "38": "dists[param_name] = distribution \n cached_trial.distributions[param_name].decode(dists) \n updates.params[param_name] = param_value_internal \n",
      "39": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dist <IND> \n updates.params[param_name] = param_value_internal \n",
      "40": "dists[param_name] = distribution \n cached_trial.distributions[parm_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "41": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = \"\" \n updates.params[param_name] = param_value_internal \n",
      "42": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_Internal \n",
      "43": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n changes.params[param_name] = param_value_internal \n",
      "44": "dists[param_name] = distribution \n cached_trial[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "45": "dists[param_name] = distribution \n cached_trial.distributions[param_name],...dists \n updates.params[param_name] = param_value_internal \n",
      "46": "dists[param_name] = distribution \n cached_trial.distributions[param_name, [] = dists \n updates.params[param_name] = param_value_internal \n",
      "47": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = (dists \n updates.params[param_name] = param_value_internal \n",
      "48": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED> updates.params[param_name] = param_value_internal \n",
      "49": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
    "target_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_line": "        ret = perform_krb181_workaround(principal)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 117,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/security/kerberos.py",
    "target_filename": "airflow/security/kerberos.py",
    "source_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0^",
    "target_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "predictions": [
      "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "1": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[0]) \n if exit_on_fail and ret!= 0: \n",
      "2": "<IND> time.sleep(1.5) \n assert isinstance(principal, str) \n ret = perform_krb181_workaround(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "3": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np) \n if exit_on_fail and ret!= 0: \n",
      "4": "<IND> time.sleep(1.5) \n assert isinstance(principal, str) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "5": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[1]) \n if exit_on_fail and ret!= 0: \n",
      "6": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[str]) \n if exit_on_fail and ret!= 0: \n",
      "7": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(str(principal)) \n if exit_on_fail and ret!= 0: \n",
      "8": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np and if exit_on_fail and ret!= 0: \n",
      "9": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal()) \n if exit_on_fail and ret!= 0: \n",
      "10": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npy) \n if exit_on_fail and ret!= 0: \n",
      "11": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np') \n if exit_on_fail and ret!= 0: \n",
      "12": "<IND> time.sleep(1.5) \n assert isinstance(str, perform_krb181_workaround) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "13": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.nps) \n if exit_on_fail and ret!= 0: \n",
      "14": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np; if exit_on_fail and ret!= 0: \n",
      "15": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np if exit_on_fail and ret!= 0: \n",
      "16": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. if exit_on_fail and ret!= 0: \n",
      "17": "<IND> time.sleep(1.5) \n assert isinstance(perform_krb181_workaround(principal)) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "18": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "19": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np \n if exit_on_fail and ret!= 0: \n",
      "20": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal.timeout(1.5)) \n if exit_on_fail and ret!= 0: \n",
      "21": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "22": "<IND> time.sleep(1.5) \n assert time.sleep(perform_krb181_workaround(principal)) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "23": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npx(10) \n if exit_on_fail and ret!= 0: \n",
      "24": "<IND> time.sleep(1.5) \n assert isinstance(perform_krb181_workaround, str) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "25": "<IND> time.sleep(1.5) \n assert discipline is not None \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "26": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npy] \n if exit_on_fail and ret!= 0: \n",
      "27": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc in exit_on_fail and!= 0: \n",
      "28": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[0], '') \n if exit_on_fail and ret!= 0: \n",
      "29": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np, \n if exit_on_fail and ret!= 0: \n",
      "30": "<IND> time.sleep(1.5) \n assert time.sleep is not None \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "31": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npy] and if exit_on_fail and ret!= 0: \n",
      "32": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal.workaround) \n if exit_on_fail and ret!= 0: \n",
      "33": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc) \n if exit_on_fail and ret!= 0: \n",
      "34": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npy]) \n if exit_on_fail and ret!= 0: \n",
      "35": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np(10) \n if exit_on_fail and ret!= 0: \n",
      "36": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npc. if exit_on_fail and ret!= 0: \n",
      "37": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np) \n if exit_on_fail and ret: \n",
      "38": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np' if exit_on_fail and ret!= 0: \n",
      "39": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.) \n if exit_on_fail and ret!= 0: \n",
      "40": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np <IND> ) \n if exit_on_fail and ret!= 0: \n",
      "41": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np) \n <IND> if exit_on_fail and ret!= 0: \n",
      "42": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal(result)) \n if exit_on_fail and ret!= 0: \n",
      "43": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np and if exit_on_fail and!= 0: \n",
      "44": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npx) \n if exit_on_fail and ret!= 0: \n",
      "45": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.npt) \n if exit_on_fail and ret!= 0: \n",
      "46": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np, 0) \n if exit_on_fail and ret!= 0: \n",
      "47": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np or if exit_on_fail and ret!= 0: \n",
      "48": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np) \n",
      "49": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np') \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "target_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            <IND>return\n        <DED>self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_line": "        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 111,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "paul-nameless/tg",
    "source_filename": "tg/controllers.py",
    "target_filename": "tg/controllers.py",
    "source_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744^",
    "target_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "predictions": [
      "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "1": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "2": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <DED> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "3": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "4": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs is not None: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "5": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> msg_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "6": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert isinstance(self.model.yanked_msgs) \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "7": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "8": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "9": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, msg_id) \n",
      "10": "\n <IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "11": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "12": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "13": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "14": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs <DED> \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "15": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n \n msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "16": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(self.model.yanked_msgs), msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "17": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(self.model.yanked_msgs) \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, msg_id) \n",
      "18": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "19": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "20": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs is None: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "21": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.model.yanked_msgs is not None \n return \n <IND> msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "22": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert not self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "23": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "24": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids=self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "25": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n <IND>",
      "26": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "27": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs <DED> if not self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "28": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, msg_id, msg_id) \n",
      "29": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if isinstance(self.model.yanked_msgs): \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "30": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> msg_id = self.model.yanked_msgs(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "31": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(self.model.yanked_msgs), \n msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "32": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "33": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids, int) \n",
      "34": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, msg_ids) \n",
      "35": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, msg_id, msg_ids) \n",
      "36": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs is not None: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "37": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, msg_id) \n",
      "38": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, msg_id) \n",
      "39": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n return msg_ids(chat_id, from_chat_id, msg_ids) \n",
      "40": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> msg_id = self.model.yanked_msgs(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id) \n",
      "41": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, msg_ids) \n",
      "42": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n return 0 \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "43": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> msg_id = self.model.yanked_msgs(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "44": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(self.model.yanked_msgs), <IND> msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_id) \n",
      "45": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) <IND>",
      "46": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return <IND> msg_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "47": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n <DED>",
      "48": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n \n",
      "49": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert self.model.yanked_msgs is not None \n return \n <IND> msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    company: ormar.String(max_length=200)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    company = ormar.String(max_length=200)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_unique_constraints.py",
    "target_filename": "tests/test_unique_constraints.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "3": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "4": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "6": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "7": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <IND>",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <DED>",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) <IND> \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> company = ormar.String(max_length=200) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) <DED> \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "14": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> company = ormar.String(max_length=200) \n \n",
      "17": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> company= ormar.String(max_length=200) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n <IND>",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> company= ormar.String(max_length=200) \n \n",
      "22": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n <DED>",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) <DED> \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) <IND> \n",
      "27": "\n <DED> assert isinstance(primary_key, ormar.Integer(primary_key=True)) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "29": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "30": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "31": "\n <DED> assert isinstance(primary_key, ormar.Integer(primary_key=True)) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company: ormar.String(max_length=200) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <DED> id = ormar.String(primary_key=100) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <DED> id = ormar.String(primary_key=200) \n \n",
      "35": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "37": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n company = ormar.String(max_length=200) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=False) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "41": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "42": "\n <DED> key = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "43": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <IND>",
      "44": "<IND> \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "45": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "46": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = Ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "48": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "49": "\n <DED> str = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>class BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n  <IND>",
    "target_code": "\n<DED>class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  <IND>",
    "warning_line": "    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "target_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC): \n <IND>",
      "1": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "2": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor): \n <IND>",
      "3": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC): \n <IND>",
      "4": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "5": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "6": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "7": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC), base_beam_executor.BaseBeamExecutor): \n <IND>",
      "8": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "9": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor.ABC): \n <IND>",
      "10": "\n <DED> class BaseExampleGenExecutor( \n base_beam_executor.BaseBeamExecutor = tfx.dsl.components.base.ABC): \n <IND>",
      "11": "\n <DED> class BaseExampleGenExecutor( \n async with_metaclass(abc.ABC): \n <IND>",
      "12": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.ABC): \n <IND>",
      "13": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC), base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "14": "\n <DED> class BaseExampleGenExecutor( \n base_beam_executor.BaseBeamExecutor = tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "15": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC), base_beam_executor.BaseBeamExecutor: \n <IND>",
      "16": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, bas_beam_executor.BaseBeamExecutor): \n <IND>",
      "17": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = base_beam_executor): \n <IND>",
      "18": "\n <DED> class BaseExampleGenExecutor( \n str(abc.ABC), str(base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "19": "\n <DED> class BaseExampleGenExecutor( \n async with_metaclass(abc.ABC), base_beam_executor.BaseBeamExecutor): \n <IND>",
      "20": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = tfx.dsl.components.base.ABC): \n <IND>",
      "21": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = BaseExecutor): \n <IND>",
      "22": "\n <DED> class BaseExampleGenExecutor( \n int = tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "23": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) && tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "24": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "25": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC(abc.ABC), base_beam_executor.BaseBeamExecutor): \n <IND>",
      "26": "\n <DED> class BaseExampleGenExecutor( \n fx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "27": "\n <DED> class BaseExampleGenExecutor( \n str(abc.ABC), str(abc.ABC), str(base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "28": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC(abc.ABC), base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "29": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = tfx.dsl.components.base.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "30": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = BaseBeamExecutor): \n <IND>",
      "31": "\n <DED> class BaseExampleGenExecutor( \n int = tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "32": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "33": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC), base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "34": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor(abc.ABC)): \n <IND>",
      "35": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "36": "\n <DED> class BaseExampleGenExecutor( \n if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "37": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n \n",
      "38": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "39": "\n <DED> class BaseExampleGenExecutor( \n metaclass=abc.ABC): \n <IND>",
      "40": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor).with_metaclass(abc.ABC): \n <IND>",
      "41": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "42": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor = BaseExampleExecutor \n",
      "43": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl): \n <IND>",
      "44": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "45": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, tfx.dsl.components.base.ABC): \n <IND>",
      "46": "\n <DED> class BaseExampleGenExecutor( \n if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "47": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, base_beam_executor): \n <IND>",
      "48": "\n <DED> class BaseExampleGenExecutor( \n str(abc.ABC)(base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "49": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, base_beam_executor.BaseBeamExecutor): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nclass BaseHandler(with_metaclass(abc.ABCMeta, object)):\n  <IND>",
    "target_code": "\nclass BaseHandler(abc.ABC):\n  <IND>",
    "warning_line": "class BaseHandler(with_metaclass(abc.ABCMeta, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/tools/cli/handler/base_handler.py",
    "target_filename": "tfx/tools/cli/handler/base_handler.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "\n class BaseHandler(abc.ABC): \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "\n class BaseHandler(abc.ABC): \n <IND>",
      "1": "\n class BaseHandler(abc.ABC): \n <DED>",
      "2": "\n class BaseHandler(abc.ABC): \n \n",
      "3": "\n class BaseHandler(abc.ABC), object, metaclass=abc.ABC): \n <IND>",
      "4": "<DED> class BaseHandler(abc.ABC): \n <IND>",
      "5": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(object, metaclass=abc.ABC): \n <IND>",
      "6": "\n class BaseHandler(abc.ABC): <DED> <IND> if isinstance(object, metaclass=abc.ABC): \n <IND>",
      "7": "<IND> class BaseHandler(abc.ABC): \n <IND>",
      "8": "\n class BaseHandler(abc.ABC, object, metaclass=abc.ABC): \n <IND>",
      "9": "\n class BaseHandler(abc.ABC): <DED> <IND> if not isinstance(object, metaclass=abc.ABC): \n <IND>",
      "10": "\n class BaseHandler(abc.ABC): \n <IND> if not isinstance(object, metaclass=abc.ABC): \n <IND>",
      "11": "\n class BaseHandler(abc.ABC), object): \n <IND>",
      "12": "\n class BaseHandler(abc.ABC): <DED> <IND> class BaseHandler(abc.ABC): \n <IND>",
      "13": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(object, metaclass=abc.ABC): \n",
      "14": "\n class BaseHandler(abc.ABC): <IND> <IND>",
      "15": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(object, metaclass(abc.ABC)): \n <IND>",
      "16": "\n class BaseHandler(abc.ABC), object, metaclass = abc.ABC): \n <IND>",
      "17": "\n class BaseHandler(abc.ABC): <DED> <IND> if isinstance(object, metaclass(abc.ABC)): \n <IND>",
      "18": "\n class BaseHandler(abc.AB): \n <IND>",
      "19": "\n class BaseHandler(abc.ABC), object, metaclass = abc.ABC): \n <IND>",
      "20": "\n class BaseHandler(abc.ABC): \n <IND> elif isinstance(object, metaclass=abc.ABC): \n <IND>",
      "21": "\n class BaseHandler(abc.ABC): <DED> <IND> if not isinstance(object, metaclass(abc.ABC)): \n <IND>",
      "22": "\n class BaseHandler(abc.ABC): \n <IND> if not isinstance(object, metaclass(abc.ABC)): \n <IND>",
      "23": "\n class BaseHandler(abc.ABC): <DED> <IND>",
      "24": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(abc.ABC): \n <IND>",
      "25": "\n class BaseHandler(abc.ABC): <DED> <IND> if isinstance(abc.ABC): \n <IND>",
      "26": "\n class BaseHandler(abc.ABC), object.Metaclass=abc.ABC): \n <IND>",
      "27": "\n class BaseHandler(abc.ABC, object): \n <IND>",
      "28": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(object, metaclass=abc.ABC): \n <DED>",
      "29": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(object, metaclass=abc.ABC): \n \n",
      "30": "\n class BaseHandler(abc.ABC): \n <IND> if not isinstance(object, metaclass=abc.ABC): \n",
      "31": "\n class BaseHandler(abc.ABC): \n <IND> if not isinstance(abc.ABC): \n <IND>",
      "32": "\n class BaseHandler(abc.ABC): \n <IND> class BaseHandler(abc.ABC): \n <IND>",
      "33": "\n class BaseHandler(abc.ABCM): \n <IND>",
      "34": "\n class BaseHandler(abc.ABC): \n <IND> if isinstance(abc.ABC): \n",
      "35": "\n class BaseHandler(abc.ABC): <DED> <IND> if not isinstance(abc.ABC): \n <IND>",
      "36": "\n class BaseHandler(abc.ABC): <DED> <IND> class BaseHandler(abc.BaseClass(abc.ABC)): \n <IND>",
      "37": "\n class BaseHandler(abc.ABC), object, metaclass=object): \n <IND>",
      "38": "\n class BaseHandler(abc.ABC): <DED> <IND> if isinstance(object, metaclass=abc.ABC): \n <DED>",
      "39": "\n class BaseHandler(abc.ABC), object, metaclass.abc.ABC): \n <IND>",
      "40": "\n class BaseHandler(abc.ABC), object.metaclass=abc.ABC): \n <IND>",
      "41": "\n class BaseHandler(abc.ABC): <DED> <IND> if isinstance(object, metaclass=abc.ABC): \n \n",
      "42": "\n class BaseHandler(abc.ABC), object, metaclass \n ): \n <IND>",
      "43": "\n class BaseHandler(abc.ABC), metaclass=abc.ABC): \n <IND>",
      "44": "\n class BaseHandler(abc.ABC): \n <IND> elif isinstance(object, metaclass(abc.ABC)): \n <IND>",
      "45": "\n class BaseHandler(abc.ABC), object, metaclass = async.abc.ABC): \n <IND>",
      "46": "\n class BaseHandler(abc.ABC): \n <IND> if not isinstance(object, metaclass=abc.ABC): \n \n",
      "47": "\n class BaseHandler(abc.ABC): \n <IND> if not isinstance(object, metaclass=abc.ABC): \n <DED>",
      "48": "\n class BaseHandler(abc.ABC): <DED> <IND> if isinstance(object, abc.ABC): \n <IND>",
      "49": "\n class BaseHandler(abc.ABC): <DED> <IND> if not isinstance(object, metaclass): \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        unconf_lith_id: int,\n        edges: Array[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
    "target_code": "        unconf_lith_id: int,\n        edges: np.ndarray,\n        centroids: Dict[int, np.ndarray]\n",
    "warning_line": "        edges: Array[int, ..., 2],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `nptyping.Array[(int, ..., 2)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 361,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cgre-aachen/gempy",
    "source_filename": "gempy/assets/topology.py",
    "target_filename": "gempy/assets/topology.py",
    "source_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098^",
    "target_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098",
    "predictions": [
      "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n"
    ],
    "correct": true,
    "top_five": {
      "0": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "1": "unconf_lith_id: int, \n np.ndarray: np.ndarray, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "2": "unconf_lith_id: int, \n np.ndarray = int.ndarray, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "3": "unconf_lith_id: int, \n edges: Dict[int,..., np.ndarray], \n centroids: Dict[int, np.ndarray] \n",
      "4": "unconf_lith_id: int, \n edges: Optional[Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "5": "unconf_lith_id: int, \n edges: Dict[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "6": "unconf_lith_id: int, \n edges: List[Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "7": "unconf_lith_id: int, \n np.ndarray = np.ndarray, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "8": "unconf_lith_id: int, \n edges: List[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "9": "unconf_lith_id: int, \n edges: str = np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "10": "unconf_lith_id: int, \n edges: np.ndarray.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "11": "unconf_lith_id: int, \n np.ndarray = [], \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "12": "unconf_lith_id: int, \n edges: np.ndarray \n centroids: Dict[int, np.ndarray] \n",
      "13": "unconf_lith_id: int, \n edges: np.ndarray.Array[int,..., 2)], \n centroids: Dict[int, np.ndarray] \n",
      "14": "unconf_lith_id: int, \n edges: np.ndarray[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "15": "unconf_lith_id: int, \n np.ndarray = null, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "16": "unconf_lith_id: int, \n np.ndarray: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "17": "unconf_lith_id: int, \n edges: np.ndarray = [], \n centroids: Dict[int, np.ndarray] \n",
      "18": "unconf_lith_id: int, \n edges: Optional[Array[int,..., 2)], \n centroids: Dict[int, np.ndarray] \n",
      "19": "unconf_lith_id: int, \n edges: Dict[int,..., np.ndarray] \n centroids: Dict[int, np.ndarray] \n",
      "20": "unconf_lith_id: int, \n edges: valid type.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "21": "unconf_lith_id: int, \n edges: int, \n centroids: Dict[int, np.ndarray] \n",
      "22": "unconf_lith_id: int, \n edges: str = np.ndarray.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "23": "unconf_lith_id: int, \n edges: np.ndarray[int,..., 2)], \n centroids: Dict[int, np.ndarray] \n",
      "24": "unconf_lith_id: int, \n corners: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "25": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray], \n",
      "26": "unconf_lith_id: int, \n margins: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "27": "unconf_lith_id: int, <IND> edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "28": "unconf_lith_id: int, \n edges: Int[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "29": "unconf_lith_id: int, <DED> edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "30": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] <IND>",
      "31": "unconf_lith_id: int, \n edges: np.ndarray, <IND> centroids: Dict[int, np.ndarray] \n",
      "32": "unconf_lith_id: int, \n edges: np.ndarray, <DED> centroids: Dict[int, np.ndarray] \n",
      "33": "unconf_lith_id: int, \n edges: str, \n centroids: Dict[int, np.ndarray] \n",
      "34": "unconf_lith_id: int, \n edges: Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "35": "unconf_lith_id: int, \n edges: List[Array[int,..., 2)], \n centroids: Dict[int, np.ndarray] \n",
      "36": "unconf_lith_id: int, \n edges: Validator.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "37": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] <DED> \n",
      "38": "unconf_lith_id: int, \n edges: np.ndarray <IND> centroids: Dict[int, np.ndarray] \n",
      "39": "unconf_lith_id: int, \n edges: np.ndarray = null, \n centroids: Dict[int, np.ndarray] \n",
      "40": "unconf_lith_id: int, \n edges: T.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "41": "unconf_lith_id: int, \n edges: Dict[int,..., 2)], \n centroids: Dict[int, np.ndarray] \n",
      "42": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray].Dict[int, np.ndarray] \n",
      "43": "unconf_lith_id: int, \n edges: np.ndarray <DED>, \n centroids: Dict[int, np.ndarray] \n",
      "44": "unconf_lith_id: int, \n edge: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "45": "unconf_lith_id: int, \n edges: List[Np.ndarray], \n centroids: Dict[int, np.ndarray] \n",
      "46": "unconf_lith_id: int, \n edges: Int[int,..., 2)], \n centroids: Dict[int, np.ndarray] \n",
      "47": "unconf_lith_id: int, \n edges = np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "48": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n ) -> np.ndarray: \n",
      "49": "unconf_lith_id: int, \n points: np.ndarray, \n centroids: Dict[int, np.ndarray] \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nRemoteMethod = namedtuple('RemoteMethod',\n                          'method config_section kwargs priority',\n                          verbose=False)\n",
    "target_code": "\nRemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'])\n",
    "warning_line": "                          verbose=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Final[False]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/mode_controller.py",
    "target_filename": "mpf/core/mode_controller.py",
    "source_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7^",
    "target_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7",
    "predictions": [
      "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "1": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority') \n",
      "2": "\n RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \n",
      "3": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 'kwargs']) \n",
      "4": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs']) \n",
      "5": "\n RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority', 'priority') \n",
      "6": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n 'kwargs') \n",
      "7": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs prior') \n",
      "8": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n 'priority') \n",
      "9": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority', Optional[verbose]=False) \n",
      "10": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n verbose=False) \n",
      "11": "\n RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority', Optional[verbose]=False) \n",
      "12": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section.kwargs priority') \n",
      "13": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section kwargs priority') \n",
      "14": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n assert isinstance(kwargs, 'priority') \n",
      "15": "\n RemoteMethod = namedtuple('RemoteMethod','method', ['config_section', 'kwargs', 'priority']) \n",
      "16": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority', Optional[verbose] = None) \n",
      "17": "\n RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority', 'kwargs') \n",
      "18": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority', 'kwargs') \n",
      "19": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], \n verbose=False) \n",
      "20": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n 'kwargs priority') \n",
      "21": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 'b']) \n",
      "22": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 'utf-8']) \n",
      "23": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], \n ) \n",
      "24": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section.kwargs prior') \n",
      "25": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section = kwargs.priority') \n",
      "26": "\n RemoteMethod= namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "27": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n assert isinstance(kwargs)) \n",
      "28": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n type=False) \n",
      "29": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n 'priority', 'kwargs') \n",
      "30": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n assert isinstance(kwargs priority), verbose=False) \n",
      "31": "\n RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority', 'b') \n",
      "32": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n assert isinstance(kwargs, 'priority')) \n",
      "33": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n assert isinstance(kwargs priority), verbose=False) \n",
      "34": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section='kwargs') \n",
      "35": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', \n remoteMethod=False) \n",
      "36": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section kwargs priority', Optional[verbose]=False) \n",
      "37": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 'token']) \n",
      "38": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority', 'b') \n",
      "39": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority', Optional[str]=False) \n",
      "40": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs.priority') \n",
      "41": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 't']) \n",
      "42": "\n RemoteMethod = namedtuple('RemoteMethod','method', ('config_section', 'kwargs')) \n",
      "43": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, 'kwargs') \n",
      "44": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section.kwargs priority', 'kwargs') \n",
      "45": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs prior', Optional[verbose]=False) \n",
      "46": "\n RemoteMethod = namedtuple('RemoteMethod','method', config_section, kwargs priority', Optional[verbose=False]) \n",
      "47": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 'cwargs']) \n",
      "48": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section') \n",
      "49": "\n RemoteMethod = namedtuple('RemoteMethod', Method['config_section', 'kwargs']) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.Boolean(default=False)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    completed= ormar.Boolean(default=False)\n\n",
    "warning_line": "    completed: ormar.Boolean(default=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Boolean($parameter$default = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "2": "\n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "3": "<DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "4": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed = ormar.Boolean(default=False) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n <IND>",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> completed= ormar.Boolean(default=False) \n \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) <IND> \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n <DED>",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> completed= ormar.Boolean(default=False) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) <DED> \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <DED> ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=True) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=\"False\") \n \n",
      "17": "\n <DED> id= ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "18": "\n <DED> id= ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=Optional[False]) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n finished= ormar.Boolean(default=False) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n texte = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "22": "\n \n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=100) \n completed= ormar.Boolean(default=False) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.BooLEan(default=False) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n complete= ormar.Boolean(default=False) \n \n",
      "26": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=1000) \n completed= ormar.Boolean(default=False) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=None) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=200) \n completed= ormar.Boolean(default=False) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=600) \n completed= ormar.Boolean(default=False) \n \n",
      "31": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed = ormar.Boolean(default=False) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.DB.Boolean(default=False) \n \n",
      "33": "\n <DED> id, ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=5000) \n completed= ormar.Boolean(default=False) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Default(default=False) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean() \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= Ormar.Boolean(default=False) \n \n",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.False \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed=\" ormar.Boolean(default=False) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=Text) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed=ormar.Boolean(default=False) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean[default=False] \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length= 500) \n completed= ormar.Boolean(default=False) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Pool(default=False) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.String(default=False) \n \n",
      "46": "\n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed = ormar.Boolean(default=False) \n \n",
      "47": "<IND> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=Field) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=String) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):\n    <IND>",
    "target_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]:\n    <IND>",
    "warning_line": "      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(kubernetes.client.V1Job)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "1": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <DED>",
      "2": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n \n",
      "3": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER \n ) -> Optional[V1Job]: \n <IND>",
      "4": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: <IND> <IND>",
      "5": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: <DED> <IND>",
      "6": "preemptible_tpu: bool = True, <IND> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "7": "preemptible_tpu: bool = True, <DED> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "8": "preemptible_tpu: bool = True, \n tpu_driver: Optional[str] = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "9": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "10": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER <IND> ) -> Optional[V1Job]: \n <IND>",
      "11": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job] = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "12": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER <DED> -> Optional[V1Job]: \n <IND>",
      "13": "preemptible_tpu: bool = False, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "14": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER <IND> -> Optional[V1Job]: \n <IND>",
      "15": "preemptible_tpu: bool = True, \n tpu_driver: str = str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "16": "preemptible_tpu: bool = True, \n tpu_driver: str = str.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "17": "preemptible_tpu: bool = True, \n tpu_driver: str = str(k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "18": "preemptible_tpu: bool = True, \n tpu_driver: bool = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "19": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job], Optional[str] = k.DEFAULT_TPU_DRIVER]: \n <IND>",
      "20": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[v1Job]: \n <IND>",
      "21": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "22": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job] -> Optional[str]: \n <IND>",
      "23": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional_V1Job: \n <IND>",
      "24": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> None: \n <IND>",
      "25": "preemptible_tpu: bool = True, \n tpu_driver = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "26": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Yob]: \n <IND>",
      "27": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER <DED> ) -> Optional[V1Job]: \n <IND>",
      "28": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job] = True \n <IND>",
      "29": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER): \n <IND>",
      "30": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <DED>",
      "31": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND> if not tpu_driver: str = k.DEFAULT_TPU_DRIVER): \n <IND>",
      "32": "preemptible_tpu: bool = True, \n self.tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "33": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n \n",
      "34": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER <DED> ) -> Optional[V1Job]: \n <IND>",
      "35": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND> if tpu_driver: str = k.DEFAULT_TPU_DRIVER): \n <IND>",
      "36": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job\"]: \n <IND>",
      "37": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER <DED> \n ) -> Optional[V1Job]: \n <IND>",
      "38": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job|V1Job]: \n <IND>",
      "39": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job): \n <IND>",
      "40": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1job]: \n <IND>",
      "41": "preemptible_tpu: bool = True, \n tpu_driver: str = str(k.DEFAULT_TPU_DRIVER)) -> Optional[V1Job]: \n <IND>",
      "42": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job[0]]: \n <IND>",
      "43": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional.V1Job: \n <IND>",
      "44": "preemptible_tpu: bool = True, \n tpu_driver: str=k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "45": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1.Job]: \n <IND>",
      "46": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job].decode(): \n <IND>",
      "47": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job].decode() \n <IND>",
      "48": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]]: \n <IND>",
      "49": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job] = True) -> Optional[V1Job]: \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(with_metaclass(_Maker, object)):\n    <IND>",
    "target_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(metaclass=_Maker):\n    <IND>",
    "warning_line": "class Component(with_metaclass(_Maker, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jwkvam/bowtie",
    "source_filename": "bowtie/_component.py",
    "target_filename": "bowtie/_component.py",
    "source_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1^",
    "target_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "predictions": [
      "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND>",
      "1": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component: \n <IND>",
      "2": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker): \n <IND>",
      "3": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker): \n <IND>",
      "4": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=bowtie._component._Maker): \n <IND>",
      "5": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=bowtie._component._Maker, object): \n <IND>",
      "6": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(bowtie._component._Maker, object): \n <IND>",
      "7": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker, object): \n <IND>",
      "8": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(bowtie._component._Maker, object): \n <IND>",
      "9": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(): \n <IND>",
      "10": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker): \n <IND>",
      "11": "# pylint: disable=too-few-public-methods \n \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND>",
      "12": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n <IND>",
      "13": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object, metaclass=object): \n <IND>",
      "14": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker), object): \n <IND>",
      "15": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(bowtie._component._Maker, object): \n <IND>",
      "16": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <DED>",
      "17": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object, metaclass=bowtie._component._Maker): \n <IND>",
      "18": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component (bowtie._component._Maker, object): \n <IND>",
      "19": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component = Bowtie._component._Maker(object) \n <IND>",
      "20": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Metaclass=bowtie._component._Maker, object): \n <IND>",
      "21": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(bowtie._component._Maker): \n <IND>",
      "22": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(bowtie._component._Maker): \n <IND>",
      "23": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Metaclass=bowtie._component._Maker): \n <IND>",
      "24": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): \n \n",
      "25": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(metaclass=bowtie._component._Maker): \n <IND>",
      "26": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(metaclass=bowtie._component._Maker, object): \n <IND>",
      "27": "# pylint: disable=too-few-public-methods \n \n <DED> <DED> class Component(bowtie._component._Maker): \n <IND>",
      "28": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(metaclass=bowtie._component._Maker): \n <IND>",
      "29": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(metaclass=bowtie._component._Maker, object): \n <IND>",
      "30": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(metaclass=_Maker): \n <IND>",
      "31": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(object, metaclass=bowtie._component._Maker): \n <IND>",
      "32": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component: \n <IND>",
      "33": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component = bowtie._component._Maker(object) \n <IND>",
      "34": "# pylint: disable=too-few-public-methods \n \n <DED> <DED> class Component(metaclass=bowtie._component._Maker): \n <IND>",
      "35": "# pylint: disable=too-few-public-methods \n \n <DED> <DED> class Component(metaclass=_Maker): \n <IND>",
      "36": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass._Maker, object): \n <IND>",
      "37": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND> if not pylint: disable=too-few-public-methods \n",
      "38": "# pylint: disable=too-few-public-methods \n \n <DED> <DED> class Component(metaclass=bowtie._component._Maker, object): \n <IND>",
      "39": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker(object)): \n <IND>",
      "40": "# pylint: disable=too-few-public-methods <IND> <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND>",
      "41": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(metaclass=bowtie._component._Maker): \n <IND>",
      "42": "# pylint: disable=too-few-public-methods <DED> \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND>",
      "43": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(with_metaclass=_Maker): \n <IND>",
      "44": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(metaclass=bowtie._component._Maker, object): \n <IND>",
      "45": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(bowtie._component._Maker): \n <IND>",
      "46": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._maker, object): \n <IND>",
      "47": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): <IND> <IND>",
      "48": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(metaclass=_Maker): \n <IND>",
      "49": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object, metaclass._Maker): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 35,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fastapi/docs001.py",
    "target_filename": "docs_src/fastapi/docs001.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "11": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> assert ormar.Integer(primary_key=True) \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "15": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "17": "\n <DED> assert isinstance(primary_key, ormar.Integer(primary_key=True)) \n name = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_length=100) \n \n",
      "19": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=100) \n \n",
      "21": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "23": "\n <DED> str = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_length=100) \n \n",
      "25": "\n <DED> key=True, ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "26": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=False) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=100) \n \n",
      "30": "<IND> \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "31": "\n <DED> key = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "32": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "33": "\n <DED> id = ormar.Integer(primary_key=True \n name = ormar.String(max_length=100) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n ) \n",
      "35": "\n <DED> key=True, ormar.Integer(primary_key=100) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "37": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "38": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> label = ormar.String(max_length=100) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id= ormar.String(max_length=100) \n \n",
      "41": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> ret = ormar.String(max_length=100) \n \n",
      "43": "\n <IND> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "44": "\n <IND> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> python = ormar.String(max_length=100) \n \n",
      "46": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True <IND> ) \n name = ormar.String(max_length=100) \n \n",
      "48": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        <IND>",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        <IND>",
    "warning_line": "    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "golemfactory/clay",
    "source_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "target_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6^",
    "target_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "predictions": [
      "awaited_messages: typing.list = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "awaited_messages: typing.list = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "1": "awaited_messages: typing.list = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "2": "awaited_messages: typing.list = None \n ) -> bool: \n <IND>",
      "3": "awaited_messages: typing.List = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "4": "awaited_messages: typing.List = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "5": "awaited_messages: typing.list = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "6": "awaited_messages: typing.List = None \n ) -> bool: \n <IND>",
      "7": "awaited_messages: typing.List[typing.Optional[list]] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "8": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "9": "awaited_messages: typing.list = None \n ) -> Optional[bool]: \n <IND>",
      "10": "awaited_messages: typing.Optional[list] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "11": "awaited_messages: typing.List[typing.Optional[list]] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "12": "awaited_messages: typing.List[str] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "13": "awaited_messages: typing.List[typing.Optional[list]] = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "14": "awaited_messages: typing.Optional[list] = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "15": "awaited_messages: typing.List = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "16": "awaited_messages: typing.List[typing.Optional[list]] = None \n ) -> bool: \n <IND>",
      "17": "awaited_messages: typing.Optional[list] = None \n ) -> bool: \n <IND>",
      "18": "awaited_messages: typing.list = None \n ) -> (bool, typing.Optional[typing.Optional[typing.Match]]): \n <IND>",
      "19": "awaited_messages: typing.list = None \n ) -> Optional[bool], typing.Optional[typing.Optional[typing.Match]]: \n <IND>",
      "20": "awaited_messages: typing.list = None \n ) -> (typeing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "21": "awaited_messages: typing.list = None \n ) -> typing.Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "22": "awaited_messages: typing.List = None \n ) -> Optional[bool]: \n <IND>",
      "23": "awaited_messages: typing.list[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "24": "awaited_messages: typing.List[str] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "25": "awaited_messages: typing.List[str] = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "26": "awaited_messages: typing.list = None \n ) -> List[bool], List[typing.Optional[typing.Match]]: \n <IND>",
      "27": "awaited_messages: typing.list[list] = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "28": "awaited_messages: typing.list=None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "29": "awaited_messages: typing.list = None \n ) -> (bool, typing.Optional[typing.Optional[bool], typing.Optional[typing.Match]]): \n <IND>",
      "30": "awaited_messages: typing.List = None \n ) -> (bool, typing.Optional[typing.Optional[bool], typing.Optional[typing.Match]]): \n <IND>",
      "31": "awaited_messages: typing.List[typing.Optional[list]] = None \n ) -> Optional[bool]: \n <IND>",
      "32": "awaited_messages: typing.List = None \n ) -> Optional[bool], typing.Optional[typing.Optional[typing.Match]]: \n <IND>",
      "33": "awaited_messages: typing.list = None \n ) -> (bool, typing.Optional[typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "34": "awaited_messages: typing.List = None \n ) -> (typeing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "35": "awaited_messages: typing.List = None \n ) -> List[bool], List[typing.Optional[typing.Match]]: \n <IND>",
      "36": "awaited_messages: typing.Optional[list] = None \n ) -> Optional[bool]: \n <IND>",
      "37": "awaited_messages: typing.list[list] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "38": "awaited_messages: typing.List = None \n ) -> (bool, typing.Optional[typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "39": "awaited_messages: typing.List[typing.Optional[list] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "40": "awaited_messages: typing.List = None \n ) -> typing.Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "41": "awaited_messages: typing.list = None \n ) -> Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "42": "awaited_messages: typing.Optional[list] = None \n ) -> List[bool], List[typing.Optional[typing.Match]]: \n <IND>",
      "43": "awaited_messages: typing.list=None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "44": "awaited_messages: typing.List[typing.Optional[bool] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "45": "awaited_messages: typing.list[str] = None \n ) -> Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "46": "awaited_messages: typing.Optional[list] = None \n ) -> Optional[bool], typing.Optional[typing.Optional[typing.Match]]: \n <IND>",
      "47": "awaited_messages: typing.list[str] = None \n ) -> Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "48": "awaited_messages: typing.List[typing.Optional[list]] = None \n ) -> Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "49": "awaited_messages: typing.List = None \n ) -> (bool, typing.Optional[typing.Optional[typing.Match]]): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True, autoincrement=False)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True, autoincrement=False)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True, autoincrement=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True, $parameter$autoincrement = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 20,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_same_table_joins.py",
    "target_filename": "tests/test_more_same_table_joins.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "4": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "6": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <IND>",
      "7": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) <DED> \n \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) <IND> \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) <IND> name = ormar.String(max_length=100) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=False) \n \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED>",
      "12": "\n <DED> assert ormar.Integer(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) <DED> name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id= ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False \n name = ormar.String(max_length=100) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(max_length=100) \n \n",
      "18": "\n \n <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "19": "\n <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=False) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=100) \n \n",
      "21": "\n \n \n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=False) \n <IND>",
      "23": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name= ormar.String(max_length=100) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=True) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True, Autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "26": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=True) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=False) \n <DED>",
      "28": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=True) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False <DED> ) \n name = ormar.String(max_length=100) \n \n",
      "30": "\n <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) <DED> \n name = ormar.String(max_length=100) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False <IND> ) \n name = ormar.String(max_length=100) \n \n",
      "33": "\n <DED> self.id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True), autoincrement=False) \n \n",
      "35": "\n <DED> id: ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n \n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=False) \n \n",
      "37": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <IND>",
      "38": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True, autoincrement=Location) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> self._id = ormar.Integer(primary_key=True, autoincrement=False) \n \n",
      "40": "\n <DED> str = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "41": "<IND> <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "42": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED>",
      "43": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) <DED> \n \n",
      "44": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) <IND> name = ormar.String(max_length=100) \n \n",
      "45": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) <IND> \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.False(primary_key=True, autoincrement=False) \n \n",
      "47": "\n <DED> assert isinstance(primary_key=True, autoincrement=False) \n id = ormar.Integer(primary_key=True, autoincrement=False) <DED> name = ormar.String(max_length=100) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n <IND>",
      "49": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n ) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        <IND>\"\"\" Returns the central point for points in list \"\"\"\n",
    "target_code": "    <DED>@staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        <IND>\"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_line": "    def center(a: [\"Point2\"]) -> \"Point2\":",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[sc2.position.Point2]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BurnySc2/python-sc2",
    "source_filename": "sc2/position.py",
    "target_filename": "sc2/position.py",
    "source_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53^",
    "target_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "predictions": [
      "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "1": "<DED> @staticmethod \n def center(a: List[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "2": "<DED> @staticmethod \n def center(a: Pos[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "3": "<DED> @staticmethod \n def center(a: List[\"Point2\"]) -> List[\"Point2\"]: \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "4": "<DED> @staticmethod \n def center(a: List[sc2.position.Point2]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "5": "<DED> @staticmethod \n def center(a: Pos[sc2.position.Point2]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "6": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "7": "<DED> @staticmethod \n def center(a: Optional[sc2.position.Point2]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "8": "<DED> @staticmethod \n def center(a: List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "9": "<DED> @staticmethod \n def center(a: Position[sc2.position.Point2]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "10": "<DED> @staticmethod \n def center(a: Optional[sc2.position.Point2]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "11": "<DED> @staticmethod \n def center(a: Optional[[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "12": "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "13": "<DED> @staticmethod \n def center(a: cls[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "14": "<IND> @staticmethod \n def center(a: Optional[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "15": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "16": "<DED> @staticmethod \n def center(a: 'Point2') -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "17": "<DED> @staticmethod \n def center(a: str([\"Point2\"])) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "18": "\n <DED> @staticmethod \n def center(a: Optional[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "19": "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "20": "<DED> @staticmethod \n def center(a: 0) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "21": "<DED> @staticmethod \n def center(a: pos[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "22": "<DED> @staticmethod \n def center(a: 'Point2', 'Point2') -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "23": "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]] -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "24": "<DED> @staticmethod \n def center(a: Base[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "25": "<DED> @staticmethod \n def center(a: list[\"Point2\"]) -> list[\"Point2\"]: \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "26": "<IND> @staticmethod \n def center(a: List[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "27": "<DED> @staticmethod \n def center(a: Utils[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "28": "<DED> @staticmethod \n def center(a: Union[Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "29": "\n <DED> @staticmethod \n def center(a: List[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "30": "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]] = None) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "31": "<DED> @staticmethod \n def center(a: Set[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "32": "<DED> @staticmethod \n def center(a: List[Set[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "33": "<DED> @staticmethod \n def center(a: Union[sc2.position.Point2]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "34": "<DED> @staticmethod \n def center(a: List[\"Point2\"]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "35": "<DED> @staticmethod \n def center(a: Statue[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "36": "<DED> @staticmethod \n def center(a: list[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "37": "<DED> @staticmethod \n def center(a: Optional[\"Point2\"]) -> \"Point2\": \n \n \"\"\" Returns the central point for points in list \"\"\" \n",
      "38": "<DED> @staticmethod \n def center(a: Card[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "39": "<DED> @staticmethod \n def center(a: %s[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "40": "<DED> @staticmethod \n def center(a: Salem[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "41": "<DED> @staticmethod \n def center(a: System[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "42": "<DED> @staticmethod \n def center(a: List[Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "43": "<DED> @staticmethod \n def center(a: S.Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "44": "<DED> @staticmethod \n def center(a: p.Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "45": "<DED> @staticmethod \n def center(a: position[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "46": "<DED> @staticmethod \n def center(a: Optional[Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "47": "<DED> @staticmethod \n def center(a: List[\"Point2\"]) -> \"Point2\": \n \n \"\"\" Returns the central point for points in list \"\"\" \n",
      "48": "<DED> @staticmethod \n def center(a: Position[\"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "49": "<DED> @staticmethod \n def center(a: \"Point2\"]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": true,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "3": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "4": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "5": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "6": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "7": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "8": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "10": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category: ormar.ForeignKey(Category, nullable=True) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n \n",
      "24": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "30": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "36": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "38": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n <IND>",
      "44": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category > ormar.ForeignKey(Category, nullable=True) \n \n",
      "46": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.String(primary_key=True) \n",
      "48": "\n <DED> id, ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.ForeignKey(primary_key=True) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fields/docs003.py",
    "target_filename": "docs_src/fields/docs003.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n name = ormar.String(max_length=100) \n \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "13": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "17": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length = 100) \n \n",
      "19": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=100) \n \n",
      "21": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "23": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n \n",
      "25": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String[max_length=100] \n \n",
      "27": "<IND> \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String() \n \n",
      "29": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n name = Ormar.String(max_length=100) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar[max_length=100] \n \n",
      "32": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "33": "\n <DED> id, ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n <IND>",
      "35": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=1000) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=150) \n \n",
      "38": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=200) \n \n",
      "41": "\n <IND> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "42": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=110) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n ) \n",
      "45": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar_String(max_length=100) \n \n",
      "47": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "48": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True) \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray():\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        <IND>if np.max(X) <= 2:\n",
    "target_code": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray:\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        <IND>if np.max(X) <= 2:\n",
    "warning_line": "    def predict(self, X: np.ndarray) -> np.ndarray():",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `np.ndarray()` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 116,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scikit-learn-contrib/MAPIE",
    "source_filename": "mapie/tests/test_classification.py",
    "target_filename": "mapie/tests/test_classification.py",
    "source_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f^",
    "target_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "predictions": [
      "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "1": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "2": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "3": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "4": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "5": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "6": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "7": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "8": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "9": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "10": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "11": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "12": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "13": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "14": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "15": "\n \n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "16": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "17": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <DED> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "18": "\n \n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "19": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "20": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def prediction_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "21": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def prediction_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "22": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <DED> if np.max(X) = 2: \n",
      "23": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <DED> if np.max(X) = 2: \n",
      "24": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "25": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "26": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "27": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "28": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "29": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "30": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "31": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n \n if np.max(X) = 2: \n",
      "32": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n \n if np.max(X) = 2: \n",
      "33": "\n \n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "34": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "35": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "36": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "37": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "38": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "39": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "40": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def prediction_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "41": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n \n return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "42": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1], 0) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "43": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n \n return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "44": "<DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "45": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "46": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <DED> return np.array([1, 2, 1]) \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "47": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "48": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return [1, 2, 1] \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n",
      "49": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray(): \n <IND> return [1, 2, 1] \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray(): \n <IND> if np.max(X) = 2: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "target_code": "\n<DED>def __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "warning_line": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(str, str, str)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 19,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "ciphers/trafid_cipher.py",
    "target_filename": "ciphers/trafid_cipher.py",
    "source_changeid": "60895366c0f50844af2737130ed98c2510e90060^",
    "target_changeid": "60895366c0f50844af2737130ed98c2510e90060",
    "predictions": [
      "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "1": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "2": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> tmp: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "3": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "4": "\n <IND> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "5": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "6": "\n \n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "7": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "8": "\n <DED> def __decryptPart(mesagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "9": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Optional[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "10": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "11": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n \n tmp, thisPart = \"\", \"\" \n",
      "12": "<DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "13": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> List[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "14": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" <IND>",
      "15": "<IND> <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "16": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" <DED>",
      "17": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "18": "\n <IND> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "19": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Stuff[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "20": "\n <DED> def __decryptPart(messagePart: str, character2Number: str) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "21": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> dict: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "22": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "23": "\n <DED> def __decryptPart( <DED> messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "24": "\n \n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "25": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Optional[str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "26": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: <IND> <IND> tmp, thisPart = \"\", \"\" \n",
      "27": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> \"\": \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "28": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> (str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "29": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict): \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "30": "\n <DED> def __decryptPart( <IND> messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "31": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> String[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "32": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: <DED> <IND> tmp, thisPart = \"\", \"\" \n",
      "33": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Stigma[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "34": "\n <DED> def __decryptPart(mesagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "35": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str : \n <IND> tmp, thisPart = \"\", \"\" \n",
      "36": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> typing.Optional[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "37": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Optional[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "38": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: <IND> <IND> tmp, thisPart = \"\", \"\"\" \n",
      "39": "\n <DED> def __decryptPart(messagePart: str, character2Number: Optional[dict]) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "40": "\n <IND> def __decryptPart(messagePart: str, character2Number: dict) -> tmp: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "41": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "42": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> thisPart: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "43": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <DED> tmp, thisPart = \"\", \"\"\" \n",
      "44": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "45": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> tmp: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "46": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> \"\": \n <IND> tmp, thisPart = \"\", \"\" \n",
      "47": "<DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\"\" \n",
      "48": "\n \n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> tmp: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "49": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: <DED> <IND> tmp, thisPart = \"\", \"\"\" \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 58,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "3": "\n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "4": "<DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <IND>",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> category = ormar.ForeignKey(Category) \n \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) <IND> \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <DED>",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) <DED> \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> \n category = ormar.ForeignKey(Category) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <DED> ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category: ormar.ForeignKey(Category) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category > ormar.ForeignKey(Category) \n \n",
      "17": "\n <DED> id= ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "18": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "19": "\n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "20": "\n \n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category) \n \n",
      "22": "\n <DED> id= ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "23": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey() \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "26": "<DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=600) \n category = ormar.ForeignKey(Category) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=200) \n category = ormar.ForeignKey(Category) \n \n",
      "29": "\n <DED> id, ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=5000) \n category = ormar.ForeignKey(Category) \n \n",
      "31": "\n <DED> id= ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n texte = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=1000) \n category = ormar.ForeignKey(Category) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length= 500) \n category = ormar.ForeignKey(Category) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> <IND> category = ormar.ForeignKey(Category) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n categories = ormar.ForeignKey(Category) \n \n",
      "37": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "38": "\n <DED> id += ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey[Category] \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n <IND>",
      "41": "<IND> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category.Value) \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n cat\u00e9gorie = ormar.ForeignKey(Category) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=300) \n category = ormar.ForeignKey(Category) \n \n",
      "45": "\n <DED> id: ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> \n category= ormar.ForeignKey(Category) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category]) \n \n",
      "48": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <IND>",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500), \n category = ormar.ForeignKey(Category) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category, nullable=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_fastapi_usage.py",
    "target_filename": "tests/test_fastapi_usage.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "3": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "4": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "5": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "6": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "7": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category: ormar.ForeignKey(Category, nullable=True) \n \n",
      "10": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "17": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "21": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "28": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category=ormar.ForeignKey(Category, nullable=True) \n \n",
      "31": "\n <DED> id, ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "32": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category > ormar.ForeignKey(Category, nullable=True) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String() \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=False) \n \n",
      "38": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) <DED> # ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String() \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "41": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "42": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) <DED> # ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n categories= ormar.ForeignKey(Category, nullable=True) \n \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n nom = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(Max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.String(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n\n",
    "target_code": "\n    <DED>id = ormar.String(primary_key=True, default=key, max_length=8)\n    name = ormar.String(max_length=32)\n\n",
    "warning_line": "    id: ormar.String(primary_key=True, default=key, max_length=8)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_non_integer_pkey.py",
    "target_filename": "tests/test_non_integer_pkey.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "1": "\n <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "2": "\n \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "3": "<DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "4": "<IND> <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "5": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) <IND> name = ormar.String(max_length=32) \n \n",
      "6": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <IND>",
      "7": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) <DED> \n name = ormar.String(max_length=32) \n \n",
      "8": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED>",
      "9": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "10": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) <DED> \n \n",
      "11": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) <IND> \n",
      "12": "\n <DED> id= ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "13": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name= ormar.String(max_length=32) \n \n",
      "14": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=32) \n \n",
      "15": "\n \n <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "16": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "17": "\n <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "18": "\n <DED> id: ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "19": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n names = ormar.String(max_length=32) \n \n",
      "20": "\n \n \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "21": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=28) \n \n",
      "22": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) <DED> <IND> name = ormar.String(max_length=32) \n \n",
      "23": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=10) \n \n",
      "24": "\n \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "25": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id= ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "26": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n <IND>",
      "27": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) <DED> \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "28": "\n <DED> id= ormar.String(primary_key=True, default=key, max_length=8) \n name= ormar.String(max_length=32) \n \n",
      "29": "\n <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=32) \n \n",
      "30": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=5) \n \n",
      "31": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=88) \n \n",
      "32": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=48) \n \n",
      "33": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=6) \n \n",
      "34": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n if not id: Optional[ormar.String(primary_key=True, default=key, max_length=8) \n",
      "35": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n <DED>",
      "36": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n id = ormar.String(primary_key=True, default=key, max_length=8) \n \n",
      "37": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=7) \n \n",
      "38": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=24) \n \n",
      "39": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=2) \n \n",
      "40": "<IND> <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "41": "\n <IND> id = ormar.String(primary_key=True, default=key, max_length=8) <IND> name = ormar.String(max_length=32) \n \n",
      "42": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length= 32) \n \n",
      "43": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=18) \n \n",
      "44": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=4) \n \n",
      "45": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n id = ormar.String(primary_key=True, default=key, max_length=32) \n \n",
      "46": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=58) \n \n",
      "47": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=80) \n \n",
      "48": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=9) \n \n",
      "49": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED> id = ormar.String(primary_key=True, default=key, max_length=38) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,\n",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_line": "      command: Optional(List[str]) = None,",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "1": "experiments: Iterable[conf.Experiment], \n command = Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "2": "experiments: Iterable[conf.Experiment], \n command: List[str] = None, \n args: Optional[List[str]] = None, \n",
      "3": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "4": "experiments: Iterable[conf.Experiment], \n command: List[str] = [], \n args: Optional[List[str]] = None, \n",
      "5": "experiments: Iterable[conf.Experiment], <IND> command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "6": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, <IND>",
      "7": "experiments: Iterable[conf.Experiment], <DED> command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "8": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, <IND> args: Optional[List[str]] = None, \n",
      "9": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, <DED> args: Optional[List[str]] = None, \n",
      "10": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str], \n args: Optional[List[str]] = None, \n",
      "11": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, <DED>",
      "12": "experiments: Iterable[conf.Experiment], \n commande: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "13": "experiments: Iterable[conf.Experiment], \n command: List[str] = (), \n args: Optional[List[str]] = None, \n",
      "14": "experiments: Iterable[conf.Experiment], \n command=List, \n args: Optional[List[str]] = None, \n",
      "15": "experiments: Iterable[conf.Experiment], \n command = None, \n args: Optional[List[str]] = None, \n",
      "16": "experiments: Iterable[conf.Experiment], \n commands: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "17": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n ) -> None: \n",
      "18": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = [], \n args: Optional[List[str]] = None, \n",
      "19": "experiments: Iterable[conf.Experiment], \n command: Options[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "20": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n ) -> List[str]: \n",
      "21": "experiments: Iterable[conf.Experiment], \n command: List[str], \n args: Optional[List[str]] = None, \n",
      "22": "experiments: Iterable[conf.Experiment], \n command: (List[str]) = None, \n args: Optional[List[str]] = None, \n",
      "23": "experiments: Iterable[conf.Experiment], \n command: All[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "24": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None \n args: Optional[List[str]] = None, \n",
      "25": "experiments: Iterable[conf.Experiment], \n command: List[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "26": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "27": "experiments: Iterable[conf.Experiment], \n command: Possible[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "28": "experiments: Iterable[conf.Experiment], \n command: iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "29": "experiments: iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "30": "experiments: Iterable[conf.Experiment], \n command: List[str] = None, \n args: List[str] = None, \n",
      "31": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n ): \n",
      "32": "experiments: Iterable[conf.Experiment], \n commander: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "33": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n ) -> Optional[List[str]] = None, \n",
      "34": "experiments: Iterable[conf.Experiment], \n Command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "35": "experiments: Iterable[conf.Experiment], \n command: Binary[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "36": "experiments: Iterable[conf.Experiment], \n command: Theme[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "37": "experiments: Iterable[conf.Experiment], \n command: Optional[List[Str]] = None, \n args: Optional[List[str]] = None, \n",
      "38": "experiments: Iterable[conf.Experiment], \n command: Set[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "39": "experiments: Iterable[conf.Experiment], \n command: List[str] = \"\", \n args: Optional[List[str]] = None, \n",
      "40": "experiments: Iterable[conf.Experiment], \n command=List[str] | None, \n args: Optional[List[str]] = None, \n",
      "41": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n ) -> Iterable[conf.Experiment]: \n",
      "42": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n ) -> Iterable[conf.Experiment], \n",
      "43": "experiments: Iterable[conf.Experiment], \n command: None, \n args: Optional[List[str]] = None, \n",
      "44": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]], \n args: Optional[List[str]] = None, \n",
      "45": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n globals: Optional[List[str]] = None, \n",
      "46": "experiments: Iterable[conf.Experiment], \n command=List[str], \n args: Optional[List[str]] = None, \n",
      "47": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str], \n args: Optional[List[str]] = None, \n",
      "48": "experiments: Iterable[conf.Experiment], \n command: [] = None, \n args: Optional[List[str]] = None, \n",
      "49": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n type: Optional[List[str]] = None, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str: Any]:\n        <IND>return self._metadata\n",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str, Any]:\n        <IND>return self._metadata\n",
    "warning_line": "    def setMetaData(self, metadata: Dict[str: Any]) -> None:",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/PluginObject.py",
    "target_filename": "UM/PluginObject.py",
    "source_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9^",
    "target_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "predictions": [
      "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "1": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "2": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "3": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "4": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "5": "# The metadata of the plugin is set at the moment it is loaded. \n \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "6": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "7": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "8": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "9": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "10": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str: Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str: Any]: \n <IND> return self._metadata \n",
      "11": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n \n return self._metadata \n",
      "12": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "13": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> return self._metadata \n",
      "14": "# The metadata of the plugin is set at the moment it is loaded. <DED> \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "15": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata <IND> \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "16": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Optional[Dict[str, Any]]: \n <IND> return self._metadata \n",
      "17": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str]: \n <IND> return self._metadata \n",
      "18": "# The metadata of the plugin is set at the moment it is loaded. <IND> <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "19": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata <IND>",
      "20": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> Optional[None]: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "21": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata <DED> \n",
      "22": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata <DED> \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "23": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str: Any]: \n <IND> return self._metadata \n",
      "24": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: <IND> <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "25": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: <IND> <IND> return self._metadata \n",
      "26": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self, metadata: Dict[str, Any]]: \n <IND> return self._metadata \n",
      "27": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata <DED> \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "28": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: <DED> <IND> return self._metadata \n",
      "29": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = Metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "30": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: <DED> <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "31": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self, metadata: Dict[str, Any]): \n <IND> return self._metadata \n",
      "32": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n \n <IND> self._metadata = metadata \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "33": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "34": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> '': \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "35": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any],...]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str,...]: \n <IND> return self._metadata \n",
      "36": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]): \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "37": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> Any: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "38": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "39": "# The metadata of the plugin is set at the moment it was loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "40": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any], \n <IND> return self._metadata \n",
      "41": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str: Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "42": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "43": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def gotMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "44": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str]: \n <IND> return self._metadata \n",
      "45": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData() -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "46": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "47": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "48": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> None: \n <IND> return self._metadata \n",
      "49": "# The metadata of the plugin is set at the moment it is loaded. <DED> <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_line": "        plane: [str, Plane],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[str, vedo.Plane]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 336,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "brainglobe/brainrender",
    "source_filename": "brainrender/scene.py",
    "target_filename": "brainrender/scene.py",
    "source_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6^",
    "target_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "predictions": [
      "self, \n plane: str, \n actors=None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n plane: str, \n actors=None, \n",
      "1": "self, \n plane: List[str, Plane], \n actors=None, \n",
      "2": "self, \n plane: Optional[str, Plane] = None, \n actors=None, \n",
      "3": "self, \n plane: Optional[str, Plane], \n actors=None, \n",
      "4": "self, \n plane: vedo.Plane, \n actors=None, \n",
      "5": "self, \n plane: Optional[[str, Plane]] = None, \n actors=None, \n",
      "6": "self, \n plane: List[str, Plane] \n actors=None, \n",
      "7": "self, \n plane: Statue[str, Plane], \n actors=None, \n",
      "8": "self, \n plane: str = [str, Plane], \n actors=None, \n",
      "9": "self, \n plane: Optional[str, Plane]: \n actors=None, \n",
      "10": "self, \n plane: List[Str, Plane], \n actors=None, \n",
      "11": "self, \n plane: [str, Plane], \n actors=None, \n",
      "12": "self, \n plane: str(str, Plane), \n actors=None, \n",
      "13": "self, \n plane: Union[str, Plane], \n actors=None, \n",
      "14": "self, \n plane: List[str, Plane]: \n actors=None, \n",
      "15": "self, \n plane: Optional[str, Plane]] = None, \n actors=None, \n",
      "16": "self, \n plane: Optional[[str, Plane]], \n actors=None, \n",
      "17": "self, \n plane: Optional[str, Plane] = None \n actors=None, \n",
      "18": "self, \n plane: Snippet[str, Plane], \n actors=None, \n",
      "19": "self, \n plane: Slide[str, Plane], \n actors=None, \n",
      "20": "self, \n plane: Optional[[str, Plane],]] = None, \n actors=None, \n",
      "21": "self, \n plane: Spawning[str, Plane], \n actors=None, \n",
      "22": "self, \n plane: List[str, Plane] = [], \n actors=None, \n",
      "23": "self, \n plane = [str, Plane], \n actors=None, \n",
      "24": "self, \n plane: Set[str, Plane], \n actors=None, \n",
      "25": "self, \n plane: Expression[str, Plane], \n actors=None, \n",
      "26": "self, \n plane: Sunnite[str, Plane], \n actors=None, \n",
      "27": "self, \n plane: List[str, Plane] <DED> \n actors=None, \n",
      "28": "self, \n planes: List[str, Plane], \n actors=None, \n",
      "29": "self, \n plane: List[[str, Plane], \n actors=None, \n",
      "30": "self, \n plane = str(str, Plane), \n actors=None, \n",
      "31": "self, \n plane: list[str, Plane], \n actors=None, \n",
      "32": "self, \n plane: List[List[str, Plane]], \n actors=None, \n",
      "33": "self, \n plane: List[str, Plane] <IND> actors=None, \n",
      "34": "self, \n airplane: List[str, Plane], \n actors=None, \n",
      "35": "self, \n plane: Optional[[str, Plane],] = None, \n actors=None, \n",
      "36": "self, \n plane: Test[str, Plane], \n actors=None, \n",
      "37": "self, \n plane: Optional[[str, Plane], [], \n actors=None, \n",
      "38": "self, \n plane: List[str, List[Plane]] = { } \n actors=None, \n",
      "39": "self, \n plane: Optional[str, Plane][str], \n actors=None, \n",
      "40": "self, \n plane: Optional[str, Plane][str, Plane], \n actors=None, \n",
      "41": "self, \n plane: Optional[[str, Plane], \n actors=None, \n",
      "42": "self, \n plane: List[str, Plane], \n actors=None, <IND>",
      "43": "self, \n plane: Optional[str, Plane] = None, \n actors=None, <IND>",
      "44": "self, \n plane: str = [str, Plane] \n actors=None, \n",
      "45": "self, \n plane: Optional[[str, Plane],] \n actors=None, \n",
      "46": "self, \n plane: (str, Plane), \n actors=None, \n",
      "47": "self, \n plane: Optional[str], \n actors=None, \n",
      "48": "self, \n plane: List[str, Plane], <IND> actors=None, \n",
      "49": "self, \n plane: Optional[str, Plane] = None, <IND> actors=None, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 48,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "3": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "4": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "6": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n \n",
      "12": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "15": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "16": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "19": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "26": "\n <DED> assert isinstance(primary_key, ormar.Integer(primary_key=True)) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "27": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n \n",
      "32": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category=ormar.ForeignKey(Category, nullable=True) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.ForeignKey(primary_key=True) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) <DED> # ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "38": "\n <DED> str = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "40": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String() \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category: ormar.ForeignKey(Category, nullable=True) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED> id = ormar.ForeignKey(True) \n \n",
      "46": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "48": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        text: Optional[Text],\n        sender_id: [Optional[Text]],\n        metadata: Optional[Dict],\n",
    "target_code": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
    "warning_line": "        sender_id: [Optional[Text]],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[typing.Optional[typing.Text]]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/core/channels/webexteams.py",
    "target_filename": "rasa/core/channels/webexteams.py",
    "source_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2^",
    "target_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2",
    "predictions": [
      "text: Optional[Text], \n sender_id: Optional[Text] = None, \n metadata: Optional[Dict], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "text: Optional[Text], \n sender_id: Optional[Text] = None, \n metadata: Optional[Dict], \n",
      "1": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "2": "text: Optional[Text], \n sender_id: Optional[Optional[Text]], \n metadata: Optional[Dict], \n",
      "3": "text: Optional[Text], \n sender_id: Optional[Text] \n metadata: Optional[Dict], \n",
      "4": "text: Optional[Text], \n sender_id: Optional[Text] | \n metadata: Optional[Dict], \n",
      "5": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "6": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], \n",
      "7": "text: Optional[Text], \n sender_id: Optional[Optional[Text]] = None, \n metadata: Optional[Dict], \n",
      "8": "text: Optional[Text], \n sender_id: Optional[[Text]] = None, \n metadata: Optional[Dict], \n",
      "9": "text: Optional[Text], \n sender_id: Optional[Text] = None \n metadata: Optional[Dict], \n",
      "10": "text: Optional[Text], \n sender_id: Optional[Text][str] = None], \n metadata: Optional[Dict], \n",
      "11": "text: Optional[Text], \n sender_id: Optional[Text] = None], \n metadata: Optional[Dict], \n",
      "12": "text: Optional[Text], \n sender_id: Optional[[Text]], \n metadata: Optional[Dict], \n",
      "13": "text: Optional[Text], \n sender_id: Optional[str] = None, \n metadata: Optional[Dict], \n",
      "14": "text: Optional[Text], \n sendinger_id: Optional[Text] = None, \n metadata: Optional[Dict], \n",
      "15": "text: Optional[Text], \n sender_id: Optional[Text] <IND> metadata: Optional[Dict], \n",
      "16": "text: Optional[Text], \n sender_id: Optional[Text] <DED> metadata: Optional[Dict], \n",
      "17": "text: Optional[Text], \n sender_id: List[Optional[Text]], \n metadata: Optional[Dict], \n",
      "18": "text: Optional[Text], \n sender_id: Optional[Text][str] = None, \n metadata: Optional[Dict], \n",
      "19": "text: Optional[Text], \n sender_id: Optional[List[Text]] = None, \n metadata: Optional[Dict], \n",
      "20": "text: Optional[Text], \n sender_id: Optional[Text] = None, \n metadata: Optional[Dict], <IND>",
      "21": "text: Optional[Text], \n sender_id: Optional[Type[Text]] = None, \n metadata: Optional[Dict], \n",
      "22": "text: Optional[Text], \n sender_id: Validator[Optional[Text]], \n metadata: Optional[Dict], \n",
      "23": "text: Optional[Text], \n sender_id: Optional[Text] = None, <IND> metadata: Optional[Dict], \n",
      "24": "text: Optional[Text], \n sender_id: Optional[Text] = None, \n metadata: Optional[Dict], <DED>",
      "25": "text: Optional[Text], \n sender_id: Optional[Text][0]], \n metadata: Optional[Dict], \n",
      "26": "text: Optional[Text], \n sender_id: Optional[Optional[Text], \n metadata: Optional[Dict], \n",
      "27": "text: Optional[Text], \n sender_id: Optional[String[Text]] = None, \n metadata: Optional[Dict], \n",
      "28": "text: Optional[Text], <IND> sender_id: Optional[Text] = None, \n metadata: Optional[Dict], \n",
      "29": "text: Optional[Text], \n sender_id: Expression[Optional[Text]], \n metadata: Optional[Dict], \n",
      "30": "text: Optional[Text], \n sender_id: Optional[Symbol[Text]] = None, \n metadata: Optional[Dict], \n",
      "31": "text: Optional[Text], \n sender_id: Optional[Text] = None, <DED> metadata: Optional[Dict], \n",
      "32": "text: Optional[Text], \n sender_id: 'Optional[Text'], \n metadata: Optional[Dict], \n",
      "33": "text: Optional[Text], \n sender_id: Optional[Text] | None: \n metadata: Optional[Dict], \n",
      "34": "text: Optional[Text], \n sender_id: Form[Optional[Text]], \n metadata: Optional[Dict], \n",
      "35": "text: Optional[Text], \n sender_id: Optional[Optional[Text]] \n metadata: Optional[Dict], \n",
      "36": "text: Optional[Text], <DED> sender_id: Optional[Text] \n metadata: Optional[Dict], \n",
      "37": "text: Optional[Text], \n sender_id: Optional[Text][0], \n metadata: Optional[Dict], \n",
      "38": "text: Optional[Text], \n sender_id: Optional[Text]] \n metadata: Optional[Dict], \n",
      "39": "text: Optional[Text], \n sender_id: [Optional[Text]], \n metadata: Optional[Dict], \n",
      "40": "text: Optional[Text], \n sendinger_id: Optional[Optional[Text]], \n metadata: Optional[Dict], \n",
      "41": "text: Optional[Text], \n sender_id: Optional[False], \n metadata: Optional[Dict], \n",
      "42": "text: Optional[Text], \n sender_id: Optional[Text]] = None, \n metadata: Optional[Dict], \n",
      "43": "text: Optional[Text], \n sender_id: Optional[List[Text]], \n metadata: Optional[Dict], \n",
      "44": "text: Optional[Text], \n sender_id: Optional[Optional[Text]], \n metadata: Optional[Dict], <IND>",
      "45": "text: Optional[Text], \n sender_id: Optional[Text]: \n metadata: Optional[Dict], \n",
      "46": "text: Optional[Text], \n sender_id: Optional[str], \n metadata: Optional[Dict], \n",
      "47": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], <IND>",
      "48": "text: Optional[Text], \n sender_id: Optional[Optional[Text]], \n metadata: Optional[Dict], <DED>",
      "49": "text: Optional[Text], \n sender_id: Optional[Text], <IND> metadata: Optional[Dict], \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "target_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "warning_line": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `type(pandas.Series)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "freqtrade/indicator_helpers.py",
    "target_filename": "freqtrade/indicator_helpers.py",
    "source_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c^",
    "target_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "predictions": [
      "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "1": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "2": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "3": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "4": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "5": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "6": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "7": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "8": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "9": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> '': \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "10": "\n <DED> def ehlers_super_smoother(series: Serie, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "11": "\n <DED> def ehlers_super_smoother(series: Serie, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "12": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "13": "\n <DED> def ehlers_super_smoother(series: Serie, smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "14": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "15": "\n <DED> def ehlers_super_smoother(series: 'Series', smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "16": "\n <DED> def ehlers_super_smoother(series: 'Series', smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "17": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> '': \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "18": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "19": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[str]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "20": "\n <DED> def ehlers_super_smoother(series: 'Series', smoothing: float = 6) -> '': \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "21": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "22": "\n <DED> def ehlers_super_smoother(series: Serie, smoothing: float = 6) -> series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "23": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[str]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "24": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Class[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "25": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "26": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Optional[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "27": "\n <DED> def ehlers_super_smoother(series: 'Series', smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "28": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> this.type(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "29": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "30": "\n <DED> def ehlers_super_smoother(series: List[Series], smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "31": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "32": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "33": "\n \n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "34": "\n <DED> def ehlers_super_smoother(series: Serie, smoothing: float = 6) -> list[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "35": "\n <DED> def ehlers_super_smoother(series: 'Series', smoothing: float = 6) -> series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "36": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> \"\": \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "37": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> serials: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "38": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[int]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "39": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "40": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> 0: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "41": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n \n magic = pi * sqrt(2) / smoothing \n",
      "42": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "43": "\n <DED> def ehlers_super_smoother(series: List[Series], smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "44": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "45": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: \n \n magic = pi * sqrt(2) / smoothing \n",
      "46": "\n \n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "47": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> serial: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "48": "<DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "49": "\n \n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    album = ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 41,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_foreign_keys.py",
    "target_filename": "tests/test_foreign_keys.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "2": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "3": "\n <IND> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "4": "\n \n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "6": "\n <IND> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "7": "<DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "8": "\n \n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "9": "<IND> <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n <IND>",
      "11": "<DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") <IND> title = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") <DED> title = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <IND> album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "15": "\n <DED> id= ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) <IND> \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) <DED> \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n <DED>",
      "20": "<IND> <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n <IND>",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") <IND> title = ormar.String(max_length=100) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") <DED> title = ormar.String(max_length=100) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) <IND> album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "26": "\n \n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) <DED> \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) <IND> \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n <DED>",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n albums = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "32": "<DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "33": "\n <IND> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "34": "\n <DED> id= ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "35": "\n <DED> id= ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "37": "\n \n <IND> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) \n albums= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "39": "<IND> <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "40": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album), related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n <IND>",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album) \n title = ormar.String(max_length=100) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n album=ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) <DED> \n \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) <IND> \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\" \n title = ormar.String(max_length=100) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n <DED>",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n album_ ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "11": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> assert ormar.Integer(primary_key=True) \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "15": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "17": "\n <DED> assert isinstance(primary_key, ormar.Integer(primary_key=True)) \n name = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_length=100) \n \n",
      "19": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=100) \n \n",
      "21": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "23": "\n <DED> str = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_length=100) \n \n",
      "25": "\n <DED> key=True, ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "26": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=False) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=100) \n \n",
      "30": "<IND> \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "31": "\n <DED> key = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "32": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "33": "\n <DED> id = ormar.Integer(primary_key=True \n name = ormar.String(max_length=100) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n ) \n",
      "35": "\n <DED> key=True, ormar.Integer(primary_key=100) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "37": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "38": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> label = ormar.String(max_length=100) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id= ormar.String(max_length=100) \n \n",
      "41": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> ret = ormar.String(max_length=100) \n \n",
      "43": "\n <IND> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "44": "\n <IND> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> python = ormar.String(max_length=100) \n \n",
      "46": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True <IND> ) \n name = ormar.String(max_length=100) \n \n",
      "48": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "target_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_line": "    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 43,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Flax-Network/flax-blockchain",
    "source_filename": "src/util/Conditions.py",
    "target_filename": "src/util/Conditions.py",
    "source_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f^",
    "target_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "predictions": [
      "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "1": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "2": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode] = { } \n for _ in conditions: \n",
      "3": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode] = { } \n for _ in conditions: \n",
      "4": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d = { } \n for _ in conditions: \n",
      "5": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Optional[Dict[ConditionOpcode, List[ConditionVarPair]]] = { } \n for _ in conditions: \n",
      "6": "\n <DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "7": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "8": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "9": "\n <DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "10": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <DED> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "11": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <DED> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "12": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode], List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "13": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <DED> d: List[ConditionOpcode] = { } \n for _ in conditions: \n",
      "14": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode] = { } \n for _ in conditions: \n",
      "15": "\n <DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode] = { } \n for _ in conditions: \n",
      "16": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]]] = { } \n for _ in conditions: \n",
      "17": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode]] = { } \n for _ in conditions: \n",
      "18": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n \n d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "19": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n \n d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "20": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair], None)]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "21": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode], List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "22": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: <IND> <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "23": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } <IND> for _ in conditions: \n",
      "24": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Optional[Dict[ConditionOpcode]] = { } \n for _ in conditions: \n",
      "25": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: <IND>",
      "26": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: <DED> <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "27": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } <IND> for _ in conditions: \n",
      "28": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n \n d: List[ConditionOpcode] = { } \n for _ in conditions: \n",
      "29": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair], List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "30": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair], None)]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "31": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]], \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "32": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "33": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: <IND>",
      "34": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Liste[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "35": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } <DED> for _ in conditions: \n",
      "36": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: <DED>",
      "37": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: <IND> <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "38": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } <DED> for _ in conditions: \n",
      "39": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]]: \n for _ in conditions: \n",
      "40": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: <DED>",
      "41": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "42": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair], None): \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "43": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: <DED> <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "44": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair], List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "45": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "46": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]], \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "47": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair], None)]: \n <IND> d: List[ConditionOpcode] = { } \n for _ in conditions: \n",
      "48": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]], \n for _ in conditions: \n",
      "49": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair], None]] = { } \n for _ in conditions: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <DED>else:\n                <IND>extra_info = [] # type: [str]\n                if subtype_label is not None:\n",
    "target_code": "            <DED>else:\n                <IND>extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_line": "                extra_info = [] # type: [str]",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `\"[str]\"` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checker.py",
    "target_filename": "mypy/checker.py",
    "source_changeid": "021283f03639d185c3a0985684a94307c9fcc15b^",
    "target_changeid": "021283f03639d185c3a0985684a94307c9fcc15b",
    "predictions": [
      "<DED> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "1": "<DED> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "2": "<DED> else: \n <IND> extra_info = [] # type: Optional[str] \n if subtype_label is not None: \n",
      "3": "<DED> else: \n <IND> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "4": "<DED> else: \n <IND> extra_info = str([]) \n if subtype_label is not None: \n",
      "5": "<IND> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "6": "<DED> else: \n <IND> extra_info = str([] # type: str] \n if subtype_label is not None: \n",
      "7": "<DED> else: \n <IND> extra_info = str([] # type: str) \n if subtype_label is not None: \n",
      "8": "<DED> else: \n <IND> extra_info = [] # type: Expression[str] \n if subtype_label is not None: \n",
      "9": "\n <DED> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "10": "<DED> else: \n <IND> extra_info = str(] # type: str \n if subtype_label is not None: \n",
      "11": "<DED> else: \n <IND> extra_info: str = [] \n if subtype_label is not None: \n",
      "12": "<IND> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "13": "<DED> else: \n <IND> extra_info = [] # type: Str \n if subtype_label is not None: \n",
      "14": "<DED> else: \n <IND> extra_info = (] # type: str \n if subtype_label is not None: \n",
      "15": "<DED> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "16": "<DED> else: \n <DED> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "17": "<DED> else: \n <IND> extra_info = str # type: str \n if subtype_label is not None: \n",
      "18": "<DED> else: \n <IND> extra_info = str # type: Optional[str] \n if subtype_label is not None: \n",
      "19": "<IND> else: \n <IND> extra_info = [] # type: Optional[str] \n if subtype_label is not None: \n",
      "20": "<DED> else: \n <IND> extra_info = (] # type: Optional[str] \n if subtype_label is not None: \n",
      "21": "\n <DED> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "22": "<DED> else: \n <DED> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "23": "<DED> else: \n <IND> extra_info = [] # type: Union[str] \n if subtype_label is not None: \n",
      "24": "<DED> else: \n <IND> extra_info = [] # type: Insert[str] \n if subtype_label is not None: \n",
      "25": "<DED> else: \n <IND> extra_info = (] # type: List[str] \n if subtype_label is not None: \n",
      "26": "<DED> else: \n <IND> extra_info = [] # type: List[Str] \n if subtype_label is not None: \n",
      "27": "<DED> else: \n <IND> extra_info = [] # type: [str] \n if subtype_label is not None: \n",
      "28": "<DED> else: \n <IND> extra_info = str([] # type: Optional[str]) \n if subtype_label is not None: \n",
      "29": "<DED> else: \n <IND> extra_info = [] # type: Test[str] \n if subtype_label is not None: \n",
      "30": "<DED> else: \n <IND> extra_info = [] # type: Class[str] \n if subtype_label is not None: \n",
      "31": "<DED> else: \n <IND> extra_info = [] # type: Form[str] \n if subtype_label is not None: \n",
      "32": "<DED> else: \n <IND> extra_info: Optional[str] = [] \n if subtype_label is not None: \n",
      "33": "<DED> else: \n <IND> extra_info: List[str] \n if subtype_label is not None: \n",
      "34": "<DED> else: \n <IND> extra_info = [] # type: str <DED> if subtype_label is not None: \n",
      "35": "<DED> else: \n <IND> extra_info: Optional[str] = None \n if subtype_label is not None: \n",
      "36": "<DED> else: \n <IND> extra_info = [] # type: str <IND> \n if subtype_label is not None: \n",
      "37": "<DED> else: \n <IND> extra_info = str # type: List[str] \n if subtype_label is not None: \n",
      "38": "<DED> else: \n \n extra_info = [] # type: str \n if subtype_label is not None: \n",
      "39": "<DED> else: \n <IND> extra_info = str[] # type: str \n if subtype_label is not None: \n",
      "40": "<DED> else: <IND> <IND> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "41": "<DED> else: \n <IND> extra_info = [] # type: (str) \n if subtype_label is not None: \n",
      "42": "<DED> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: <IND>",
      "43": "<DED> else: <DED> <IND> extra_info = [] # type: str \n if subtype_label is not None: \n",
      "44": "<DED> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: <IND>",
      "45": "<DED> else: \n <IND> extra_info = [] # type: '' \n if subtype_label is not None: \n",
      "46": "<DED> else: \n <IND> extra_info = [] # type: str \n if subtype_label is not None: <DED>",
      "47": "<DED> else: \n <IND> extra_info = [] # type: None \n if subtype_label is not None: \n",
      "48": "<DED> else: \n <IND> extra_info = '' # type: str \n if subtype_label is not None: \n",
      "49": "<DED> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=40)\n\n",
    "warning_line": "    name: ormar.String(max_length=40)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 40)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_many_to_many.py",
    "target_filename": "tests/test_many_to_many.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "2": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "3": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <IND>",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=40) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <IND> \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <DED> \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) <DED> \n name = ormar.String(max_length=40) \n \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=40) \n \n",
      "12": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "13": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 40) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "17": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length = 40) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=50) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=60) \n \n",
      "21": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "22": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "23": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=40) \n \n",
      "25": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=40) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=40) \n \n",
      "27": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "28": "<IND> \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "29": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <IND>",
      "30": "\n <DED> id, ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n name = Ormar.String(max_length=40) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar[max_length=40] \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String[max_length=40] \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.String(primary_key=False) \n \n",
      "35": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "36": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <IND>",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.Integer(primary_key=True) \n <IND>",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=20) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.String(max_length=40) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=-40) \n \n",
      "41": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <DED> \n \n",
      "42": "\n <IND> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=40) \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n ) \n",
      "44": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <IND> \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED> id = ormar.String(primary_key=True) \n <IND>",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) <DED> <IND> name = ormar.String(max_length=40) \n \n",
      "47": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <DED> \n \n",
      "48": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED>",
      "49": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def add(self, predicted: List[str], labels: List[str]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "target_code": "\n    <DED>def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_line": "    def add(self, predicted: List[str], labels: List[str]) -> None:",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "asyml/texar-pytorch",
    "source_filename": "texar/torch/run/metric/generation.py",
    "target_filename": "texar/torch/run/metric/generation.py",
    "source_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3^",
    "target_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "predictions": [
      "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "1": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "2": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> StreamingMetric: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "3": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "4": "\n \n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "5": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "6": "<DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "7": "\n <DED> def add(self, predicted: Optional[List[str], labels: Optional[List[str]]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "8": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> \"\": \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "9": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> str: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "10": "<IND> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "11": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis in zip(labels, predicted): \n",
      "12": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, expected): \n",
      "13": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): <IND>",
      "14": "\n <DED> def add(self, predicted: List[str, labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "15": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: <IND> <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "16": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): <DED>",
      "17": "\n <DED> def add(self, predicted: Union[List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "18": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: <DED> <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "19": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> \"\" \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "20": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> Optional[List[str]]: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "21": "\n <DED> def add(self, predicted: List[str], labels: List[str]): \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "22": "\n <DED> def add(self, predicted: List[str], labels: List[str] \n ) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "23": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "24": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predictions): \n",
      "25": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> List[str]: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "26": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> All: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "27": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> []: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "28": "\n <DED> def add( <DED> self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "29": "\n <DED> def add(self, predicted: List[str], labels: List[str] <IND> ) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "30": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> Node: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "31": "\n <DED> def add(self, predicted: List[List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "32": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, prediction): \n",
      "33": "\n <DED> def add( <IND> self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "34": "\n <DED> def add(self, predicted: List[str], labels: List[str] <DED> ) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "35": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, forecast): \n",
      "36": "\n \n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "37": "\n <DED> def add( \n self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "38": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> Any: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "39": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels): \n",
      "40": "\n <DED> def add(self, predicted: List[[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "41": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> StreamingMetric: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "42": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> * None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "43": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> none: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "44": "\n <DED> def add(self, predicted: List[str], labels: Optional[List[str]]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "45": "\n <DED> def add(self, predicted: List[str], labels: List[str]]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "46": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, prevised): \n",
      "47": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis in zip(labels, predicted)): \n",
      "48": "\n <DED> def add(self, expected: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "49": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def fit(self, ts, component_index: Optional[int] = None):\n        <IND>super().fit(ts, component_index)\n        # Check univariate time series\n",
    "target_code": "\n    <DED>def fit(self, ts):\n        <IND>super().fit(ts)\n        # Check univariate time series\n",
    "warning_line": "    def fit(self, ts, component_index: Optional[int] = None):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 218,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "darts/models/theta.py",
    "target_filename": "darts/models/theta.py",
    "source_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3^",
    "target_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "predictions": [
      "\n <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "1": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "2": "\n <DED> def fit(self, ts, component_index): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "3": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "4": "\n <DED> def fit(self, ts, component_index = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "5": "\n <DED> def fit(self, ts: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "6": "\n <DED> def fit(self, ts, component_index, int): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "7": "\n <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "8": "\n <DED> def fit(self, ts, component_index=None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "9": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "10": "\n <DED> def fit(self, ts, component_index=None): \n <IND> super().fit(ts, component_index=None) \n # Check univariate time series \n",
      "11": "\n <IND> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "12": "\n <IND> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "13": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "14": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n \n super().fit(ts, component_index) \n # Check univariate time series \n",
      "15": "\n \n <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "16": "\n <DED> def fit(self, ts: int, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "17": "\n \n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "18": "\n <DED> def fit(self, ts, component_index = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "19": "<DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "20": "\n <DED> def fit(self, ts: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "21": "\n <DED> def fit(self, ts, component_index=All): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "22": "\n <DED> def fit(self, ts, component_index = None): \n \n super().fit(ts, component_index) \n # Check univariate time series \n",
      "23": "\n <DED> def fit(self, ts, component_index, None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "24": "\n <DED> def fit(self, ts, component_index, Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "25": "\n <DED> def fit(self, ts: None, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "26": "\n <DED> def fit(self, ts, component_index: None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "27": "<IND> <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "28": "\n <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index).fit(component_index) \n # Check univariate time series \n",
      "29": "\n <DED> def fit(self, ts, component_index): \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "30": "\n <DED> def fit(self, ts, component_index = None) -> None: \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "31": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> None: \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "32": "\n <DED> def fit(self, ts, component_index=Optional[int]): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "33": "\n <DED> def fit(self, ts, component_index : Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "34": "\n <DED> def fit(self, ts, component_index=Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "35": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index).fit(component_index) \n # Check univariate time series \n",
      "36": "<DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "37": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series <IND>",
      "38": "\n <DED> def fit(self, ts, component_index: None = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "39": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) <IND> # Check univariate time series \n",
      "40": "\n <DED> def fit(self, ts): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "41": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series <DED> \n",
      "42": "<IND> <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "43": "\n <IND> def fit(self, ts, component_index = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "44": "\n <DED> def fit(self, ts): \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "45": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) <DED> # Check univariate time series \n",
      "46": "\n <IND> def fit(self, ts, component_index): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "47": "\n <DED> def fit(self, ts, component_index(int)): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "48": "\n <DED> def fit(self, ts, component_index = []): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "49": "\n <DED> def fit(self, ts, component_index=All): \n <IND> super().fit(ts, component_index=Component_index) \n # Check univariate time series \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": true,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":\n        <IND>",
    "target_code": "\n        if not isinstance(other, BitVec):\n            <IND>other = BitVec(z3.BitVecVal(other, self.size()))\n        <DED>return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        <IND>",
    "warning_line": "    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 145,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/smt/bitvecfunc.py",
    "target_filename": "mythril/laser/smt/bitvecfunc.py",
    "source_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9^",
    "target_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "predictions": [
      "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "1": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "2": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "3": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "4": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "5": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\") -> \"BitVecFunc\": \n <IND>",
      "6": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[str, int]) -> \"BitVecFunc\": \n <IND>",
      "7": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int]) -> \"BitVecFunc\": \n <IND>",
      "8": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, 'BitVec']) -> \"BitVecFunc\": \n <IND>",
      "9": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "10": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, int]) -> \"BitVecFunc\": \n <IND>",
      "11": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "12": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[str, int]) -> \"BitVecFunc\": \n <IND>",
      "13": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int], \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "14": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "15": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, \"BitVec\") -> \"BitVecFunc\": \n <IND>",
      "16": "\n return _arithmetic_helper(self, other, operator.or_) \n \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "17": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, bitvecfunc.BitVec]) -> \"BitVecFunc\": \n <IND>",
      "18": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "19": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, bool]) -> \"BitVecFunc\": \n <IND>",
      "20": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int,...]) -> \"BitVecFunc\": \n <IND>",
      "21": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, 'BitVec']) -> \"BitVecFunc\": \n <IND>",
      "22": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, B\"]) -> \"BitVecFunc\": \n <IND>",
      "23": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "24": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "25": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int]) -> \"BitVecFunc\": \n <IND>",
      "26": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "27": "\n return _arithmetic_helper(self, other, operator.or_) \n \n \n <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "28": "\n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "29": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, int]) -> \"BitVecFunc\": \n <IND>",
      "30": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, or \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "31": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "32": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, not \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "33": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, boot]) -> \"BitVecFunc\": \n <IND>",
      "34": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, bitVec]) -> \"BitVecFunc\": \n <IND>",
      "35": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int,\"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "36": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, BootVec]) -> \"BitVecFunc\": \n <IND>",
      "37": "\n <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "38": "\n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "39": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "40": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, bitvecfunc.BitVec]) -> \"BitVecFunc\": \n <IND>",
      "41": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, get(\"BitVec\")]) -> \"BitVecFunc\": \n <IND>",
      "42": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <DED>",
      "43": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int], \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "44": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, bool]) -> \"BitVecFunc\": \n <IND>",
      "45": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[str, str]) -> \"BitVecFunc\": \n <IND>",
      "46": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int], <IND> \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "47": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[\"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "48": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, operator.or_) -> \"BitVecFunc\": \n <IND>",
      "49": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, BitVec]) -> BitVecFunc: \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
    "target_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_line": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "target_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28^",
    "target_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "predictions": [
      "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "1": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "2": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "3": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "4": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int, float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "5": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n <IND>",
      "6": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "7": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "8": "\n \n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "9": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> float = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "10": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: Int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "11": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(int)): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "12": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "13": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n <IND>",
      "14": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> float_data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "15": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "16": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n <DED>",
      "17": "<DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "18": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(tempe) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "19": "\n \n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "20": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "21": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n <DED>",
      "22": "<IND> <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "23": "<DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "24": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: (float)): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "25": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: setTargetBedTemperature(float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "26": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) <IND> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "27": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> float = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "28": "<IND> <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "29": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): <IND> <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "30": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: floating.int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "31": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> floats = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "32": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: \"float\"): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "33": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) <DED> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "34": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: constants.int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "35": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int) -> float: \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "36": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> float: \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "37": "\n <DED> def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "38": "\n <DED> def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "39": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) <IND> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "40": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: bytes): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "41": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(tempe) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "42": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): <DED> <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "43": "\n <DED> def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "44": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int) -> str: \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "45": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "46": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "47": "\n <DED> def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "48": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) <IND> \n",
      "49": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): <IND> <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_line": "    def pop(self, index: int = -1) -> NoReturn: ...",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 52,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pallets/werkzeug",
    "source_filename": "src/werkzeug/datastructures.pyi",
    "target_filename": "src/werkzeug/datastructures.pyi",
    "source_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3^",
    "target_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "predictions": [
      "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "1": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "2": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "3": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "4": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "5": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Int) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "6": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int,...) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "7": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = (1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "8": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: id = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "9": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = (1)) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "10": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: bool = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "11": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Index = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "12": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = []) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "13": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: str = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "14": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: List[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "15": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: int) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "16": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index:... \n def reverse(self) -> NoReturn:... \n",
      "17": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "18": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "19": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: ListMixin.pop) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "20": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "21": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int == 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "22": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -11) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "23": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: morph = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "24": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: Int, value: V) -> NoReturn:... \n def pop(self, index: Int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "25": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... <IND> def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "26": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Int,... \n def reverse(self) -> NoReturn:... \n",
      "27": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: Int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "28": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... <IND>",
      "29": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... <DED> def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "30": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Optional[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "31": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "32": "def extend(self, values: Iterable[V]) -> NoReturn:... <IND> def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "33": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "34": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... <IND> def reverse(self) -> NoReturn:... \n",
      "35": "def extend(self, values: Iterable[V]) -> NoReturn:... <DED> def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "36": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int || int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "37": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: id = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "38": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int,... \n def reverse(self) -> NoReturn:... \n",
      "39": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... <DED> def reverse(self) -> NoReturn:... \n",
      "40": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: str, value: V) -> NoReturn:... \n def pop(self, index: str = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "41": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: Int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "42": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: ListMixin.pop = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "43": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: Int = (1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "44": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "45": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: id, value: V) -> NoReturn:... \n def pop(self, index: id = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "46": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: id = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "47": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: Int) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "48": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = > 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "49": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos, value: V) -> NoReturn:... \n def pop(self, index: int,...) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        <IND>return cls(\n",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        <IND>return cls(\n",
    "warning_line": "    def from_dict(",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1769,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/messages.py",
    "target_filename": "raiden/messages.py",
    "source_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd^",
    "target_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "predictions": [
      "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "1": "\n def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "2": "<IND> def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "3": "def from_dict( \n cls: typing.T_UpdatePFS, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "4": "<DED> def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "5": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message[T_UpdatePFS]: \n <IND> return cls( \n",
      "6": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> T_UpdatePFS: \n <IND> return cls( \n",
      "7": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> cls: \n <IND> return cls( \n",
      "8": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> List[T_UpdatePFS]: \n <IND> return cls( \n",
      "9": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> t_UpdatePFS: \n <IND> return cls( \n",
      "10": "def from_dict( \n cls: typing.Optional[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "11": "def from_dict( \n cls: typing.type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "12": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <DED> return cls( \n",
      "13": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n \n return cls( \n",
      "14": "def from_dict( \n cls: typing.Callable[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "15": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message[typing.T_UpdatePFS]: \n <IND> return cls( \n",
      "16": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message.T_UpdatePFS: \n <IND> return cls( \n",
      "17": "def from_dict( \n cls = typing.Type[typing.T_UpdatePFS], \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "18": "def from_dict( \n cls: typing.Text[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "19": "def from_dict( \n cls: typing.T[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "20": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> updating.T_UpdatePFS: \n <IND> return cls( \n",
      "21": "def from_dict( \n cls: typing.Optional[typing.T_UpdatePFS], \n data: typing.Optional[typing.Dict], \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "22": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> dict: \n <IND> return cls( \n",
      "23": "def from_dict( \n cls: typing.Value[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "24": "def from_dict( \n cls: typing.Template[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "25": "def from_dict( <DED> cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "26": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> config.T_UpdatePFS: \n <IND> return cls( \n",
      "27": "def from_dict( \n cls: typing.Context[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "28": "def from_dict( <IND> cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "29": "\n def from_dict( \n cls: typing.T_UpdatePFS, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "30": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message[str]: \n <IND> return cls( \n",
      "31": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Writing.T_UpdatePFS: \n <IND> return cls( \n",
      "32": "def from_dict( \n cls: typing.Message[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "33": "def from_dict( \n cls: typing.Protocol[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "34": "def from_dict( \n cls, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "35": "\n def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message[T_UpdatePFS]: \n <IND> return cls( \n",
      "36": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, <DED> ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "37": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> changing.T_UpdatePFS: \n <IND> return cls( \n",
      "38": "<IND> def from_dict( \n cls: typing.T_UpdatePFS, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "39": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> cls = cls( \n",
      "40": "def from_dict( \n cls: typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "41": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Triangulate[T_UpdatePFS]: \n <IND> return cls( \n",
      "42": "<IND> def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> T_UpdatePFS: \n <IND> return cls( \n",
      "43": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> formatting.T_UpdatePFS: \n <IND> return cls( \n",
      "44": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, <IND> ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "45": "def from_dict( \n cls = typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "46": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], <IND> data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "47": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> UpdatePFS: \n <IND> return cls( \n",
      "48": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( <IND>",
      "49": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: <IND> <IND> return cls( \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_line": "    team: Optional[Team] = ormar.ForeignKey(Team)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "2": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "3": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "4": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n team: ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "7": "\n <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "8": "\n \n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email=str = ormar.String(max_length=100) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(team) \n email = ormar.String(max_length=100) \n \n",
      "11": "\n <IND> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(team) \n email = ormar.String(max_length=100) \n \n",
      "13": "\n \n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "15": "\n <DED> id= ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n team: ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "17": "<DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n team: Team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n team: ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "20": "\n <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "21": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(team) \n email= ormar.String(max_length=100) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n team_type= ormar.ForeignKey(Team_type) \n email = ormar.String(max_length=100) \n \n",
      "24": "<DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "25": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey() \n email = ormar.String(max_length=100) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n team_type = ormar.ForeignKey(Team_type) \n email = ormar.String(max_length=100) \n \n",
      "28": "\n \n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n team_name = ormar.ForeignKey(Team_name) \n email = ormar.String(max_length=100) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <IND>",
      "31": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey() \n email = ormar.String(max_length=100) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "34": "<DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) <IND> email = ormar.String(max_length=100) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) <DED> email = ormar.String(max_length=100) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n team: ormar.ForeignKey(team) \n email = ormar.String(max_length=100) \n \n",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) \n team: Team[str] = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "39": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email=ormar.String(max_length=100) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email=str = ormar.String(max_length=100) \n \n",
      "42": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n team_type= ormar.ForeignKey(Team_type) \n email= ormar.String(max_length=100) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <DED> \n \n",
      "45": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <IND> \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) <IND> team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n team_type= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n emails = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None\n\n",
    "target_code": "    <IND>id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_line": "    charging_profile: Dict = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 96,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "<IND> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "1": "<DED> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "2": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = id_tag: Optional[str] = None \n charging_profile: Optional[str,...np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.n",
      "3": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n",
      "5": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n",
      "6": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = None <IND> id_tag: Optional[int] = None \n charging_profile: Optional[str,...np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.",
      "7": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n",
      "8": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n",
      "9": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[NONE] \n \n",
      "10": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n",
      "11": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = None \n charging_profile: Optional[str_id[str,...np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np",
      "12": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n",
      "13": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n",
      "14": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n",
      "15": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[NONE] \n \n",
      "16": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[None] \n \n",
      "17": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] = None \n \n",
      "18": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n",
      "19": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n \n",
      "20": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n",
      "21": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[None] \n \n",
      "22": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n \n",
      "23": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n \n",
      "24": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n \n",
      "25": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[[]] \n \n",
      "26": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[NONE] \n \n",
      "27": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] = None \n \n",
      "28": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[Dic",
      "29": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[NONE] \n \n",
      "30": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[[NONE]] \n \n",
      "31": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <IND> \n charging_profile: Optional[str] = None \n \n",
      "32": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] = None \n \n",
      "33": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[None] \n \n",
      "34": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n",
      "35": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[[-]] \n \n",
      "36": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[[str]] \n \n",
      "37": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] = None \n \n",
      "38": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] = None \n \n",
      "39": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[[np.n]] \n \n",
      "40": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[np.next ] \n \n",
      "41": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <IND> \n charging_profile: Optional[int] \n \n",
      "42": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[NONE] \n \n \n",
      "43": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[None] \n \n",
      "44": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] = None \n \n",
      "45": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[str] \n \n \n",
      "46": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[[str]] \n \n",
      "47": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[np.next ] \n \n",
      "48": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[NONE] \n \n \n",
      "49": "<IND> id_tag: str \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Dict = * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n charging_profile: Optional[int] \n \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    body: List[Union[Comment, Statement]] = field(default=list)\n",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_line": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 139,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/dotenv-linter",
    "source_filename": "dotenv_linter/grammar/fst.py",
    "target_filename": "dotenv_linter/grammar/fst.py",
    "source_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6^",
    "target_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "predictions": [
      "\n body: List[Union[Comment, Statement]] = field(default=list) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n body: List[Union[Comment, Statement]] = field(default=list) \n",
      "1": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n",
      "2": "\n body: Module[List[Union[Comment, Statement]] = field(default=list) \n",
      "3": "\n body: List[Union[Comment, Statement, List]] = field(default=list) \n",
      "4": "\n body: Module[List[Union[Comment, Statement]]] = field(default=list) \n",
      "5": "\n body: Modal[List[Union[Comment, Statement]]] = field(default=list) \n",
      "6": "\n body: Modal[List[Union[Comment, Statement]] = field(default=list) \n",
      "7": "\n body: List[Union[Comment, Statement], List[List]] = field(default=list) \n",
      "8": "\n body: Module[Union[Comment, Statement]] = field(default=list) \n",
      "9": "\n body: Type[List[Union[Comment, Statement]] = field(default=list) \n",
      "10": "<IND> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "11": "<DED> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "12": "\n body: Optional[List[Union[Comment, Statement]] = field(default=list) \n",
      "13": "\n body: List[Union[Comment, Statement, list]] = field(default=list) \n",
      "14": "\n body: List[Union[Comment, Statement,...]] = field(default=list) \n",
      "15": "\n body: List[Union[Comment, Statement], List[str]] = field(default=list) \n",
      "16": "\n body = List[Union[Comment, Statement]] = field(default=list) \n",
      "17": "\n body: Module[List[Union[Comment, Statement], List]] = field(default=list) \n",
      "18": "\n body: class List[Union[Comment, Statement]] = field(default=list) \n",
      "19": "\n body: List[Uniunea[Comment, Statement]] = field(default=list) \n",
      "20": "\n body: Union[Union[Comment, Statement]] = field(default=list) \n",
      "21": "\n body: Formal[List[Union[Comment, Statement]]] = field(default=list) \n",
      "22": "\n body: List[Union[Comment, Statement], List[Type]] = field(default=list) \n",
      "23": "\n body: Symbol[List[Union[Comment, Statement]] = field(default=list) \n",
      "24": "\n body: Module = field(default=list) \n",
      "25": "\n body : List[Union[Comment, Statement]] = field(default=list) \n",
      "26": "<IND> body: Module[List[Union[Comment, Statement]]] = field(default=list) \n",
      "27": "\n body: List[Union[Comment, Statement]] = field(default=list) <IND>",
      "28": "\n body: Module.List[Union[Comment, Statement]] = field(default=list) \n",
      "29": "\n body: List[Union[Comment, Statement], [] = field(default=list) \n",
      "30": "\n body: List[Union[Comment, Statement]] = field(default=list) <DED> \n",
      "31": "\n body: List[Union[Comment, Statement, List, List]] = field(default=list) \n",
      "32": "\n body: Type[List[Union[Comment, Statement]]] = field(default=list) \n",
      "33": "\n body: List[Union[Comment, Statement]] = field(default=list) \n if not body: List[Union[Comment, Statement]]: \n",
      "34": "\n body: Module.List[List[Union[Comment, Statement]] = field(default=list) \n",
      "35": "\n body: Symbol[List[Union[Comment, Statement]]] = field(default=list) \n",
      "36": "\n body: Table[Union[Comment, Statement]] = field(default=list) \n",
      "37": "\n body: List[Union[Comment, Statement, Type]] = field(default=list) \n",
      "38": "\n body: Union[Comment, Statement] = field(default=list) \n",
      "39": "\n body: List[UE[Comment, Statement]] = field(default=list) \n",
      "40": "\n body: Optional[List[Union[Comment, Statement], List]] = field(default=list) \n",
      "41": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n if not body: Optional[List[Comment, Statement]] = None: \n",
      "42": "\n body: List[Union[Comment, Statement]] = field(default=list) \n if not body: List[Union[Comment, Statement]] == \"\" \n",
      "43": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n if not body: Optional[List[Comment, Statement]] == \"\" \n",
      "44": "\n body: List[Union[Comment, Statement, []] = field(default=list) \n",
      "45": "\n body: List[Union[Comment, Statement], List[Comment]] = field(default=list) \n",
      "46": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n if not body: Optional[List[Comment, Statement]] == \"\") \n",
      "47": "\n body: List[Union[Comment, Statement]] = field(default=list) \n ) \n",
      "48": "\n body: List[ Union[Comment, Statement]] = field(default=list) \n",
      "49": "\n body: Module.List[List[Union[Comment, Statement]]] = field(default=list) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = None\n    barrier: Optional[Barrier] = None\n",
    "target_code": "    pub_port: Optional[int] = None\n    server: Optional[SuiteRuntimeServer] = None\n    publisher: Optional[WorkflowPublisher] = None\n    barrier: Optional[Barrier] = None\n",
    "warning_line": "    publisher: WorkflowPublisher = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `publisher` declared in class `Scheduler` has type `WorkflowPublisher` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n"
    ],
    "correct": false,
    "top_five": {
      "0": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "1": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "2": "pub_port: Optional[int] = None \n server = SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "3": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <IND>",
      "4": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None <IND> publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "5": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None <IND> barrier: Optional[Barrier] = None \n",
      "6": "pub_port: Optional[int] = None <IND> server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "7": "pub_port: Optional[int] = None <IND> server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "8": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <IND>",
      "9": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None <IND> barrier: Optional[Barrier] = None \n",
      "10": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None <IND> publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "11": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None <DED> publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "12": "pub_port: Optional[int] = None <DED> server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "13": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None <DED> barrier: Optional[Barrier] = None \n",
      "14": "pub_port: Optional[int] = None \n server: Optional[ SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "15": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None <DED> publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "16": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None <DED> barrier: Optional[Barrier] = None \n",
      "17": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = [] \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "18": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED>",
      "19": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher = Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "20": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = Optional[WorkflowPublisher] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "21": "pub_port: Optional[int] = None \n server: SolutionRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "22": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED>",
      "23": "pub_port: Optional[int] = None <DED> server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "24": "pub_port: Optional[int] = None \n server: Optional[SoftwareRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "25": "pub_port: Optional[int] = None \n server= SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "26": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: WorkflowPublisher = None \n barrier: Optional[Barrier] = None \n",
      "27": "pub_port: Optional[int] = None \n servers: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "28": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publishers: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "29": "pub_port: Optional[int] = None \n server: suiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "30": "pub_port: Optional[int] = None \n serveur: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "31": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publishers: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "32": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = \"\" \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "33": "pub_port: Optional[int] = None \n server: Union[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "34": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: 'WorkflowPublisher' \n barrier: Optional[Barrier] = None \n",
      "35": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publishing: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "36": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publishing: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "37": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher = None \n barrier: Optional[Barrier] = None \n",
      "38": "pub_port: Optional[int] = None \n serveur: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "39": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED> ): \n",
      "40": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n ) -> None \n",
      "41": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED> ) -> None \n",
      "42": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n <IND>",
      "43": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED> ): \n",
      "44": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher=WorkflowPublisher = None \n barrier: Optional[Barrier] = None \n",
      "45": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED> ) -> None \n",
      "46": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher = Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "47": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n editor: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "48": "pub_port: Optional[int] = None \n server: SuiteRuntimeServer = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n ) -> None \n",
      "49": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n ): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ClearChargingProfilePayload:\n    <IND>id: int = None\n    connector_id: int = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None\n\n",
    "target_code": "class ClearChargingProfilePayload:\n    <IND>id: Optional[int] = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `ClearChargingProfilePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 61,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "1": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "2": "class ClearChargingProfilePayload: \n <IND> id = None \n connector_id = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "3": "class ClearChargingProfilePayload: \n \n id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "4": "class ClearChargingProfilePayload: \n <IND> id = None \n connector_id = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level = None \n \n",
      "5": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <IND>",
      "6": "class ClearChargingProfilePayload: <IND> <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "7": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "8": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "9": "class ClearChargingProfilePayload: <DED> <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "10": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None <IND> charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "11": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <DED>",
      "12": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <IND> \n",
      "13": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <IND> stack_level: Optional[int] = None \n \n",
      "14": "class ClearChargingProfilePayload: \n <IND> id_id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "15": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None <DED> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "16": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <DED> \n \n",
      "17": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None <DED> charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "18": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <DED> stack_level: Optional[int] = None \n \n",
      "19": "class ClearChargingProfilePayload: \n <IND> ids: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "20": "class ClearChargingProfilePayload: \n <IND> id: Optional[str] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "21": "class ClearChargingProfilePayload: \n <IND> id: Optional[Int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "22": "class ClearChargingProfilePayload: \n <IND> id = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "23": "class ClearChargingProfilePayload: \n <IND> id -> None: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "24": "class ClearChargingProfilePayload: \n <IND> id: typing.Optional[int] = None \n connector_id: typing.Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: typing.Optional[int] = None \n \n",
      "25": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[Int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "26": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connecting_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "27": "class ClearChargingProfilePayload: \n <IND> id : Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "28": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = Optional[int] \n stack_level: Optional[int] = None \n \n",
      "29": "class ClearChargingProfilePayload: \n <DED> id = None \n connector_id = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "30": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[str] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "31": "class ClearChargingProfilePayload: \n <IND> id = None \n connector_id = None \n charging_profile_purpose = Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "32": "class ClearChargingProfilePayload: \n \n id = None \n connector_id = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "33": "class ClearChargingProfilePayload: \n <IND> id, connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "34": "class ClearChargingProfilePayload: \n <IND> chain_id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "35": "class ClearChargingProfilePayload: \n <IND> icon_id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "36": "class ClearChargingProfilePayload: \n <IND> id_id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int_type] = None \n \n",
      "37": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <IND>",
      "38": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[Int] = None \n \n",
      "39": "class ClearChargingProfilePayload: \n \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "40": "class ClearChargingProfilePayload: \n <IND> id = None \n connector_id = None \n charging_profile_purpose = Optional[ChargingProfilePurposeType] = None \n stack_level = None \n \n",
      "41": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = Optional[int] = None \n stack_level: Optional[int] = None \n \n",
      "42": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: int = None \n \n",
      "43": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <DED> \n <IND>",
      "44": "class ClearChargingProfilePayload: \n <IND> id=None \n connector_id=None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "45": "class ClearChargingProfilePayload: \n \n id = None \n connector_id = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level = None \n \n",
      "46": "class ClearChargingProfilePayload: \n <IND> id: optional[int] = None \n connector_id: optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: optional[int] = None \n \n",
      "47": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <DED>",
      "48": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <IND> \n",
      "49": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <IND> stack_level: Optional[int] = None \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n\n",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_line": "    msg = None  # type: MessageBuilder",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checkstrformat.py",
    "target_filename": "mypy/checkstrformat.py",
    "source_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe^",
    "target_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "predictions": [
      "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "1": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "2": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "3": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Mypy.checker.MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "4": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Optional[mypy.checkexpr.ExpressionChecker] \n \n",
      "5": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "6": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "7": "# Some services are provided by a TypeChecker instance. \n chk: typing.Optional[mypy.checker.TypeChecker] \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: typing.Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: typing.Optional[mypy.checkexpr.ExpressionChecker] \n \n",
      "8": "# Some services are provided by a TypeChecker instance. \n chk:'mypy.checker.TypeChecker' \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: 'Mypy.checker' \n # Some services are provided by a ExpressionChecker instance. \n exprchk:'mypy.checkexpr.ExpressionChecker' \n \n",
      "9": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n <IND>",
      "10": "# Some services are provided by a TypeChecker instance. \n chk: Optional[mypy.checker.TypeChecker] \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Optional[mypy.checkexpr.ExpressionChecker] \n \n",
      "11": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n <IND>",
      "12": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # These are shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "13": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n <DED>",
      "14": "# Some services are provided by a TypeChecker instance. \n chk:'mypy.checker.TypeChecker' \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: 'Mypy.checker' \n # Some services are provided by a ExpressionChecker instance. \n exprchk:'mypy.checkexpr.ExpressionChecker' \n",
      "15": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # These are shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "16": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: ExpressionChecker \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "17": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n <DED>",
      "18": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "19": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "20": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Mypy.checker, MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "21": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience \n \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "22": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Mypy.checker \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "23": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with MessageBuilder, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "24": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "25": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. <DED> \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "26": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: ExpressionChecker \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "27": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Mypy.checker.Msg \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "28": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker <IND> # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "29": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker <IND> # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "30": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience \n \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "31": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder <DED> \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "32": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. <DED> \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "33": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "34": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Mypy.checker.MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "35": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: mypy.checker.MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "36": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder <IND> # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "37": "# Some services are provided by a TypeChecker instance. \n chk:'mypy.checker.TypeChecker' \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: 'Mypy.checker' \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "38": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with MessageBuilder, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "39": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # These services are shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "40": "# Some services are provided by a TypeChecker instance. <DED> \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "41": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder <DED> \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "42": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Mypy.checker, # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "43": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "44": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. <IND> msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "45": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # Some is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "46": "# Some services are provided by a TypeChecker instance. \n chk:'mypy.checker.TypeChecker' \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: 'Mypy.checker' \n # Some services are provided by a ExpressionChecker instance. \n exprchk:'mypy.checkexpr.ExpressionChecker' \n <IND>",
      "47": "# Some services are provided by a TypeChecker instance. <IND> chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "48": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. <IND> msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "49": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # Some is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "target_code": "\n    <DED>ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "warning_line": "    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 353,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "angr/angr",
    "source_filename": "angr/calling_conventions.py",
    "target_filename": "angr/calling_conventions.py",
    "source_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f^",
    "target_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "predictions": [
      "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "1": "\n <DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "2": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "3": "\n <IND> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "4": "\n <DED> ARG_REGS: Optional[List[str]] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: Optional[List[str]] = None # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "5": "\n \n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "6": "\n <DED> ARG_REGS: List[str] = () # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = () # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "7": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_SP_BUFF: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "8": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "9": "\n <DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = None # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "10": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # Any list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "11": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address <IND>",
      "12": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order <IND> STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "13": "\n <DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "14": "<DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "15": "\n <DED> ARG_REGS: List[str] = [] # Any list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "16": "\n <DED> ARG_REGS: List[str] = ( None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = ( None # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "17": "\n <DED> ARG_REGS: List[str] = (10) # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = (10) # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "18": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order <DED> \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "19": "<DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "20": "\n <DED> ARG_REGS: List[str] = ( None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = ( None) # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "21": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) <IND> FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "22": "<IND> <DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "23": "\n <DED> FP_ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "24": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) <DED> FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "25": "<IND> <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "26": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address <DED>",
      "27": "\n <DED> ARG_REGS: List[str] = \"\" # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = \"\" # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "28": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order(names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "29": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # One list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "30": "\n <DED> ARG_REGS: List[str] = (None) # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = () # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "31": "\n <DED> ARG_REGS = List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "32": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integrated args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "33": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = [] # The amount of stack space reserved between the saved return address \n",
      "34": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for partial args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "35": "\n <DED> ARG_REGS: List[str] = [] # The list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "36": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # The list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "37": "\n <DED> ARG_REGS: List[str] = (10) # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = (9) # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "38": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for partial point args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "39": "\n <IND> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "40": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order <DED> names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "41": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order <IND> names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "42": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "43": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # The amount of stack space reserved between the saved return address \n",
      "44": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integration args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "45": "\n <DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [0] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "46": "\n <DED> ARG_REGS_List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS_List[str] = None # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "47": "\n <DED> ARG_REGS = List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "48": "\n <DED> ARG_REGS: List[str] = None # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = () # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "49": "\n <DED> ARG_REGS: List[str] = () # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = () # A list of all the registers used for floating point args in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # suite params\n    stop_mode: StopMode = None\n    stop_task: Optional[str] = None\n",
    "target_code": "    # suite params\n    stop_mode: Optional[StopMode] = None\n    stop_task: Optional[str] = None\n",
    "warning_line": "    stop_mode: StopMode = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `stop_mode` declared in class `Scheduler` has type `StopMode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 181,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "1": "# suite params \n stop_mode: Optional[str] = None \n stop_task: Optional[str] = None \n",
      "2": "# suite params \n stop_mode: Optional[StopMode] = Optional[StopMode] \n stop_task: Optional[str] = None \n",
      "3": "# suite params <IND> stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "4": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <IND>",
      "5": "# suite params \n stop_mode: Optional[StopMode]: Optional[Str] = None \n stop_task: Optional[str] = None \n",
      "6": "# suite params \n stop_mode: Optional[StopMode] = None <IND> stop_task: Optional[str] = None \n",
      "7": "# suite params \n stop_mode: Optional[Optional[StopMode]] = None \n stop_task: Optional[str] = None \n",
      "8": "# suite params \n stopping_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "9": "# suite params <DED> \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "10": "# suite params \n stop_mode: Optional[StepMode] = None \n stop_task: Optional[str] = None \n",
      "11": "# suite params \n stop_mode: Optional[StopMode] = None <DED> stop_task: Optional[str] = None \n",
      "12": "# suite params \n stop_mode: Optional[StopMode]: Optional[str] = None \n stop_task: Optional[str] = None \n",
      "13": "# suite params \n stop_mode = Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "14": "# suite params \n stopped_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "15": "# suite params \n stop_mode : Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "16": "# suite params \n stop_mode: Optional[StopMode\"] = None \n stop_task: Optional[str] = None \n",
      "17": "# suite params \n stop_mode: Optional[StopMode[str]] = None \n stop_task: Optional[str] = None \n",
      "18": "# suite params \n stop_mode: Optional[StopMode] = Optional[None] \n stop_task: Optional[str] = None \n",
      "19": "# suite params \n stop_mode: Optional[\"StopMode\"] = None \n stop_task: Optional[str] = None \n",
      "20": "# suite params \n stops: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "21": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> stop_mode: Optional[str] = None \n",
      "22": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> stop_mode: Optional[StopMode] = None \n",
      "23": "# suite params \n stop_mode: Optional[Absolute] = None \n stop_task: Optional[str] = None \n",
      "24": "# suite params \n stop_mode: Optional[List[str]] = None \n stop_task: Optional[str] = None \n",
      "25": "# suite params \n stop_mode: Optional[Str] = None \n stop_task: Optional[str] = None \n",
      "26": "# suite params \n stop_mode: Optional[Dict[str]] = None \n stop_task: Optional[str] = None \n",
      "27": "# suite params \n stop_mode: Optional[Optional[str]] = None \n stop_task: Optional[str] = None \n",
      "28": "# suite params \n stop_mode: Optional[TestMode] = None \n stop_task: Optional[str] = None \n",
      "29": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> stop_mode: Optional[Str] = None \n",
      "30": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> stop_mode: Optional[Optional[str]] = None \n",
      "31": "# suite params <DED> stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "32": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str]: Optional[str] = None \n",
      "33": "# suite params \n stop_mode: Optional[Mapping[str]] = None \n stop_task: Optional[str] = None \n",
      "34": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> stop_error: Optional[str] = None \n",
      "35": "# suite params \n stop_mode: Optional[Study] = None \n stop_task: Optional[str] = None \n",
      "36": "# suite params \n stop_mode: Optional[StopMode] = \"\" \n stop_task: Optional[str] = None \n",
      "37": "# suite params \n stop_mode: Optional[StartMode] = None \n stop_task: Optional[str] = None \n",
      "38": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> StopMode: Optional[Str] = None \n",
      "39": "# suite params \n stop_mode: Optional[Address] = None \n stop_task: Optional[str] = None \n",
      "40": "# suite params \n stop_mode: Optional[StopMode] = None \n stopping_task: Optional[str] = None \n",
      "41": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> StopMode: Optional[Optional[str]] = None \n",
      "42": "# suite params \n stop_mode: Optional[TipMode] = None \n stop_task: Optional[str] = None \n",
      "43": "# suite params \n stop_mode: Optional[StopMode] = [] \n stop_task: Optional[str] = None \n",
      "44": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> StopMode: Optional[StopMode] = None \n",
      "45": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> stop_str: Optional[str] = None \n",
      "46": "# suite params \n stop_mode: Optional[Buffer] = None \n stop_task: Optional[str] = None \n",
      "47": "# suite params \n stop_mode -> Optional[StopMode]: \n stop_task: Optional[str] = None \n",
      "48": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> \n",
      "49": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED> StopMode: Optional[str] = None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
    "target_code": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_line": "    single: List[OrthVariantsSingle] = {}",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 26,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/training/augment.py",
    "target_filename": "spacy/training/augment.py",
    "source_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be^",
    "target_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "predictions": [
      "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "1": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "2": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] \n single: List[OrthVariantsSingle] = [] \n \n",
      "3": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "4": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = ( { } \n single: List[OrthVariantsSingle] = [] \n \n",
      "5": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired], List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "6": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <IND>",
      "7": "\n <DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "8": "<DED> class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "9": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = { } \n single: List[OrthVariantsSingle] = [] \n \n",
      "10": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = { } \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] = [] \n \n",
      "11": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle, List[OrthVariantsSingle]] = [] \n \n",
      "12": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] \n \n",
      "13": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = { } \n \n",
      "14": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = List[OrthVariantsSingle] \n single: List[OrthVariantsSingle] = [] \n \n",
      "15": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = { } \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] \n \n",
      "16": "<DED> class OrthVariants(BaseModel): \n <IND> paired = List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "17": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, Optional[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "18": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <DED>",
      "19": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] = [] \n \n",
      "20": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "21": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "22": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle] = [] \n <IND>",
      "23": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle], List[OrthVariantsSingle]] = [] \n \n",
      "24": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsSingle] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "25": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle, Dict[OrthVariantsSingle]] = [] \n \n",
      "26": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] <DED> \n single: List[OrthVariantsSingle] = [] \n \n",
      "27": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] <IND> single: List[OrthVariantsSingle] = [] \n \n",
      "28": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsPaired] \n single: List[OrthVariantsSingle] = [] \n \n",
      "29": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = ( { } \n single: List[OrthVariantsSingle] = ( { } \n \n",
      "30": "<DED> class OrthVariants(BaseModel): \n <IND> paired: Optional[List[OrthVariantsPaired]] = [] \n single: Optional[List[OrthVariantsSingle]] = [] \n \n",
      "31": "<DED> class OrthVariants(BaseModel): \n \n paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "32": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = { } \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] = List[OrthVariantsSingle] \n \n",
      "33": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = None \n single: List[OrthVariantsSingle] = [] \n \n",
      "34": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] <IND> single: List[OrthVariantsSingle] = [] \n \n",
      "35": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = ( { } \n single: List[OrthVariantsSingle] = [] \n \n",
      "36": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] \n single: List[OrthVariantsSingle] = { } \n \n",
      "37": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired,...] = { } \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] = [] \n \n",
      "38": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPairesd] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "39": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired[]] = [] \n single: List[OrthVariantsSingle] = [] \n \n",
      "40": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] <DED> \n \n",
      "41": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle] = [] \n <DED>",
      "42": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = { } \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] = [] \n \n",
      "43": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = List[OrthVariantsSingle] \n single: List[OrthVariantsSingle] = [] \n <IND>",
      "44": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] \n single: List[OrthVariantsSingle], List[OrthVariantsSingle]] = [] \n \n",
      "45": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = \"\" \n single: List[OrthVariantsSingle] = \"\" \n \n",
      "46": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = \"\" \n single: List[OrthVariantsSingle] = [] \n \n",
      "47": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] <IND> \n",
      "48": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = { } \n single: List[OrthVariantsSingle] = List[OrthVariantsSingle] \n \n",
      "49": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired,...] = [] \n single: List[OrthVariantsSingle] = [] \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str\n\n",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_line": "        self.tmp_meson_version = None # type: str",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 461,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mesonbuild/meson",
    "source_filename": "mesonbuild/interpreterbase.py",
    "target_filename": "mesonbuild/interpreterbase.py",
    "source_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74^",
    "target_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "predictions": [
      "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n \n",
      "1": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n \n",
      "2": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "3": "# current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n \n",
      "4": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" \n \n",
      "5": "# current meson version target within that if-block. \n self.tmp_meson_version = False # type: Optional[str] \n \n",
      "6": "# current meson version target within that if-block. \n self.tmp_meson_version = [] \n \n",
      "7": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" # type: Optional[str] \n \n",
      "8": "# current meson version target within that if-block. \n self.tmp_meson_version = tmp_meson_version # type: Optional[str] \n \n",
      "9": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] <DED> # type: Optional[str] \n \n",
      "10": "# current meson version target within that if-block. \n self.tmp_meson_version = '' # type: Optional[str] \n \n",
      "11": "# current meson version target within that if-block. \n self.tmp_meson_version = () # type: Optional[str] \n \n",
      "12": "# current meson version target within that if-block. \n self.tmp_meson_version = '' \n \n",
      "13": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <DED> # type: Optional[str] \n \n",
      "14": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "15": "# current meson version target within that if-block. \n self.tmp_meson_version = True # type: Optional[str] \n \n",
      "16": "# current meson version target within that if-block. \n self.tmp_meson_version: str \n \n",
      "17": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] <IND> \n",
      "18": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n <DED> # current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n \n",
      "19": "# current meson version target within that if-block. \n self.tmp_meson_version=None # type: Optional[str] \n \n",
      "20": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] <DED> # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "21": "# current meson version target within that if-block. \n self.tmp_meson_version is None # type: Optional[str] \n \n",
      "22": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None # type: Optional[str] \n \n",
      "23": "# current meson version target within that if-block. \n self.tmp_meson_version = tmp_meson_version # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "24": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <DED> # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "25": "# current meson version target within that if-block. \n self.tmp_meson_version = Not # type: Optional[str] \n \n",
      "26": "# current meson version target within that if-block. \n self.tmp_meson_version = tmp_meson_version # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = tmp_meson_version # type: Optional[str] \n \n",
      "27": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "28": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <IND> \n",
      "29": "# current meson version target within that if-block. <DED> \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "30": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] <DED> \n \n",
      "31": "# current meson version target within that if-block. \n self.tmp_meson_version = Optional[str] \n \n",
      "32": "# current meson version target within that if-block. \n self.tmp_meson_version=InterpreterBase # type: Optional[str] \n \n",
      "33": "# current meson version target within that if-block. \n self.tmp_meson_version = All # type: Optional[str] \n \n",
      "34": "# current meson version target within that if-block. \n self.tmp_meson_version = Half # type: Optional[str] \n \n",
      "35": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <IND> <DED> self.tmp_meson_version = None # type: Optional[str] \n \n",
      "36": "# current meson version target within that if-block. \n self.tmp_meson_version = '' # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "37": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "38": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n <DED> # current meson version target in that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "39": "# current meson version target within that if-block. \n self.tmp_meson_version = [] # type: Optional[str] \n \n",
      "40": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" <DED> # type: Optional[str] \n \n",
      "41": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <IND> <IND> self.tmp_meson_version = None # type: Optional[str] \n \n",
      "42": "# current meson version target within that if-block. <IND> self.tmp_meson_version = None # type: Optional[str] \n \n",
      "43": "# current meson version target within that if-block. \n self.tmp_meson_version is not None # type: Optional[str] \n \n",
      "44": "# current meson version target within that if-block. \n self.tmp_meson_version: typing.Optional[str] \n \n",
      "45": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n <DED> # current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n \n",
      "46": "# current meson version target within that if-block. \n self.tmp_meson_version = str # type: Optional[str] \n \n",
      "47": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n <DED> self.tmp_meson_version = None # type: Optional[str] \n \n",
      "48": "# current meson version target within that if-block. <DED> \n self.tmp_meson_version: Optional[str] \n \n",
      "49": "# current meson version target within that if-block. \n self.tmp_meson_version = tmp_meson_version # type: Optional[str] <DED> # current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    APP_DIR: str = None\n    STUDIES: str = None\n\n",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_line": "    STUDIES: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAILabel",
    "source_filename": "monailabel/config.py",
    "target_filename": "monailabel/config.py",
    "source_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0^",
    "target_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "predictions": [
      "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "1": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "2": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "3": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <IND>",
      "4": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <DED>",
      "5": "\n APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None \n \n",
      "6": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <IND> \n",
      "7": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> \n \n",
      "8": "\n APP_DIR: Optional[str] = None <DED> STUDIES: Optional[str] = None \n \n",
      "9": "\n APP_DIR: str = \"\" \n STUDIES: str = \"\" \n \n",
      "10": "\n APP_DIR: typing.Optional[str] = None \n STUDIES: typing.Optional[str] = None \n \n",
      "11": "\n APP_DIR_STUDIES: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "12": "\n APP_DIR_Str: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "13": "\n DEFAULT_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "14": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <IND>",
      "15": "\n APP_DIR = None \n STUDIES: Optional[str] = None \n \n",
      "16": "\n APP_DIR: Optional[str] = None <DED> \n STUDIES: Optional[str] = None \n \n",
      "17": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <IND>",
      "18": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n ) -> None: \n",
      "19": "\n APP_DIR: str = '' \n STUDIES: str = '' \n \n",
      "20": "\n APP_DIR: Any: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "21": "<IND> APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None \n \n",
      "22": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <DED>",
      "23": "<DED> APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None \n \n",
      "24": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <IND> \n",
      "25": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> \n \n",
      "26": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <DED>",
      "27": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <IND> \n",
      "28": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> \n \n",
      "29": "\n APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None \n <IND>",
      "30": "<IND> APP_DIR: Optional[str] = None <DED> STUDIES: Optional[str] = None \n \n",
      "31": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <IND> <IND>",
      "32": "\n APP_DIR: option.str = None \n STUDIES: option.str = None \n \n",
      "33": "<DED> APP_DIR: Optional[str] = None <DED> STUDIES: Optional[str] = None \n \n",
      "34": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> \n <IND>",
      "35": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> <IND> \n",
      "36": "\n APP_DIR: str = \"\" \n STUDIES: Optional[str] = None \n \n",
      "37": "\n APP_DIR: Optional[str] = None <DED> STUDIES: Optional[str] = None \n <IND>",
      "38": "\n APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None \n <DED>",
      "39": "\n APP_DIR: Union[str, None] = None \n STUDIES: Union[str, None] = None \n \n",
      "40": "\n APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None <IND> \n",
      "41": "\n APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None <DED> \n \n",
      "42": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> <DED> \n \n",
      "43": "\n APP_DIR: (str, None) \n STUDIES: Optional[str] = None \n \n",
      "44": "\n APP_DIR: List[str] = None \n STUDIES: List[str] = None \n \n",
      "45": "\n APP_DIR: Union[str, None] = None \n STUDIES: Optional[str] = None \n \n",
      "46": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> \n <DED>",
      "47": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <IND> <DED>",
      "48": "\n APP_DIR: Optional[str] = None <DED> STUDIES: Optional[str] = None <DED> \n \n",
      "49": "\n APP_DIR_Str = None \n STUDIES: Optional[str] = None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": true,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_line": "        self.image: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n"
    ],
    "correct": false,
    "top_five": {
      "0": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "1": ") \n self.image: typing.Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "2": ") \n self.image_str: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "3": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "4": ") \n self.image: str = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "5": ") \n self.image: Optional[str] = None <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "6": ") \n self.image: str = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "7": ") <IND> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "8": ") <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "9": ") \n self.image: Optional[str] = None <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "10": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <IND>",
      "11": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "12": ") \n self.image = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "13": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "14": ") \n self.image: Type[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "15": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "16": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> assert self.image is not None \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "17": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "18": ") \n self.image = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "19": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n",
      "20": ") \n self.image: typing.Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: typing.Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "21": ") \n self.image = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "22": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.append_file = [''.join([self.image_name, '.append']) \n",
      "23": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image_name: Optional[str] = None \n self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "24": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image_name: Optional[str] = None \n <DED> self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "25": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "26": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.image.append_file = ''.join([self.image_name, '.append']) \n",
      "27": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image_name: Optional[str] = None \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "28": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n <DED> self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "29": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "30": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.append_file: ''.join([self.image_name, '.append']) \n",
      "31": ") \n self.image = Optional[str] \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "32": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "33": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <IND> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "34": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "35": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "36": ") \n self.image: Optional[str] = None \n self.append_file = \"'.join([self.image_name, '.append']) \n",
      "37": ") \n self.image_str = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "38": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> <IND> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "39": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n src: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "40": ") \n self.images: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "41": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image_name: Optional[str] = None \n <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "42": ") \n self.image_str = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "43": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "44": ") \n self.image = False \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "45": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.append_file: ''.join([self.image_name, '.append']) \n",
      "46": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image_name: Optional[str] = None \n self.image.append_file = ''.join([self.image_name, '.append']) \n",
      "47": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "48": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.append_file = \"'.join([self.image_name, '.append']) \n",
      "49": ") \n self.image_str: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_line": "        self.event = None   # type: asyncio.Event",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 794,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/events.py",
    "target_filename": "mpf/core/events.py",
    "source_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278^",
    "target_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "predictions": [
      "self.waiter = False \n self.event = asyncio.Event \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.waiter = False \n self.event = asyncio.Event \n \n",
      "1": "self.waiter = False \n self.event: asyncio.Event \n \n",
      "2": "self.waiter = False \n self.event = '' # type: asyncio.Event \n \n",
      "3": "self.waiter = False \n self.event = Asyncio.Event \n \n",
      "4": "self.waiter = False \n self.event = 0 # type: asyncio.Event \n \n",
      "5": "self.waiter = False \n self.event = asyncio.Event <DED> # type: asyncio.Event \n \n",
      "6": "self.waiter = False \n self.event = str # type: asyncio.Event \n \n",
      "7": "self.waiter = False \n self.event = asyncio.Event <DED> # type: Optional[asyncio.Event] \n \n",
      "8": "self.waiter = False \n self.event = Asyncio.Event <DED> () # type: asyncio.Event \n \n",
      "9": "self.waiter = False \n self.event = None # type: asyncio.Event \n \n",
      "10": "self.waiter = False \n self.event = asyncio.Event <IND> \n",
      "11": "self.waiter = False \n self.event = () # type: asyncio.Event \n \n",
      "12": "self.waiter = False \n self.event: Asyncio.Event \n \n",
      "13": "self.waiter = False \n self.event = Asyncio.Event # type: asyncio.Event \n \n",
      "14": "self.waiter = False \n self.event = asyncio.Event # type: asyncio.Event \n \n",
      "15": "self.waiter = False \n self.event = asyncio.Event \n <IND>",
      "16": "self.waiter = False \n self.event = asyncio.Event # type: Optional[asyncio.Event] \n \n",
      "17": "self.waiter = False \n self.event = asyncio.Event <DED>.None # type: asyncio.Event \n \n",
      "18": "self.waiter = False \n self.event = \"\" # type: asyncio.Event \n \n",
      "19": "self.waiter = False \n self.event = [] # type: asyncio.Event \n \n",
      "20": "self.waiter = False \n self.event: asyncio.Event <DED> # type: Optional[asyncio.Event] \n \n",
      "21": "self.waiter = False \n self.event: asyncio.Event <DED> # type: asyncio.Event \n \n",
      "22": "self.waiter = False \n self.event = asyncio.Event <DED> # type: Asyncio.Event \n \n",
      "23": "self.waiter = False \n self.event = asyncio.Event <IND> <DED> self.waiter = False \n self.event = asyncio.Event \n \n",
      "24": "self.waiter = False \n self.event = asyncio.Event <DED>.False # type: asyncio.Event \n \n",
      "25": "self.waiter = False \n self.event = asyncio.Event <DED>.Optional[asyncio.Event] \n \n",
      "26": "self.waiter = False \n self.event = asyncio.Event <DED>.fix() # type: asyncio.Event \n \n",
      "27": "self.waiter = False \n self.event: Optional[asyncio.Event] = None \n \n",
      "28": "self.waiter = False \n self.event = asyncio.Event <DED>.None # type: Optional[asyncio.Event] \n \n",
      "29": "self.waiter = False \n self.event = asyncio.Event <DED> # type: asyncio.Event <DED> # type: Optional[asyncio.Event] \n \n",
      "30": "self.waiter = False \n self.event = asyncio.Event <DED> # type: Optional[asyncio.Event] <DED> # type: Optional[asyncio.Event] \n \n",
      "31": "self.waiter = False \n self.event = '' # type: Asyncio.Event \n \n",
      "32": "self.waiter = False <DED> # type: asyncio.Event \n self.event = asyncio.Event \n \n",
      "33": "self.waiter = False \n self.event = -1 # type: asyncio.Event \n \n",
      "34": "self.waiter = False \n self.event = asyncio.Event \n <DED> # type: asyncio.Event \n \n",
      "35": "self.waiter = False \n self.event = DefaultEvent # type: asyncio.Event \n \n",
      "36": "self.waiter = False \n self.event = asyncio.Event <IND> # type: asyncio.Event \n \n",
      "37": "self.waiter = False \n self.event = str # type: Optional[asyncio.Event] \n \n",
      "38": "self.waiter = False \n self.event = 0 # type: asyncio.Event <DED> # type: Optional[asyncio.Event] \n \n",
      "39": "self.waiter = False \n self.event = # type: asyncio.Event \n \n",
      "40": "self.waiter = False <DED> # type: asyncio.Event \n self.event = Asyncio.Event \n \n",
      "41": "self.waiter = False \n self.event = '' # type: asyncio.Event <DED> # type: Optional[asyncio.Event] \n \n",
      "42": "self.waiter = False \n self.event = asyncio.Event <DED>.Event \n \n",
      "43": "self.waiter = False \n self.event = asyncio.Event <DED>.asyncio.Event \n \n",
      "44": "self.waiter = False \n self.event = self.event # type: asyncio.Event \n \n",
      "45": "self.waiter = False <DED> # type: asyncio.Event \n self.event = Asyncio.Event # type: Optional[asyncio.Event] \n \n",
      "46": "self.waiter = False <DED> # type: asyncio.Event \n self.event = asyncio.Event <DED> # type: Optional[asyncio.Event] \n \n",
      "47": "self.waiter = False \n self.event: asyncio.Event <DED> # type: Optional[asyncio.Event] <DED> # type: Optional[asyncio.Event] \n \n",
      "48": "self.waiter = False \n self.event = * asyncio.Event \n \n",
      "49": "self.waiter = False \n self.event: asyncio.Event <IND> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_line": "    id: int = ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "2": "\n <DED> id = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "3": "\n <DED> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "4": "\n <DED> id = ormar.Integer(primary_key=True) \n ident=ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "5": "\n \n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "6": "\n \n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "7": "\n <IND> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "8": "\n <IND> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "9": "\n <DED> id: Optional[int] = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "10": "\n <DED> id: ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "11": "\n <IND> <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "12": "<DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "13": "\n <IND> <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "14": "<IND> <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "15": "\n <DED> id: ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "16": "<DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <IND>",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) <DED> ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "19": "<IND> <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <IND>",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <DED>",
      "22": "\n <DED> id: Optional[int] = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) <IND> ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) <IND> \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <DED>",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) <DED> \n \n",
      "27": "\n <DED> id: int = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) <IND> ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "29": "\n <DED> id: ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) <IND> \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) <DED> \n \n",
      "32": "<DED> id = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "33": "\n \n <DED> id = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "34": "\n <DED> id_num = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "35": "\n <DED> id: Optional[int] = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "36": "\n <IND> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "37": "\n <DED> id= ormar.Integer(primary_key=True) \n ident=ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "38": "\n <IND> id = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "39": "\n <DED> id: int = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "40": "\n <IND> <DED> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "41": "\n <DED> id_ = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "42": "\n <IND> <DED> id = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "43": "\n <IND> <IND> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "44": "\n \n <DED> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "45": "\n <IND> <IND> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "46": "<DED> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "47": "\n <DED> id= ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "48": "\n <DED> key= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "49": "<IND> <DED> id = ormar.Integer(primary_key=True) \n ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False\n",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_line": "    query_subtype: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "target_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False \n"
    ],
    "correct": false,
    "top_five": {
      "0": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "1": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "2": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "3": "ioc: str \n ioc_type: str \n query_subtype: str <IND> result: bool = False \n",
      "4": "ioc: str \n ioc_type: str \n query_subtype: str = \"\" \n result: bool = False \n",
      "5": "ioc: str \n ioc_type: Optional[str] \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "6": "ioc: str \n ioc_type: str \n query_subtype: str <DED> -> \"\" \n result: bool = False \n",
      "7": "ioc: str \n ioc_type: str \n query_subtype: str = '' \n result: bool = False \n",
      "8": "ioc: str <IND> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "9": "ioc: str \n ioc_type: str \n query_subtype: str <DED> -> None \n result: bool = False \n",
      "10": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <DED> query_subtype: Optional[str] = None \n",
      "11": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "12": "ioc: str <DED> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "13": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <DED> query_subtype: Optional[str] = None \n",
      "14": "ioc: str \n ioc_type: Optional[str] = None <IND> query_subtype: Optional[str] = None \n result: bool = False \n",
      "15": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None <IND> result: bool = False \n",
      "16": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "17": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = True \n",
      "18": "ioc: str \n ioc_type: Optional[str] = None <DED> query_subtype: Optional[str] = None \n result: bool = False \n",
      "19": "ioc: str \n ioc_type: str \n query_subtype: str: Optional[str] = None \n result: bool = False \n",
      "20": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "21": "ioc: str \n ioc_type: str <IND> query_subtype: Optional[str] = None \n result: bool = False \n",
      "22": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None <DED> result: bool = False \n",
      "23": "ioc: str \n ioc_type: str \n query_subtype: str <DED> result: bool = False \n",
      "24": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = True \n",
      "25": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = True \n",
      "26": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None <IND> result: bool = False \n",
      "27": "ioc: str \n ioc_type: str <DED> query_subtype: Optional[str] = None \n result: bool = False \n",
      "28": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "29": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None <DED> result: bool = False \n",
      "30": "ioc: str \n ioc_type: str \n query_subtype: str <DED> : Optional[str] = None \n result: bool = False \n",
      "31": "ioc: str \n ioc_type: str \n query_subtype: str = ioc_type \n result: bool = False \n",
      "32": "ioc: str \n ioc_type: str \n query_subtype: str <DED> isinstance(str, None) \n result: bool = False \n",
      "33": "ioc: str \n ioc_type: str \n query_subtype: typing.Optional[str] = None \n result: bool = False \n",
      "34": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False <IND>",
      "35": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False <DED> bool = False \n",
      "36": "ioc: str \n ioc_type: str \n query_subtype: str.Optional[str] = None \n result: bool = False \n",
      "37": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: Optional[bool] = False \n",
      "38": "ioc: str \n ioc_type: str \n query_subtype: Str = \"\" \n result: bool = False \n",
      "39": "ioc: str \n ioc_type: str \n query_subtype: str = 0 \n result: bool = False \n",
      "40": "ioc: str \n ioc_type: str \n query_subtype: str <DED> if result is None \n result: bool = False \n",
      "41": "ioc: str \n ioc_type: str <DED> query_subtype: str \n result: bool = False \n",
      "42": "ioc: str \n ioc_type: str <IND> query_subtype: str \n result: bool = False \n",
      "43": "ioc: str \n ioc_type: str \n query_subtype: str <DED> if bool == None \n result: bool = False \n",
      "44": "ioc: str \n ioc_type: str \n query_subtype: str = \"\", \n result: bool = False \n",
      "45": "ioc: str \n ioc_type: str \n query_subtype: str <DED> if result == None \n result: bool = False \n",
      "46": "ioc: str <IND> ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "47": "ioc: str \n ioc_type: str \n query_subtype: str <DED> int = \"\" \n result: bool = False \n",
      "48": "ioc: str \n ioc_type: Str \n query_subtype: str \n result: bool = False \n",
      "49": "ioc: str \n ioc_type: str \n query_subtype: str <DED> bool = False \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": true,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class Cli:\n    <IND>description: str = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "target_code": "class Cli:\n    <IND>description: Optional[str] = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "warning_line": "    description: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `description` declared in class `Cli` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 15,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Andarius/piou",
    "source_filename": "piou/cli.py",
    "target_filename": "piou/cli.py",
    "source_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2^",
    "target_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2",
    "predictions": [
      "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "1": "class Cli: \n <DED> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "2": "class Cli: \n <IND> description: str \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "3": "class Cli: \n \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "4": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n",
      "5": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n",
      "6": "class Cli: \n <IND> description: str = \"\" \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "7": "class Cli: <IND> <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "8": "class Cli: \n <IND> description: Optional[str] = None <IND> formatter: Formatter = field(default_factory=RichFormatter) \n",
      "9": "class Cli: <DED> <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "10": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <IND>",
      "11": "class Cli: \n <IND> description: Optional[str] = None <DED> formatter: Formatter = field(default_factory=RichFormatter) \n",
      "12": "class Cli: \n <IND> description: typing.Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "13": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <DED> description: Optional[str] = None \n",
      "14": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <IND> description: Optional[str] = None \n",
      "15": "class Cli: \n <IND> description: str = '' \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "16": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description = None \n",
      "17": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n \n",
      "18": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n \n",
      "19": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n <IND>",
      "20": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n <IND> description: Optional[str] = None \n",
      "21": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n description: Optional[str] = None \n",
      "22": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n <DED> description: Optional[str] = None \n",
      "23": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <IND>",
      "24": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n statement: Optional[str] = None \n description: Optional[str] = None \n",
      "25": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None <IND> description: Optional[str] = None \n",
      "26": "class Cli: \n <IND> description: str <DED> : Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "27": "class Cli: \n <IND> description: str <IND> = \"\" \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "28": "class Cli: \n <IND> description: str, Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "29": "class Cli: \n <DED> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n",
      "30": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n description: Optional[str] = None \n <DED>",
      "31": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n described: Optional[str] = None \n description: Optional[str] = None \n",
      "32": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n if description is None: \n",
      "33": "class Cli: \n <IND> description: options.str = \"\" \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "34": "class Cli: \n <DED> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n",
      "35": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <IND> description: Optional[str] = None \n description: Optional[str] = None \n",
      "36": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n title: Optional[str] = None \n description: Optional[str] = None \n",
      "37": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None <DED> description: Optional[str] \n",
      "38": "class Cli: \n <IND> description: Example[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "39": "class Cli: \n <IND> description: option.str = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "40": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n described: Optional[str] = None \n",
      "41": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n if description: Optional[str] = None \n description: Optional[str] = None \n",
      "42": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None <IND> description: Optional[str] = None \n description: Optional[str] = None \n",
      "43": "class Cli: \n <IND> description: str = [] \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "44": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <IND> description: Optional[str] = None \n <DED> description: Optional[str] = None \n",
      "45": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <DED> description: Optional[str] = None \n \n",
      "46": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n character: Optional[str] = None \n description: Optional[str] = None \n",
      "47": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <DED> description: Optional[str] = None \n description: Optional[str] = None \n",
      "48": "class Cli: \n <IND> description: str <DED> isinstance(str) \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "49": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED> description: Optional[str] = None \n <DED> description: Optional[str] = None \n <DED> description: Optional[str] = None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>requested_message: MessageTrigger\n    connector_id: int = None\n\n",
    "target_code": "    <IND>requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "<IND> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "1": "<IND> requested_message: Optional[MessageTrigger] \n connector_id: Optional[int] = None \n \n",
      "2": "<DED> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "3": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.int",
      "4": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. in",
      "5": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.i'] = None \n \n",
      "6": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.int) \n \n",
      "7": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.') \n \n",
      "8": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Int",
      "9": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(priority): \n",
      "10": "<IND> requested_message: Optional[MessageTrigger] \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.int",
      "11": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs=resolved",
      "12": "<IND> requested_message: MessageTrigger \n connector_id: typing.Optional[int] = None \n \n",
      "13": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs''] = None \n \n",
      "14": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.) \n \n",
      "15": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np., \n",
      "16": "<IND> requested_message: Optional[MessageTrigger] \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. in",
      "17": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.c) \n \n",
      "18": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs = {",
      "19": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cc = None \n \n",
      "20": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(canonicalized): \n <IND>",
      "21": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.c'] = None \n \n",
      "22": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(priority): \n <IND>",
      "23": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.s) \n \n",
      "24": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.'",
      "25": "<IND> requested_message: Optional[MessageTrigger] \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.Int",
      "26": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cfg) \n \n",
      "27": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(canonical): \n",
      "28": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs = [] \n \n",
      "29": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. ) \n \n",
      "30": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs=candidate, \n",
      "31": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(cererea): \n",
      "32": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np. indded",
      "33": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.a) \n \n",
      "34": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.intended_message: Optional[MessageTrigger] = None \n \n",
      "35": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.int'] \n \n",
      "36": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(request): \n",
      "37": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(canonical): \n <IND>",
      "38": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.b) \n \n",
      "39": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.intended_message) \n \n",
      "40": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.i, \n",
      "41": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs ) \n \n",
      "42": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs''] = None \n",
      "43": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(priority): <IND>",
      "44": "<DED> requested_message: Optional[MessageTrigger] \n connector_id: Optional[int] = None \n \n",
      "45": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cfs) \n \n",
      "46": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs'",
      "47": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs -> None: \n <IND>",
      "48": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(resolved) \n \n",
      "49": "<IND> requested_message: MessageTrigger \n connector_id: Optional[np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.np.cs(resolved): \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }\n",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_line": "            self._agent_net_config = {",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "instadeepai/Mava",
    "source_filename": "mava/systems/tf/mappo/system.py",
    "target_filename": "mava/systems/tf/mappo/system.py",
    "source_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7^",
    "target_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "predictions": [
      "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "1": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "2": "self._agent_net_config = { \n agent = agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "3": "self._agent_net_config: { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "4": "self._agent_net_config = { \n agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "5": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights other agents \n for a_i, agent in enumerate(agents) \n } \n",
      "6": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(enumerate(agents)) \n } \n",
      "7": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <IND>",
      "8": "self._agent_net_config = { <IND> agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "9": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents <IND> for a_i, agent in enumerate(agents) \n } \n",
      "10": "self._agent_net_config = { \n agent = agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "11": "self._agent_net_config = { \n agent: agent[split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "12": "self._agent_net_config = { \n agent: agent.split(\"_\")[0], if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "13": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents <DED> for a_i, agent in enumerate(agents) \n } \n",
      "14": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) <IND> } \n",
      "15": "self._agent_net_config = { <DED> agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "16": "self._agent_net_config = { \n agent: Agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "17": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else Agent \n for a_i, agent in enumerate(agents) \n } \n",
      "18": "self._agent_net_config = { \n agent= agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "19": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <DED> \n",
      "20": "self._agent_net_config = { \n agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "21": "self._agent_net_config: { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "22": "self._agent_net_config = { \n agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "23": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(enumerate(agents)) \n } \n",
      "24": "self._agent_net_config = [] \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "25": "self.agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "26": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <DED> <IND>",
      "27": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(int(agents)) \n } \n",
      "28": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } <IND>",
      "29": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(actions) \n } \n",
      "30": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <DED>",
      "31": "self._agent_net_config= { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "32": "self._agent_net_config = { <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "33": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent <DED> \n for a_i, agent in enumerate(agents) \n } \n",
      "34": "self._agent_net_config = { \n agent: agent.split(\"_\"[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "35": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(list(agents)) \n } \n",
      "36": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n self._agent_net_config = { \n",
      "37": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent <IND> for a_i, agent in enumerate(agents) \n } \n",
      "38": "self._agent_net_config = { \n agent: agents.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "39": "self._agent_net_config = { \n agent: agent.split('_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "40": "self._agent_net_config = { \n agent: agent[split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "41": "self._agent_net_config = { \n agents: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "42": "self._agent_net_config = { \n agent: agent.split(\"_\")[0], if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "43": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shares_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "44": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n ) \n",
      "45": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) <IND> } \n",
      "46": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n \\ \n",
      "47": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(str) \n } \n",
      "48": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for agent a_i, agent in enumerate(agents) \n } \n",
      "49": "self._agent_net_config = { <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: str = ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `name` declared in class `Album` has type `str` but is used as type `ormar.fields.model_fields.String`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 22,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n <DED> id: int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n <DED> id = ormar.Integer(primary_key=True) \n name: str = ormar.String(max_length=100) \n \n",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "7": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "8": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "9": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "10": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "15": "\n <DED> id: int = ormar.Integer(primary_key=True) \n name: str = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "17": "\n <DED> id: Optional[int] = ormar.Integer(primary_key=True) \n name: Optional[str] = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id: int = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n name: ormar.String(max_length=100) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n \n",
      "21": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n names = ormar.String(max_length=100) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String() \n \n",
      "24": "<IND> <DED> id: int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> if int == ormar.Integer(primary_key=True): \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> if int == ormar.Integer(primary_key=True): \n <IND>",
      "27": "\n \n <DED> id: int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id, int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.String(primary_key=True) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> bool: int = ormar.Integer(primary_key=True) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id: int = ormar.Integer(primary_key=True) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> if int == ormar.Integer(primary_key=True): \n \n",
      "33": "<DED> id: int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length= 100) \n \n",
      "35": "\n \n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> if id: int = ormar.Integer(primary_key=True) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> ret = ormar.Integer(primary_key=True) \n \n",
      "38": "\n <IND> id: int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n <DED> id || int = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "40": "\n <DED> id= ormar.Integer(primary_key=True) \n name: str = ormar.String(max_length=100) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n name = Ormar.String(max_length=100) \n \n",
      "42": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "43": "\n <DED> id: ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n if int == ormar.Integer(primary_key=True): \n",
      "45": "\n <IND> id = ormar.Integer(primary_key=True) \n name: str = ormar.String(max_length=100) \n \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> if int == ormar.String(primary_key=True): \n <IND>",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> id = ormar.Integer(primary_key=True) \n <IND>",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n if id: int = ormar.Integer(primary_key=True): \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED> if int == ormar.Integer(primary_key=True) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    <IND>self.env_good = True\n                    self.failure_list = None\n\n",
    "target_code": "                    <IND>self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_line": "                    self.failure_list = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 707,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "emissary-ingress/emissary",
    "source_filename": "ambassador/ambassador_diag/diagd.py",
    "target_filename": "ambassador/ambassador_diag/diagd.py",
    "source_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38^",
    "target_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "predictions": [
      "<IND> self.env_good = True \n self.failure_list = [] \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<IND> self.env_good = True \n self.failure_list = [] \n \n",
      "1": "<IND> self.env_good = True \n self.failure_list = \"\" \n \n",
      "2": "<IND> self.env_good = True \n self.failure_list = () \n \n",
      "3": "<IND> self.env_good = True \n self.failure_list = List[str] \n \n",
      "4": "<IND> self.env_good = True \n self.failure_list = None \n \n",
      "5": "<IND> self.env_good = True \n self.failure_list: Optional[List[str]] = None \n \n",
      "6": "<IND> self.env_good = True \n self.failure_list = 0 \n \n",
      "7": "<IND> self.env_good = True \n self.failure_list = '' \n \n",
      "8": "<IND> self.env_good = True \n self.failure_list = False \n \n",
      "9": "<IND> self.env_good = True \n self.failure_list: List[str] = [] \n \n",
      "10": "<IND> self.env_good = True \n self.failure_list = List[List[str]] \n \n",
      "11": "<IND> self.env_good = True \n self.failure_list = *, None \n \n",
      "12": "<DED> self.env_good = True \n self.failure_list = [] \n \n",
      "13": "<IND> self.env_good = True \n self.failure_list = self.env_good \n \n",
      "14": "<IND> self.env_good = True \n self.failure_list = Optional[List[str]] \n \n",
      "15": "<IND> self.env_good = True \n self.failure_list = false \n \n",
      "16": "<IND> self.env_good = True \n self.failure_list = list(List[str]) \n \n",
      "17": "\n self.env_good = True \n self.failure_list = [] \n \n",
      "18": "<IND> self.env_good = True \n self.failure_list = str(List[str]) \n \n",
      "19": "<IND> self.env_good = True \n self.failure_list = List(List[str]) \n \n",
      "20": "<DED> self.env_good = True \n self.failure_list = List[str] \n \n",
      "21": "<DED> self.env_good = True \n self.failure_list = \"\" \n \n",
      "22": "<IND> self.env_good = True \n self.failure_list = False \n \n",
      "23": "<DED> self.env_good = True \n self.failure_list = () \n \n",
      "24": "<IND> self.env_good = True \n self.failure_list = * * None \n \n",
      "25": "<IND> self.env_good = True \n self.failure_list = optional[List[str]] \n \n",
      "26": "\n self.env_good = True \n self.failure_list = List[str] \n \n",
      "27": "<IND> self.env_good = True \n self.failure_list = True \n \n",
      "28": "<IND> self.env_good = True \n self.failure_list = F\"\" \n \n",
      "29": "<IND> self.env_good = True \n self.failure_list = List[\"\"] \n \n",
      "30": "\n self.env_good = True \n self.failure_list = () \n \n",
      "31": "<IND> self.env_good = True \n self.failure_list=List \n \n",
      "32": "\n self.env_good = True \n self.failure_list = \"\" \n \n",
      "33": "<IND> self.env_good = True \n self.failure_list = *, List = None \n \n",
      "34": "<IND> self.env_good = True \n self.failure_list = List[Str, None] \n \n",
      "35": "<IND> self.env_good = True \n self.failure_list = fake_list \n \n",
      "36": "<IND> self.env_good = True \n self.failure_list = List[Str] \n \n",
      "37": "<IND> self.env_good = True \n self.failure_list = module.exports.env_good \n \n",
      "38": "<IND> self.env_good = True \n self.failure_list = *none \n \n",
      "39": "<IND> self.env_good = True \n self.failure_list = list('str') \n \n",
      "40": "<IND> self.env_good = True \n self.failure_list = [] \n <IND>",
      "41": "<IND> self.env_good = True \n self.failure_list = set() \n \n",
      "42": "<IND> self.env_good = True \n self.failure_list = optional[List] \n \n",
      "43": "<IND> self.env_good = True \n self.failure_list: Optional[List] = None \n \n",
      "44": "<IND> self.env_good = True \n self.failure_list = [] \n <DED> self.env_good = True \n",
      "45": "<IND> self.env_good = True \n self.failure_list = list('0') \n \n",
      "46": "<IND> self.env_good = True \n self.failure_list = list('a') \n \n",
      "47": "<DED> self.env_good = True \n self.failure_list = 0 \n \n",
      "48": "<DED> self.env_good = True \n self.failure_list = None \n \n",
      "49": "<DED> self.env_good = True \n self.failure_list = False \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    topo: Mesh = None\n    element: Element = None\n\n",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_line": "    element: Element = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 171,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "kinnala/scikit-fem",
    "source_filename": "skfem/assembly/dofs.py",
    "target_filename": "skfem/assembly/dofs.py",
    "source_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7^",
    "target_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "predictions": [
      "\n topo: Mesh = None \n element: Optional[Element] = None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n topo: Mesh = None \n element: Optional[Element] = None \n \n",
      "1": "\n topo: Mesh = [] \n element: Optional[Element] = None \n \n",
      "2": "\n topo: Mesh = \"\" \n element: Optional[Element] = None \n \n",
      "3": "\n topo: Mesh = None \n element: Optional[element] = None \n \n",
      "4": "\n topo: Mesh: Optional[Mehash] = None \n element: Optional[Element] = None \n \n",
      "5": "\n topo: Mesh = [] \n element: Optional[element] = None \n \n",
      "6": "\n topo: Mesh = [] \n element: Element \n \n",
      "7": "\n topo: Mesh = False \n element: Optional[Element] = None \n \n",
      "8": "\n topo: Mesh: Optional[Dofs] = None \n element: Optional[Element] = None \n \n",
      "9": "\n topo: Mesh = None \n element: Element \n \n",
      "10": "\n topo: Mesh: Optional[Meth] = None \n element: Optional[Element] = None \n \n",
      "11": "\n topo: Mesh = \"\" \n element: Element \n \n",
      "12": "\n topo: Mesh = '' \n element: Optional[Element] = None \n \n",
      "13": "\n topo: Mesh = \"\" \n element: Optional[element] = None \n \n",
      "14": "\n topo: Mesh = 0 \n element: Optional[Element] = None \n \n",
      "15": "\n topo: Mesh = () \n element: Optional[Element] = None \n \n",
      "16": "\n topo: Mesh: Optional[None] = None \n element: Optional[Element] = None \n \n",
      "17": "\n topo: Mesh = '' \n element: Element \n \n",
      "18": "\n topo: Mesh = False \n element: Element \n \n",
      "19": "\n topo: Mesh = None \n element = skfem.element.element.Element \n \n",
      "20": "\n topo: Mesh = Mesh \n element: Optional[Element] = None \n \n",
      "21": "\n topo: Mesh = () \n element: Element \n \n",
      "22": "\n topo: Mesh \n element: Optional[Element] = None \n \n",
      "23": "\n topo: Mesh = False \n element: Optional[element] = None \n \n",
      "24": "\n topo: Mesh = * None \n element: Optional[Element] = None \n \n",
      "25": "\n topo: Mesh = 0 \n element: Optional[element] = None \n \n",
      "26": "\n topo: Mesh: Optional[Mehash] = None \n element: Optional[element] = None \n \n",
      "27": "\n topo: Mesh = () \n element: Optional[element] = None \n \n",
      "28": "\n topo: Mesh = 0 \n element: Element \n \n",
      "29": "\n topo: Mesh: Optional[Dofs] = None \n element: Optional[element] = None \n \n",
      "30": "\n topo: Mesh = '' \n element: Optional[element] = None \n \n",
      "31": "<IND> topo: Mesh = None \n element: Optional[Element] = None \n \n",
      "32": "<DED> topo: Mesh = None \n element: Optional[Element] = None \n \n",
      "33": "\n topo: Mesh = Mesh \n element: Optional[element] = None \n \n",
      "34": "\n topo: Mesh = '' \n element: 'Element' \n \n",
      "35": "\n topo: Mesh = False \n element = False \n \n",
      "36": "\n topo: Mesh: Optional[Meth] = None \n element: Optional[element] = None \n \n",
      "37": "\n topo: Mesh = \"\" \n element = \"\" \n \n",
      "38": "\n topo: Mesh <IND> element: Optional[Element] = None \n \n",
      "39": "\n topo: Mesh = None \n element = \"\" \n \n",
      "40": "\n topo: Mesh \n element: Optional[element] = None \n \n",
      "41": "\n topo: Mesh = None \n element = skfem.element.element.Element <DED> \n \n",
      "42": "\n topo: Mesh: Optional[None] = None \n element: Optional[element] = None \n \n",
      "43": "\n topo: Mesh = None \n element = skfem.element.element.Element <IND> \n",
      "44": "\n topo: Mesh = 0 \n element = 0 \n \n",
      "45": "\n topo: Mesh: Optional[Mehash] = None \n element: Optional[Element] = None \n <IND>",
      "46": "\n topo: Mesh = [] \n element: Element <DED> \n \n",
      "47": "\n topo: Mesh = '' \n element = '' \n \n",
      "48": "\n topo: Mesh = [] \n element: Element <IND> \n",
      "49": "\n topo: Mesh = None \n element: Optional[Element] = None \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    num_classes: int = None\n    names: List[str] = None\n    names_file: str = None\n    id: Optional[str] = None\n",
    "target_code": "\n    num_classes: Optional[int] = None\n    names: Optional[List[str]] = None\n    names_file: Optional[str] = None\n    id: Optional[str] = None\n",
    "warning_line": "    names_file: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `names_file` declared in class `ClassLabel` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 552,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "huggingface/datasets",
    "source_filename": "src/datasets/features.py",
    "target_filename": "src/datasets/features.py",
    "source_changeid": "49e517a3d21392291d771872204594f43cd09532^",
    "target_changeid": "49e517a3d21392291d771872204594f43cd09532",
    "predictions": [
      "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "1": "\n num_classes: int = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "2": "\n num_classes: int = [] \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "3": "<IND> num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "4": "\n num_classes: List[str] = [] \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "5": "\n num_classes: typing.Optional[int] = None \n names: typing.Optional[List[str]] = None \n names_file: typing.Optional[str] = None \n id: Optional[str] = None \n",
      "6": "<DED> num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "7": "\n name_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "8": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None <IND> names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "9": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None <IND>",
      "10": "\n num_classes: Optional[int] = None <IND> names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "11": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None <IND> id: Optional[str] = None \n",
      "12": "\n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "13": "\n num_classes: int = [] \n names: List[str] = [] \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "14": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None <DED> num_classes: Optional[int] = None \n",
      "15": "\n num_classes: Optional[int] = None <DED> names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "16": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None <DED> names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "17": "\n num_classes: Optional[str] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "18": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None <DED> id: Optional[str] = None \n",
      "19": "\n num_classes: int = None \n names: List[str] = [] \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "20": "\n num_classes: Class[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "21": "\n num_classes: int = \"\" \n names: Optional[List[str]] = \"\" \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "22": "\n num_classes: typing.Optional[int] = None \n names: Optional[List[str]] = None \n names_file: typing.Optional[str] = None \n id: Optional[str] = None \n",
      "23": "\n num_classes: optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "24": "<DED> num_classes: int = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "25": "\n num_classes: typing.Optional[int] = None \n names: List[str] = None \n names_file: typing.Optional[str] = None \n id: Optional[str] = None \n",
      "26": "\n list(num_classes): Optional[int] = None \n names: Optional[List[str]] = None \n list(names_file): Optional[str] = None \n id: Optional[str] = None \n",
      "27": "\n num_classes: List[str] = [] \n names_file: List[str] = [] \n id: Optional[str] = None \n",
      "28": "\n num_classes: int = (10) \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "29": "<IND> num_classes: int = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "30": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None <DED>",
      "31": "\n num_classes: Int = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "32": "\n num_classes: int = \"\" \n names: Optional[List[str]] = \"\" \n names_file: Optional[str] = \"\" \n id: Optional[str] = None \n",
      "33": "\n num_classes: Optional[int] = None \n names: Optional[Str] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "34": "\n num_classes: List[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "35": "\n num_classes: options = [] \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "36": "\n num_classes: int = 0 \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "37": "\n num_classes: list[int] = None \n names: List[str] = [] \n names_file: list[str] = [] \n id: Optional[str] = None \n",
      "38": "\n num_classes = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "39": "\n num_classes: Optional[int] = None \n names: List[str] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "40": "\n class_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "41": "\n num_classes: List[str] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "42": "\n num_classes: List[int] = None \n names: List[str] = [] \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "43": "\n classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "44": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id = Optional[str] = None \n",
      "45": "\n num_classes: int = \"\" \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "46": "\n num_classes: int = \"\" \n names: List[str] = \"\" \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "47": "\n num_classes: int = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id = Optional[str] = None \n",
      "48": "\n num_classes: List[str] = [] \n names: List[str] = [] \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "49": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None <DED> \"\" \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "warning_line": "        self.returncode = code",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "actionless/pikaur",
    "source_filename": "pikaur_test/helpers.py",
    "target_filename": "pikaur_test/helpers.py",
    "source_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc^",
    "target_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "predictions": [
      "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "1": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n <IND> self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n <IND> self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n <IND> self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n <IND> self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n \n self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n <IND> self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "\n def _fake_exit(self, code: Optional[int] = None) -> NoReturn: \n <IND> self.returncode = code \n",
      "13": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n <IND> self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # +",
      "18": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n self.returncode = code \n # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # #",
      "20": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # #",
      "21": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # #",
      "22": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # #",
      "23": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # #",
      "24": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # #",
      "25": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # #",
      "26": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # #",
      "27": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # #",
      "28": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # #",
      "29": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # #",
      "30": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # #",
      "31": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # #",
      "32": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # #",
      "33": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # #",
      "36": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # #",
      "45": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "\n def _fake_exit(self, code: Optional[int] = 0, # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # @ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: InferenceAPI = []\n\n",
    "target_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n\n",
    "warning_line": "    _inference_apis: InferenceAPI = []",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_inference_apis` declared in class `BentoService` has type `InferenceAPI` but is used as type `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 588,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bentoml/BentoML",
    "source_filename": "bentoml/service.py",
    "target_filename": "bentoml/service.py",
    "source_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd^",
    "target_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd",
    "predictions": [
      "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n \n",
      "1": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[List[InferenceAPI]] = [] \n \n",
      "2": "# List of inference APIs that this BentoService provides \n _inference_apis: List[Variable[_T]] = [] \n \n",
      "3": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI], List[Variable[_T]] = [] \n \n",
      "4": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[List[Variable[_T]] = [] \n \n",
      "5": "# List of inference APIs that this BentoService provides \n _inference_apis: InferenceAPI = [] \n \n",
      "6": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[InferenceAPI] = [] \n \n",
      "7": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n <IND>",
      "8": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[List[Variable[_T]]] = [] \n \n",
      "9": "# List of inference APIs that this BentoService provides \n _inference_apis: [] \n \n",
      "10": "# List of inference APIs that this BentoService provides \n _inference_apis: List[inferenceAPI] = [] \n \n",
      "11": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = List[] \n \n",
      "12": "# List of inference APIs that this BentoService provides \n _inference_apis: Table[InferenceAPI] = [] \n \n",
      "13": "# List of inference APIs that this BentoService provides \n _inference_apis: inferenceAPI = [] \n \n",
      "14": "# List of inference APIs that this BentoService provides <IND> _inference_apis: List[InferenceAPI] = [] \n \n",
      "15": "# List of inference APIs that this BentoService offers \n _inference_apis: List[InferenceAPI] = [] \n \n",
      "16": "# List of inference APIs that this BentoService provides \n _inference_apis: [InferenceAPI] = [] \n \n",
      "17": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI, T] = [] \n \n",
      "18": "# List of inference APIs that this BentoService provides \n _inference_apis: list[InferenceAPI] = [] \n \n",
      "19": "# List of inference APIs that this BentoService provides <DED> _inference_apis: List[InferenceAPI] = [] \n \n",
      "20": "# List of inference APIs that this BentoService provides \n list = [] \n _inference_apis: List[InferenceAPI] = [] \n \n",
      "21": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n <DED> _inference_apis: List[InferenceAPI] = [] \n \n",
      "22": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[List[inferenceAPI]] = [] \n \n",
      "23": "# List of inference APIs that this BentoService provides \n _inference_apis: List[List[Variable[_T]] = [] \n \n",
      "24": "# List of inference APIs that this BentoService provides \n self._inference_apis: List[InferenceAPI] = [] \n \n",
      "25": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[List[Variable[_T]] = None \n \n",
      "26": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] <IND> \n",
      "27": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] <DED> \n \n",
      "28": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n <DED>",
      "29": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI,...] \n \n",
      "30": "# List of inference APIs that this BentoService provides \n []_inference_apis: List[InferenceAPI] = [] \n \n",
      "31": "# List of inference APIs that this BentoService provides \n _inference_apis:List[InferenceAPI] = [] \n \n",
      "32": "# List of inference APIs that this BentoService provides \n use_inference_apis: List[InferenceAPI] = [] \n \n",
      "33": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI,...] = [] \n \n",
      "34": "# List of inference APIs that this BentoService provides \n _inference_apis = [] \n \n",
      "35": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI, List[Variable[_T]] = [] \n \n",
      "36": "# List of inference APIs that this BentoService provides \n _inference_apis: [List[InferenceAPI]] = [] \n \n",
      "37": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI, []] = [] \n \n",
      "38": "# List of inference APIs that this BentoService provides \n _inference_apis: List[Variable[_T]] = [] \n <DED> _inference_apis: List[InferenceAPI] = [] \n \n",
      "39": "# List of inference APIs that this BentoService provides \n _inference_apis: _List[InferenceAPI] = [] \n \n",
      "40": "# List of inference APIs that this BentoService provides \n inference_apis: List[InferenceAPI] = [] \n \n",
      "41": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[List[Variable[_T]]] = None \n \n",
      "42": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n <DED> _inference_apps: List[InferenceAPI] = [] \n \n",
      "43": "# List of inference APIs that this BentoService provides \n _inference_apis: List[T] = [] \n \n",
      "44": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = List[Variable[_T]] \n \n",
      "45": "# List of inference APIs that this BentoService provides \n (_inference_apis: List[InferenceAPI] = []) \n \n",
      "46": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI[]] = [] \n \n",
      "47": "# List of inference APIs that this BentoService provides \n _inference_apis(): List[InferenceAPI] = [] \n \n",
      "48": "# List of inference APIs that this BentoService provides \n _inference_apis: Class[InferenceAPI] = [] \n \n",
      "49": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI, V] = [] \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object\n",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_line": "            m.chat = self.chat_manager.get_chat(channel, uid)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 271,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/efb-telegram-master",
    "source_filename": "efb_telegram_master/master_message.py",
    "target_filename": "efb_telegram_master/master_message.py",
    "source_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6^",
    "target_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "predictions": [
      "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n"
    ],
    "correct": false,
    "top_five": {
      "0": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "1": "m.author = self.chat_manager.self \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "2": "m.author = self.chat_manager.self \n m.chat_ = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "3": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid.chat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "4": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "5": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, Uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "6": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat.ETMChat](channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "7": "m.author = self.chat_manager.self \n assert self.chat_manager.get_chat(channel, uid) \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "8": "m.author = self.chat_manager.self \n m.chat=self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "9": "m.author = self.chat_manager.self \n self.chat_manager = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "10": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).chat \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "11": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, efb_telegram_master.chat.ETMChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "12": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_chat(uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "13": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object <IND>",
      "14": "m.author = self.chat_manager.self \n self.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "15": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) <DED> if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "16": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) <IND> if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "17": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, chat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "18": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: <IND> # Chat not found anyway, build a fake object \n",
      "19": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(uid, efb_telegram_master.chat.ETMChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "20": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(ctx, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "21": "m.author = self.chat_manager.self \n m.chat_= self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "22": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: <DED> # Chat not found anyway, build a fake object \n",
      "23": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "24": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(msg(channel, uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "25": "m.author = self.chat_manager.self <IND> m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "26": "m.author = self.chat_manager.self \n m.chat__ = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "27": "m.author = self.chat_manager.self \n (m.chat = self.chat_manager.get_chat(channel, uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "28": "m.author = self.chat_manager.self \n self.m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "29": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not M.chat: \n # Chat not found anyway, build a fake object \n",
      "30": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, Chat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "31": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(query, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "32": "m.author = self.chat_manager.self \n assert self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "33": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, (uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "34": "m.author = self.chat_manager.self \n uid = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "35": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, m.chat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "36": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "37": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build an object \n",
      "38": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(null, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "39": "m.author = self.chat_manager.self \n m.chat_manager = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "40": "m.author = self.chat_manager.self \n m.chat.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "41": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid); if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "42": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid), \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "43": "m.author = self.chat_manager.self \n fn = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "44": "m.author = self.chat_manager.self \n m.chat_name = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "45": "m.author = self.chat_manager.self \n m.chat2 = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "46": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(uid, channel) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "47": "m.author = self.chat_manager.self \n ft = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "48": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "49": "m.author = self.chat_manager.self \n m = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)\n",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_line": "        self.kernel_filename: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 90,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "1": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "2": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "3": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = [] \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "4": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = [] \n self.hypervisor_filename: str = [] \n self.result = Result(xml_state) \n",
      "5": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = 0 \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "6": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <IND> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "7": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <IND> self.result = Result(xml_state) \n",
      "8": "self.checksum_name = ''.join([self.image_name, '.md5']) <DED> self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "9": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) <IND>",
      "10": "self.checksum_name = ''.join([self.image_name, '.md5']) <IND> self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "11": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <DED> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "12": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <DED> self.result = Result(xml_state) \n",
      "13": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = bool \n self.hypervisor_filename: str = bool \n self.result = Result(xml_state) \n",
      "14": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' <IND> self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "15": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' <IND> self.result = Result(xml_state) \n",
      "16": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str.Optional[str] = None \n self.hypervisor_filename: str.Optional[str] = None \n self.result = Result(xml_state) \n",
      "17": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' <DED> self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "18": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = ('') \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "19": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' <DED> self.result = Result(xml_state) \n",
      "20": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = () \n self.hypervisor_filename: str = () \n self.result = Result(xml_state) \n",
      "21": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = [] \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "22": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) <IND>",
      "23": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = ('') \n self.hypervisor_filename: str = ('') \n self.result = Result(xml_state) \n",
      "24": "self.checksum_name = ''.join([self.image_name, '.md5']) <DED> self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "25": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename_str: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "26": "self.checksum_name = ''.join([self.image_name, '.md5']) <IND> self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "27": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = ('') \n self.hypervisor_filename: str = \"'\" \n self.result = Result(xml_state) \n",
      "28": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = '' \n self.hypervisor_filename = '' \n self.result = Result(xml_state) \n",
      "29": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str: Optional[str] = None \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "30": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "31": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) <DED> self.result = Result(xml_state) \n",
      "32": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = [] \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "33": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "34": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = Optional[str] \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "35": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\", self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "36": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) <DED> self.result = Result(xml_state) \n",
      "37": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str: Optional[str] = None \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "38": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = bool <IND> self.hypervisor_filename: str = bool \n self.result = Result(xml_state) \n",
      "39": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = [] \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "40": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = \"\" \n self.hypervisor_filename = \"\" \n self.result = Result(xml_state) \n",
      "41": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_status) \n",
      "42": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str | None = None \n self.hypervisor_filename: str | None = None \n self.result = Result(xml_state) \n",
      "43": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "44": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "45": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: option.strip() \n self.hypervisor_filename: option.strip() \n self.result = Result(xml_state) \n",
      "46": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" \n self.hypervisor_filename: str = \"\" <IND> self.result = Result(xml_state) \n",
      "47": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" <IND> self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "48": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Str = \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "49": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" <DED> self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 275,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "1": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "2": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "3": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "4": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "5": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "6": "for trait, cfg_key in common_oauth_traits: \n <IND> (cfg_key in common_oauth_traits) -> None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "7": "for trait, cfg_key in common_oauth_traits: \n <IND> async set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "8": "for trait, cfg_key in common_oauth_traits: \n <IND> () -> None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "9": "for trait, cfg_key in common_oauth_traits: \n <IND> if trait is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "10": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "11": "for trait, cfg_key in common_oauth_traits: \n <IND> if not common_oauth_traits is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "12": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "13": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "14": "for trait, cfg_key in common_oauth_traits: \n <IND> else: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "15": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is not None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "16": "for trait, cfg_key in common_oauth_traits: \n <IND> if not cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "17": "for trait, cfg_key in common_oauth_traits: \n <IND> if not isinstance(c.CILogonOAuthenticator, trait): \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "18": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "19": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.') \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "20": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "21": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait), 'auth.cilogon.' and cfg_key) \n",
      "22": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "23": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "24": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n assert isinstance(cfg_key, cfg_key) \n",
      "25": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') + cfg_key \n",
      "26": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "27": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait), 'auth.cilogon.', cfg_key) \n",
      "28": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "29": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator), trait, 'auth.cilogon.' + cfg_key) \n",
      "30": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, cfg_key) \n",
      "31": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') \n",
      "32": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') + cfg_key: \n",
      "33": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "34": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') + cfg_key: \n <IND>",
      "35": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') + cfg_key) \n",
      "36": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') \n",
      "37": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND>",
      "38": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') + cfg_key) \n",
      "39": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n assert isinstance(cfg_key, cfg_key, trait) \n",
      "40": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait) \n",
      "41": "for trait, cfg_key in common_oauth_traits: \n <IND> (cfg_key in common_oauth_traits) -> None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') \n",
      "42": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "43": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n assert isinstance(cfg_key, trait) \n",
      "44": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "45": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.', cfg_key) \n",
      "46": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + (cfg_key)) \n",
      "47": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n if cfg_key isinstance(cfg_key, trait): \n",
      "48": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') \n",
      "49": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') + cfg_key \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n number = int(number)\n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])\n\n",
    "target_code": "\n value = int(number)\n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_line": "\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 720,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/formatting.py",
    "target_filename": "se/formatting.py",
    "source_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3^",
    "target_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "predictions": [
      "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "1": "\n number = str(int(number)) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "2": "\n number = str(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "3": "\n number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * number % 10::4]) \n \n",
      "4": "\n value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "5": "\n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "6": "\n number = int(number) \n return \"%d%s\" % (int(number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "7": "\n number = str(int(number)) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * number % 10::4]) \n \n",
      "8": "\n number = int(number) \n return \"%d%s\" % ((number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "9": "\n (number = int(number)) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "10": "\n _number = int(_number) \n return \"%d%s\" % (_number, \"tsnrhtdd\"[(math.floor(_number / 10) % 10!= 1) * (_number % 10  4) * __number % 10::4]) \n \n",
      "11": "\n value_number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value_number % 10::4]) \n \n",
      "12": "\n name = int(number) \n return \"%d%s\" % (name, \"tsnrhtdd\"[(math.floor(name / 10) % 10!= 1) * name % 10  4) * name % 10::4]) \n \n",
      "13": "\n \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "14": "\n index = int(index) \n return \"%d%s\" % (index, \"tsnrhtdd\"[(math.floor(index / 10) % 10!= 1) * (index % 10  4) * index % 10::4]) \n \n",
      "15": "\n assert isinstance(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "16": "\n number = str(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * number % 10::4]) \n \n",
      "17": "\n array = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "18": "\n var number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "19": "\n number = int(number) \n return \"%d%s\" % (null, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (null % 10  4) * number % 10::4]) \n \n",
      "20": "\n _number = int(_number) \n return \"%d%s\" % (_number, \"tsnrhtdd\"[(math.floor(_number / 10) % 10!= 1) * (_number % 10  4) * number % 10::4]) \n \n",
      "21": "\n number=int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "22": "\n number = int(int(number)) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "23": "\n name = int(number) \n return \"%d%s\" % (name, \"tsnrhtdd\"[(math.floor(name / 10) % 10!= 1) * (name % 10  4) * name % 10::4]) \n \n",
      "24": "\n value_number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "25": "\n type = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "26": "\n amount = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "27": "\n number = int(number) \n return \"%d%s\" % (name, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (name % 10  4) * number % 10::4]) \n \n",
      "28": "\n number: int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "29": "\n list(number) = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * list(number % 10::4]) \n \n",
      "30": "\n list(number) = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * list(number % 10  4) * list(number % 10::4])) \n \n",
      "31": "\n _number = int(_number) \n return \"%d%s\" % (_number, \"tsnrhtdd\"[(math.floor(_number / 10) % 10!= 1) * (_number % 10  4) * __10::4]) \n \n",
      "32": "\n _number = int(_number) \n return \"%d%s\" % (_number, \"tsnrhtdd\"[(math.floor(_number / 10) % 10!= 1) * (_number % 10  4) * _number % 10::4]) \n \n",
      "33": "\n value_number = int(value) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value_number % 10::4]) \n \n",
      "34": "\n return int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "35": "\n _number = int(_number) \n return \"%d%s\" % (_number, \"tsnrhtdd\"[(math.floor(_number / 10) % 10!= 1) * (_number % 10  4) * __ 10::4]) \n \n",
      "36": "\n value_number = int(value) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "37": "\n number = int(number) \n return \"%d%s\" % (%, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (% 10  4) * number % 10::4]) \n \n",
      "38": "\n number = int(number) \n return \"%d%s\" % (name, \"tsnrhtdd\"[(math.floor(name / 10) % 10!= 1) * (name % 10  4) * number % 10::4]) \n \n",
      "39": "\n number = str(int(number)) \n return \"%d%s\" % ((number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "40": "\n numbers = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "41": "\n number_ = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "42": "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * number % 10::4]) \n \n",
      "43": "\n _number = int(_number) \n return \"%d%s\" % (_number, \"tsnrhtdd\"[(math.floor(_number / 10) % 10!= 1) * (_number % 10  4) * __% 10::4]) \n \n",
      "44": "\n number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "45": "\n name = int(number) \n return \"%d%s\" % (name, \"tsnrhtdd\"[(math.floor(name / 10) % 10!= 1) * name = 0 * name % 10  4) * name % 10::4]) \n \n",
      "46": "\n number = int(number) \n return \"%d%s\" % (name, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (name % 10  4) * name % 10::4]) \n \n",
      "47": "\n int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(int(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "48": "\n sum = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * sum % 10::4]) \n \n",
      "49": "\n list = int(number) \n return list(\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * list(number % 10  4) * list(number % 10::4])) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + topicname)\n\n",
    "target_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_line": "            raise ValueError(\"unknown topic: \" + topicname)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1052,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997^",
    "target_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "predictions": [
      "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "1": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + topicname)) \n \n",
      "2": "<DED> else: \n <IND> raise ValueError(\"unknown topic: { topic } \") \n \n",
      "3": "<IND> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "4": "<DED> else: \n <IND> raise ValueError('unknown topic: \" + topicname) \n \n",
      "5": "\n <DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "6": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: { topic } \")) \n \n",
      "7": "<DED> else: \n <DED> raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "8": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + str(topicname)) \n \n",
      "9": "<DED> else: \n <IND> raise ValueError(\"unknown topic: { topic } \" + topicname) \n \n",
      "10": "<DED> else: \n <IND> raise ValueError(\"unknown topic: } topic: \" + topicname) \n \n",
      "11": "<DED> else: \n <IND> raise ValueError(\"unknown topic: } topic: { topicname } \") \n \n",
      "12": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \") \n \n",
      "13": "<DED> else: \n <IND> raise ValueError(int(\"unknown topic: { topic } \")) \n \n",
      "14": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \\ topic } \") \n \n",
      "15": "<DED> else: \n <IND> raise ValueError(str, topic: Union[str, topic]) \n \n",
      "16": "<DED> else: \n <IND> assert topic is not None \n raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "17": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n <DED> raise ValueError(\"unknown topic: { topic } \") \n \n",
      "18": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + str) \n \n",
      "19": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: } topic: { topic } \") \n \n",
      "20": "<DED> else: \n <IND> raise ValueError((\"unknown topic: \" + topicname)) \n \n",
      "21": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \") + topicname) \n \n",
      "22": "<DED> else: \n <IND> raise ValueError(int(\"unknown topic: } topic: { topic } \")) \n \n",
      "23": "<DED> else: \n <IND> raise ValueError(options.unknown topic: \" + topicname) \n \n",
      "24": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \\ topic } \")) \n \n",
      "25": "<DED> else: \n <IND> raise ValueError(b\"unknown topic: { topic } \") \n \n",
      "26": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n <DED> else: \n <IND> raise ValueError(\"unknown topic: { topic } \") \n \n",
      "27": "<DED> else: \n \n raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "28": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n raise ValueError(\"unknown topic: { topic } \") \n \n",
      "29": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: } topic: { topic } \")) \n \n",
      "30": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n <IND>",
      "31": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n <DED> raise valueError(\"unknown topic: { topic } \") \n \n",
      "32": "<DED> else: \n <IND> raise ValueError(str topic: Union[str, topic] + topicname) \n \n",
      "33": "<DED> else: \n <IND> raise ValueError(tuple(\"unknown topic: { topic } \")) \n \n",
      "34": "<DED> else: \n <IND> raise ValueError(str topic: Union[str, topic]) \n \n",
      "35": "<DED> else: \n <IND> raise ValueError(self, topic: Union[str, topic]) \n \n",
      "36": "<DED> else: \n <IND> raise ValueError(int(\"unknown topic: \" + topicname)) \n \n",
      "37": "<DED> else: \n <IND> raise ValueError(tuple[\"unknown topic: { topic } \") \n \n",
      "38": "<DED> else: \n <IND> raising ValueError(\"unknown topic: \" + topicname) \n \n",
      "39": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n raise valueError(\"unknown topic: { topic } \") \n \n",
      "40": "<DED> else: \n <IND> raise valueError(\"unknown topic: \" + topicname) \n \n",
      "41": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \" + topicname) \n \n",
      "42": "<DED> else: <IND> <IND> raise ValueError(\"unknown topic: \" + topicname) \n \n",
      "43": "<DED> else: \n <IND> raise ValueError(\"unknown topic: } topic: { topic } \") \n \n",
      "44": "<DED> else: \n <IND> raise ValueError('unknown topic:'+ topicname) \n \n",
      "45": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) \n <IND> raise ValueError(\"unknown topic: { topic } \") \n \n",
      "46": "<DED> else: \n <IND> raise ValueError(ctx.unknown topic: \" + topicname) \n \n",
      "47": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \\ topic } \" + topicname) \n \n",
      "48": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + topicname) <DED> \n \n",
      "49": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: { topic } \" + topicname)) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": true,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "target_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "warning_line": "                    callback(len(response) < self._library_max_private_projects)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 95,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "target_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af^",
    "target_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "predictions": [
      "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "1": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "2": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "3": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "4": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "5": "<IND> callback(True) \n \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "6": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "7": "<IND> callback(True) \n <DED> elif self._library_max_private_projects is not None and isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "8": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "9": "<IND> callback(True) \n <DED> elif response is not None and isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "10": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "11": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) -> None: \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "12": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response: \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "13": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n \n callback(len(response)  self._library_max_private_projects) \n",
      "14": "<IND> callback(True) \n <DED> elif isinstance(response, list) is not None and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "15": "<IND> callback(True) \n \n elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "16": "<IND> callback(True) \n <DED> elif (isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "17": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "18": "<IND> callback(True) \n <DED> elif isinstance(response, list) und all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "19": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects \n",
      "20": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): <IND> <IND> callback(len(response)  self._library_max_private_projects) \n",
      "21": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) && r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "22": "<IND> callback(True) \n <DED> elif has_response is not None and isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "23": "<IND> callback(True) \n <DED> elif isinstance(response, list, all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "24": "<IND> callback(True) \n \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "25": "<IND> callback(True) \n <DED> elif instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "26": "<IND> callback(True) \n <DED> elif isinstance(response, list) & all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "27": "<IND> callback(True) \n <DED> elif isinstance(response, list) isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "28": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "29": "<IND> callback(True) \n \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "30": "<IND> callback(True) <IND> <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "31": "<IND> callback(True) \n <DED> elif (isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "32": "<IND> callback(True) \n <DED> elif isinstance(response, list) is not None and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "33": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "34": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): <DED> <IND> callback(len(response)  self._library_max_private_projects) \n",
      "35": "<IND> callback(True) \n <DED> elif (response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "36": "<IND> callback(True) \n <DED> elif (response, list) isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "37": "<IND> callback(True) \n <DED> elif response is not None and isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "38": "<IND> callback(True) <DED> <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "39": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "40": "<IND> callback(True) \n <DED> elif isinstance(response, list, all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "41": "<IND> callback(True) \n <DED> elif elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "42": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) <IND>",
      "43": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)) for r in response): \n \n callback(len(response)  self._library_max_private_projects) \n",
      "44": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects \n ) \n",
      "45": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) -> None: \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "46": "<IND> callback(True) \n <DED> elif hash(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "47": "<DED> callback(True) \n \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "48": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "49": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse)): \n <IND> callback(len(response)  self._library_max_private_projects) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if other_line is not None:\n            <IND>buffer.append(\" \" + other_line)\n\n",
    "target_code": "        if other_line is not None:\n            <IND>buffer.append(\" \" + str(other_line))\n\n",
    "warning_line": "            buffer.append(\" \" + other_line)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 249,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python-poetry/poetry",
    "source_filename": "poetry/mixology/incompatibility.py",
    "target_filename": "poetry/mixology/incompatibility.py",
    "source_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728^",
    "target_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "predictions": [
      "if other_line is not None: \n <IND> buffer.append(\" \" + int(other_line)) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if other_line is not None: \n <IND> buffer.append(\" \" + int(other_line)) \n \n",
      "1": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) \n \n",
      "2": "if other_line is not None: \n <IND> buffer.append(int, other_line) \n \n",
      "3": "if other_line is not None: \n <IND> buffer.append(int(other_line)) \n \n",
      "4": "if other_line is not None: \n <IND> buffer.append(\" \" + list(other_line)) \n \n",
      "5": "if other_line is not None: \n <IND> buffer.append(int) \n \n",
      "6": "if other_line is not None: \n <IND> buffer.append(\" \" + other_line) \n \n",
      "7": "if other_line is not None: \n <IND> buffer.append(str(\" \" + other_line)) \n \n",
      "8": "if other_line is not None: \n <IND> buffer.append(int, \" \" + other_line) \n \n",
      "9": "if other_line is not None: \n <IND> buffer.append(int, \" \" + list(other_line)) \n \n",
      "10": "if other_line is not None: \n <IND> buffer.append(int, \" \" + str(other_line)) \n \n",
      "11": "if other_line is not None: \n <IND> buffer.append(\" \" + line) \n \n",
      "12": "if other_line is not None: \n <IND> str = buffer.append(\" \" + str(other_line)) \n \n",
      "13": "if other_line is not None: \n <IND> buffer.append(str(\" \" + list(other_line)) \n \n",
      "14": "if other_line is not None: \n <IND> buffer.append(int, \" \" + int\") \n \n",
      "15": "if other_line is not None: \n <IND> buffer.append(\" \" + (other_line)) \n \n",
      "16": "if other_line is not None: \n <IND> buffer.append(str(\" \" + str(other_line)) \n \n",
      "17": "if other_line is not None: \n <IND> buffer.append(\" \" + []) \n \n",
      "18": "if other_line is not None: \n <IND> buffer.append(\" \" + int) \n \n",
      "19": "if other_line is not None: \n <IND> buffer.append(\" \" + int\") \n \n",
      "20": "if other_line is not None: \n <IND> buffer.append(str(\" \"\") + int(other_line) \n \n",
      "21": "if other_line is not None: \n <IND> buffer.append(int(str, other_line)) \n \n",
      "22": "if other_line is not None: \n <IND> buffer.append(int, \" \" + line) \n \n",
      "23": "if other_line is not None: \n <IND> buffer.append(\" \" + args[0]) \n \n",
      "24": "if other_line is not None: \n <IND> buffer.append(int, \" \" + int\") \n \n",
      "25": "if other_line is not None: \n <IND> buffer.append(str(\" \" + str(other_line)) \n \n",
      "26": "if other_line is not None: \n <DED> buffer.append(\" \" + int(other_line)) \n \n",
      "27": "if other_line is not None: \n <IND> buffer.append(int, [\" \" + other_line]) \n \n",
      "28": "if other_line is not None: \n <IND> buffer.append(\" \" + this._line) \n \n",
      "29": "if other_line is not None: \n <IND> buffer.append(int, '') \n \n",
      "30": "if other_line is not None: \n <IND> buffer.append(\" \" + non_line) \n \n",
      "31": "if other_line is not None: \n <IND> if other_line is not None: \n <IND> buffer.append(\" \" + int(other_line)) \n \n",
      "32": "if other_line is not None: \n <IND> buffer.append(\" \" + args.get(other_line)) \n \n",
      "33": "if other_line is not None: \n <IND> buffer.append(\" \" + typeof other_line) \n \n",
      "34": "if other_line is not None: \n <IND> buffer.append(\" \" + int()) \n \n",
      "35": "if other_line is not None: \n <IND> buffer.append(f\" \" + str(other_line)) \n \n",
      "36": "if other_line is not None: \n <IND> buffer.append(int, []) \n \n",
      "37": "if other_line is not None: \n <IND> buffer.append(str(\" \" + line)) \n \n",
      "38": "if other_line is not None: \n <IND> buffer.append(str(\" \" + int(other_line)) \n \n",
      "39": "if other_line is not None: \n <IND> if other_line is not None: \n <IND> buffer.append(int, other_line) \n \n",
      "40": "if other_line is not None: \n <IND> buffer.append(\" \" + string) \n \n",
      "41": "if other_line is not None: \n <IND> buffer.append(\" \" + args.other_line) \n \n",
      "42": "if other_line is not None: \n <DED> buffer.append(\" \" + str(other_line)) \n \n",
      "43": "if other_line is not None: \n <IND> int = buffer.append(\" \" + int) \n \n",
      "44": "if other_line is not None: \n <IND> buffer.append(int, \" \" + []) \n \n",
      "45": "if other_line is not None: \n <IND> buffer.append(int, \" \") \n \n",
      "46": "if other_line is not None: \n <IND> buffer.append(str(\" \" + int)) \n \n",
      "47": "if other_line is not None: \n <IND> buffer.append(\" \" + all_line) \n \n",
      "48": "if other_line is not None: \n <IND> buffer.append(\" \" + [str, other_line]) \n \n",
      "49": "if other_line is not None: \n <IND> buffer.append(\" \" + int(other_line, int)) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 279,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "1": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "2": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "3": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "4": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "5": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "6": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, args) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "7": "for trait, cfg_key in common_oauth_traits: \n <IND> (cfg_key in common_oauth_traits) -> None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "8": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, gitlab) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "9": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "10": "for trait, cfg_key in common_oauth_traits: \n <IND> if not cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "11": "for trait, cfg_key in common_oauth_traits: \n <IND> async set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "12": "for trait, cfg_key in common_oauth_traits: \n <IND> if not common_oauth_traits is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "13": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "14": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is not None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "15": "for trait, cfg_key in common_oauth_traits: \n <IND> () -> None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "16": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "17": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "18": "for trait, cfg_key in common_oauth_traits: \n <IND> else: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "19": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, trait) \n if not set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "20": "for trait, cfg_key in common_oauth_traits: \n <IND> assert it is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "21": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "22": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, 'auth.gitlab.', cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "23": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "24": "for trait, cfg_key in common_oauth_traits: \n <IND> if not isinstance(c.GitLabOAuthenticator, trait): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "25": "for trait, cfg_key in common_oauth_traits: \n <IND> if trait is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "26": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, trait) \n if cfg_key isinstance(cfg_key, args): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "27": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "28": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "29": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(cfg_key, trait) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "30": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n assert isinstance(cfg_key, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "31": "for trait, cfg_key in common_oauth_traits: \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "32": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n assert isinstance(cfg_key, cfg_key) \n",
      "33": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "34": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait), 'auth.gitlab.' and cfg_key) \n",
      "35": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key in common_oauth_traits) \n",
      "36": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "37": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait), 'auth.gitlab.' and cfg_key) \n assert isinstance(cfg_key, cfg_key) \n",
      "38": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key in common_oauth_traits): \n",
      "39": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND>",
      "40": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key in common_oauth_traits): \n",
      "41": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key in common_oauth_traits): \n <IND>",
      "42": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key in common_oauth_traits): \n <IND>",
      "43": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n if cfg_key isinstance(cfg_key, cfg_key): \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "44": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n assert isinstance(cfg_key, cfg_key, cfg_key) \n",
      "45": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n assert isinstance(cfg_key, cfg_key) \n",
      "46": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait) \n",
      "47": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') + cfg_key: \n <IND>",
      "48": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') + cfg_key \n",
      "49": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(c.GitLabOAuthenticator, trait), 'auth.gitlab.', cfg_key) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <IND>return 32, True\n\n        <DED>return int(self.size / 8), False\n",
    "target_code": "            <IND>return 32, True\n        <DED>if self.size is None:\n            <IND>return 32, True\n        <DED>return int(self.size / 8), False\n",
    "warning_line": "        return int(self.size / 8), False",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crytic/slither",
    "source_filename": "slither/core/solidity_types/elementary_type.py",
    "target_filename": "slither/core/solidity_types/elementary_type.py",
    "source_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b^",
    "target_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "predictions": [
      "<IND> return 32, True \n <DED> return int(self.size / 8), False \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<IND> return 32, True \n <DED> return int(self.size / 8), False \n",
      "1": "<IND> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "2": "<IND> return 32, True \n <DED> return int(self.size / 8, False \n",
      "3": "<DED> return 32, True \n <DED> return int(self.size / 8), False \n",
      "4": "<IND> return 32, True \n \n <DED> return int(self.size / 8, False \n",
      "5": "<IND> return 32, True \n <DED> return str(self.size / 8), False \n",
      "6": "<IND> return 32, True \n <DED> return str(int(self.size / 8)), False \n",
      "7": "<IND> return 32, Fal \n <DED> return int(self.size / 8), False \n",
      "8": "<IND> return 32, True \n <IND> <DED> return int(self.size / 8), False \n",
      "9": "<IND> return 32, True \n <DED> assert self.size is not None \n return int(self.size / 8), False \n",
      "10": "<IND> return 32, True \n <DED> return int(self.size / 8), True \n",
      "11": "<IND> return 32, True \n <DED> return self.size, False \n",
      "12": "<IND> return 32, True \n <DED> return Int(self.size / 8), False \n",
      "13": "<IND> return 32, True \n \n <DED> return str(int(self.size / 8)), False \n",
      "14": "<DED> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "15": "<IND> return 32, True \n <DED> return t.int(self.size / 8), False \n",
      "16": "<IND> return 32, True \n \n \n <DED> return int(self.size / 8), False \n",
      "17": "<IND> return 32, True \n <DED> return int(str(self.size / 8)), False \n",
      "18": "<IND> return 32, True \n <DED> return msg(self.size / 8), False \n",
      "19": "<IND> return 32, True \n <DED> return range(int(self.size / 8)), False \n",
      "20": "\n <IND> return 32, True \n <DED> return int(self.size / 8), False \n",
      "21": "<IND> return 32, True \n <DED> return str(int(self.size / 8), False \n",
      "22": "<IND> return 32, True \n \n <DED> return str(self.size / 8), False \n",
      "23": "<IND> return 32, True \n <IND> if self.size is None: \n <IND> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "24": "<IND> return 32, True \n <DED> return (self.size / 8), False \n",
      "25": "<IND> return 32, True \n \n <IND> return int(self.size / 8), False \n",
      "26": "<IND> return 32, True \n <DED> return array(int(self.size / 8)), False \n",
      "27": "<IND> return 32, True \n <DED> return int(self.size / 8)), False \n",
      "28": "<IND> return 32, True \n <DED> return self.size( 8), False \n",
      "29": "<IND> return 32, True \n <DED> return 0, False \n",
      "30": "<IND> return 32, True \n <IND> \n <DED> return int(self.size / 8), False \n",
      "31": "<IND> return 32, True \n <DED> return optional[int(self.size / 8], False \n",
      "32": "<IND> return 32, True \n <IND> if self.size is None: \n <IND> return 32, False \n <DED> return int(self.size / 8), False \n",
      "33": "<IND> return 32, True \n \n <DED> return int(self.size / 8), True \n",
      "34": "<IND> return 32, True \n \n <DED> return str(int(self.size / 8), False \n",
      "35": "<IND> return 32, True \n <DED> return self.size(8), False \n",
      "36": "<DED> return 32, True \n <DED> return int(self.size / 8, False \n",
      "37": "<IND> return 32, True \n <IND> <DED> return int(self.size / 8, False \n",
      "38": "<IND> return 32, True \n <DED> return int(self.size / 8), False <DED> \n",
      "39": "<IND> return 32, True \n <IND> if self.size is None: \n <IND> return 32, True \n \n <DED> return int(self.size / 8, False \n",
      "40": "<IND> return 32, True \n <IND> if self.size is None: \n <IND> return 32, False \n \n <DED> return int(self.size / 8), False \n",
      "41": "<IND> return 32, True \n <DED> return int(str(self.size / 8), False \n",
      "42": "<IND> return 32, Fal \n <DED> return int(self.size / 8, False \n",
      "43": "<IND> return 32, True \n <DED> return int(self.size/ 8), False \n",
      "44": "<IND> return 32, True \n <IND> if self.size is None: \n <IND> return 32, False \n <IND> return int(self.size / 8), False \n",
      "45": "<IND> return 32, True \n <DED> return str(self.size / 8, False \n",
      "46": "<IND> return 32, True \n <DED> assert self.size is not None \n return int(self.size / 8, False \n",
      "47": "<IND> return 32, True \n <DED> return self.size.append(8), False \n",
      "48": "<IND> return 32, True \n <DED> return self.size / 8, False \n",
      "49": "<IND> return 32, True \n \n <DED> return (self.size / 8), False \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_line": "          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `range` and `range`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 848,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rizar/attention-lvcsr",
    "source_filename": "theano/tensor/tests/test_basic.py",
    "target_filename": "theano/tensor/tests/test_basic.py",
    "source_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047^",
    "target_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "predictions": [
      "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "1": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array((range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "2": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "3": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "4": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(str(-127, 0)) + str(1, 128), dtype='int8'), \n [255, 1])], \n",
      "5": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "6": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "7": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.arange(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "8": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(args(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "9": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(string(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "10": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "11": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(null(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "12": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0, range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "13": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "14": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + str(1, 128), dtype='int8'), \n [255, 1])], \n",
      "15": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(str(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "16": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(tile(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "17": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(f -127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "18": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "19": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(int8(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "20": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "21": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(brange(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "22": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(display(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "23": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(extend(-127, 0)) +extend(range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "24": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(array(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "25": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(list(range(-127, 0)) +list(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "26": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1]), \n",
      "27": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.array(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "28": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile((numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "29": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(null, numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "30": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(scalar(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "31": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(self.range(-127, 0)) + self.range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "32": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(value(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "33": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(eval(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "34": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array( range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "35": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array( array(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "36": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(err(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "37": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(args(-127, 0)) + args(1, 128), dtype='int8'), \n [255, 1])], \n",
      "38": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(list(range(-127, 0)) +list(range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "39": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0)(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "40": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "41": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "42": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(window(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "43": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(field(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "44": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(arange(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "45": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(Array(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "46": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(255, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "47": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(_127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "48": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(npy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "49": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(list(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'), \n [255, 1])], \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return [global_state]\n\n        <DED>if size > 0:\n",
    "target_code": "            return [global_state]\n        <DED>size = cast(int, size)\n        if size > 0:\n",
    "warning_line": "        if size > 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 748,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f^",
    "target_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "predictions": [
      "return [global_state] \n \n <DED> if size > 0: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "return [global_state] \n \n <DED> if size > 0: \n",
      "1": "return [global_state] \n <DED> if size > 0: \n",
      "2": "return [global_state] \n \n <IND> if size > 0: \n",
      "3": "return [global_state] \n \n \n <DED> if size > 0: \n",
      "4": "return [global_state] \n \n <DED> if size is not None and size > 0: \n",
      "5": "return [global_state] \n \n <DED> if size >= 0: \n",
      "6": "return [global_state] \n <IND> if size > 0: \n",
      "7": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <IND> return [global_state] \n \n",
      "8": "return [global_state] \n \n <DED> assert isinstance(global_state, int) \n if size > 0: \n",
      "9": "return [global_state] \n \n <DED> if size is not None or size > 0: \n",
      "10": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) > 0: \n",
      "11": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <IND> return [global_state] \n \n",
      "12": "return [global_state] \n <IND> <DED> if size > 0: \n",
      "13": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <IND> return [global_state] \n <DED> if size > 0: \n",
      "14": "return [global_state] \n \n <DED> assert isinstance(global_state, size) \n if size > 0: \n",
      "15": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) && size > 0: \n",
      "16": "return [global_state] \n \n <DED> if size is not None: \n",
      "17": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <IND> if size > 0: \n",
      "18": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <IND> return [global_state] \n <DED> if size > 0: \n",
      "19": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <DED> if size > 0: \n",
      "20": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n",
      "21": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) and size > 0: \n",
      "22": "return [global_state] \n <DED> assert isinstance(global_state, int) \n if size > 0: \n",
      "23": "return [global_state] \n \n <DED> assert isinstance(global_state, args) \n if size > 0: \n",
      "24": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <DED> if size > 0: \n",
      "25": "return [global_state] \n \n <IND> assert isinstance(global_state, int) \n if size > 0: \n",
      "26": "return [global_state] \n \n <DED> assert isinstance(global_state, 'expression') \n if size > 0: \n",
      "27": "return [global_state] \n \n <DED> if size > isinstance(global_state, int): \n",
      "28": "return [global_state] \n \n <DED> if size > 0: \n <IND> return [global_state] \n \n",
      "29": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <IND> assert isinstance(global_state, size) \n",
      "30": "return [global_state] <DED> \n <DED> if size > 0: \n",
      "31": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <IND> return [global_state] \n <IND> if size > 0: \n",
      "32": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n <IND> return [global_state] \n <IND>",
      "33": "return [global_state] \n \n <DED> assert isinstance(global_state, bool) \n if size > 0: \n",
      "34": "return [global_state] \n \n <DED> assert isinstance(global_state, 'int') \n if size > 0: \n",
      "35": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression): \n \n",
      "36": "return [global_state] \n \n <DED> if size is not None > 0: \n",
      "37": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <IND> return [global_state] \n",
      "38": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <IND> if size > 0: \n",
      "39": "return [global_state] \n \n <DED> if size > 0: <DED> <IND> return [global_state] \n \n",
      "40": "return [global_state] <IND> \n <DED> if size > 0: \n",
      "41": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) > 0: \n <IND> return [global_state] \n \n",
      "42": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression)) and size > 0: \n",
      "43": "return [global_state] \n \n <DED> if size  0: \n",
      "44": "return [global_state] \n \n <DED> if isinstance(size) > 0: \n",
      "45": "return [global_state] \n \n <DED> assert isinstance(global_state,... \n if size > 0: \n",
      "46": "return [global_state] \n <DED> if size is not None and size > 0: \n",
      "47": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <IND> return [global_state] \n <IND>",
      "48": "return [global_state] \n \n <DED> if isinstance(size, mythril.laser.smt.expression.Expression) is not None: \n <IND> return [global_state] \n <IND> if size > 0: \n",
      "49": "return [global_state] \n \n <DED> if size > 0: <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_line": "                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 159,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/http_base.py",
    "target_filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "1": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "2": "err_result.raw_result = ( <IND> type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "3": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() <IND> ) \n",
      "4": "err_result.raw_result = ( <DED> type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "5": "err_result.raw_result = ( \n type(err) + \" \\ n\" + string(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "6": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "7": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) <IND>",
      "8": "err_result.raw_result = ( \n assert traceback.format_exc() is not None \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "9": "err_result.raw_result = ( \n type() + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "10": "err_result.raw_result = ( \n type(err) + \" \\ n\" + (str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "11": "err_result.raw_result = ( \n (err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "12": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError, err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "13": "err_result.raw_result = ( \n str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "14": "err_result.raw_result = ( \n type(err) + \" ^ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "15": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "16": "err_result.raw_result = ( \n assert err is not None \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "17": "err_result.raw_result = ( \n type = err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "18": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" ^ n\" + traceback.format_exc() \n ) \n",
      "19": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n + \" \\ n\" + traceback.format_exc() \n ) \n",
      "20": "err_result.raw_result = ( \n sort(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "21": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + stringback.format_exc() \n ) \n",
      "22": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n return type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "23": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) <DED> type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "24": "err_result.raw_result: \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "25": "err_result.raw_result_ = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "26": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n return type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n",
      "27": "err_result.raw_result = ( \n type[err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "28": "err_result.raw_result = async ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "29": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() <DED> \n ) \n",
      "30": "err_result.raw_result = ( \n (err = err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "31": "err_result.raw_result_type = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "32": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError[\" \\ n\"] + traceback.format_exc() \n ) \n",
      "33": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError(err) + \" \\ n\" + traceback.format_exc() <IND> ) \n",
      "34": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n () \n",
      "35": "err_result.raw_result=( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "36": "err_result.raw_result=str( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "37": "err_result.raw_result = ( \n type_err(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "38": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() <DED> ) \n",
      "39": "err_result.raw_result = ( \n type(err) + \" \\ n\"+ str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "40": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError[\" \\ n\"] + \" \\ n\" + traceback.format_exc() \n ) \n",
      "41": "err_result.raw_result = ( \n type=err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "42": "err_result.raw_result = ( \n type[err] + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "43": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "44": "err_result.raw_result = ( \n string(err) + \" \\ n\" + str(err) + \" \\ n\" + string(tracback.format_exc()) \n ) \n",
      "45": "err_result.raw_result = ( \n name + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "46": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n type(err) + \" \\ n\" + string(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "47": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() <DED> : \n ) \n",
      "48": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n return type(err) + \" \\ n\" + string(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "49": "err_result.raw_result = str( ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED>model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n\n",
    "target_code": "\n        <DED>model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_line": "        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1015,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "target_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c^",
    "target_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "predictions": [
      "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "1": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" { file_name }.tf_model\" \n \n",
      "2": "\n <DED> model_dir = Path(model_dir) \n assert file_name is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "3": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model \n \n",
      "4": "\n <DED> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "5": "\n <DED> model_dir = Path(model_dir) \n assert file_name.tf_model is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "6": "\n <DED> model_dir = Path(model_dir) \n str = model_dir / f\" { file_name }.tf_model\" \n \n",
      "7": "\n \n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "8": "\n <DED> model_dir = Path(model_dir) \n str = f\" { file_name }.tf_model\" \n \n",
      "9": "\n <DED> model_dir = Path(model_dir) \n self.tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "10": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" { file_name }.tf_model\".tf_model \n \n",
      "11": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model.\" \n \n",
      "12": "<DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "13": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model.tf_model\" \n \n",
      "14": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n <IND>",
      "15": "\n <DED> operand_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "16": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "17": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n <DED>",
      "18": "\n <DED> model_dir = Path(model_dir) \n tf_model_file_dir = model_dir / f\" { file_name }.tf_model\" \n \n",
      "19": "<IND> <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "20": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / str \" { file_name }.tf_model\" \n \n",
      "21": "\n <DED> model_dir = Path(model_dir) \n str.tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "22": "\n <DED> model_dir = Path(model_dir) \n return tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "23": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model <DED> \n \n",
      "24": "\n <DED> model_dir = Path(model_dir) \n tf_model_file= model_dir / f\" { file_name }.tf_model\" \n \n",
      "25": "\n <DED> model_dir = Path(model_dir) \n str(tf_model_file = model_dir / f\" { file_name }.tf_model\") \n \n",
      "26": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model <IND> \n",
      "27": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model\" \n \n",
      "28": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" <DED> \n",
      "29": "\n <DED> model_dir = Path(model_dir) <IND> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "30": "\n <DED> model_dir = Path(model_dir) \n str = tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "31": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" <IND> \n",
      "32": "\n <DED> model_dir = Path(model_dir) \n async tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "33": "\n <DED> model_dir = Path(model_dir) \n tf_model_file_path = model_dir / f\" { file_name }.tf_model\" \n \n",
      "34": "\n <DED> model_dir = Path(model_dir) \n str = model_dir/ f\" { file_name }.tf_model\" \n \n",
      "35": "\n <DED> model_dir = Path(model_dir) \n assert file_name is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model \n \n",
      "36": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f \" { file_name }.tf_model\" \n \n",
      "37": "\n <DED> tf_model_file = path(model_dir) \n <DED> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "38": "\n <DED> model_dir = Path(model_dir) <DED> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "39": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" { file_name }.tf_model.tf_model\" \n \n",
      "40": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" { file_name }.tf_model.\" \n \n",
      "41": "\n <DED> set_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "42": "\n <DED> model_dir = Path(model_dir) \n (tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "43": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model: \n \n",
      "44": "\n <DED> model_dir = Path(model_dir) \n str(tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "45": "\n <DED> case_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "46": "\n <IND> operand_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "47": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir | f\" { file_name }.tf_model\" \n \n",
      "48": "\n <DED> adapter = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "49": "\n <DED> model_dir = Path(model_dir) \n assert file_name is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\".tf_model\" \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # So if any list is non-empty, something went terribly wrong\n        <DED><DED>assert not self.lists + self.sets + self.dict_keys + self.dict_values\n\n",
    "target_code": "        # So if any list is non-empty, something went terribly wrong\n        <DED><DED>assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values\n\n",
    "warning_line": "        assert not self.lists + self.sets + self.dict_keys + self.dict_values",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.List[UserList]` and `typing.List[UserSet]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 464,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "1": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists, not self.sets, not self.dict_keys and not self.dict_values \n \n",
      "2": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <IND>",
      "3": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists + self.sets + self.dict_keys + self.dict_values \n \n",
      "4": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists, not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "5": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists, not self.sets, not self.dict_keys, not self.dict_values \n \n",
      "6": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists is not None \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "7": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets is not None \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "8": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets, not self.dict_keys and not self.dict_values \n \n",
      "9": "# So if any list is non-empty, something went terribly wrong \n \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "10": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "11": "# So if any list is non-empty, something went terribly wrong \n <DED> \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "12": "# So if any list is non-empty, something went terribly wrong \n <DED> <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "13": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists is not None and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "14": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "15": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys \n \n",
      "16": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists is not None and not self.sets is not None \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "17": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets or not self.dict_keys and not self.dict_values \n \n",
      "18": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_lists \n \n",
      "19": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists + self.sets + self.dict_keys + self.dict_values \n <IND>",
      "20": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets is not None \n assert not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "21": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys or not self.dict_values \n \n",
      "22": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED>",
      "23": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <IND>",
      "24": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_values \n \n",
      "25": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_keys \n \n",
      "26": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys is not None \n assert not self.dict_values and not self.dict_values \n \n",
      "27": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists, not self.sets, not self.dict_keys and not self.dict_values \n <IND>",
      "28": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_lists \n",
      "29": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists + self.sets + self.dict_keys and not self.dict_values \n \n",
      "30": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys <DED> and not self.dict_values \n \n",
      "31": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_lists \n <IND>",
      "32": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets + self.dict_keys and not self.dict_values \n \n",
      "33": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values <DED> \n \n",
      "34": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED>",
      "35": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys, not self.dict_values \n \n",
      "36": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_lists and not self.dict_values \n \n",
      "37": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values <DED> is not None \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "38": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists, not self.sets, not self.dict_keys or not self.dict_values \n \n",
      "39": "# So if any list is non-empty, something went terribly wrong \n <DED> \n assert not self.lists, not self.sets, not self.dict_keys and not self.dict_values \n \n",
      "40": "# So if any list is non-empty, something went terribly wrong \n \n <DED> <DED> assert not self.lists, not self.sets, not self.dict_keys and not self.dict_values \n \n",
      "41": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_values \n <IND>",
      "42": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys <IND> isinstance(self.dict_values) \n \n",
      "43": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values <DED> is not None \n <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "44": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "45": "# So if any list is non-empty, something went terribly wrong \n <DED> <IND> assert not self.lists, not self.sets, not self.dict_keys and not self.dict_values \n \n",
      "46": "# So if any list is non-emptied, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "47": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED> assert not self.lists and not self.sets and not self.dict_lists \n <DED>",
      "48": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys <IND> is not None \n assert not self.dict_values and not self.dict_values \n \n",
      "49": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "target_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step is not None and self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps is not None and self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_line": "        if self.eps <= 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 148,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "target_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37^",
    "target_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "predictions": [
      "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "1": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "2": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "3": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "4": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "5": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "6": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "7": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "8": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "9": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "10": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None or self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "11": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "12": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "13": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None or self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "14": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "15": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "16": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "17": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "18": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "19": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None or self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "20": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "21": "\n <DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "22": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "23": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "24": "<DED> def _check_params(self) -> None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "25": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and is not None must be strictly positive.\") \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "26": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None \n if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "27": "<DED> def _check_params(self) -> None: \n <DED> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "28": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None or self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None or self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "29": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "30": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "31": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "32": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "33": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "34": "<DED> def _check_params(self) -> None: \n <IND> if self.step is None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "35": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "36": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "37": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "38": "<DED> def _check_params(self) -> None: \n <IND> if self.step is None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "39": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step is not None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "40": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "41": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "42": "<DED> def _check_params(self) -> None: \n <IND> if self.step is None and self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "43": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None or self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None or eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "44": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and is not None must be strictly positive.\") \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "45": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "46": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "47": "<DED> def _check_params(self) -> None: \n <IND> if self.step = \"0\": \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = \"0\": \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "48": "<DED> def _check_params(self) -> None: \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "49": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n \n raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def __aiter__(self) -> AsyncIterator:\n        <IND>return aiter(self._stream())\n",
    "target_code": "    <DED>def __aiter__(self) -> AsyncIterator:\n        <IND>return aiter(self._stream)\n",
    "warning_line": "        return aiter(self._stream())",
    "linter_report": {
      "rule_id": "Call error [29]",
      "message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1123,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "faust-streaming/faust",
    "source_filename": "faust/agents/agent.py",
    "target_filename": "faust/agents/agent.py",
    "source_changeid": "51de861ada304a1763a4872811274818a8ee0851^",
    "target_changeid": "51de861ada304a1763a4872811274818a8ee0851",
    "predictions": [
      "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "1": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "2": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream()) \n",
      "3": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "4": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return str(aiter(self._stream())) \n",
      "5": "\n <DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "6": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "7": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return (aiter(self._stream)) \n",
      "8": "\n <DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "9": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return assert self._stream is not None \n",
      "10": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return async() \n",
      "11": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return (aiter(self._stream())) \n",
      "12": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return str(aiter(self._stream)) \n",
      "13": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return async(self._stream) \n",
      "14": "<DED> def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream) \n",
      "15": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return ft.aiter(self._stream()) \n",
      "16": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream) \n",
      "17": "<DED> def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream()) \n",
      "18": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return AsyncIterator(aiter(self._stream())) \n",
      "19": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> if self._stream is None: \n <IND> return aiter(self._stream()) \n",
      "20": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self.stream()) \n",
      "21": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return return aiter(self._stream()) \n",
      "22": "<DED> def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream) \n",
      "23": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> if self._stream is not None: \n <IND> return aiter(self._stream()) \n",
      "24": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return any(aiter(self._stream())) \n",
      "25": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return assertself._stream is not None \n",
      "26": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return any(aiter(self._stream)) \n",
      "27": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._val()) \n",
      "28": "<DED> def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream()) \n",
      "29": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return \"\" \n",
      "30": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return assert self._stream is not None \n \n",
      "31": "<DED> def __aiter__(self) -> AsyncIterator: <IND> <IND> return aiter(self._stream()) \n",
      "32": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return AsyncIterator(aiter(self._stream)) \n",
      "33": "<DED> def __aiter__(self) -> AsyncIterator: <DED> <IND> return aiter(self._stream()) \n",
      "34": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> if self._stream is None: \n <IND> return aiter(self._stream) \n",
      "35": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return let aiter(self._stream()) \n",
      "36": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return ctx.aiter(self._stream()) \n",
      "37": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(this._stream()) \n",
      "38": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self.stream) \n",
      "39": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return ft.aiter(self._stream) \n",
      "40": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(this._stream) \n",
      "41": "<DED> def __aiter__(self) -> AsyncIterator: <IND> <IND> return aiter(self._stream) \n",
      "42": "<DED> def __aiter__(self) -> AsyncIterator: <DED> <IND> return aiter(self._stream) \n",
      "43": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) <IND>",
      "44": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> if self._stream is not None: \n <IND> return aiter(self._stream) \n",
      "45": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return list(aiter(self._stream())) \n",
      "46": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return return aiter(self._stream) \n",
      "47": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return node(aiter(self._stream())) \n",
      "48": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return let aiter(self._stream) \n",
      "49": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return list(aiter(self._stream)) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  }
]